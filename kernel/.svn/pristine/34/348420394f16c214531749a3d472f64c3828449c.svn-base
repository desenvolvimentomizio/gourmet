unit uFormComunicacao;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, IdAuthentication, IdGlobal, IdComponent,
  Data.Bind.Components, Data.Bind.ObjectScope, REST.Client,
  REST.Authenticator.Basic, IdIOHandler, IdIOHandlerSocket, IdIOHandlerStack,
  IdSSL, IdSSLOpenSSL, IdZLibCompressorBase, IdCompressorZLib, IdCookieManager,
  IdIntercept, IdCompressionIntercept, IdBaseComponent, IdTCPConnection,
  IdTCPClient, IdHTTP, IdWebDAV, IdCoderMIME, System.Generics.Collections;

type
  TFileInfo = class
    FileItem, FilePath, FileName, FileSize, FileDate: String;
    IsFolder: Boolean;
  end;

type
  TFormComunicacao = class(TForm)
    IdWebDAVC: TIdWebDAV;
    IdCompressionIntercept1: TIdCompressionIntercept;
    IdCookieManager1: TIdCookieManager;
    IdCompressorZLib1: TIdCompressorZLib;
    IdSSLIOHandlerSocketOpenSSL1: TIdSSLIOHandlerSocketOpenSSL;
    HTTPBasicAuthenticator1: THTTPBasicAuthenticator;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    { Private declarations }
    IdEncoder: TIdEncoderMIME;

  public
    { Public declarations }
    vpServer: String;
    vpUserName: String;
    vpPassword: String;

    FileDB: TDictionary<String, TFileInfo>;
    FileGet: TFileInfo;

    function getFileList(Folder: String): TStringStream;
    function downloadFile(FilePath: String; DestPath: String): Boolean;
    function uploadFile(SourcePath, DestPath: String; ALockToken: string): Boolean;
    function deleteFile(FileName: String): Boolean;
    function createFolder(FileName: String): Boolean;
    function getFileListXML(Folder: String): TStringStream;

  end;

var
  FormComunicacao: TFormComunicacao;

implementation

uses
  Xml.XMLDoc, Xml.XMLIntf;

{$R *.dfm}

procedure TFormComunicacao.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Action := cafree;
end;

procedure TFormComunicacao.FormCreate(Sender: TObject);
begin
  try
    vpServer := 'https://cloud.miziosistemas.com.br/remote.php/dav/files/admin/';
    vpUserName := 'admin';
    vpPassword := 'SuRiCa973*';

    FileDB := TDictionary<String, TFileInfo>.create;
    IdWebDAVC.Request.UserName := vpUserName;
    IdWebDAVC.Request.Password := vpPassword;
    IdEncoder := TIdEncoderMIME.create;

    IdSSLIOHandlerSocketOpenSSL1.SSLOptions.SSLVersions := [sslvTLSv1_2];
    IdSSLIOHandlerSocketOpenSSL1.SSLOptions.Method := sslvTLSv1_2;

    IdWebDAVC.Request.CustomHeaders.Values['Authorization'] := 'Basic ' + IdEncoder.EncodeString(vpUserName + ':' + vpPassword);
  except

  end;
end;

procedure TFormComunicacao.FormDestroy(Sender: TObject);

var
  sItem: String;
begin
  try
    for sItem in FileDB.Keys do
    begin
      FileDB.Items[sItem].Free;
    end;

    FreeAndNil(FileDB);
    inherited;
  except

  end;
end;

function TFormComunicacao.createFolder(FileName: String): Boolean;
begin
  try
    IdWebDAVC.DAVMakeCollection(vpServer + FileName);
    Result := True;
  except
    Result := False;
  end;
end;

function TFormComunicacao.deleteFile(FileName: String): Boolean;
begin
  try
    IdWebDAVC.DAVDelete(vpServer + FileName, '');
    Result := True;
  except
    Result := False;
  end;
end;

function TFormComunicacao.downloadFile(FilePath, DestPath: String): Boolean;
var
  FileStream: TFileStream;
begin

  try
    FileStream := TFileStream.create(DestPath, fmCreate);
    IdWebDAVC.Get(vpServer + FilePath, FileStream);
    Result := True;
    FileStream.Free;
  except
    Result := False;
    FileStream.Free;
  end;
end;

Function TFormComunicacao.getFileListXML(Folder: String): TStringStream;
var
  ResponseXML: TStringStream;
begin
  try
    try
      ResponseXML := TStringStream.create;

      IdWebDAVC.DAVPropFind(vpServer + Folder, nil, ResponseXML, '1');
      Result := ResponseXML;
    except
      Result := nil;
    end;
  finally
    ResponseXML.Free;
  end;
end;

function TFormComunicacao.getFileList(Folder: String): TStringStream;
var
  ResponseXML: TStringStream;
  XMLFile: TXMLDocument;
  MainNode, ChildNode: IXMLNode;
  I: Integer;
  Keys: String;

begin
  try
    ResponseXML := TStringStream.create;

    IdWebDAVC.DAVPropFind(vpServer + Folder, nil, ResponseXML, '1');

    XMLFile := TXMLDocument.create(Application);
    try
      XMLFile.LoadFromXML(ResponseXML.DataString);
      XMLFile.Active := True;
      MainNode := XMLFile.DocumentElement;
      FileDB.Clear;

      for I := 0 to MainNode.ChildNodes.Count - 1 do
      begin
        ChildNode := MainNode.ChildNodes.Nodes[I];

        if Trim(ChildNode.ChildNodes['d:href'].Text) = '' then
        begin
          continue;
        end;

        FileGet := TFileInfo.create;
        FileGet.FileItem := I.ToString;
        FileGet.FilePath := ChildNode.ChildNodes['d:href'].Text;
        FileGet.FileDate := ChildNode.ChildNodes['d:propstat'].ChildNodes['d:prop'].ChildNodes['d:getlastmodified'].Text;
        FileGet.FileSize := ChildNode.ChildNodes['d:propstat'].ChildNodes['d:prop'].ChildNodes['d:getcontentlength'].Text;
        FileGet.IsFolder := Assigned(ChildNode.ChildNodes['d:propstat'].ChildNodes['d:prop'].ChildNodes['d:resourcetype']
          .ChildNodes.FindNode('d:collection'));

        if FileGet.IsFolder then
        begin
          FileGet.FileName := FileGet.FilePath;
          Delete(FileGet.FileName, Length(FileGet.FileName), 1);
          FileGet.FileName := StringReplace(FileGet.FileName, '/', '\', [rfReplaceAll, rfIgnoreCase]);
          FileGet.FileName := ExtractFileName(FileGet.FileName);
        end
        else
        begin
          FileGet.FileName := StringReplace(FileGet.FilePath, '/', '\', [rfReplaceAll, rfIgnoreCase]);
          FileGet.FileName := ExtractFileName(FileGet.FileName);
        end;

        FileDB.Add(FileGet.FileItem, FileGet);
        Result := ResponseXML;
      end;

    finally
      ResponseXML.Free;
      XMLFile.Free;
    end;
  except
    ResponseXML := nil;
  end;
end;

function TFormComunicacao.uploadFile(SourcePath, DestPath: String; ALockToken: string): Boolean;
var
  FileStream: TMemoryStream;
begin
  FileStream := TMemoryStream.create;
  try
    FileStream.LoadFromFile(SourcePath);
    IdWebDAVC.DAVPut(vpServer + DestPath + ExtractFileName(SourcePath), FileStream, ALockToken);
    FileStream.Free;
    Result := True;
  except
    Result := False;
    FileStream.Free;
  end;

end;

end.
