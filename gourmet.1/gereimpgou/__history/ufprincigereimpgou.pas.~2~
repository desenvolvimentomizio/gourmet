unit ufprincigereimpgou;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, Data.DB, MemDS, DBAccess, Uni, IniFiles, UniProvider,
  MySQLUniProvider, Vcl.ComCtrls, registry, frxClass, frxDBSet,  frxExportImage,
  DateUtils, IdBaseComponent, frxDesgn, IdAntiFreezeBase, DASQLMonitor, UniSQLMonitor,
  frxBarcode, System.ImageList, Vcl.ImgList, shellapi, frxDACComponents,
  frxUniDACComponents, frxExportBaseDialog;

// Declarando a MP2032.DLL e sua funções em Delphi
Function IniciaPorta(Porta: Ansistring): Integer; Stdcall; Far; External 'MP2032.DLL';
Function FechaPorta: Integer; Stdcall; Far; External 'MP2032.DLL';
Function Le_Status: Integer; Stdcall; Far; External 'MP2032.DLL';
Function HabilitaEsperaImpressao(Flag: Integer): Integer; Stdcall; Far; External 'MP2032.DLL';
Function ConfiguraModeloImpressora(ModeloImpressora: Integer): Integer; Stdcall; Far; External 'MP2032.DLL';
Function LeituraStatusEstendido(A: Array Of Byte): Integer; Stdcall; Far; External 'MP2032.DLL';

type
  TfPrinciGereImpGou = class(TForm)
    inicializar: TTimer;
    plImpressoras: TPanel;
    plFalhaBanco: TPanel;
    consulta: TUniQuery;
    MySQLUniProvider: TMySQLUniProvider;
    Conexao: TUniConnection;
    mensagens: TStatusBar;
    tmVerificarPedidos: TTimer;
    gri: TUniQuery;
    erros: TMemo;
    imm: TUniQuery;
    immorcchave: TIntegerField;
    immfoacodigo: TIntegerField;
    immstocodigo: TIntegerField;
    gritcicodigo: TIntegerField;
    gritciporta: TStringField;
    grimitidentificacao: TStringField;
    ito: TUniQuery;
    immrelarquivo: TBlobField;
    relatorio: TfrxReport;
    frxBMPExport: TfrxBMPExport;
    frxDados: TfrxDBDataset;
    immorcobs: TStringField;
    immorcgeralav: TFloatField;
    itoorcchave: TIntegerField;
    itoimmnumepedido: TIntegerField;
    itotcicodigo: TIntegerField;
    itotciporta: TStringField;
    itofoacodigo: TIntegerField;
    itopedidoaux: TIntegerField;
    frxDesigner: TfrxDesigner;
    czn: TUniQuery;
    frxUniDACComponents: TfrxUniDACComponents;
    immgricodigo: TIntegerField;
    immgrpcodigo: TIntegerField;
    sqlimprime: TUniQuery;
    sqlimprimegriimprimeauto: TIntegerField;
    itoitochave: TIntegerField;
    UniSQLMonitor: TUniSQLMonitor;
    sqlimprimefnccodigo: TIntegerField;
    jaimpresso: TUniQuery;
    vias: TUniQuery;
    cfg: TUniQuery;
    cfgcfgcodigo: TIntegerField;
    cfgcfgmgoupedidelivery: TIntegerField;
    cfgcfgmgoupedideliveryaux: TIntegerField;
    grigripedidoaux: TIntegerField;
    immimmchave: TIntegerField;
    frxBarCodeObject1: TfrxBarCodeObject;
    czncznchave: TIntegerField;
    plTopo: TPanel;
    sbTop: TScrollBox;
    plCozinha: TPanel;
    plHora: TPanel;
    BtnImpressao: TButton;
    Button3: TButton;
    btlimpar: TButton;
    ImageList1: TImageList;
    pedidos: TMemo;
    imw: TUniQuery;
    imwimwchave: TIntegerField;
    imwitochave: TIntegerField;
    imwimwhoranotificadopedido: TDateTimeField;
    imwimwhorasaidadopedido: TDateTimeField;
    imwimwhoraentregadopedido: TDateTimeField;
    situacao: TUniQuery;
    immtempo: TUniQuery;
    Panel1: TPanel;
    mmFilaPedidos: TMemo;
    Panel2: TPanel;
    immimmnumepedido: TIntegerField;
    itoimmchave: TIntegerField;
    tcisituacao: TUniQuery;
    sqlimprimegripedidoaux: TIntegerField;
    sqlimprimeimmchave: TIntegerField;
    immaux: TUniQuery;
    immauxorcchave: TIntegerField;
    immauxfoacodigo: TIntegerField;
    immauxstocodigo: TIntegerField;
    immauxrelarquivo: TBlobField;
    immauxorcobs: TStringField;
    immauxorcgeralav: TFloatField;
    immauxgricodigo: TIntegerField;
    immauxgrpcodigo: TIntegerField;
    immauximmchave: TIntegerField;
    immauximmnumepedido: TIntegerField;
    itoaux: TUniQuery;
    itoauxorcchave: TIntegerField;
    itoauximmnumepedido: TIntegerField;
    itoauxtcicodigo: TIntegerField;
    itoauxtciporta: TStringField;
    itoauxfoacodigo: TIntegerField;
    itoauxpedidoaux: TIntegerField;
    itoauxitochave: TIntegerField;
    itoauximmchave: TIntegerField;
    sqlimprimetcicodigo: TIntegerField;
    sqlimprimeimmnumepedido: TIntegerField;
    itoauxveri: TUniQuery;
    itoauxveriorcchave: TIntegerField;
    itoauxveriimmnumepedido: TIntegerField;
    itoauxveritcicodigo: TIntegerField;
    itoauxveritciporta: TStringField;
    itoauxverifoacodigo: TIntegerField;
    itoauxveripedidoaux: TIntegerField;
    itoauxveriitochave: TIntegerField;
    itoauxveriimmchave: TIntegerField;
    itomitidentificacao: TStringField;
    itoauxmitidentificacao: TStringField;
    procedure inicializarTimer(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure tmVerificarPedidosTimer(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure BtnImpressaoClick(Sender: TObject);
    procedure btlimparClick(Sender: TObject);
  private
    IconeAtu: Integer;
    procedure ajustaPaineisImp(vquery: TUniQuery);
    procedure conectabanco;
    procedure AjustaPaines;
    procedure RunOnStartup(sProgTitle, sCmdLine: String; bRunOnce: Boolean);
    function ConsultaImpressora(Porta: string): String;
    function EstadoMP2032(vporta: string): Integer;

    function ConsultaEstadoImpressora(vporta: string): string;
    procedure AtualizaPaineisImpressoras;
    procedure VerificaPedidos;
    function ImprimePedido(vOrcChave: string; vImprime: Integer = 1; vpedidoaux: Integer = 0; vimmchave: Integer = 0): Boolean;
    function BaixaArqRel(vFoaCodigo: string): String;
    function AjustaSituacaoCozinha: Boolean;
    procedure AjustaPainelImpressora(vTciCodigo: string; vlIdentificacao: string; vlTciPorta: string; vlRetorno: Integer);
    function enviaBMPImpressora(vlNumePedido: Integer; vporta: string; vlRetorno: Integer; vlimms: string; vTciCodigo: string): Boolean;
    function StatusEstendido: Integer;
    procedure VerificaPedidosAux;
    function ImprimePedidoaux(vOrcChave: string; vImprime: Integer = 1; vpedidoaux: Integer = 0; vimmchave: Integer = 0): Boolean;
    function BaixaArqRelaux(vFoaCodigo: string): String;
    function enviaBMPImpressoraaux(vlNumePedido: Integer; vporta: string; vlRetorno: Integer; vlimms: string; vTciCodigo: string): Boolean;
    { Private declarations }
  public
    { Public declarations }
    vpPastaDia: string;
    vpCozinhaAberta: Boolean;
    vpCznChave: string;
    vpImpressora: String;


  end;

var
  fPrinciGereImpGou: TfPrinciGereImpGou;
  HMutex: THandle;

implementation

{$R *.dfm}

function TfPrinciGereImpGou.AjustaSituacaoCozinha: Boolean;
begin

  result := false;

  czn.close;
  czn.Open;

  if czn.IsEmpty then
  begin
    plCozinha.Caption := 'Atenção: A Cozinha não esta aberta, solicite a abertura da Cozinha!';
    plCozinha.Font.Color := clYellow;
    plCozinha.Color := clred;

    vpCozinhaAberta := false;
    Application.ProcessMessages;
  end
  else
  begin

    { cria pasta para salvar as imagens dos pedidos do dia }
    vpPastaDia := ExtractFilePath(Application.ExeName) + 'pedidos';
    vpPastaDia := vpPastaDia + '\' + formatfloat('000000', czncznchave.AsInteger);

    if not DirectoryExists(vpPastaDia) then
    begin
      ForceDirectories(vpPastaDia);
    end;
    plCozinha.Caption := 'Cozinha aberta. Bom Trabalho!';
    plCozinha.Font.Color := clWhite;
    plCozinha.Color := clgreen;

    vpCozinhaAberta := True;
    Application.ProcessMessages;
    vpCznChave := czncznchave.AsString;
  end;
  result := vpCozinhaAberta;

end;

procedure TfPrinciGereImpGou.AjustaPainelImpressora(vTciCodigo: string; vlIdentificacao: string; vlTciPorta: string; vlRetorno: Integer);
begin
  try
    case vlRetorno of
      0:
        begin

          tcisituacao.close;
          tcisituacao.SQL.Text := 'select tciimprimindo from tci where tcicodigo=' + vTciCodigo;
          tcisituacao.Open;

          erros.Lines.Add(tcisituacao.SQL.Text);

          if tcisituacao.FieldByName('tciimprimindo').AsString <> '' then
          begin

            (self.FindComponent('plimp' + vTciCodigo) as TPanel).Color := clnavy;
            (self.FindComponent('plimp' + vTciCodigo) as TPanel).Font.Color := clWhite;
            (self.FindComponent('plimp' + vTciCodigo) as TPanel).Caption := vlIdentificacao + ' ( IMPRIMINDO )';

          end
          else
          begin

            if tcisituacao.FieldByName('tciimprimindo').AsString <> '' then
            begin
              (self.FindComponent('plimp' + vTciCodigo) as TPanel).Color := clgreen;
              (self.FindComponent('plimp' + vTciCodigo) as TPanel).Font.Color := clWhite;
              (self.FindComponent('plimp' + vTciCodigo) as TPanel).Caption := vlIdentificacao + ' (Porta: ' + vlTciPorta + ')';
            end
            else
            begin

              (self.FindComponent('plimp' + vTciCodigo) as TPanel).Color := clred;
              (self.FindComponent('plimp' + vTciCodigo) as TPanel).Font.Color := clYellow;
              (self.FindComponent('plimp' + vTciCodigo) as TPanel).Caption := vlIdentificacao + ' ( FALHA COMUNICAÇÃO' + ' )';
            end;

          end;

        end;
      1:
        begin

          (self.FindComponent('plimp' + vTciCodigo) as TPanel).Color := clnavy;
          (self.FindComponent('plimp' + vTciCodigo) as TPanel).Font.Color := clYellow;
          (self.FindComponent('plimp' + vTciCodigo) as TPanel).Caption := vlIdentificacao + ' ( FALHA COMUNICAÇÃO' + ' )';

        end;
      5:
        begin
          (self.FindComponent('plimp' + vTciCodigo) as TPanel).Color := clYellow;
          (self.FindComponent('plimp' + vTciCodigo) as TPanel).Font.Color := clred;
          (self.FindComponent('plimp' + vTciCodigo) as TPanel).Caption := vlIdentificacao + ' ( POUCO PAPEL' + ' )';
        end;
      9:
        begin
          (self.FindComponent('plimp' + vTciCodigo) as TPanel).Color := clGray;
          (self.FindComponent('plimp' + vTciCodigo) as TPanel).Font.Color := clred;
          (self.FindComponent('plimp' + vTciCodigo) as TPanel).Caption := vlIdentificacao + ' ( TAMPA ABERTA' + ' )';
        end;
      24:
        begin
          // impressora ativa e on-line
          (self.FindComponent('plimp' + vTciCodigo) as TPanel).Color := clgreen;
          (self.FindComponent('plimp' + vTciCodigo) as TPanel).Font.Color := clWhite;
          (self.FindComponent('plimp' + vTciCodigo) as TPanel).Caption := vlIdentificacao + ' (Porta: ' + vlTciPorta + ')';
        end;
      32:
        begin
          (self.FindComponent('plimp' + vTciCodigo) as TPanel).Color := clblack;
          (self.FindComponent('plimp' + vTciCodigo) as TPanel).Font.Color := clred;
          (self.FindComponent('plimp' + vTciCodigo) as TPanel).Caption := vlIdentificacao + ' ( SEM PAPEL' + ' )';
        end;
    end;

  except

  end;
end;

Procedure ExecuteProgram(Nome, Parametros: String);
Var
  Comando: Array [0 .. 1024] of Char;
  Parms: Array [0 .. 1024] of Char;
Begin
  StrPCopy(Comando, Nome);
  StrPCopy(Parms, Parametros);
  ShellExecute(0, nil, Comando, Parms, nil, SW_SHOWMINIMIZED);
End;

function TfPrinciGereImpGou.enviaBMPImpressoraaux(vlNumePedido: Integer; vporta: string; vlRetorno: Integer; vlimms: string; vTciCodigo: string): Boolean;
var
  vlArqBmp: string;
  vlArqFast: string;
  vlImpresso: Boolean;
  vlTentativas: Integer;
  vlRetImp: string;
  vlVias: Integer;
  vlOrcvias: Integer;
begin

  { imprime a imagem do pedido na impressora }

  try

    vlImpresso := false;

    { if sqlimprimegripedidoaux.AsInteger = 1 then
      begin
      vlArqBmp := ExtractFilePath(frxBMPExport.filename) + 'ped' + formatfloat('0000', vlNumePedido) + 'a.bmp';
      end
      else
      begin }
    vlArqBmp := ExtractFilePath(frxBMPExport.filename) + 'ped' + formatfloat('0000', vlNumePedido) + 'a.bmp';

    { end; }

    if fileexists(vlArqBmp) then
    begin

      vias.close;
      // vias.SQL.Text := 'select grivias orcvias from orc,ito,imm,gri where  imm.tcicodigo=gri.tcicodigo and orc.orcchave=ito.orcchave and ito.itochave=imm.itochave and  immnumepedido=' + inttostr(vlNumePedido) + ' limit 1';
      vias.SQL.Text :=
        'SELECT grivias orcvias from orc,ito,imm,gri,pro WHERE ito.procodigo=pro.procodigo and gri.grpcodigo=pro.grpcodigo and imm.tcicodigo=gri.tcicodigo and orc.orcchave=ito.orcchave and ito.itochave=imm.itochave and  immnumepedido='
        + inttostr(vlNumePedido) + ' limit 1';
      vias.Open;

      if vias.FieldByName('orcvias').AsInteger = 0 then
        vlOrcvias := 1
      else
        vlOrcvias := vias.FieldByName('orcvias').AsInteger;

      for vlVias := 1 to vlOrcvias do
      begin
        ExecuteProgram(ExtractFilePath(Application.ExeName) + 'impgou.exe ', vlArqBmp + ' ' + vporta + ' ' + vlimms + ' ' + vTciCodigo);
        vlImpresso := True;

        if vlOrcvias > 1 then
        begin

          sleep(500 * vlOrcvias);
        end;

      end;

    end;

  finally
    result := vlImpresso;

  end;
end;

function TfPrinciGereImpGou.enviaBMPImpressora(vlNumePedido: Integer; vporta: string; vlRetorno: Integer; vlimms: string; vTciCodigo: string): Boolean;
var
  vlArqBmp: string;
  vlArqFast: string;
  vlImpresso: Boolean;
  vlTentativas: Integer;
  vlRetImp: string;
  vlVias: Integer;
  vlOrcvias: Integer;
begin

  { imprime a imagem do pedido na impressora }

  try

    vlImpresso := false;

    { if sqlimprimegripedidoaux.AsInteger = 1 then
      begin
      vlArqBmp := ExtractFilePath(frxBMPExport.filename) + 'ped' + formatfloat('0000', vlNumePedido) + 'a.bmp';
      end
      else
      begin }
    vlArqBmp := ExtractFilePath(frxBMPExport.filename) + 'ped' + formatfloat('0000', vlNumePedido) + '.bmp';

    { end; }

    if fileexists(vlArqBmp) then
    begin

      vias.close;
      // vias.SQL.Text := 'select grivias orcvias from orc,ito,imm,gri where  imm.tcicodigo=gri.tcicodigo and orc.orcchave=ito.orcchave and ito.itochave=imm.itochave and  immnumepedido=' + inttostr(vlNumePedido) + ' limit 1';
      vias.SQL.Text :=
        'SELECT grivias orcvias from orc,ito,imm,gri,pro WHERE ito.procodigo=pro.procodigo and gri.grpcodigo=pro.grpcodigo and imm.tcicodigo=gri.tcicodigo and orc.orcchave=ito.orcchave and ito.itochave=imm.itochave and  immnumepedido='
        + inttostr(vlNumePedido) + ' limit 1';
      vias.Open;

      if vias.FieldByName('orcvias').AsInteger = 0 then
        vlOrcvias := 1
      else
        vlOrcvias := vias.FieldByName('orcvias').AsInteger;

      for vlVias := 1 to vlOrcvias do
      begin
        ExecuteProgram(ExtractFilePath(Application.ExeName) + 'impgou.exe ', vlArqBmp + ' ' + vporta + ' ' + vlimms + ' ' + vTciCodigo);
        vlImpresso := True;

        if vlOrcvias > 1 then
        begin

          sleep(500 * vlOrcvias);
        end;

      end;

    end;

  finally
    result := vlImpresso;

  end;
end;

Procedure TfPrinciGereImpGou.RunOnStartup(sProgTitle, sCmdLine: String; bRunOnce: Boolean);
Var
  sKey: String;
  Reg: TRegIniFile;
Begin
  Try
    If (bRunOnce) Then
      sKey := 'mizioGerenciaImpress'
    Else
      sKey := '';
    Reg := TRegIniFile.Create('');
    Reg.RootKey := HKEY_LOCAL_MACHINE;
    Reg.WriteString('Software\Microsoft\Windows\CurrentVersion\Run' + sKey + #0, sProgTitle, sCmdLine);

    Reg.Free;
  Except
    Reg.Free;
  End;
End;

function TfPrinciGereImpGou.ConsultaEstadoImpressora(vporta: string): string;
begin
  result := ConsultaImpressora(vporta);
end;

function TfPrinciGereImpGou.BaixaArqRelaux(vFoaCodigo: string): String;
var
  vlNomeArq: String;
  BlobField: TBlobField;
  vlNomeRelatorio: string;
begin
  result := '';
  vlNomeArq := ExtractFilePath(Application.ExeName) + 'Report\Pedido_' + vFoaCodigo + '.fr3';

  if fileexists(vlNomeArq) then
    deletefile(vlNomeArq);

  BlobField := immauxrelarquivo as TBlobField;

  BlobField.SaveToFile(vlNomeArq);

  if not fileexists(vlNomeArq) then
  begin
    // pedidos.Lines.Add('Arquivo nao localizado: ' + vlNomeArq);
    exit;
  end
  else
    result := vlNomeArq;

end;

function TfPrinciGereImpGou.BaixaArqRel(vFoaCodigo: string): String;
var
  vlNomeArq: String;
  BlobField: TBlobField;
  vlNomeRelatorio: string;
begin
  result := '';
  vlNomeArq := ExtractFilePath(Application.ExeName) + 'Report\Pedido_' + vFoaCodigo + '.fr3';

  if fileexists(vlNomeArq) then
    deletefile(vlNomeArq);

  BlobField := immrelarquivo as TBlobField;

  BlobField.SaveToFile(vlNomeArq);

  if not fileexists(vlNomeArq) then
  begin
    // pedidos.Lines.Add('Arquivo nao localizado: ' + vlNomeArq);
    exit;
  end
  else
    result := vlNomeArq;

end;

procedure TfPrinciGereImpGou.btlimparClick(Sender: TObject);
begin
  erros.Lines.Clear;
end;

procedure TfPrinciGereImpGou.AtualizaPaineisImpressoras;
var
  vlIdentificacao: string;
  vlTciPorta: string;
  vlTciCodigo: string;

  vlRetorno: Integer;
  vlRetornoStr: String;
begin

  gri.First;
  while not gri.Eof do
  begin

    vlIdentificacao := gri.FieldByName('mitidentificacao').AsString;
    vlTciPorta := gri.FieldByName('tciporta').AsString;
    vlTciCodigo := gri.FieldByName('tcicodigo').AsString;

    if pos('.', vlTciPorta) > 0 then
    begin

      if self.FindComponent('plimp' + vlTciCodigo) <> nil then
      begin
        vlRetorno := 0;

        vlRetornoStr := ConsultaEstadoImpressora(vlTciPorta);

        if vlRetornoStr <> '' then
          vlRetorno := StrToInt(vlRetornoStr);

        try

          consulta.close;
          consulta.Connection := Conexao;
          consulta.SQL.Text := 'select tcicodigo, grisituacao from gri where ' + 'tcicodigo=' + vlTciCodigo;
          consulta.Open;
          consulta.Edit;
          consulta.FieldByName('grisituacao').AsString := vlRetornoStr;
          consulta.Post;

        except

          consulta.Cancel;
          sleep(500);
          try
            consulta.close;
            consulta.Connection := Conexao;
            consulta.SQL.Text := 'select tcicodigo, grisituacao from gri where ' + 'tcicodigo=' + vlTciCodigo;
            consulta.Open;
            consulta.Edit;
            consulta.FieldByName('grisituacao').AsString := vlRetornoStr;
            consulta.Post;
          except

          end;

        end;

        AjustaPainelImpressora(vlTciCodigo, vlIdentificacao, vlTciPorta, vlRetorno);

        Application.ProcessMessages;
      end;

    end;
    gri.Next;

  end;

end;

procedure TfPrinciGereImpGou.ajustaPaineisImp(vquery: TUniQuery);
var
  plImp: TPanel;
  A, E: Integer;
  vlWidth: Integer;
begin
  vquery.First;
  A := 0;
  E := 1;
  vlWidth := sbTop.Width;
  vquery.Connection := Conexao;
  while not vquery.Eof do
  begin
    if pos('.', vquery.FieldByName('tciporta').AsString) > 0 then
    begin

      if self.FindComponent('plimp' + vquery.FieldByName('tcicodigo').AsString) = nil then
      begin

        plImp := TPanel.Create(self);
        plImp.Parent := sbTop;
        plImp.Name := 'plimp' + vquery.FieldByName('tcicodigo').AsString;
        plImp.Caption := vquery.FieldByName('mitidentificacao').AsString;
        plImp.ParentBackground := false;
        plImp.ParentFont := false;
        plImp.Align := alNone;
        plImp.Height := 20;
        plImp.Width := 310;
        plImp.top := (23 * A) + 7;
        plImp.BorderWidth := 3;
        plImp.Alignment := taLeftJustify;
        plImp.Left := (315 * E) - plImp.Width;
        plImp.Font.Color := clblack;
        plImp.Font.Size := 9;
        plImp.Tag := vquery.FieldByName('tcicodigo').AsInteger;

      end;

    end;
    vquery.Next;
    A := A + 1;
    if A > 8 then
    begin
      E := E + 1;
      A := 0;
    end;
  end;
end;

procedure TfPrinciGereImpGou.AjustaPaines;
begin
  { se exite destroi para recriar }
  cfg.close;
  cfg.Open;

  gri.close;
  if vpImpressora <> '999' then
  begin
    gri.FilterSQL := 'tci.tcicodigo=' + vpImpressora;
  end;

  gri.Open;

  ajustaPaineisImp(gri);

end;

procedure TfPrinciGereImpGou.Button1Click(Sender: TObject);
begin
  close;
end;

procedure TfPrinciGereImpGou.BtnImpressaoClick(Sender: TObject);
begin
  if BtnImpressao.Tag = 0 then
  begin
    BtnImpressao.Tag := 1;
    tmVerificarPedidos.ENABLED := false;
    BtnImpressao.Caption := 'Iniciar';
  end
  else
  begin
    BtnImpressao.Tag := 0;
    tmVerificarPedidos.ENABLED := True;
    BtnImpressao.Caption := 'Pausar';
  end;

end;

procedure TfPrinciGereImpGou.inicializarTimer(Sender: TObject);
var
  i: Integer;
begin
  inicializar.ENABLED := false;
  // cria um mutex usando um nome único
  CreateMutex(nil, false, 'GereImpGouMulti.OnlyOne');
  // verifica se houve erro na criação
  if GetLastError = ERROR_ALREADY_EXISTS then
  begin
    MessageBox(0, 'Este programa já está sendo executado', 'Aviso', MB_ICONSTOP);
    Halt(0); // cancela execução
  end
  else
  begin

    RunOnStartup('Gerenciador Impressão Mizio Sistemas', Application.ExeName, false);

    HabilitaEsperaImpressao(1);

    for i := 0 to self.ComponentCount - 1 do
    begin
      if self.Components[i] is TUniQuery then
        (self.Components[i] as TUniQuery).Connection := Conexao;

    end;

    conectabanco;

    AjustaSituacaoCozinha;

    tmVerificarPedidos.ENABLED := True;

  end;
end;

procedure TfPrinciGereImpGou.tmVerificarPedidosTimer(Sender: TObject);
begin
  try

    tmVerificarPedidos.ENABLED := false;

    plHora.Caption := timetostr(time);
    Application.ProcessMessages;

    AtualizaPaineisImpressoras;

    if AjustaSituacaoCozinha then
    begin
      VerificaPedidos;

    end;

  finally
    tmVerificarPedidos.ENABLED := True;
  end;

end;

Procedure TfPrinciGereImpGou.conectabanco;
Var
  arquini: TIniFile;
  vnomebanco: String;
  vportabanco: String;
  vservidor: String;
  vusuario: String;
  vsenha: String;
  vCaminho: string;
Begin

  arquini := TIniFile.Create(ExtractFilePath(Application.ExeName) + 'gourmeterp.ini');
  vCaminho := ExtractFilePath(Application.ExeName);
  With arquini Do
  Begin

    vnomebanco := ReadString('posi', 'nomebanco', 'mizio');
    vservidor := ReadString('posi', 'servidor', '127.0.0.1');
    vusuario := ReadString('posi', 'usuario', 'root');
    vsenha := ReadString('posi', 'senha', 'xda973');
    vportabanco := ReadString('posi', 'portabanco', '3306');
    vpImpressora := ReadString('posi', 'impressora', '999');


  End;
  arquini.Free;

  Conexao.Connected := false;
  Conexao.Database := vnomebanco;
  Conexao.Username := vusuario;
  Conexao.Password := vsenha;
  Conexao.Port := StrToInt(vportabanco);
  Conexao.Server := vservidor;
  Conexao.Connected := True;

  mensagens.Panels[0].Text := 'IP: ' + vservidor;
  mensagens.Panels[1].Text := 'BD: ' + vnomebanco;

  if not Conexao.Connected then
  begin
    ShowMessage('Falha de conexão com o Banco de Dados. Verifique as configurações do mizio.ini');
    Application.Terminate;
  end
  else
    AjustaPaines;

End;

procedure TfPrinciGereImpGou.FormShow(Sender: TObject);
begin
  inicializar.ENABLED := True;
  Screen.Cursors[crSQLWait] := Screen.Cursors[crDefault];
end;

Function TfPrinciGereImpGou.ConsultaImpressora(Porta: string): String;
Var
  i_retorno: Integer;
  sRetorno: String;
Begin
  Try

    sRetorno := '1';

    i_retorno := EstadoMP2032(Porta);

    If i_retorno <> 1 Then
    Begin
      if i_retorno = 0 then
      begin
        erros.Lines.Add(datetimetostr(now) + ' 0 - IMPRESSORA - OFF LINE/SEM COMUNICAÇÃO ' + Porta);
      end
      else if i_retorno = 32 then
      begin
        erros.Lines.Add(datetimetostr(now) + '32 - IMPRESSORA - SEM PAPEL ' + Porta);
      end
      else if i_retorno = 5 then
      begin
        erros.Lines.Add(datetimetostr(now) + ' 5 - IMPRESSORA - ON LINE - POUCO PAPEL ' + Porta);
      end
      else if i_retorno = 9 then
      begin
        erros.Lines.Add(datetimetostr(now) + ' 9 - IMPRESSORA - OFF LINE - TAMPA ABERTA ' + Porta);
      end
      else if i_retorno <> 24 then
      begin
        erros.Lines.Add(datetimetostr(now) + '  ' + inttostr(i_retorno) + ' - IMPRESSORA - ERRO NÃO DEFINIDO ' + Porta);
      end;

      Application.ProcessMessages;

    End;

    If i_retorno = 1 Then
    Begin

      sleep(200);

    End;
    sRetorno := inttostr(i_retorno);

    If i_retorno = 0 Then
      exit;

  Finally
    result := sRetorno;
  End;
End;

procedure TfPrinciGereImpGou.VerificaPedidosAux;
var
  vlTentativas: Integer;
  vlCznCodigo: Integer;
  vlSql: String;
  vlImprime: Integer;
  vlPedido: string;

begin
  mmFilaPedidos.Lines.Clear;

  immaux.close;
  immaux.ParamByName('cznchave').AsString := vpCznChave;
  if vpImpressora <> '999' then
  begin
    immaux.FilterSQL := 'gri.tcicodigo=' + vpImpressora;
  end;
  immaux.Open;

  vlTentativas := 0;
  vlSql := immaux.SQL.Text;

  immaux.First;
  while not immaux.Eof do
  begin
    vlPedido := 'Pedido: ' + formatfloat('0000', immauximmnumepedido.AsInteger) + '-' + immauxgricodigo.AsString;
    if pos(vlPedido, mmFilaPedidos.Lines.Text) = 0 then
    begin
      mmFilaPedidos.Lines.Add(vlPedido);
    end;

    immaux.Next;
  end;

  Panel2.Caption := 'Pedidos na Fila: ' + inttostr(mmFilaPedidos.Lines.Count);
  Panel2.Repaint;

  immaux.First;
  while not immaux.Eof do
  begin

    consulta.close;
    consulta.SQL.Text := 'select griimprimeauto from gri where grpcodigo=' + immauxgrpcodigo.AsString;
    consulta.Open;

    vlImprime := consulta.FieldByName('griimprimeauto').AsInteger;
    vlPedido := 'Pedido: ' + formatfloat('0000', immauximmnumepedido.AsInteger) + '-' + immauxgricodigo.AsString;

    if ImprimePedidoaux(immauxorcchave.AsString, 1, 1, immauximmchave.AsInteger) then
    begin
      vlTentativas := 0;
      exit;
    end
    else
    begin
      immaux.Next;
    end;
  end;
end;

procedure TfPrinciGereImpGou.VerificaPedidos;
var
  vlTentativas: Integer;
  vlCznCodigo: Integer;
  vlSql: String;
  vlImprime: Integer;
  vlPedido: string;

begin
  mmFilaPedidos.Lines.Clear;

  imm.close;
  imm.ParamByName('cznchave').AsString := vpCznChave;
  if vpImpressora <> '999' then
  begin
    imm.FilterSQL := 'gri.tcicodigo=' + vpImpressora;
  end;
  imm.Open;

  vlTentativas := 0;
  vlSql := imm.SQL.Text;

  imm.First;
  while not imm.Eof do
  begin
    vlPedido := 'Pedido: ' + formatfloat('0000', immimmnumepedido.AsInteger) + '-' + immgricodigo.AsString;
    if pos(vlPedido, mmFilaPedidos.Lines.Text) = 0 then
    begin
      mmFilaPedidos.Lines.Add(vlPedido);
    end;

    imm.Next;
  end;

  Panel2.Caption := 'Pedidos na Fila: ' + inttostr(mmFilaPedidos.Lines.Count);
  Panel2.Repaint;

  imm.First;
  while not imm.Eof do
  begin

    consulta.close;
    consulta.SQL.Text := 'select griimprimeauto from gri where grpcodigo=' + immgrpcodigo.AsString;
    consulta.Open;

    vlImprime := consulta.FieldByName('griimprimeauto').AsInteger;
    vlPedido := 'Pedido: ' + formatfloat('0000', immimmnumepedido.AsInteger) + '-' + immgricodigo.AsString;

    if ImprimePedido(immorcchave.AsString, 1, 0, immimmchave.AsInteger) then
    begin
      vlTentativas := 0;
      exit;
    end
    else
    begin
      imm.Next;
    end;
  end;
end;

function TfPrinciGereImpGou.ImprimePedidoaux(vOrcChave: string; vImprime: Integer = 1; vpedidoaux: Integer = 0; vimmchave: Integer = 0): Boolean;
var
  vlNomeArq: string;
  vlGerado: Boolean;
  vlNumePedido: Integer;
  vlRetorno: Integer;
  vporta: string;
  vlRetornoStr: string;

  vlIdentificacao: string;
  vlTciPorta: string;
  vlTciCodigo: string;
  vlTentativas: Integer;
  vlItoChave: String;
  vltciatual: string;
  vlTentivas: Integer;
  vlImmChave: string;
  vlImmHoraPedido: TDatetime;

  DataI: TDatetime;
  DataF: TDatetime;
  DifDias: double;
  vlDifTempo: string;
  vlimms: string;
  vltcis: string;

  vlGricodigo: string;
  vlOrcChave: string;
begin
  result := false;

  if pos('-', vOrcChave) > 0 then
  begin
    vlGricodigo := trim(copy(vOrcChave, pos('-', vOrcChave) + 1, 20));
    vlOrcChave := trim(copy(vOrcChave, 1, pos('-', vOrcChave) - 1));
  end
  else
  begin
    vlGricodigo := '';
    vlOrcChave := vOrcChave;
  end;

  itoaux.close;
  itoaux.Params[0].AsString := vlOrcChave;
  itoaux.Filter := 'pedidoaux=1';
  itoaux.Filtered := True;
  itoaux.Open;

  vlImmChave := itoaux.FieldByName('immchave').AsString;

  if itoaux.IsEmpty then
  begin

    consulta.close;
    consulta.SQL.Text := 'update imm set immhoraimpressoaux=NOW() where immchave =' + vimmchave.ToString;
    consulta.ExecSQL;

    result := True;
    exit;
  end;

  if vlImmChave <> '' then
  begin

    immtempo.close;
    immtempo.SQL.Text := 'select immhorapedido from imm where immchave=' + vlImmChave;
    immtempo.Open;
    vlImmHoraPedido := immtempo.FieldByName('ImmHoraPedido').AsFloat;

  end
  else
  begin
    vlImmHoraPedido := now();
  end;

  vlTentativas := 0;
  vltciatual := '';
  while not itoaux.Eof do
  begin
    if itoauxpedidoaux.AsInteger = 1 then
    begin

      vlNumePedido := itoaux.FieldByName('immnumepedido').AsInteger;
      vporta := itoaux.FieldByName('tciporta').AsString;

      vlRetorno := 0;
      vlRetornoStr := ConsultaEstadoImpressora(vporta);

      if vlRetornoStr <> '' then
        vlRetorno := StrToInt(vlRetornoStr);

      vlIdentificacao := itoaux.FieldByName('mitidentificacao').AsString;
      vlTciPorta := itoaux.FieldByName('tciporta').AsString;
      vlTciCodigo := itoaux.FieldByName('tcicodigo').AsString;

      if pos('.', vporta) = 0 then
      begin
        // não é impressora de REDE
        vlRetorno := StrToInt('24');
        AjustaPainelImpressora(vlTciCodigo, vlIdentificacao, vlTciPorta, vlRetorno);

        consulta.close;
        consulta.SQL.Text := 'update imm set immhoraimpressoaux=NOW() where immchave in (select immchave from tped where orcchave=' + vOrcChave + ' and immnumepedido=' +
          inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + ')';
        consulta.ExecSQL;
        result := True;
        exit;

      end;

      if FindWindow(nil, pchar('Impressora ' + vporta)) <> 0 then
      begin
        AjustaPainelImpressora(vlTciCodigo, vlIdentificacao, vlTciPorta, 0);
        itoaux.Next;
      end
      else
      begin

        situacao.close;
        situacao.Connection := Conexao;
        situacao.SQL.Text := 'select gricodigo, grisituacao from gri where tcicodigo=' + vlTciCodigo;
        situacao.Open;

        vlTentivas := 0;
        while vlTentivas < 10 do
        begin
          try
            situacao.Edit;
            situacao.FieldByName('grisituacao').AsString := vlRetornoStr;
            situacao.Post;
            break;
          except

            situacao.Cancel;
            sleep(500);

            try
              situacao.Edit;
              situacao.FieldByName('grisituacao').AsString := vlRetornoStr;
              situacao.Post;
            except

              vlTentivas := vlTentivas + 1;
            end;

          end;
        end;

        AjustaPainelImpressora(vlTciCodigo, vlIdentificacao, vlTciPorta, vlRetorno);

        if vlRetorno = 24 then // impressora esta liberada
        begin

          vlNomeArq := BaixaArqRelaux(immauxfoacodigo.AsString);

          if vlNomeArq = '' then
            exit;

          sqlimprime.close;
          sqlimprime.ParamByName('itochave').AsInteger := itoauxitochave.AsInteger;
          sqlimprime.Open;

          if sqlimprimegripedidoaux.AsInteger = 1 then
          begin

            consulta.close;
            consulta.SQL.Text := 'update imm set  tcicodigo=' + vlTciCodigo + ' ,immhoraimpresso=null where immchave in (' + sqlimprimeimmchave.AsString + ')';
            consulta.ExecSQL;

          end;

          relatorio.LoadFromFile(vlNomeArq);

          { atribui o valor para variavel de grupo do relatório }

          relatorio.Variables['tcicodigo'] := QuotedStr(vlTciCodigo);
          relatorio.Variables['immnumepedido'] := QuotedStr(inttostr(vlNumePedido));

          { defini configuração do fastreport para exibição }
          relatorio.PrepareReport(True);
          relatorio.PrintOptions.ShowDialog := false;
          relatorio.ShowProgress := false;

          vlGerado := false;
          { exporta a imagem do pedido }

          frxBMPExport.DefaultPath := vpPastaDia;

          frxBMPExport.filename := 'ped' + formatfloat('0000', vlNumePedido) + 'a.bmp';


          frxBMPExport.SeparateFiles := false;

          if fileexists(frxBMPExport.filename) then
          begin
            deletefile(frxBMPExport.filename);
            sleep(500);
          end;

          vlGerado := relatorio.Export(frxBMPExport);

          vlGerado := fileexists(frxBMPExport.filename);

          if vlGerado then
          begin
            jaimpresso.close;
            jaimpresso.SQL.Text := 'select immchave, immhorapedido from imm where immchave in (select immchave from imm, ito where imm.itochave=ito.itochave and orcchave=' +
              vOrcChave + ' and immnumepedido=' + inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + '  and immhoraimpressoaux is not null )';
            jaimpresso.Open;

            if (vImprime = 1) and ((jaimpresso.IsEmpty)) then
            begin

              { if sqlimprimegripedidoaux.AsInteger = 1 then
                begin

                consulta.close;
                consulta.SQL.Text := 'update imm set  tcicodigo=' + vlTciCodigo + ' ,immhoraimpresso=null where immchave in (' + sqlimprimeimmchave.AsString + ')';
                consulta.ExecSQL;

                end; }

              consulta.close;
              consulta.SQL.Text := 'select immchave from imm where immchave in (select immchave from tped where orcchave=' + vOrcChave + ' and immnumepedido=' +
                inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + ')';
              consulta.Open;

              consulta.First;
              while not consulta.Eof do
              begin
                vlimms := vlimms + consulta.FieldByName('immchave').AsString + ',';
                consulta.Next;
              end;
              vlimms := copy(vlimms, 1, length(vlimms) - 1);

              consulta.close;
              consulta.SQL.Text := 'SELECT count(immchave) from gri,imm,ito,pro WHERE ito.itochave=imm.itochave and ' +
                'ito.procodigo=pro.procodigo AND pro.grpcodigo=gri.grpcodigo AND gri.gripedidoaux=1 and ' + 'immchave in (select immchave from tped where orcchave=' + vOrcChave +
                ' and immnumepedido=' + inttostr(vlNumePedido) + ' and gri.tcicodigo=' + vlTciCodigo + ')';
              consulta.Open;

              consulta.close;
              consulta.SQL.Text := 'update imm set tcicodigo=' + vlTciCodigo + ' ,immhoraimpresso=null where immchave in (select immchave from tped where orcchave=' + vOrcChave +
                ' and immnumepedido=' + inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + ')';
              consulta.ExecSQL;

              consulta.close;
              consulta.SQL.Text := 'update imm set tcicodigo=' + vlTciCodigo + ' ,immhoraimpressoaux=NOW() where immchave in (select immchave from tped where orcchave=' + vOrcChave
                + ' and immnumepedido=' + inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + ')';
              consulta.ExecSQL;

              if vlimms <> '' then
              begin
                if enviaBMPImpressoraaux(vlNumePedido, vporta, vlRetorno, vlimms, vlTciCodigo) then
                begin

                  consulta.close;
                  consulta.SQL.Text := 'update imm set tcicodigo=' + vlTciCodigo + ' ,immhoraimpresso=now() where immchave in (select immchave from tped where orcchave=' +
                    vOrcChave + ' and immnumepedido=' + inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + ')';
                  consulta.ExecSQL;

                  vlimms := '';
                  vltciatual := vlTciCodigo;
                  sleep(500);

                  try

                    imw.close;
                    imw.ParamByName('itochave').AsInteger := itoauxitochave.AsInteger;
                    imw.Open;

                    if imw.IsEmpty then
                    begin
                      imw.Append;
                      imwitochave.AsInteger := itoauxitochave.AsInteger;
                      imw.Post;
                    end;

                  except

                    on E: Exception do
                    begin
                      pedidos.Lines.Add('------------------');
                      pedidos.Lines.Add('Exception class name = ' + E.ClassName);
                      pedidos.Lines.Add('Exception message = ' + E.Message);
                      pedidos.Lines.Add('ERRO Orc.: ' + vlOrcChave + ' Ped.: ' + inttostr(vlNumePedido) + ' Imp.: ' + vlTciCodigo);
                      pedidos.Lines.Add('------------------');

                    end;

                  end;
                  DataI := now();
                  DataF := vlImmHoraPedido;
                  DifDias := DaySpan(DataF, DataI);
                  vlDifTempo := inttostr(Trunc(DifDias)) + ' dias, ' + FormatDateTime('h" horas e "n" minutos"', DifDias);

                  pedidos.Lines.Add('Orc: ' + vlOrcChave + ' P: ' + inttostr(vlNumePedido) + ' I: ' + vlTciCodigo + ' Hr: ' + datetimetostr(now()));
                  pedidos.Lines.Add('Hora Pedido: ' + datetimetostr(vlImmHoraPedido) + ' hora impresso: ' + datetimetostr(now()) + ' Tempo: ' + vlDifTempo);

                  pedidos.Lines.Add('--------------------------------------------------');

                  consulta.close;
                  consulta.SQL.Text := 'select tped.immchave, imm.itochave from tped, imm where tped.immchave=imm.immchave  and  tped.orcchave=' + vOrcChave +
                    ' and tped.immnumepedido=' + inttostr(vlNumePedido) + ' and tped.tcicodigo=' + vlTciCodigo;
                  consulta.Open;

                  vlItoChave := '';
                  vlItoChave := consulta.fields[1].AsString;

                  consulta.close;
                  consulta.SQL.Text := 'select tpocodigo from pro, ito where pro.procodigo=ito.procodigo and itochave=' + vlItoChave;
                  consulta.Open;

                  if consulta.fields[0].AsString = '9' then
                  begin
                    consulta.close;
                    consulta.SQL.Text := 'delete from ito where itototalav=0 and itochave=' + vlItoChave;
                    consulta.ExecSQL;

                  end;

                  { salvar no banco que foi impresso }
                  itoaux.Next;
                  vlTentativas := 0;
                  result := True;
                end
                else
                begin
                  vlTentativas := vlTentativas + 1;
                  erros.Lines.Add('Tentativa: ' + inttostr(vlTentativas) + ' Orc.: ' + vlOrcChave + ' Ped.: ' + inttostr(vlNumePedido) + ' Imp.: ' + vlTciCodigo);
                  sleep(500);

                  if vlTentativas = 2 then
                  begin
                    erros.Lines.Add('Não foi possivel a impressão Orc.: ' + vlOrcChave + ' Ped.: ' + inttostr(vlNumePedido) + ' Imp.: ' + vlTciCodigo);

                    break;
                  end;

                end;

              end
              else
              begin

                itoaux.Next;
                vlTentativas := 0;
                result := True;

              end;
            end
            else
            begin

              try
                if vpedidoaux = 1 then
                begin
                  consulta.close;
                  consulta.SQL.Text := 'update imm set tcicodigo=' + vlTciCodigo + ' , immhoraimpressoaux=NOW() where immchave in (select immchave from tped where orcchave=' +
                    vOrcChave + ' and immnumepedido=' + inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + ')';
                  consulta.ExecSQL;

                end
                else
                begin

                  consulta.close;
                  consulta.SQL.Text := 'update imm set tcicodigo=' + vlTciCodigo + ' , immhoraimpresso=NOW() where immchave in (select immchave from tped where orcchave=' +
                    vOrcChave + ' and immnumepedido=' + inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + ')';
                  consulta.ExecSQL;
                end;

                // criado funcionalidade para remover serviço que sejá só para imprimir
                //
                //

                consulta.close;
                consulta.SQL.Text := 'select tped.immchave, imm.itochave from tped, imm where tped.immchave=imm.immchave  and  tped.orcchave=' + vOrcChave +
                  ' and tped.immnumepedido=' + inttostr(vlNumePedido) + ' and tped.tcicodigo=' + vlTciCodigo;
                consulta.Open;

                vlItoChave := '';
                vlItoChave := consulta.fields[1].AsString;

                consulta.close;
                consulta.SQL.Text := 'select tpocodigo from pro, ito where pro.procodigo=ito.procodigo and itochave=' + vlItoChave;
                consulta.Open;

                if consulta.fields[0].AsString = '9' then
                begin
                  consulta.close;
                  consulta.SQL.Text := 'delete from ito where itototalav=0 and itochave=' + vlItoChave;
                  consulta.ExecSQL;

                end;

              except
                on E: Exception do
                begin
                  pedidos.Lines.Add('------------------');
                  pedidos.Lines.Add('Exception class name = ' + E.ClassName);
                  pedidos.Lines.Add('Exception message = ' + E.Message);
                  pedidos.Lines.Add('ERRO Orc.: ' + vlOrcChave + ' Ped.: ' + inttostr(vlNumePedido) + ' Imp.: ' + vlTciCodigo);
                  pedidos.Lines.Add('------------------');

                end;

              end;
              pedidos.Lines.Add('Orc.: ' + vlOrcChave + ' Ped.: ' + inttostr(vlNumePedido) + ' Imp.: ' + vlTciCodigo + ' Hora: ' + datetimetostr(now()));
              { salvar no banco que foi impresso }
              itoaux.Next;
              vlTentativas := 0;
              result := True;

            end;
          end;
        end
        else
        begin
          result := false;
          exit;
        end;
      end;

    end
    else
    begin
      itoaux.Next;
    end;
  end;

end;

function TfPrinciGereImpGou.ImprimePedido(vOrcChave: string; vImprime: Integer = 1; vpedidoaux: Integer = 0; vimmchave: Integer = 0): Boolean;
var
  vlNomeArq: string;
  vlGerado: Boolean;
  vlNumePedido: Integer;
  vlRetorno: Integer;
  vporta: string;
  vlRetornoStr: string;

  vlIdentificacao: string;
  vlTciPorta: string;
  vlTciCodigo: string;
  vlTentativas: Integer;
  vlItoChave: String;
  vltciatual: string;
  vlTentivas: Integer;
  vlImmChave: string;
  vlImmHoraPedido: TDatetime;

  DataI: TDatetime;
  DataF: TDatetime;
  DifDias: double;
  vlDifTempo: string;
  vlimms: string;
  vltcis: string;

  vlGricodigo: string;
  vlOrcChave: string;
begin
  result := false;

  if pos('-', vOrcChave) > 0 then
  begin
    vlGricodigo := trim(copy(vOrcChave, pos('-', vOrcChave) + 1, 20));
    vlOrcChave := trim(copy(vOrcChave, 1, pos('-', vOrcChave) - 1));
  end
  else
  begin
    vlGricodigo := '';
    vlOrcChave := vOrcChave;
  end;

  ito.close;
  ito.Params[0].AsString := vlOrcChave;
  ito.Open;

  vlImmChave := ito.FieldByName('immchave').AsString;

  if ito.IsEmpty then
  begin

    consulta.close;
    consulta.SQL.Text := 'update imm set immhoraimpresso=NOW() where immchave =' + vimmchave.ToString;
    consulta.ExecSQL;

    result := True;
    exit;
  end;

  if vlImmChave <> '' then
  begin

    immtempo.close;
    immtempo.SQL.Text := 'select immhorapedido from imm where immchave=' + vlImmChave;
    immtempo.Open;
    vlImmHoraPedido := immtempo.FieldByName('ImmHoraPedido').AsFloat;

  end
  else
  begin
    vlImmHoraPedido := now();
  end;

  vlTentativas := 0;
  vltciatual := '';
  while not ito.Eof do
  begin

    vlNumePedido := ito.FieldByName('immnumepedido').AsInteger;
    vporta := ito.FieldByName('tciporta').AsString;

    vlRetorno := 0;
    vlRetornoStr := ConsultaEstadoImpressora(vporta);

    if vlRetornoStr <> '' then
      vlRetorno := StrToInt(vlRetornoStr);

    vlIdentificacao := ito.FieldByName('mitidentificacao').AsString;
    vlTciPorta := ito.FieldByName('tciporta').AsString;
    vlTciCodigo := ito.FieldByName('tcicodigo').AsString;

    if pos('.', vporta) = 0 then
    begin
      // não é impressora de REDE
      vlRetorno := StrToInt('24');
      AjustaPainelImpressora(vlTciCodigo, vlIdentificacao, vlTciPorta, vlRetorno);

      consulta.close;
      consulta.SQL.Text := 'update imm set immhoraimpresso=NOW() where immchave in (select immchave from tped where orcchave=' + vOrcChave + ' and immnumepedido=' +
        inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + ')';
      consulta.ExecSQL;
      result := True;
      exit;

    end;

    if FindWindow(nil, pchar('Impressora ' + vporta)) <> 0 then
    begin
      AjustaPainelImpressora(vlTciCodigo, vlIdentificacao, vlTciPorta, 0);
      ito.Next;
    end
    else
    begin

      situacao.close;
      situacao.Connection := Conexao;
      situacao.SQL.Text := 'select gricodigo, grisituacao from gri where tcicodigo=' + vlTciCodigo;
      situacao.Open;

      vlTentivas := 0;
      while vlTentivas < 10 do
      begin
        try
          situacao.Edit;
          situacao.FieldByName('grisituacao').AsString := vlRetornoStr;
          situacao.Post;
          break;
        except

          situacao.Cancel;
          sleep(500);

          try
            situacao.Edit;
            situacao.FieldByName('grisituacao').AsString := vlRetornoStr;
            situacao.Post;
          except

            vlTentivas := vlTentivas + 1;
          end;

        end;
      end;

      AjustaPainelImpressora(vlTciCodigo, vlIdentificacao, vlTciPorta, vlRetorno);

      if vlRetorno = 24 then // impressora esta liberada
      begin

        vlNomeArq := BaixaArqRel(immfoacodigo.AsString);

        if vlNomeArq = '' then
          exit;

        sqlimprime.close;
        sqlimprime.ParamByName('itochave').AsInteger := itoitochave.AsInteger;
        sqlimprime.Open;

        if sqlimprimegripedidoaux.AsInteger = 1 then
        begin

          consulta.close;
          consulta.SQL.Text := 'update imm set  tcicodigo=' + vlTciCodigo + ' ,immhoraimpresso=null where immchave in (' + sqlimprimeimmchave.AsString + ')';
          consulta.ExecSQL;

        end;

        relatorio.LoadFromFile(vlNomeArq);

        { atribui o valor para variavel de grupo do relatório }

        relatorio.Variables['tcicodigo'] := QuotedStr(vlTciCodigo);
        relatorio.Variables['immnumepedido'] := QuotedStr(inttostr(vlNumePedido));

        { defini configuração do fastreport para exibição }
        relatorio.PrepareReport(True);
        relatorio.PrintOptions.ShowDialog := false;
        relatorio.ShowProgress := false;

        vlGerado := false;
        { exporta a imagem do pedido }

        frxBMPExport.DefaultPath := vpPastaDia;

        frxBMPExport.filename := 'ped' + formatfloat('0000', vlNumePedido) + '.bmp';


        frxBMPExport.SeparateFiles := false;

        if fileexists(frxBMPExport.filename) then
        begin
          deletefile(frxBMPExport.filename);
          sleep(500);
        end;

        vlGerado := relatorio.Export(frxBMPExport);

        vlGerado := fileexists(frxBMPExport.filename);

        if vlGerado then
        begin
          jaimpresso.close;
          jaimpresso.SQL.Text := 'select immchave, immhorapedido from imm where immchave in (select immchave from imm, ito where imm.itochave=ito.itochave and orcchave=' +
            vOrcChave + ' and immnumepedido=' + inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + '  and immhoraimpresso is not null )';
          jaimpresso.Open;

          // if (vImprime = 1) { and (sqlimprimegriimprimeauto.AsInteger = 1) } and ((jaimpresso.IsEmpty) or (vltciatual <> vlTciCodigo)) then

          if (vImprime = 1) and ((jaimpresso.IsEmpty)) then
          begin

            consulta.close;
            consulta.SQL.Text := 'select immchave from imm where immchave in (select immchave from tped where orcchave=' + vOrcChave + ' and immnumepedido=' +
              inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + ')';
            consulta.Open;

            consulta.First;
            while not consulta.Eof do
            begin
              vlimms := vlimms + consulta.FieldByName('immchave').AsString + ',';
              consulta.Next;
            end;
            vlimms := copy(vlimms, 1, length(vlimms) - 1);

            consulta.close;
            consulta.SQL.Text := 'SELECT count(immchave) from gri,imm,ito,pro WHERE ito.itochave=imm.itochave and ' +
              'ito.procodigo=pro.procodigo AND pro.grpcodigo=gri.grpcodigo AND gri.gripedidoaux=1 and ' + 'immchave in (select immchave from tped where orcchave=' + vOrcChave +
              ' and immnumepedido=' + inttostr(vlNumePedido) + ' and gri.tcicodigo=' + vlTciCodigo + ')';
            consulta.Open;

            consulta.close;
            consulta.SQL.Text := 'update imm set tcicodigo=' + vlTciCodigo + ' ,immhoraimpresso=NOW() where immchave in (select immchave from tped where orcchave=' + vOrcChave +
              ' and immnumepedido=' + inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + ')';
            consulta.ExecSQL;

            if vlimms <> '' then
            begin
              if enviaBMPImpressora(vlNumePedido, vporta, vlRetorno, vlimms, vlTciCodigo) then
              begin
                vlimms := '';
                vltciatual := vlTciCodigo;
                sleep(500);

                try

                  imw.close;
                  imw.ParamByName('itochave').AsInteger := itoitochave.AsInteger;
                  imw.Open;

                  if imw.IsEmpty then
                  begin
                    imw.Append;
                    imwitochave.AsInteger := itoitochave.AsInteger;
                    imw.Post;
                  end;

                except

                  on E: Exception do
                  begin
                    pedidos.Lines.Add('------------------');
                    pedidos.Lines.Add('Exception class name = ' + E.ClassName);
                    pedidos.Lines.Add('Exception message = ' + E.Message);
                    pedidos.Lines.Add('ERRO Orc.: ' + vlOrcChave + ' Ped.: ' + inttostr(vlNumePedido) + ' Imp.: ' + vlTciCodigo);
                    pedidos.Lines.Add('------------------');

                  end;

                end;
                DataI := now();
                DataF := vlImmHoraPedido;
                DifDias := DaySpan(DataF, DataI);
                vlDifTempo := inttostr(Trunc(DifDias)) + ' dias, ' + FormatDateTime('h" horas e "n" minutos"', DifDias);

                pedidos.Lines.Add('Orc: ' + vlOrcChave + ' P: ' + inttostr(vlNumePedido) + ' I: ' + vlTciCodigo + ' Hr: ' + datetimetostr(now()));
                pedidos.Lines.Add('Hora Pedido: ' + datetimetostr(vlImmHoraPedido) + ' hora impresso: ' + datetimetostr(now()) + ' Tempo: ' + vlDifTempo);

                pedidos.Lines.Add('--------------------------------------------------');

                consulta.close;
                consulta.SQL.Text := 'select tped.immchave, imm.itochave from tped, imm where tped.immchave=imm.immchave  and  tped.orcchave=' + vOrcChave +
                  ' and tped.immnumepedido=' + inttostr(vlNumePedido) + ' and tped.tcicodigo=' + vlTciCodigo;
                consulta.Open;

                vlItoChave := '';
                vlItoChave := consulta.fields[1].AsString;

                consulta.close;
                consulta.SQL.Text := 'select tpocodigo from pro, ito where pro.procodigo=ito.procodigo and itochave=' + vlItoChave;
                consulta.Open;

                if consulta.fields[0].AsString = '9' then
                begin
                  consulta.close;
                  consulta.SQL.Text := 'delete from ito where itototalav=0 and itochave=' + vlItoChave;
                  consulta.ExecSQL;

                end;

                { if sqlimprimegripedidoaux.AsInteger = 1 then
                  begin
                  if not fileexists(vpPastaDia + '\ped' + formatfloat('0000', vlNumePedido) + '.bmp') then
                  begin

                  consulta.close;
                  consulta.SQL.Text := 'update gri,imm,ito,pro set immhoraimpresso=null  WHERE ito.itochave=imm.itochave and ' +
                  'ito.procodigo=pro.procodigo AND pro.grpcodigo=gri.grpcodigo AND gri.gripedidoaux=1 and ' + 'immchave in (select immchave from tped where orcchave=' +
                  vOrcChave + ' and immnumepedido=' + inttostr(vlNumePedido) + ' and gri.tcicodigo=' + vlTciCodigo + ')';
                  consulta.ExecSQL;

                  end;

                  end; }

                { salvar no banco que foi impresso }
                // ito.Next;
                vlTentativas := 0;
                result := True;
                break;
              end
              else
              begin
                vlTentativas := vlTentativas + 1;
                erros.Lines.Add('Tentativa: ' + inttostr(vlTentativas) + ' Orc.: ' + vlOrcChave + ' Ped.: ' + inttostr(vlNumePedido) + ' Imp.: ' + vlTciCodigo);
                sleep(500);

                if vlTentativas = 2 then
                begin
                  erros.Lines.Add('Não foi possivel a impressão Orc.: ' + vlOrcChave + ' Ped.: ' + inttostr(vlNumePedido) + ' Imp.: ' + vlTciCodigo);

                  break;
                end;

              end;

            end
            else
            begin

              ito.Next;
              vlTentativas := 0;
              result := True;

            end;
          end
          else
          begin

            try

              consulta.close;
              consulta.SQL.Text := 'update imm set tcicodigo=' + vlTciCodigo + ' , immhoraimpresso=NOW() where immchave in (select immchave from tped where orcchave=' + vOrcChave +
                ' and immnumepedido=' + inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + ')';
              consulta.ExecSQL;


              // criado funcionalidade para remover serviço que sejá só para imprimir
              //
              //

              consulta.close;
              consulta.SQL.Text := 'select tped.immchave, imm.itochave from tped, imm where tped.immchave=imm.immchave  and  tped.orcchave=' + vOrcChave +
                ' and tped.immnumepedido=' + inttostr(vlNumePedido) + ' and tped.tcicodigo=' + vlTciCodigo;
              consulta.Open;

              vlItoChave := '';
              vlItoChave := consulta.fields[1].AsString;

              consulta.close;
              consulta.SQL.Text := 'select tpocodigo from pro, ito where pro.procodigo=ito.procodigo and itochave=' + vlItoChave;
              consulta.Open;

              if consulta.fields[0].AsString = '9' then
              begin
                consulta.close;
                consulta.SQL.Text := 'delete from ito where itototalav=0 and itochave=' + vlItoChave;
                consulta.ExecSQL;

              end;

            except
              on E: Exception do
              begin
                pedidos.Lines.Add('------------------');
                pedidos.Lines.Add('Exception class name = ' + E.ClassName);
                pedidos.Lines.Add('Exception message = ' + E.Message);
                pedidos.Lines.Add('ERRO Orc.: ' + vlOrcChave + ' Ped.: ' + inttostr(vlNumePedido) + ' Imp.: ' + vlTciCodigo);
                pedidos.Lines.Add('------------------');

              end;

            end;
            pedidos.Lines.Add('Orc.: ' + vlOrcChave + ' Ped.: ' + inttostr(vlNumePedido) + ' Imp.: ' + vlTciCodigo + ' Hora: ' + datetimetostr(now()));
            { salvar no banco que foi impresso }
            ito.Next;
            vlTentativas := 0;
            result := True;

          end;
        end;
      end
      else
      begin
        result := false;
        exit;
      end;
    end;

  end;

  itoauxveri.close;
  itoauxveri.Params[0].AsString := vlOrcChave;
  itoauxveri.Filter := 'pedidoaux=1';
  itoauxveri.Filtered := True;
  itoauxveri.Open;

  itoauxveri.First;
  while not itoauxveri.Eof do
  begin

    sqlimprime.close;
    sqlimprime.ParamByName('itochave').AsInteger := itoauxveriitochave.AsInteger;
    sqlimprime.Open;

    { if sqlimprimegripedidoaux.AsInteger = 1 then
      begin }

    consulta.close;
    consulta.SQL.Text := 'update imm set tcicodigo=' + sqlimprimetcicodigo.AsString + ' ,immhoraimpresso=null where immchave =' + sqlimprimeimmchave.AsString;
    consulta.ExecSQL;

    VerificaPedidosAux;
    sleep(500);
    { end; }
    itoauxveri.Next;
  end;

end;

function TfPrinciGereImpGou.EstadoMP2032(vporta: string): Integer;
Var
  vu: string;
  vlRetorno, i_retorno: Integer;
  s_cmdtx: string;
  i, U, E: Integer;
Begin

  vlRetorno := ConfiguraModeloImpressora(7);
  vlRetorno := IniciaPorta(pchar(vporta));

  if vlRetorno = 0 then
  begin
    result := 0;
    exit;
  end;

  vlRetorno := Le_Status();
  FechaPorta;
  result := vlRetorno;
End;

function TfPrinciGereImpGou.StatusEstendido: Integer;
var
  buffer: array [0 .. 5] of Byte;
  status: Integer;
begin

  status := LeituraStatusEstendido(buffer);
  if status = 1 then
  begin
    if (Integer(buffer[2]) and 8) <> 0 then
      ShowMessage('Cutter Error')
  end;
  result := status;
end;

end.
