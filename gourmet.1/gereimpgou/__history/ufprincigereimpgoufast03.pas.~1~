unit ufprincigereimpgoufast03;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Vcl.StdCtrls, Vcl.ExtCtrls,
  IdBaseComponent, IdAntiFreezeBase, IdAntiFreeze, System.ImageList,
  Vcl.ImgList, Data.DB, frxClass, frxBarcode, frxDesgn, frxDBSet, MemDS,
  DBAccess, Uni, frxExportImage, frxDACComponents, frxUniDACComponents,
  UniProvider, MySQLUniProvider, DASQLMonitor, UniSQLMonitor, shellapi, registry, inifiles,
  System.DateUtils, Vcl.Printers, System.StrUtils, ufimprimefast,
  Vcl.Imaging.pngimage, frxExportBaseDialog;

// Declarando a MP2032.DLL e sua funções em Delphi
Function IniciaPorta(Porta: Ansistring): Integer; Stdcall; Far; External 'MP2032.DLL';
Function FechaPorta: Integer; Stdcall; Far; External 'MP2032.DLL';
Function Le_Status: Integer; Stdcall; Far; External 'MP2032.DLL';
Function HabilitaEsperaImpressao(Flag: Integer): Integer; Stdcall; Far; External 'MP2032.DLL';
Function ConfiguraModeloImpressora(ModeloImpressora: Integer): Integer; Stdcall; Far; External 'MP2032.DLL';
Function LeituraStatusEstendido(A: Array Of Byte): Integer; Stdcall; Far; External 'MP2032.DLL';

type
  Tfprincigereimpgoufast03 = class(TForm)
    plCozinha: TPanel;
    plTopo: TPanel;
    frxUniDACComponents: TfrxUniDACComponents;
    frxBMPExport: TfrxBMPExport;
    situacao: TUniQuery;
    frxDados: TfrxDBDataset;
    frxDesigner: TfrxDesigner;
    inicializar: TTimer;
    gri: TUniQuery;
    gritcicodigo: TIntegerField;
    gritciporta: TStringField;
    grimitidentificacao: TStringField;
    grigripedidoaux: TIntegerField;
    tmVerificarPedidos: TTimer;
    cfg: TUniQuery;
    cfgcfgcodigo: TIntegerField;
    cfgcfgmgoupedidelivery: TIntegerField;
    cfgcfgmgoupedideliveryaux: TIntegerField;
    czn: TUniQuery;
    czncznchave: TIntegerField;
    frxBarCodeObject1: TfrxBarCodeObject;
    relatorio: TfrxReport;
    immtempo: TUniQuery;
    sqlimprime: TUniQuery;
    sqlimprimegriimprimeauto: TIntegerField;
    sqlimprimefnccodigo: TIntegerField;
    sqlimprimegripedidoaux: TIntegerField;
    sqlimprimeimmchave: TIntegerField;
    jaimpresso: TUniQuery;
    vias: TUniQuery;
    imm: TUniQuery;
    immorcchave: TIntegerField;
    immfoacodigo: TIntegerField;
    immstocodigo: TIntegerField;
    immrelarquivo: TBlobField;
    immorcobs: TStringField;
    immorcgeralav: TFloatField;
    immgricodigo: TIntegerField;
    immgrpcodigo: TIntegerField;
    immimmchave: TIntegerField;
    immimmnumepedido: TIntegerField;
    ito: TUniQuery;
    itoorcchave: TIntegerField;
    itoimmnumepedido: TIntegerField;
    itotcicodigo: TIntegerField;
    itotciporta: TStringField;
    itomitidentificacao: TStringField;
    itofoacodigo: TIntegerField;
    itopedidoaux: TIntegerField;
    itoitochave: TIntegerField;
    itoimmchave: TIntegerField;
    itoaux: TUniQuery;
    tcisituacao: TUniQuery;
    ImageList1: TImageList;
    imw: TUniQuery;
    imwimwchave: TIntegerField;
    imwitochave: TIntegerField;
    imwimwhoranotificadopedido: TDateTimeField;
    imwimwhorasaidadopedido: TDateTimeField;
    imwimwhoraentregadopedido: TDateTimeField;
    consulta: TUniQuery;
    mit: TUniQuery;
    mitmitcodigo: TIntegerField;
    mitmitidentificacao: TStringField;
    immmitidentificacao: TStringField;
    ajustasitucaoimpressora: TUniQuery;
    immtciporta: TStringField;
    plsituacao: TPanel;
    Image1: TImage;
    Panel1: TPanel;
    mmFilaPedidos: TMemo;
    Panel2: TPanel;
    plHora: TPanel;
    grigrisituacao: TIntegerField;
    grigricodigo: TIntegerField;
    procedure tmVerificarPedidosTimer(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure inicializarTimer(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);

  private
    FZCone: TUniConnection;
    function AjustaSituacaoCozinha: Boolean;

    function BaixaArqRel(vFoaCodigo: string; vrelarquivo: TBlobField): String;
    function ConsultaEstadoImpressora(videntificacao: string; vporta: string): string;
    function enviaBMPImpressora(vlNumePedido: Integer; vporta: string; vlRetorno: Integer; vlimms, vTciCodigo: string): Boolean;

    function ConsultaImpressora(videntificacao: string; vporta: string): String;

    function EstadoImpressora(vporta: string): Integer;
    function ImprimePedido(vOrcChave: string; vFoaCodigo: string; vrelarquivo: TBlobField; vimmorigem: TUniQuery; vImprime: Integer = 1): Boolean;

    procedure VerificaPedidos;
    function EstadoMP2032(vporta: string): Integer;
    procedure VerificaPedidosImpressora(vImpressora: string);
    procedure SetZCone(const Value: TUniConnection);
    function StatusEstendido: Integer;

    { Private declarations }
  public
    { Public declarations }

    vpPastaDia: string;
    vpCozinhaAberta: Boolean;
    vpCznChave: string;
    vpImpressora: String;
    vpDebug: String;
    procedure VerificaPedidos01(vImpresso: string);
  published
    property ZCone: TUniConnection read FZCone write SetZCone;
  end;

var
  fprincigereimpgoufast03: Tfprincigereimpgoufast03;

implementation

{$R *.dfm}

procedure TrimAppMemorySize;
var
  MainHandle: thandle;
begin
  try
    MainHandle := OpenProcess(PROCESS_ALL_ACCESS, False, GetCurrentProcessID);
    SetProcessWorkingSetSize(MainHandle, $FFFFFFFF, $FFFFFFFF);
    CloseHandle(MainHandle);
  except
  end;

end;

function Tfprincigereimpgoufast03.AjustaSituacaoCozinha: Boolean;
begin

  result := False;

  czn.close;
  czn.Open;

  if czn.IsEmpty then
  begin
    plCozinha.Caption := 'Atenção: A Cozinha não esta aberta, solicite a abertura da Cozinha!';
    plCozinha.Font.Color := clYellow;
    plCozinha.Color := clred;

    vpCozinhaAberta := False;

  end
  else
  begin

    { cria pasta para salvar as imagens dos pedidos do dia }
    vpPastaDia := ExtractFilePath(Application.ExeName) + 'pedidos';
    vpPastaDia := vpPastaDia + '\' + formatfloat('000000', czncznchave.AsInteger);

    if not DirectoryExists(vpPastaDia) then
    begin
      ForceDirectories(vpPastaDia);
    end;
    plCozinha.Caption := 'Cozinha aberta. Bom Trabalho!';
    plCozinha.Font.Color := clWhite;
    plCozinha.Color := clgreen;

    vpCozinhaAberta := True;

    vpCznChave := czncznchave.AsString;
  end;
  result := vpCozinhaAberta;

end;


procedure ExecuteAndWait(const aCommando: string);
var
  tmpStartupInfo: TStartupInfo;
  tmpProcessInformation: TProcessInformation;
  tmpProgram: String;
begin
  tmpProgram := trim(aCommando);
  FillChar(tmpStartupInfo, SizeOf(tmpStartupInfo), 0);
  with tmpStartupInfo do
  begin
    cb := SizeOf(TStartupInfo);
    wShowWindow := SW_HIDE;
  end;

  if CreateProcess(nil, pchar(tmpProgram), nil, nil, true, CREATE_NO_WINDOW,
    nil, nil, tmpStartupInfo, tmpProcessInformation) then
  begin
    // loop every 10 ms
    while WaitForSingleObject(tmpProcessInformation.hProcess, 10) > 0 do
    begin
      Application.ProcessMessages;
    end;
    CloseHandle(tmpProcessInformation.hProcess);
    CloseHandle(tmpProcessInformation.hThread);
  end
  else
  begin
    RaiseLastOSError;
  end;
end;



Procedure ExecuteProgram(Nome, Parametros: String);
Var
  Comando: Array [0 .. 1024] of Char;
  Parms: Array [0 .. 1024] of Char;
Begin

  StrPCopy(Comando, Nome);
  StrPCopy(Parms, Parametros);
  ExecuteAndWait(Nome+' '+Parametros);


End;

function Tfprincigereimpgoufast03.enviaBMPImpressora(vlNumePedido: Integer; vporta: string; vlRetorno: Integer; vlimms: string; vTciCodigo: string): Boolean;
var
  vlArqBmp: string;
  vlArqFast: string;
  vlImpresso: Boolean;
  vlTentativas: Integer;
  vlRetImp: string;
  vlVias: Integer;
  vlOrcvias: Integer;
begin

  { imprime a imagem do pedido na impressora }

  try

    vlImpresso := False;

    if sqlimprimegripedidoaux.AsInteger = 1 then
    begin
      vlArqBmp := ExtractFilePath(frxBMPExport.filename) + 'ped' + formatfloat('0000', vlNumePedido) + 'a.bmp';
      vlArqFast := ExtractFilePath(frxBMPExport.filename) + 'ped' + formatfloat('0000', vlNumePedido) + 'a.fp3';
    end
    else
    begin
      vlArqBmp := ExtractFilePath(frxBMPExport.filename) + 'ped' + formatfloat('0000', vlNumePedido) + '.bmp';
      vlArqFast := ExtractFilePath(frxBMPExport.filename) + 'ped' + formatfloat('0000', vlNumePedido) + '.fp3';
    end;

    if fileexists(vlArqBmp) then
    begin

      vias.close;
      // vias.SQL.Text := 'select grivias orcvias from orc,ito,imm,gri where  imm.tcicodigo=gri.tcicodigo and orc.orcchave=ito.orcchave and ito.itochave=imm.itochave and  immnumepedido=' + inttostr(vlNumePedido) + ' limit 1';
      vias.SQL.Text :=
        'SELECT grivias orcvias from orc,ito,imm,gri,pro WHERE ito.procodigo=pro.procodigo and gri.grpcodigo=pro.grpcodigo and imm.tcicodigo=gri.tcicodigo and orc.orcchave=ito.orcchave and ito.itochave=imm.itochave and  immnumepedido='
        + inttostr(vlNumePedido) + ' limit 1';
      vias.Open;

      if vias.FieldByName('orcvias').AsInteger = 0 then
        vlOrcvias := 1
      else
        vlOrcvias := vias.FieldByName('orcvias').AsInteger;

      for vlVias := 1 to vlOrcvias do
      begin

        { if fileexists(ExtractFilePath(Application.ExeName) + 'impgoufast.exe') then
          begin
          ExecuteProgram(ExtractFilePath(Application.ExeName) + 'impgoufast.exe ', vlArqFast + ' ' + vporta + ' ' + vlimms + ' ' + vTciCodigo);
          end
          else
          begin }
        ExecuteProgram(ExtractFilePath(Application.ExeName) + 'impgoufast.exe ', vlArqFast + ' ' + vporta + ' ' + vlimms + ' ' + vTciCodigo);
        sleep(300);
        // ExecuteProgram(ExtractFilePath(Application.ExeName) + 'impgou.exe ', vlArqBmp + ' ' + vporta + ' ' + vlimms + ' ' + vTciCodigo);
        { end; }
        vlImpresso := True;

        if vlOrcvias > 1 then
        begin

          // sleep(200 * vlOrcvias);
        end;

      end;

    end;

  finally
    result := vlImpresso;

  end;
end;

procedure Tfprincigereimpgoufast03.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Action := cafree;
end;

procedure Tfprincigereimpgoufast03.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
  tmVerificarPedidos.Enabled := False;
  if imm.Active then
  begin
    if imm.IsEmpty then
    begin
      CanClose := True;
    end
    else
    begin
      sleep(3000);
      CanClose := True;
    end;

  end
  else
  begin
    CanClose := True;
  end;

end;

procedure Tfprincigereimpgoufast03.FormShow(Sender: TObject);
begin
  inicializar.Enabled := True;
  Screen.Cursors[crSQLWait] := Screen.Cursors[crDefault];
end;

procedure Tfprincigereimpgoufast03.inicializarTimer(Sender: TObject);
var
  i: Integer;
begin
  inicializar.Enabled := False;
  // cria um mutex usando um nome único

  for i := 0 to self.ComponentCount - 1 do
  begin
    if self.Components[i] is TUniQuery then
      (self.Components[i] as TUniQuery).Connection := ZCone;

  end;

  AjustaSituacaoCozinha;

  tmVerificarPedidos.Enabled := True;

end;

procedure Tfprincigereimpgoufast03.tmVerificarPedidosTimer(Sender: TObject);
begin

  try
    tmVerificarPedidos.Enabled := False;
    VerificaPedidos;
    TrimAppMemorySize;

  finally
    self.Free;
  end;

end;

function Tfprincigereimpgoufast03.ConsultaEstadoImpressora(videntificacao: string; vporta: string): string;
begin
  result := ConsultaImpressora(videntificacao, vporta);
end;

function Tfprincigereimpgoufast03.BaixaArqRel(vFoaCodigo: string; vrelarquivo: TBlobField): String;
var
  vlNomeArq: String;
  BlobField: TBlobField;
  vlNomeRelatorio: string;
begin
  result := '';
  vlNomeArq := ExtractFilePath(Application.ExeName) + 'Report\PedidoFast_' + vFoaCodigo + '.fr3';

  if fileexists(vlNomeArq) then
    deletefile(vlNomeArq);

  BlobField := vrelarquivo as TBlobField;

  BlobField.SaveToFile(vlNomeArq);

  if not fileexists(vlNomeArq) then
  begin
    // pedidos.Lines.Add('Arquivo nao localizado: ' + vlNomeArq);
    exit;
  end
  else
    result := vlNomeArq;

end;

Function Tfprincigereimpgoufast03.ConsultaImpressora(videntificacao: string; vporta: string): String;
Var
  i_retorno: Integer;
  sRetorno: String;
Begin
  Try

    sRetorno := '1';

    if vpDebug = '1' then
      i_retorno := 24
    else
    begin
      if pos('.', vporta) > 0 then
      begin
        i_retorno := EstadoMP2032(vporta);
      end
      else
      begin
        i_retorno := EstadoImpressora(vporta);
        // i_retorno := 24;
      end;
    end;

    If i_retorno <> 1 Then
    Begin
      if i_retorno = 0 then
      begin

      end
      else if i_retorno = 32 then
      begin

      end
      else if i_retorno = 5 then
      begin

      end
      else if i_retorno = 9 then
      begin

      end
      else if i_retorno <> 24 then
      begin

      end;

    End;

    If i_retorno = 1 Then
    Begin

      sleep(200);

    End;
    sRetorno := inttostr(i_retorno);

    If i_retorno = 0 Then
      exit;

  Finally
    result := sRetorno;
  End;
End;

procedure Tfprincigereimpgoufast03.VerificaPedidosImpressora(vImpressora: string);
var
  vlTentativas: Integer;
  vlCznCodigo: Integer;

  vlImprime: Integer;
  vlPedido: string;

begin
  mmFilaPedidos.Lines.Clear;

  imm.close;
  imm.ParamByName('cznchave').AsString := vpCznChave;
  imm.FilterSQL := 'mitidentificacao=' + QuotedStr(vImpressora);
  imm.Filtered := True;
  imm.Open;

  vlTentativas := 0;

  imm.First;
  while not imm.Eof do
  begin
    vlPedido := immmitidentificacao.AsString + ' Pedido: ' + formatfloat('0000', immimmnumepedido.AsInteger) + '-' + immgricodigo.AsString;
    if pos(vlPedido, mmFilaPedidos.Lines.Text) = 0 then
    begin
      mmFilaPedidos.Lines.Add(vlPedido);
    end;

    imm.Next;
  end;

  Panel2.Caption := 'Pedidos na Fila: ' + inttostr(mmFilaPedidos.Lines.Count);
  Panel2.Repaint;

  imm.First;
  while not imm.Eof do
  begin

    consulta.close;
    consulta.SQL.Text := 'select griimprimeauto from gri where grpcodigo=' + immgrpcodigo.AsString;
    consulta.Open;

    vlImprime := consulta.FieldByName('griimprimeauto').AsInteger;
    vlPedido := 'Pedido: ' + formatfloat('0000', immimmnumepedido.AsInteger) + '-' + immgricodigo.AsString;

    if ImprimePedido(immorcchave.AsString, immfoacodigo.AsString, immrelarquivo, imm) then
    begin

      sleep(500);
      vlTentativas := 0;
      exit;
    end
    else
    begin

      imm.Next;
    end;

  end;
end;

procedure Tfprincigereimpgoufast03.VerificaPedidos01(vImpresso: string);
var
  vlTentativas: Integer;
  vlCznCodigo: Integer;

  vlImprime: Integer;
  vlPedido: string;

begin
  mmFilaPedidos.Lines.Clear;

  imm.close;
  imm.ParamByName('cznchave').AsString := vpCznChave;
  imm.FilterSQL := 'gri.tcicodigo=' + vImpresso;
  imm.Open;

  vlTentativas := 0;

  imm.First;
  while not imm.Eof do
  begin
    vlPedido := 'Pedido: ' + formatfloat('0000', immimmnumepedido.AsInteger) + '-' + immgricodigo.AsString;
    if pos(vlPedido, mmFilaPedidos.Lines.Text) = 0 then
    begin
      mmFilaPedidos.Lines.Add(vlPedido);
    end;

    imm.Next;
  end;

  Panel2.Caption := 'Pedidos na Fila: ' + inttostr(mmFilaPedidos.Lines.Count);
  Panel2.Repaint;

  imm.First;
  while not imm.Eof do
  begin

    consulta.close;
    consulta.SQL.Text := 'select griimprimeauto from gri where grpcodigo=' + immgrpcodigo.AsString;
    consulta.Open;

    vlImprime := consulta.FieldByName('griimprimeauto').AsInteger;
    vlPedido := 'Pedido: ' + formatfloat('0000', immimmnumepedido.AsInteger) + '-' + immgricodigo.AsString;

    if ImprimePedido(immorcchave.AsString, immfoacodigo.AsString, immrelarquivo, imm) then
    begin
      sleep(500);
      vlTentativas := 0;
      exit;
    end
    else
    begin

      imm.Next;
    end;

  end;
end;

procedure Tfprincigereimpgoufast03.VerificaPedidos;
var

  vlCznCodigo: Integer;

  vlImprime: Integer;
  vlPedido: string;
  vlrestorno: string;
begin

  if vpImpressora <> '' then
  begin
    mmFilaPedidos.Lines.Clear;

    imm.close;
    imm.ParamByName('cznchave').AsString := vpCznChave;
    imm.FilterSQL := 'mitidentificacao=' + QuotedStr(vpImpressora);
    imm.Filtered := True;
    imm.Open;

    if not gri.Active then
    begin
      gri.Open;
    end;

    if gri.Locate('mitidentificacao', vpImpressora, [locaseinsensitive]) then
    begin

      if pos('.', gritciporta.AsString) > 0 then
      begin
        vlrestorno := ConsultaImpressora(grimitidentificacao.AsString, gritciporta.AsString);

        if vlrestorno <> '24' then
        begin
          if vlrestorno = '9' then
          begin

            self.plsituacao.Color := clsilver;
            Application.ProcessMessages;

          end
          else
          begin
            self.plsituacao.Color := clred;
            Application.ProcessMessages;
          end;

          gri.Edit;
          grigrisituacao.AsString := vlrestorno;
          gri.Post;

          sleep(5000);

          self.close;

        end
        else
        begin
          gri.Edit;
          grigrisituacao.AsString := vlrestorno;
          gri.Post;
          self.plsituacao.Color := clBtnFace;
          Application.ProcessMessages;

        end;

      end
      else
      begin
        vlrestorno := '24'; // ConsultaImpressora(immmitidentificacao.AsString, immtciporta.AsString);
        gri.Edit;
        grigrisituacao.AsString := vlrestorno;
        gri.Post;
      end;

    end;

    if imm.IsEmpty then
    begin
      close;
      exit;
    end;

    if vlrestorno = '24' then
    begin

      imm.First;
      while not imm.Eof do
      begin
        vlPedido := 'Pedido: ' + formatfloat('0000', immimmnumepedido.AsInteger) + '-' + immgricodigo.AsString;
        if pos(vlPedido, mmFilaPedidos.Lines.Text) = 0 then
        begin
          mmFilaPedidos.Lines.Add(vlPedido);
        end;

        imm.Next;
      end;

      Panel2.Caption := 'Pedidos na Fila: ' + inttostr(mmFilaPedidos.Lines.Count);
      Panel2.Repaint;

      imm.First;
      while not imm.Eof do
      begin

        consulta.close;
        consulta.SQL.Text := 'select griimprimeauto from gri where grpcodigo=' + immgrpcodigo.AsString;
        consulta.Open;

        vlImprime := consulta.FieldByName('griimprimeauto').AsInteger;
        vlPedido := 'Pedido: ' + formatfloat('0000', immimmnumepedido.AsInteger) + '-' + immgricodigo.AsString;

        ajustasitucaoimpressora.close;
        ajustasitucaoimpressora.Connection := ZCone;
        ajustasitucaoimpressora.SQL.Text :=
          'select gri.gricodigo, gri.tcicodigo, grisituacao from gri,tci,mit where  gri.tcicodigo=tci.tcicodigo  and  mit.mitcodigo=tci.mitcodigo  and mitidentificacao=' +
          QuotedStr(vpImpressora);
        ajustasitucaoimpressora.Open;

        ajustasitucaoimpressora.Edit;
        ajustasitucaoimpressora.FieldByName('grisituacao').AsInteger := 0;
        ajustasitucaoimpressora.Post;

        if ImprimePedido(immorcchave.AsString, immfoacodigo.AsString, immrelarquivo, imm) then
        begin

          { ajustasitucaoimpressora.Edit;
            ajustasitucaoimpressora.FieldByName('grisituacao').AsInteger := 24;
            ajustasitucaoimpressora.Post; }

          sleep(500);

          imm.Next;
        end
        else
        begin

          imm.Next;
        end;

      end;
    end;
  end;
  close;

end;

function Tfprincigereimpgoufast03.ImprimePedido(vOrcChave: string; vFoaCodigo: string; vrelarquivo: TBlobField; vimmorigem: TUniQuery; vImprime: Integer = 1): Boolean;
var
  vlNomeArq: string;
  vlGerado: Boolean;
  vlNumePedido: Integer;
  vlRetorno: Integer;
  vporta: string;
  videntificacao: string;
  vlRetornoStr: string;

  vlIdentificacao: string;
  vlTciPorta: string;
  vlTciCodigo: string;
  vlTentativas: Integer;
  vlItoChave: String;
  vltciatual: string;
  vlTentivas: Integer;
  vlImmChave: string;
  vlImmHoraPedido: TDatetime;

  DataI: TDatetime;
  DataF: TDatetime;
  DifDias: double;
  vlDifTempo: string;
  vlimms: string;
  vltcis: string;

  vlGricodigo: string;
  vlOrcChave: string;

begin
  result := False;

  if pos('-', vOrcChave) > 0 then
  begin
    vlGricodigo := trim(copy(vOrcChave, pos('-', vOrcChave) + 1, 20));
    vlOrcChave := trim(copy(vOrcChave, 1, pos('-', vOrcChave) - 1));
  end
  else
  begin
    vlGricodigo := '';
    vlOrcChave := vOrcChave;
  end;

  ito.close;
  ito.Params[0].AsString := vlOrcChave;
  ito.FilterSQL := 'mitidentificacao=' + QuotedStr(vpImpressora);
  ito.Open;

  vlImmChave := ito.FieldByName('immchave').AsString;

  if ito.IsEmpty then
  begin

    consulta.close;
    consulta.SQL.Text := 'update imm set immhoraimpresso=NOW() where immchave =' + immimmchave.AsString;
    consulta.ExecSQL;

    result := True;
    exit;
  end;

  if vlImmChave <> '' then
  begin

    immtempo.close;
    immtempo.SQL.Text := 'select immhorapedido from imm where immchave=' + vlImmChave;
    immtempo.Open;
    vlImmHoraPedido := immtempo.FieldByName('ImmHoraPedido').AsFloat;

  end
  else
  begin
    vlImmHoraPedido := now();
  end;

  vlTentativas := 0;
  vltciatual := '';
  while not ito.Eof do
  begin

    vlNumePedido := ito.FieldByName('immnumepedido').AsInteger;
    vporta := ito.FieldByName('tciporta').AsString;
    vlRetorno := 0;
    vlIdentificacao := vpImpressora;

    if itomitidentificacao.AsString <> vlIdentificacao then
    begin
      ito.Next;
    end
    else
    begin
      if vpDebug = '1' then
      begin
        vlRetornoStr := '24';
      end
      else
      begin

        if pos('.', vlTciPorta) > 0 then
        begin

          vlRetornoStr := inttostr(EstadoMP2032(vlTciPorta));
        end
        else
        begin
          vlRetornoStr := ConsultaEstadoImpressora(vlIdentificacao, vporta);

        end;
      end;

      if vlRetornoStr <> '' then
        vlRetorno := StrToInt(vlRetornoStr);

      if vlRetornoStr <> '' then
        vlRetorno := StrToInt(vlRetornoStr);

      vlIdentificacao := ito.FieldByName('mitidentificacao').AsString;

      vlIdentificacao := StringReplace(vlIdentificacao, ' ', '_', [rfReplaceAll, rfIgnoreCase]);

      vlTciPorta := ito.FieldByName('tciporta').AsString;
      vlTciCodigo := ito.FieldByName('tcicodigo').AsString;

      tcisituacao.close;
      tcisituacao.SQL.Text := 'select tcicodigo, tciimprimindo, mitidentificacao from tci,mit where tci.mitcodigo=mit.mitcodigo and tcicodigo=' + vlTciCodigo;
      tcisituacao.Open;

      if vlRetorno <> 24 then
      begin
        sleep(1000);
      end
      else
      begin

        situacao.close;
        situacao.Connection := ZCone;
        situacao.SQL.Text := 'select gricodigo, grisituacao from gri where tcicodigo=' + vlTciCodigo;
        situacao.Open;

        vlTentivas := 0;
        while vlTentivas < 10 do
        begin
          try
            situacao.Edit;
            situacao.FieldByName('grisituacao').AsString := vlRetornoStr;
            situacao.Post;
            break;
          except

            situacao.Cancel;
            sleep(100);

            try
              situacao.Edit;
              situacao.FieldByName('grisituacao').AsString := vlRetornoStr;
              situacao.Post;
            except

              vlTentivas := vlTentivas + 1;
            end;

          end;
        end;

        if vlRetorno = 24 then // impressora esta liberada
        begin

          vlNomeArq := BaixaArqRel(vFoaCodigo, vrelarquivo);

          if vlNomeArq = '' then
            exit;

          sqlimprime.close;
          sqlimprime.ParamByName('itochave').AsInteger := itoitochave.AsInteger;
          sqlimprime.Open;

          if sqlimprimegripedidoaux.AsInteger = 1 then
          begin

            consulta.close;
            consulta.SQL.Text := 'update imm set  tcicodigo=' + vlTciCodigo + ' ,immhoraimpresso=null where immchave in (' + sqlimprimeimmchave.AsString + ')';
            consulta.ExecSQL;

          end;

          frxDados.DataSet := vimmorigem;

          relatorio.LoadFromFile(vlNomeArq);

          { atribui o valor para variavel de grupo do relatório }

          relatorio.Variables['tcicodigo'] := QuotedStr(vlTciCodigo);
          relatorio.Variables['immnumepedido'] := QuotedStr(inttostr(vlNumePedido));

          { defini configuração do fastreport para exibição }
          relatorio.PrepareReport(True);
          relatorio.PrintOptions.ShowDialog := False;
          relatorio.ShowProgress := False;

          vlGerado := False;
          { exporta a imagem do pedido }

          frxBMPExport.DefaultPath := vpPastaDia;
          if sqlimprimegripedidoaux.AsInteger = 1 then
          begin
            if fileexists(vpPastaDia + '\ped' + formatfloat('0000', vlNumePedido) + 'a.fp3')=false then
            begin
            frxBMPExport.filename := 'ped' + formatfloat('0000', vlNumePedido) + 'a.bmp';
            relatorio.PreviewPages.SaveToFile(vpPastaDia + '\ped' + formatfloat('0000', vlNumePedido) + 'a.fp3');

            end;
          end

          else
          begin
            if fileexists(vpPastaDia + '\ped' + formatfloat('0000', vlNumePedido) + '.fp3')=false then
            begin
            frxBMPExport.filename := 'ped' + formatfloat('0000', vlNumePedido) + '.bmp';
            relatorio.PreviewPages.SaveToFile(vpPastaDia + '\ped' + formatfloat('0000', vlNumePedido) + '.fp3');
            end;

          end;

          frxBMPExport.SeparateFiles := False;

          if fileexists(frxBMPExport.filename) then
          begin
            deletefile(frxBMPExport.filename);
            sleep(100);
          end;

          vlGerado := relatorio.Export(frxBMPExport);

          vlGerado := fileexists(frxBMPExport.filename);

          if vlGerado then
          begin
          if self.FindComponent('pedidos')<>nil then
          begin
          (self.FindComponent('pedidos') as tmemo).Lines.Add('Pedido: '+vlNumePedido.ToString+' ' +datetimetostr(now()));

          end;

            jaimpresso.close;
            jaimpresso.SQL.Text := 'select immchave, immhorapedido from imm where immchave in (select immchave from imm, ito where imm.itochave=ito.itochave and orcchave=' +
              vOrcChave + ' and immnumepedido=' + inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + ' and immhoraimpresso is not null )';
            jaimpresso.Open;

            if (vImprime = 1) and (sqlimprimegriimprimeauto.AsInteger = 1) and ((jaimpresso.IsEmpty) or (vltciatual <> vlTciCodigo)) then
            begin

              if sqlimprimegripedidoaux.AsInteger = 1 then
              begin

                consulta.close;
                consulta.SQL.Text := 'update imm set  tcicodigo=' + vlTciCodigo + ' ,immhoraimpresso=null where immchave in (' + sqlimprimeimmchave.AsString + ')';
                consulta.ExecSQL;

              end;

              consulta.close;
              consulta.SQL.Text := 'select immchave from imm where immchave in (select immchave from tped where orcchave=' + vOrcChave + ' and immnumepedido=' +
                inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + ')';
              consulta.Open;

              consulta.First;
              while not consulta.Eof do
              begin
                vlimms := vlimms + consulta.FieldByName('immchave').AsString + ',';
                consulta.Next;
              end;
              vlimms := copy(vlimms, 1, length(vlimms) - 1);

              consulta.close;
              consulta.SQL.Text := 'update imm set tcicodigo=' + vlTciCodigo + ' ,immhoraimpresso=NOW() where immchave in (select immchave from tped where orcchave=' + vOrcChave +
                ' and immnumepedido=' + inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + ')';
              consulta.ExecSQL;

              if vlimms <> '' then
              begin

                vporta := StringReplace(vporta, ' ', '_', [rfReplaceAll, rfIgnoreCase]);

                if enviaBMPImpressora(vlNumePedido, vporta, vlRetorno, vlimms, vlTciCodigo) then
                begin
                  vlimms := '';
                  vltciatual := vlTciCodigo;
                  sleep(100);

                  try

                    imw.close;
                    imw.ParamByName('itochave').AsInteger := itoitochave.AsInteger;
                    imw.Open;

                    if imw.IsEmpty then
                    begin
                      imw.Append;
                      imwitochave.AsInteger := itoitochave.AsInteger;
                      imw.Post;
                    end;

                  except

                    on E: Exception do
                    begin

                    end;

                  end;
                  DataI := now();
                  DataF := vlImmHoraPedido;
                  DifDias := DaySpan(DataF, DataI);
                  vlDifTempo := inttostr(Trunc(DifDias)) + ' dias, ' + FormatDateTime('h" horas e "n" minutos"', DifDias);

                  consulta.close;
                  consulta.SQL.Text := 'select tped.immchave, imm.itochave from tped, imm where tped.immchave=imm.immchave  and  tped.orcchave=' + vOrcChave +
                    ' and tped.immnumepedido=' + inttostr(vlNumePedido) + ' and tped.tcicodigo=' + vlTciCodigo;
                  consulta.Open;

                  vlItoChave := '';
                  vlItoChave := consulta.Fields[1].AsString;

                  if vlItoChave <> '' then
                  begin
                    consulta.close;
                    consulta.SQL.Text := 'select tpocodigo from pro, ito where pro.procodigo=ito.procodigo and itochave=' + vlItoChave;
                    consulta.Open;

                    if consulta.Fields[0].AsString = '9' then
                    begin
                      consulta.close;
                      consulta.SQL.Text := 'delete from ito where itototalav=0 and itochave=' + vlItoChave;
                      consulta.ExecSQL;

                    end;
                  end;
                  ito.Next;
                  vlTentativas := 0;

                  result := True;
                end
                else
                begin
                  vlTentativas := vlTentativas + 1;

                  sleep(100);

                  if vlTentativas = 2 then
                  begin

                    break;
                  end;

                end;

              end
              else
              begin

                ito.Next;
                vlTentativas := 0;
                result := True;

              end;
            end
            else
            begin

              try
                consulta.close;
                consulta.SQL.Text := 'update imm set tcicodigo=' + vlTciCodigo + ' , immhoraimpresso=NOW() where immchave in (select immchave from tped where orcchave=' + vOrcChave
                  + ' and immnumepedido=' + inttostr(vlNumePedido) + ' and tcicodigo=' + vlTciCodigo + ')';
                consulta.ExecSQL;

                // criado funcionalidade para remover serviço que sejá só para imprimir
                //
                //

                consulta.close;
                consulta.SQL.Text := 'select tped.immchave, imm.itochave from tped, imm where tped.immchave=imm.immchave  and  tped.orcchave=' + vOrcChave +
                  ' and tped.immnumepedido=' + inttostr(vlNumePedido) + ' and tped.tcicodigo=' + vlTciCodigo;
                consulta.Open;

                vlItoChave := '';
                vlItoChave := consulta.Fields[1].AsString;

                consulta.close;
                consulta.SQL.Text := 'select tpocodigo from pro, ito where pro.procodigo=ito.procodigo and itochave=' + vlItoChave;
                consulta.Open;

                if consulta.Fields[0].AsString = '9' then
                begin

                  consulta.close;
                  consulta.SQL.Text := 'delete from ito where itototalav=0 and itochave=' + vlItoChave;
                  consulta.ExecSQL;

                end;

              except
                on E: Exception do
                begin

                end;

              end;

              // pedidos.Lines.Add('Orc.: ' + vlOrcChave + ' Ped.: ' + inttostr(vlNumePedido) + ' Imp.: ' + vlTciCodigo + ' Hora: ' + datetimetostr(now()));

              ito.Next;
              vlTentativas := 0;
              result := True;

            end;
          end;
        end
        else
        begin
          // result := False;
          // exit;
        end;
      end;

    end;
  end;

end;

function IsValidatePrinter(LabelPrinter: String): Integer;
var
  i: Integer;
begin
  for i := 0 to Printer.Printers.Count - 1 do
    if AnsiContainsText(Printer.Printers[i], LabelPrinter) then
      exit(i);
  result := -1;
end;

function Tfprincigereimpgoufast03.EstadoImpressora(vporta: string): Integer;
Var
  vu: string;
  vlRetorno, i_retorno, vlIndexPrinter: Integer;
  s_cmdtx: string;
  i, U, E: Integer;
Begin

  vlIndexPrinter := IsValidatePrinter(trim(vporta));
  if vlIndexPrinter <> -1 then // Identifica se é uma impressora válida
  begin

    Vcl.Printers.Printer.PrinterIndex := vlIndexPrinter;
    Vcl.Printers.Printer.Refresh;

    if Printer.Printing then
    begin
      vlRetorno := 99;
    end
    else
    begin
      vlRetorno := 24;
    end;

  end
  else
  begin
    Vcl.Printers.Printer.PrinterIndex := -1;
  end;
  result := vlRetorno;

End;

function Tfprincigereimpgoufast03.EstadoMP2032(vporta: string): Integer;
Var
  vu: string;
  vlRetorno, i_retorno: Integer;
  s_cmdtx: string;
  i, U, E: Integer;
Begin

  vlRetorno := ConfiguraModeloImpressora(7);
  vlRetorno := IniciaPorta(vporta);

  if vlRetorno = 0 then
  begin
    result := 0;
    exit;
  end;

  vlRetorno := Le_Status();
  FechaPorta;
  result := vlRetorno;

End;

procedure Tfprincigereimpgoufast03.SetZCone(const Value: TUniConnection);
var
  i: Integer;
begin
  FZCone := Value;

  for i := 0 to self.ComponentCount - 1 do
  begin
    if self.Components[i] is TUniQuery then
      (self.Components[i] as TUniQuery).Connection := self.ZCone;
  end;
end;

function Tfprincigereimpgoufast03.StatusEstendido: Integer;
var
  buffer: array [0 .. 5] of Byte;
  status: Integer;
begin

  status := LeituraStatusEstendido(buffer);
  if status = 1 then
  begin
    if (Integer(buffer[2]) and 8) <> 0 then
      ShowMessage('Cutter Error')
  end;
  result := status;
end;

end.
