unit ufimpbtm;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, ufrmbase, System.Actions, Vcl.ActnList,
  Data.DB, MemDS, DBAccess, Uni, Vcl.ComCtrls, Vcl.StdCtrls, Vcl.Buttons,
  Vcl.ExtCtrls, Vcl.ImgList, PngImageList, System.ImageList;

type
  Tfimpbtm = class(Tfrmbase)
    registroprjcodigo: TIntegerField;
    registroprjidentificacao: TStringField;
    mdp: TUniQuery;
    mdpmdpcodigo: TIntegerField;
    mdpmdpidentificacao: TStringField;
    grm: TUniQuery;
    grmgrmcodigo: TIntegerField;
    grmgrmidentificacao: TStringField;
    btm: TUniQuery;
    btmbtmcodigo: TIntegerField;
    btmbtmidentificacao: TStringField;
    ImageMarca: TImageList;
    mostra: TProgressBar;
    ativar: TTimer;
    plfuncoes: TPanel;
    btMarcarTodos: TBitBtn;
    btDesmarcarTodos: TBitBtn;
    plPrincipal: TPanel;
    ArvoreMenu: TTreeView;
    dauactformulario: TStringField;
    dauactacao: TStringField;
    cfgcfgcodigo: TIntegerField;
    cfgcfgetdempresa: TIntegerField;
    cfgcfginscricaomun: TStringField;
    cfgcfgsuframa: TStringField;
    cfgcrtcodigo: TIntegerField;
    cfgcfglogo: TBlobField;
    cfgtalcodigo: TIntegerField;
    cfgatvcodigo: TIntegerField;
    abpl: TUniQuery;
    amre: TUniQuery;
    acrm: TUniQuery;
    abtm: TUniQuery;
    agrm: TUniQuery;
    bplremota: TUniQuery;
    bpllocal: TUniQuery;
    btmlocal: TUniQuery;
    btmremota: TUniQuery;
    procedure bcancelaClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure ArvoreMenuClick(Sender: TObject);
    procedure ArvoreMenuCollapsing(Sender: TObject; Node: TTreeNode; var AllowCollapse: Boolean);
    procedure ArvoreMenuMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure bconfirmaClick(Sender: TObject);
    procedure ativarTimer(Sender: TObject);
    procedure bfecharClick(Sender: TObject);
    procedure btMarcarTodosClick(Sender: TObject);
    procedure btDesmarcarTodosClick(Sender: TObject);
  private
    { Private declarations }
    vpClbcodigo: string;
    ConexaoWeb: TUniConnection;
    FChangingTree: Boolean;
    function Conectar: Boolean;
    function ConectaBancoRemoto: Boolean;
    procedure MontaArvore;
    procedure TreeMenuItem(Marca: Boolean);
    procedure UnCheckChild(Node: TTreeNode);
    procedure CheckChild(Node: TTreeNode);
    procedure ImportaItem(vCodigo: string);
    procedure atualizaregistro(vOri, vDes: TUniQuery);
    function LiberaAcesso: Boolean;
    procedure ProcessaTabelasBases;
    procedure atualizaregistroact(vOri, vDes: TUniQuery);
  public
    { Public declarations }
  end;

var
  fimpbtm: Tfimpbtm;

const
  vPlIdMd = '03.07.80.015-03';

implementation

uses
  uflogin;

{$R *.dfm}

procedure KeepUIGoing(SourceListIndex: Integer);
begin
  if SourceListIndex mod 100 = 0 then
  begin
    Application.ProcessMessages;
    // so it doesn't freeze the application in long loops.  Not 100% sure where this should be placed, if at all.
    Sleep(1);
  end;
end;

procedure Tfimpbtm.ArvoreMenuClick(Sender: TObject);
begin
  inherited;
  if not FChangingTree then
    TreeMenuItem(True);
end;

procedure Tfimpbtm.ArvoreMenuCollapsing(Sender: TObject; Node: TTreeNode; var AllowCollapse: Boolean);
begin
  inherited;
  if (Self.Showing) and (TTreeView(Sender).Focused) then
    FChangingTree := True;
end;

procedure Tfimpbtm.ArvoreMenuMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  inherited;
  FChangingTree := False;
end;

procedure Tfimpbtm.bcancelaClick(Sender: TObject);
begin
  { inherited; }
  Close;
end;

procedure Tfimpbtm.ProcessaTabelasBases;
var
  vlMdlWeb: TUniQuery;
  vlMdl: TUniQuery;
  vlActWeb: TUniQuery;
  vlAct: TUniQuery;
  vlCRMWeb: TUniQuery;
  vlCRM: TUniQuery;
begin

  (* Atualização dos Grupos Módulos de Direito de Acesso *)
  vlMdlWeb := TUniQuery.Create(Self);
  vlMdlWeb.Connection := ConexaoWeb;
  vlMdlWeb.SQL.Text := 'SELECT mdlcodigo, mdlidentificacao, mdldescricao,  mdlnome,';
  vlMdlWeb.SQL.add('mdlconfig, mdlsubgrupo FROM mdl');
  vlMdlWeb.Open;

  vlMdl := TUniQuery.Create(Self);
  vlMdl.Connection := zcone;
  vlMdl.SQL.Text := 'SELECT mdlcodigo, mdlidentificacao, mdldescricao,  mdlnome,';
  vlMdl.SQL.add('mdlconfig, mdlsubgrupo FROM mdl');
  vlMdl.Open;
  atualizaregistro(vlMdlWeb, vlMdl);

  (* Atualização dos Ações para Direito de Acesso *)
  vlActWeb := TUniQuery.Create(Self);
  vlActWeb.Connection := ConexaoWeb;
  vlActWeb.SQL.Text := 'SELECT actcodigo, actidentificacao, mdlcodigo, actformulario, ';
  vlActWeb.SQL.add('actacao, actativa FROM act');
  vlActWeb.Open;

  vlAct := TUniQuery.Create(Self);
  vlAct.Connection := zcone;
  vlAct.SQL.Text := 'SELECT actcodigo, actidentificacao, mdlcodigo, actformulario, ';
  vlAct.SQL.add('actacao, actativa FROM act');
  vlAct.Open;
  atualizaregistroact(vlActWeb, vlAct);

  (* Atualização dos Campos para filtros de relatórios *)
  vlCRMWeb := TUniQuery.Create(Self);
  vlCRMWeb.Connection := ConexaoWeb;
  vlCRMWeb.SQL.Text := 'SELECT crm.crmchave, crm.bplcodigo, crm.crmnome, ';
  vlCRMWeb.SQL.add('crm.crmidentificacao, crm.tcacodigo FROM crm ');
  vlCRMWeb.Open;

  vlCRM := TUniQuery.Create(Self);
  vlCRM.Connection := zcone;
  vlCRM.SQL.Text := 'SELECT crm.crmchave, crm.bplcodigo, crm.crmnome, ';
  vlCRM.SQL.add('crm.crmidentificacao, crm.tcacodigo FROM crm ');
  vlCRM.Open;
  atualizaregistro(vlCRMWeb, vlCRM);
end;

procedure Tfimpbtm.ImportaItem(vCodigo: string);
var

  vlMdp: TUniQuery;
  vlGrp: TUniQuery;
  vlBtm: TUniQuery;
  vlBpl: TUniQuery;
  vlPrj: TUniQuery;

  vlMdpWeb: TUniQuery;
  vlGrpWeb: TUniQuery;
  vlBtmWeb: TUniQuery;
  vlBplWeb: TUniQuery;
  vlPrjWeb: TUniQuery;

  i: Integer;

begin

  if ConexaoWeb.Connected = False then
    ConexaoWeb.Connected := True;

  vlBtmWeb := TUniQuery.Create(Self);
  vlBtmWeb.Connection := ConexaoWeb;
  vlBtmWeb.SQL.Text := 'SELECT btmcodigo, bplcodigo, btmidentificacao, btmdica,';
  vlBtmWeb.SQL.add('btmimagem, btmformaabe, btmtipobotao, grmcodigo, btmordem, btmatividade, btmajuda  ');
  vlBtmWeb.SQL.add('FROM btm where btmcodigo=' + vCodigo);
  vlBtmWeb.Open;

  vlBplWeb := TUniQuery.Create(Self);
  vlBplWeb.Connection := ConexaoWeb;
  vlBplWeb.SQL.Text := 'SELECT bplcodigo, bplidentificacao, bplnomearq, bplfranome  ';
  vlBplWeb.SQL.add('FROM bpl where bplcodigo=' + vlBtmWeb.FieldByName('bplcodigo').AsString);
  vlBplWeb.Open;

  vlGrpWeb := TUniQuery.Create(Self);
  vlGrpWeb.Connection := ConexaoWeb;
  vlGrpWeb.SQL.Text := 'SELECT grmcodigo,  mdpcodigo, grmidentificacao, grmordem ';
  vlGrpWeb.SQL.add('FROM grm where grmcodigo=' + vlBtmWeb.FieldByName('grmcodigo').AsString);
  vlGrpWeb.Open;

  vlMdpWeb := TUniQuery.Create(Self);
  vlMdpWeb.Connection := ConexaoWeb;
  vlMdpWeb.SQL.Text := 'SELECT mdpcodigo,  mdpidentificacao, mdpdescricao, prjcodigo,';
  vlMdpWeb.SQL.add('mdpordem  FROM mdp where mdpcodigo=' + vlGrpWeb.FieldByName('mdpcodigo').AsString);
  vlMdpWeb.Open;

  vlPrjWeb := TUniQuery.Create(Self);
  vlPrjWeb.Connection := ConexaoWeb;
  vlPrjWeb.SQL.Text := 'SELECT prjcodigo, prjidentificacao FROM prj where prjcodigo=' + vlMdpWeb.FieldByName('prjcodigo').AsString;
  vlPrjWeb.Open;

  vlPrj := TUniQuery.Create(Self);
  vlPrj.Connection := zcone;
  vlPrj.SQL.Text := 'SELECT prjcodigo, prjidentificacao FROM prj where prjcodigo=' + vlMdpWeb.FieldByName('prjcodigo').AsString;
  vlPrj.Open;
  atualizaregistro(vlPrjWeb, vlPrj);

  vlMdp := TUniQuery.Create(Self);
  vlMdp.Connection := zcone;
  vlMdp.SQL.Text := 'SELECT mdpcodigo,  mdpidentificacao, mdpdescricao, prjcodigo,';
  vlMdp.SQL.add('mdpordem  FROM mdp where mdpcodigo=' + vlGrpWeb.FieldByName('mdpcodigo').AsString);
  vlMdp.Open;
  atualizaregistro(vlMdpWeb, vlMdp);

  vlGrp := TUniQuery.Create(Self);
  vlGrp.Connection := zcone;
  vlGrp.SQL.Text := 'SELECT grmcodigo,  mdpcodigo, grmidentificacao, grmordem ';
  vlGrp.SQL.add('FROM grm where grmcodigo=' + vlBtmWeb.FieldByName('grmcodigo').AsString);
  vlGrp.Open;
  atualizaregistro(vlGrpWeb, vlGrp);

  vlBpl := TUniQuery.Create(Self);
  vlBpl.Connection := zcone;
  vlBpl.SQL.Text := 'SELECT bplcodigo, bplidentificacao, bplnomearq, bplfranome  ';
  vlBpl.SQL.add('FROM bpl where bplcodigo=' + vlBtmWeb.FieldByName('bplcodigo').AsString);
  vlBpl.Open;
  atualizaregistro(vlBplWeb, vlBpl);

  vlBtm := TUniQuery.Create(Self);
  vlBtm.Connection := zcone;
  vlBtm.SQL.Text := 'SELECT btmcodigo, bplcodigo, btmidentificacao, btmdica,';
  vlBtm.SQL.add('btmimagem, btmformaabe, btmtipobotao, grmcodigo, btmordem, btmatividade,btmajuda ');
  vlBtm.SQL.add('FROM btm where btmcodigo=' + vCodigo);
  vlBtm.Open;
  atualizaregistro(vlBtmWeb, vlBtm);

end;

procedure Tfimpbtm.ativarTimer(Sender: TObject);
begin
  inherited;
  bfechar.Visible := False;
  ativar.Enabled := False;
  if ConectaBancoRemoto then
  begin

    mdp.Close;
    mdp.Connection := ConexaoWeb;
    mdp.Open;

    grm.Close;
    grm.Connection := ConexaoWeb;

    btm.Close;
    btm.Connection := ConexaoWeb;

    MontaArvore;

  end
  else
  begin
    bfechar.Visible := True;
  end;
end;

procedure Tfimpbtm.atualizaregistroact(vOri: TUniQuery; vDes: TUniQuery);
var
  i: Integer;
begin

  try
    while not vOri.Eof do
    begin
      if vDes.Locate(vOri.Fields[3].FieldName + ';' + vOri.Fields[4].FieldName, VarArrayOf([vOri.Fields[3].AsString, vOri.Fields[4].AsString]), []) then
        vDes.Edit
      else
        vDes.Append;

      for i := 0 to vDes.Fields.Count - 1 do
        vDes.FieldByName(vDes.Fields[i].FieldName).AsString := vOri.FieldByName(vDes.Fields[i].FieldName).AsString;

      vDes.Post;

      vOri.Next;
    end;
  except
    on e: Exception do
      ShowMessage(e.Message);
  end;
end;

procedure Tfimpbtm.atualizaregistro(vOri: TUniQuery; vDes: TUniQuery);
var
  i: Integer;
begin

  try
    while not vOri.Eof do
    begin
      if vDes.Locate(vOri.Fields[0].FieldName, vOri.Fields[0].AsInteger, []) then
        vDes.Edit
      else
        vDes.Append;

      for i := 0 to vDes.Fields.Count - 1 do
        vDes.FieldByName(vDes.Fields[i].FieldName).AsString := vOri.FieldByName(vDes.Fields[i].FieldName).AsString;

      vDes.Post;

      vOri.Next;
    end;
  except
    on e: Exception do
      ShowMessage(e.Message);
  end;
end;

procedure Tfimpbtm.bconfirmaClick(Sender: TObject);
var
  Contador: Integer;
  vlCodigo: string;
  vlBplWeb: TUniQuery;
  vlqtdLocal: Integer;
  vlqtdweb: Integer;

  iValue, iCode: Integer;
begin
  if LiberaAcesso then
  begin

    mostra.Max := ArvoreMenu.Items.Count;
    Application.ProcessMessages;
    ProcessaTabelasBases;

    for Contador := 0 to ArvoreMenu.Items.Count - 1 do
    begin
      mostra.Position := mostra.Position + 1;
      // KeepUIGoing(Contador);
      if ArvoreMenu.Items[Contador].ImageIndex = 1 then
        vlCodigo := copy(ArvoreMenu.Items[Contador].Text, 1, 4);
      { try }

      val(vlCodigo, iValue, iCode);
      if iCode = 0 then
      begin
        vlCodigo := inttostr(strtoint(vlCodigo));
        ImportaItem(vlCodigo);
      end;

      { except

        end; }
    end;
  end;
  { inherited; }

    btmlocal.Close;
  btmlocal.Connection := zcone;
  btmlocal.Open;

  btmremota.Close;
  btmremota.Connection := ConexaoWeb;
  btmremota.Open;

  while not btmlocal.Eof do
  begin
    if btmremota.Locate('btmcodigo', btmlocal.FieldByName('btmcodigo').AsInteger, []) then
      btmlocal.Next
    else
      btmlocal.Delete;
  end;

  bpllocal.Close;
  bpllocal.Connection := zcone;
  bpllocal.Open;

  bplremota.Close;
  bplremota.Connection := ConexaoWeb;
  bplremota.Open;

  while not bpllocal.Eof do
  begin
    if bplremota.Locate('bplcodigo', bpllocal.FieldByName('bplcodigo').AsInteger, []) then
      bpllocal.Next
    else
      bpllocal.Delete;
  end;

  consulta.Close;
  consulta.SQL.Text := 'delete from btm where bplcodigo not in (select bplcodigo from bpl)';
  consulta.ExecSQL;

  consulta.Close;
  consulta.SQL.Text := 'delete from grm where grmcodigo not in (select grmcodigo from btm)';
  consulta.ExecSQL;


  Application.MessageBox(PChar('Importação realizada com sucesso!!'), 'Informação', MB_ICONINFORMATION + MB_OK);
  Close;
end;

procedure Tfimpbtm.bfecharClick(Sender: TObject);
begin
  { inherited; }
  ativar.Enabled := True;

end;

procedure Tfimpbtm.btMarcarTodosClick(Sender: TObject);
var
  Contador: Integer;
begin
  inherited;
  ArvoreMenu.Items.BeginUpdate;
  btDesmarcarTodos.Click;

  for Contador := 0 to ArvoreMenu.Items.Count - 1 do
  begin
    if ArvoreMenu.Items[Contador].Level = 2 then
    begin
      ArvoreMenu.Items[Contador].Selected := True;
      TreeMenuItem(True);
    end;
  end;
  ArvoreMenu.Items.EndUpdate;
  Self.SetFocus;

end;

procedure Tfimpbtm.btDesmarcarTodosClick(Sender: TObject);
var
  Contador: Integer;
begin
  inherited;
  ArvoreMenu.Items.BeginUpdate;

  for Contador := 0 to ArvoreMenu.Items.Count - 1 do
  begin
    if ArvoreMenu.Items[Contador].Level = 1 then
    begin
      ArvoreMenu.Items[Contador].Selected := True;
      TreeMenuItem(False);
    end;
  end;
  ArvoreMenu.Items.EndUpdate;
  Self.SetFocus;

end;

function Tfimpbtm.LiberaAcesso: Boolean;
var
  vlflogin: Tflogin;
begin
  try
    vlflogin := Tflogin.Create(Self);
    vlflogin.clb.Connection := ConexaoWeb;
    if vlflogin.ShowModal = mrok then
    begin
      vpClbcodigo := vlflogin.vpClbcodigo;
      result := True;
    end
    else
    begin
      vpClbcodigo := '';
      result := False;
    end;
  finally
    FreeAndNil(vlflogin);
  end;
end;

function Tfimpbtm.ConectaBancoRemoto: Boolean;
begin


  result := True;
  ConexaoWeb := TUniConnection.Create(Self);
  ConexaoWeb.Password := 'xda973';
  ConexaoWeb.Server := 'cloud.miziosistemas.com.br';
  ConexaoWeb.Port := 8306;
  ConexaoWeb.Username := 'root';
  ConexaoWeb.Database := 'publica_gourmet';
  ConexaoWeb.ProviderName := 'mySQL';
  result := Conectar;

end;

procedure Tfimpbtm.FormShow(Sender: TObject);
begin
  Self.IdModulo := vPlIdMd;
  inherited;
  ativar.Enabled := True;
end;

procedure Tfimpbtm.MontaArvore;
var
  vlNodeMd: TTreeNode;
  vlNodeGp: TTreeNode;

  vlModulo: string;
  vlGrupo: string;
  vlBotao: string;
  m, g: Integer;

  vlBplWeb: TUniQuery;
begin

  vlBplWeb := TUniQuery.Create(Self);
  vlBplWeb.Connection := ConexaoWeb;
  vlBplWeb.SQL.Text := 'SELECT bplcodigo from bpl  ';
  vlBplWeb.Open;

  abpl.Close;
  abpl.SQL.Text := 'SELECT bplcodigo FROM bpl';
  abpl.Open;

  abpl.First;
  while not abpl.Eof do
  begin
    if not vlBplWeb.Locate('bplcodigo', abpl.FieldByName('bplcodigo').AsInteger, []) then
    begin

      acrm.Close;
      acrm.SQL.Text := 'delete from crm where bplcodigo=' + abpl.FieldByName('bplcodigo').AsString;
      acrm.ExecSQL;

      amre.Close;
      amre.SQL.Text := 'delete from mre where bplcodigo=' + abpl.FieldByName('bplcodigo').AsString;
      amre.ExecSQL;

      abpl.Delete;
    end
    else
    begin
      abpl.Next;
    end;
  end;

  abtm.Close;
  abtm.SQL.Text := 'delete from btm where bplcodigo not in (select bplcodigo from bpl)';
  abtm.ExecSQL;

  agrm.Close;
  agrm.SQL.Text := 'delete from grm where grmcodigo not in (select grmcodigo from btm)';
  agrm.ExecSQL;

  mdp.First;
  m := 0;
  while not mdp.Eof do
  begin
    vlModulo := mdpmdpidentificacao.AsString;
    vlNodeMd := ArvoreMenu.Items.AddChild(nil, vlModulo);

    grm.Close;
    grm.Params[0].AsInteger := mdpmdpcodigo.AsInteger;
    grm.Open;
    g := 0;
    grm.First;
    while not grm.Eof do
    begin

      vlGrupo := grmgrmidentificacao.AsString;
      vlNodeGp := ArvoreMenu.Items.AddChild(vlNodeMd, vlGrupo);

      btm.Close;
      btm.Params[0].AsInteger := grmgrmcodigo.AsInteger;
      // btm.Params[1].AsInteger := cfgatvcodigo.AsInteger;
      btm.Open;

      btm.First;
      while not btm.Eof do
      begin
        vlBotao := formatfloat('0000', btmbtmcodigo.AsInteger) + ' ' + btmbtmidentificacao.AsString;
        ArvoreMenu.Items.AddChild(vlNodeGp, vlBotao);
        btm.Next;
      end;
      grm.Next;
      g := g + 1;
    end;
    mdp.Next;
    m := m + 1;
  end;
  ArvoreMenu.FullExpand;
  FChangingTree := False;
end;

function Tfimpbtm.Conectar: Boolean;
var
  i: Integer;
  vlHost: string;
begin
  try
    ConexaoWeb.Connect;
    bconfirma.Enabled := True;
    result := True;
  except
    i := 0;
    for i := 0 to 3 do
    begin
      if InputQuery('Conexão:', 'Digite o host de conexao:', vlHost) then
      begin
        ConexaoWeb.Server := vlHost;
        ConexaoWeb.Connect;
        if ConexaoWeb.Connected then
        begin
          result := True;
          bconfirma.Enabled := True;
          exit;
        end;
      end;
    end;
    if ConexaoWeb.Connected = False then
    begin
      result := False;
    end;
  end;
end;

procedure Tfimpbtm.CheckChild(Node: TTreeNode);
var
  child: TTreeNode;
begin
  ArvoreMenu.Selected.ImageIndex := 1;
  Node.ImageIndex := 1;
  Node.SelectedIndex := 1;
  child := Node.GetFirstChild;
  repeat
    if child.HasChildren then
      CheckChild(child)
    else
    begin
      ArvoreMenu.Selected.ImageIndex := 1;
      child.ImageIndex := 1;
      child.SelectedIndex := 1;
    end;
    child := Node.GetNextChild(child);
  until child = nil;
end;

procedure Tfimpbtm.UnCheckChild(Node: TTreeNode);
var
  child: TTreeNode;
begin
  ArvoreMenu.Selected.ImageIndex := 0;
  Node.ImageIndex := 0;
  Node.SelectedIndex := 0;
  child := Node.GetFirstChild;
  repeat
    if child.HasChildren then
      UnCheckChild(child)
    else
    begin
      ArvoreMenu.Selected.ImageIndex := 0;
      child.ImageIndex := 0;
      child.SelectedIndex := 0;
    end;
    child := Node.GetNextChild(child);
  until child = nil;
end;

procedure Tfimpbtm.TreeMenuItem(Marca: Boolean);
var
  AbsIdx: Integer;
begin
  if Marca then

    if ArvoreMenu.Selected.ImageIndex < 2 then
    begin
      if ArvoreMenu.Selected.ImageIndex = 0 then // marcar
      begin
        AbsIdx := ArvoreMenu.Selected.AbsoluteIndex;
        while AbsIdx > -1 do
        begin
          ArvoreMenu.Selected.ImageIndex := 1;
          ArvoreMenu.Items.Item[AbsIdx].ImageIndex := 1;
          ArvoreMenu.Items.Item[AbsIdx].SelectedIndex := 1;
          if ArvoreMenu.Items.Item[AbsIdx].Parent <> nil then
          begin
            AbsIdx := ArvoreMenu.Items.Item[AbsIdx].Parent.AbsoluteIndex;
            if ArvoreMenu.Selected.ImageIndex = 2 then
              AbsIdx := -1;
          end
          else
            AbsIdx := -1;
        end;
        if ArvoreMenu.Selected.HasChildren then
          CheckChild(ArvoreMenu.Selected);
      end
      else if ArvoreMenu.Selected.HasChildren then
        UnCheckChild(ArvoreMenu.Selected)
      else
      begin
        ArvoreMenu.Selected.ImageIndex := 0;
        ArvoreMenu.Selected.ImageIndex := 0;
        ArvoreMenu.Selected.SelectedIndex := 0;
      end; // desmarcar
      ArvoreMenu.Repaint;
    end;
end;

end.
