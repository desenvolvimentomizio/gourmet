unit ufexpbtm;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, ufrmbase, System.Actions, Vcl.ActnList,
  Data.DB, MemDS, DBAccess, Uni, Vcl.ComCtrls, Vcl.StdCtrls, Vcl.Buttons,
  Vcl.ExtCtrls, Vcl.ImgList, PngImageList, System.ImageList;

type
  Tfexpbtm = class(Tfrmbase)
    registroprjcodigo: TIntegerField;
    registroprjidentificacao: TStringField;
    consultaweb: TUniQuery;
    cbProjetos: TCheckBox;
    cbModulos: TCheckBox;
    cbGrupos: TCheckBox;
    cbBotoes: TCheckBox;
    cbBpls: TCheckBox;
    cbCamposRel: TCheckBox;
    cbGRAcoes: TCheckBox;
    cbAcoes: TCheckBox;
    gbProcesso: TGroupBox;
    mostra: TProgressBar;
    procedure FormShow(Sender: TObject);
    procedure bconfirmaClick(Sender: TObject);
  private
    { Private declarations }
    vpClbcodigo: string;
    ConexaoWeb: TUniConnection;
    function ConectarOnline: boolean;
    procedure TransfereDados(vlSql: string);
    function LiberaAcesso: boolean;
    procedure EnviarMenus;
  public
    { Public declarations }
  end;

var
  fexpbtm: Tfexpbtm;

const
  vPlIdMd = '03.07.80.015-02';

implementation

uses
  uflogin;

{$R *.dfm}

procedure Tfexpbtm.FormShow(Sender: TObject);
begin
  self.IdModulo := vPlIdMd;
  inherited;
  ConexaoWeb := TUniConnection.Create(self);

  ConexaoWeb.LoginPrompt := false;
  ConexaoWeb.Username := 'root';
  ConexaoWeb.Database := 'publica_gourmet';
  ConexaoWeb.Server := 'cloud.miziosistemas.com.br';
  ConexaoWeb.ProviderName := 'mySQL';
  ConexaoWeb.Port := 8306;
  ConexaoWeb.Password := 'xda973';

  ConectarOnline;
end;

procedure Tfexpbtm.EnviarMenus;
var
  vlSql: string;
begin

  inherited;

  vlSql := 'SELECT prjcodigo, prjidentificacao FROM prj';
  gbProcesso.Caption := ' Projetos ';
  Application.ProcessMessages;
  TransfereDados(vlSql);
  cbProjetos.Checked := True;
  Application.ProcessMessages;

  vlSql := 'SELECT mdpcodigo, mdpidentificacao, mdpdescricao,  prjcodigo, mdpordem FROM mdp';
  gbProcesso.Caption := ' Módulos ';
  Application.ProcessMessages;
  TransfereDados(vlSql);
  cbModulos.Checked := True;
  Application.ProcessMessages;

  vlSql := 'SELECT grmcodigo, mdpcodigo, grmidentificacao, grmordem FROM grm';
  gbProcesso.Caption := ' Grupos de Menus ';
  Application.ProcessMessages;
  TransfereDados(vlSql);
  cbGrupos.Checked := True;
  Application.ProcessMessages;

  vlSql := 'SELECT bplcodigo, bplidentificacao, bplnomearq, bplfranome FROM bpl';
  gbProcesso.Caption := ' BPLs do Sistema ';
  Application.ProcessMessages;
  TransfereDados(vlSql);
  cbBpls.Checked := True;
  Application.ProcessMessages;

  vlSql := 'SELECT mdlcodigo, mdlidentificacao, mdldescricao, mdlnome, mdlconfig, mdlsubgrupo FROM mdl';
  gbProcesso.Caption := ' Grupo de Acões ';
  Application.ProcessMessages;
  TransfereDados(vlSql);
  cbGRAcoes.Checked := True;
  Application.ProcessMessages;

  vlSql := 'SELECT  actcodigo, actidentificacao, mdlcodigo, actformulario, actacao, actativa FROM act';
  gbProcesso.Caption := ' Ações ';
  Application.ProcessMessages;
  TransfereDados(vlSql);
  cbAcoes.Checked := True;
  Application.ProcessMessages;

  vlSql := 'SELECT btmcodigo, bplcodigo, btmidentificacao, btmdica, btmimagem, btmformaabe, btmtipobotao, grmcodigo, btmordem,btmatividade  FROM btm';
  gbProcesso.Caption := ' Itens de Menu ';
  Application.ProcessMessages;
  TransfereDados(vlSql);
  cbBotoes.Checked := True;
  Application.ProcessMessages;

  vlSql := 'SELECT  crm.crmchave, crm.bplcodigo, crm.crmnome, crm.crmidentificacao, crm.tcacodigo FROM crm;';
  gbProcesso.Caption := ' Campos para Relatório ';
  Application.ProcessMessages;
  TransfereDados(vlSql);
  cbCamposRel.Checked := True;
  Application.ProcessMessages;
end;

procedure Tfexpbtm.TransfereDados(vlSql: string);

  procedure KeepUIGoing(SourceListIndex: Integer);
  begin
    if SourceListIndex mod 100 = 0 then
    begin
      Application.ProcessMessages;
      // so it doesn't freeze the application in long loops.  Not 100% sure where this should be placed, if at all.
      Sleep(1);
    end;
  end;

var
  i: Integer;

begin

  consulta.close;
  consulta.Connection := zcone;
  consulta.Filter := '';
  consulta.Filtered := false;
  consulta.Connection := zcone;
  consulta.sql.Text := vlSql;
  consulta.Open;

  consultaweb.close;
  consultaweb.Filter := '';
  consultaweb.Filtered := false;
  consultaweb.Connection := ConexaoWeb;
  consultaweb.sql.Text := vlSql;
  consultaweb.Open;
  consulta.First;
  mostra.Position := 0;
  mostra.Max := consulta.RecordCount;

  ConexaoWeb.StartTransaction;
  try
    while not consulta.Eof do
    begin
      mostra.Position := mostra.Position + 1;
      KeepUIGoing(consulta.RecNo);

      try
        if consultaweb.Locate(consulta.Fields[0].FieldName, consulta.Fields[0].AsString, []) then
        begin
          consultaweb.Edit;
        end
        else
        begin
          consultaweb.Append;
        end;

        for i := 0 to consultaweb.Fields.Count - 1 do
        begin
          if consultaweb.Fields[i].DataType = ftBlob then
            consultaweb.Fields[i].asvariant := consulta.Fields[i].asvariant
          else
            consultaweb.Fields[i].AsString := consulta.Fields[i].AsString;

        end;

        consultaweb.Post;
      except
        consultaweb.Cancel;
      end;

      consulta.Next;
    end;

    ConexaoWeb.Commit;

  except
    if ConexaoWeb.TransactionCount > 0 then
      ConexaoWeb.Rollback;
  end;

  consulta.close;
  consultaweb.close;
end;

function Tfexpbtm.LiberaAcesso: boolean;
var
  vlflogin: Tflogin;
begin
  try
    vlflogin := Tflogin.Create(self);
    vlflogin.clb.Connection := ConexaoWeb;
    if vlflogin.ShowModal = mrok then
    begin
      vpClbcodigo := vlflogin.vpClbcodigo;
      result := True;
    end
    else
    begin
      vpClbcodigo := '';
      result := false;
    end;
  finally
    FreeAndNil(vlflogin);
  end;
end;

procedure Tfexpbtm.bconfirmaClick(Sender: TObject);
begin
  if LiberaAcesso then
  begin
    EnviarMenus;
    Application.MessageBox(PChar('Exportação realizada com sucesso!!'), 'Informação', MB_ICONINFORMATION + MB_OK);
  end;

  inherited;

end;

function Tfexpbtm.ConectarOnline: boolean;
var
  i: Integer;
  vlHost: string;
begin
  try

    ConexaoWeb.Connect;
    bconfirma.Enabled := True;
  except
    i := 0;

    for i := 0 to 3 do
    begin

      if InputQuery('Conexão:', 'Digite o host de conexao:', vlHost) then
      begin

        ConexaoWeb.Server := vlHost;
        ConexaoWeb.Connect;
        if ConexaoWeb.Connected then
        begin
          bconfirma.Enabled := True;

          exit;
        end;

      end;
    end;
    bconfirma.Enabled := True;

  end;

end;

end.
