unit GourmetAIQ.Controller.CZN;

interface

uses
  REST.Types,
  System.Json,
  REST.Json,
  REST.Client,
  DataSetConverter4D,
  DataSetConverter4D.Impl,
  GourmetServer.Model.Entity.aiq.aiqcfg,
  GourmetAIQ.DataModulo.CZN,
  GourmetAIQ.Service.Funcoes,
  GourmetAIQ.DataModulo.Connection;

function BuscacznChaveAberta: Integer;

implementation

uses
  System.SysUtils;

function BuscacznChaveAberta: Integer;
var
  vDMczn: TDMczn;
  vlCznChave: Integer;
  vlJSONData: TJsonvalue;
  vlItensczn: TJsonarray;

  texto: string;
begin

  try
    vlJSONData := Nil;
    vlItensczn := NIl;

    vDMczn := TDMczn.Create(nil);

    vDMczn.RESTRequestGourmet.Method := TRESTRequestMethod.rmGET;
    vDMczn.RESTResponseGourmet.ContentType := 'application/json; charset=utf-8';
    try
      vDMczn.RESTRequestGourmet.Execute;
    except
      sleep(2000);
      vDMczn.RESTRequestGourmet.Execute;
    end;

    if vDMczn.RESTResponseGourmet.StatusCode = 200 then
    begin

      vlJSONData := TJSONObject.ParseJSONValue(vDMczn.RESTResponseGourmet.Content, False);
      texto := vlJSONData.ToString;

      vlItensczn := TJsonarray.Create;
      vlItensczn := vlJSONData.getvalue<TJsonarray>;

      vlCznChave := vlItensczn[0].getvalue('cznchave','').ToInteger;

    {  vlCznChave := vDMczn.RESTResponseGourmet.Content;
      vlCznChave := copy(vlCznChave, 2, length(vlCznChave) - 1);
      vlCznChave := copy(vlCznChave, 1, length(vlCznChave) - 1);
     }
    end;
    if vlCznChave <> 0 then
    begin
      result := vlCznChave;
    end
    else
    begin
      result := 0;
    end;

  finally
    vlJSONData.free;
    vlItensczn.free;
    vDMczn.free;
  end;

end;

end.
