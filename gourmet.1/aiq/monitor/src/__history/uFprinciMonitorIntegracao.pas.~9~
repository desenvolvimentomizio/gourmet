unit uFprinciMonitorIntegracao;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, DASQLMonitor, inifiles,registry,
  UniSQLMonitor, UniProvider, MySQLUniProvider, Data.DB, DBAccess, Uni, MemDS;

type
  TfMonitorIntegracao = class(TForm)
    tmInicializar: TTimer;
    conexao: TUniConnection;
    MySQLUniProvider: TMySQLUniProvider;
    UniSQLMonitor1: TUniSQLMonitor;
    cfg: TUniQuery;
    cfgcfgcodigo: TIntegerField;
    cfgcfgmensagempdv: TStringField;
    cfgcfgtrmimpfis1: TIntegerField;
    cfgcfgtrmimpfis2: TIntegerField;
    cfgcfgtrmtef1: TIntegerField;
    cfgcfgtrmtef2: TIntegerField;
    cfgcfgimpnfe1: TIntegerField;
    cfgcfgimpnfe2: TIntegerField;
    cfgcfgimpnfc1: TIntegerField;
    cfgcfgimpnfc2: TIntegerField;
    cfgcfgimpnfc3: TIntegerField;
    cfgcfgservarqnfes: TStringField;
    cfgcfgnumecertif: TStringField;
    cfgcfgetdempresa: TIntegerField;
    cfgcfgprouso: TIntegerField;
    cfgcfgtoeusofora: TIntegerField;
    cfgcfgtoeusointe: TIntegerField;
    cfgcfgtoecuffora: TIntegerField;
    cfgcfgtoecufinte: TIntegerField;
    cfgcfgviasnfe: TIntegerField;
    cfgcfgnumeronfe: TIntegerField;
    cfgcfgserienfe: TStringField;
    cfgcfgnumeronfce: TIntegerField;
    cfgcfgserienfce: TStringField;
    cfgcfgobs1: TIntegerField;
    cfgcfgobs2: TIntegerField;
    cfgcfgobs3: TIntegerField;
    cfgcfgobs4: TIntegerField;
    cfgcfgdescrinfe: TIntegerField;
    cfgcfgemailnfe: TStringField;
    cfgcfgemailservidornfe: TStringField;
    cfgcfgemailsenhanfe: TStringField;
    cfgcfgmailportnfe: TStringField;
    cfgcfgemailusatls: TIntegerField;
    cfgcrtcodigo: TIntegerField;
    cfgcfgcstterceiros: TStringField;
    cfgetdapelido: TStringField;
    cfgetdidentificacao: TStringField;
    cfgetddoc1: TStringField;
    cfgufscodigo: TStringField;
    cfgcddcodigo: TStringField;
    cfgedrinscest: TStringField;
    cfgedrrua: TStringField;
    cfgedrnumero: TStringField;
    cfgedrbairro: TStringField;
    cfgedrcep: TStringField;
    cfgcddnome: TStringField;
    cfgufssigla: TStringField;
    cfgetftelefone: TStringField;
    cfgctdboxedominio: TStringField;
    cfgcfgusanfc: TIntegerField;
    cfgcfgmodonfe: TIntegerField;
    cfgcfgnumecertifa1: TStringField;
    cfgcfgsenhacertificadoa1: TStringField;
    cfgcfgidtokennfce: TStringField;
    cfgcfgtoken1nfce: TStringField;
    cfgcfgmnfegerenciador: TStringField;
    cfgcfgcertificadoa1: TBlobField;
    consulta: TUniQuery;
    pltopo: TPanel;
    plCznchave: TPanel;
    plRelogio: TPanel;
    tmRelogio: TTimer;
    orcs: TUniQuery;
    orcsorcchave: TIntegerField;
    orcspdgnumero: TStringField;
    orcspdsidentificacao: TStringField;
    orcstempo: TStringField;
    orcsedrendereco: TStringField;
    orcsedrbairro: TStringField;
    orcsorctotal: TFloatField;
    orcsetdidentificacao: TStringField;
    orcsmitidentificacao: TStringField;
    orcsoriidentificacao: TStringField;
    orcsorcnumeropedido: TStringField;
    orcsorchoraabert: TTimeField;
    orcsstocodigo: TIntegerField;
    orcsmarca: TIntegerField;
    orcsmoccodigo: TIntegerField;
    orcsorcliberadoentrega: TDateTimeField;
    orcsorcdataabert: TDateField;
    orcsorcpedidointegracao: TStringField;
    orcsorcobs: TStringField;
    orcsoricodigo: TIntegerField;
    procedure tmInicializarTimer(Sender: TObject);
    procedure tmRelogioTimer(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure FormShow(Sender: TObject);

  private

    vpNomeBanco :String;
    vpIpServidor :String;
    vpUsuario :String;
    vpSenha :String;
    vpPorta :String;
    vpFilial :String;
    vpCznChave: String;

    vpPastaPrincipal:String;

    procedure CarregaDadosIni;
    procedure Inicializar;
    function BancoConectado: Boolean;
    procedure AjustaSitucaoCozinha;
    procedure AjustaStatusIntegracao;
    { Private declarations }


  public
    { Public declarations }
  end;

var
  fMonitorIntegracao: TfMonitorIntegracao;

implementation

{$R *.dfm}

Procedure RunOnStartup(sProgTitle, sCmdLine: String; bRunOnce: Boolean; aChave: String);
Var
  sKey: String;
  Reg: TRegIniFile;
Begin
  Try

    sKey := extractfilename(sCmdLine) + '.' + aChave;
    sKey := StringReplace(sKey, '.', '_', [rfReplaceAll, rfIgnoreCase]);

    Reg := TRegIniFile.Create('');
    Reg.RootKey := HKEY_LOCAL_MACHINE;
    Reg.WriteString('Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Run', sKey + #0 + sProgTitle, sCmdLine);

    Reg.Free;
  Except
    Reg.Free;
  End;
End;

Function SoNumeros(Const Texto: String): String;

//
// Remove caracteres de uma string deixando apenas numeros
//
Var
  i: Integer;
  S: String;
Begin
  S := '';
  For i := 1 To Length(Texto) Do
  Begin
    If (Texto[i] In ['0' .. '9']) Then
    Begin
      S := S + Copy(Texto, i, 1);
    End;
  End;
  Result := S;
End;


procedure TfMonitorIntegracao.CarregaDadosIni;
var
  vlArquIni: TInifile;

begin



  try
    vlArquIni := TInifile.Create(extractfilepath(application.ExeName) +  'GourmetERP.ini');

    With vlArquIni Do
    Begin
      vpNomeBanco := ReadString('posi', 'nomebanco', 'pegasus');
      vpIpServidor := ReadString('posi', 'servidor', '127.0.0.1');
      vpUsuario := ReadString('posi', 'usuario', 'root');
      vpSenha := ReadString('posi', 'senha', 'xda973');
      vpPorta := ReadString('posi', 'portabanco', '3306');
      vpFilial :='1';

    End;


  finally
    vlArquIni.Free;
  end;
end;


procedure TfMonitorIntegracao.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
  tmRelogio.Enabled:=false;

end;

procedure TfMonitorIntegracao.FormShow(Sender: TObject);
begin
  tmInicializar.Enabled:=True;
end;

Function TfMonitorIntegracao.BancoConectado: Boolean;
Var
  iTentativas: Integer;
Begin

  try
    Result := false;

    If conexao.Connected Then
    begin
      Result := True;
      exit;
    end;

    for iTentativas := 0 to 30 Do
    Begin
      Try

        conexao.Connected := false;
        conexao.Database := vpNomeBanco;
        conexao.Username := 'root';
        conexao.Password := vpSenha;
        conexao.port := vpPorta.ToInteger;
        conexao.Server := vpIpServidor;
        conexao.Connected := True;

        If conexao.Connected Then
        Begin
          Result := True;
          Break;
        End;

      Except

        sleep(2000);

      End;
    End;
  except
    conexao.Connected := false;
  end;
End;

procedure TfMonitorIntegracao.AjustaSitucaoCozinha;
begin
  consulta.Close;
  consulta.SQL.Text := 'select cznchave from czn where cznfechamento IS null order by cznchave limit 1';
  consulta.Open;
  if consulta.IsEmpty then
  begin
    vpCznChave := '000000';
    plCznchave.Caption := 'Cozinha: FECHADA';
  end
  else
  begin
    vpCznChave := consulta.Fields[0].AsString;
    plCznchave.Caption := 'Cozinha: ' + formatfloat('000000', vpCznChave.ToInteger);
  end;
  consulta.close;
end;


procedure TfMonitorIntegracao.AjustaStatusIntegracao;
var
  vlOrcStatusIntegracao:String;
  vlOriCodigo:Integer;
  vlPastaPedido:String;
  vlNomeArquivo:String;
begin

  vlPastaPedido:= Extractfilepath(application.ExeName)+'\pedidos\'+formatfloat('000000',vpCznChave.ToInteger) ;

  orcs.Close;
  orcs.Open;

  while not orcs.Eof do
  begin
     vlNomeArquivo:='ped'+FormatFloat('0000',orcsorcnumeropedido.AsInteger) +'.bmp';
     if fileexists(vlPastaPedido+vlNomeArquivo) then
     begin


     end;
    orcs.Next;
  end;

end;


procedure TfMonitorIntegracao.Inicializar;
var
  I: Integer;
begin

  if not BancoConectado then
  begin
    SHOWMESSAGE('NÃO CONECOTU NO BANCO LOCAL');
    application.Terminate;
  end;

  for I := 0 to self.ComponentCount - 1 do
  begin
    if self.Components[I] is TUniQuery then
      (self.Components[I] as TUniQuery).Connection := self.conexao;
    if self.Components[I] is tunitable then
      (self.Components[I] as tunitable).Connection := self.conexao;
  end;
  cfg.ParamByName('flacodigo').AsString := vpFilial;
  cfg.Open;

  vpPastaPrincipal := extractfilepath(application.ExeName);



end;



procedure TfMonitorIntegracao.tmInicializarTimer(Sender: TObject);
var
  vlAplicativo: string;
  vlChaveAplicativo: string;
begin

  try

    tmInicializar.Enabled := false;

    CarregaDadosIni;

    Inicializar;

    if BancoConectado then
    begin

      cfg.Close;
      cfg.Connection:=conexao;
      cfg.ParamByName('flacodigo').AsString := '1';
      cfg.Open;

      vlAplicativo := StringReplace(application.ExeName, 'new.', '', []);
      vlChaveAplicativo := SoNumeros(cfgetddoc1.AsString);

      RunOnStartup('Mizio - Monitor Integracao', vlAplicativo, false, vlChaveAplicativo);

      CreateMutex(nil, false, PChar('MizioMonitorIntegracao.OnlyOne.' + extractfilename(application.ExeName) + SoNumeros(cfgetddoc1.AsString)));

      if GetLastError = ERROR_ALREADY_EXISTS then
      begin
        Halt(0); // cancela execução
      end;

      RunOnStartup('Mizio - Monitor Integração', StringReplace(application.ExeName, 'new.', '', []), false, SoNumeros(cfgetddoc1.AsString));

      self.WindowState := wsNormal;

      tmRelogio.Enabled:=true;


    end;
  finally

  end;


end;

procedure TfMonitorIntegracao.tmRelogioTimer(Sender: TObject);
begin

  try

    tmRelogio.Enabled:=False;
    plRelogio.Caption:=timetostr(now());
    AjustaSitucaoCozinha;

  finally
    tmRelogio.Enabled:=True;
  end;

end;

end.
