unit ufnotasfiscais;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uni,uPegaBase;

type
  Tfnotasfiscais = class(TForm)
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }

    vpPastaPrincipal :String;
    vpSubPastaDoc :String;

    Fzcone: TUniConnection;
    procedure Setzcone(const Value: TUniConnection);
  public
    { Public declarations }
    Acesso: TAcesso;
  published
    property zcone: TUniConnection read Fzcone write Setzcone;

  end;

type
  // Para concentrar os metadados do cartão (pode vir do TEF, da venda, etc.)
  TCartaoInfo = record
    TpIntegra: Integer;         // 1 = TEF Integrado, 2 = POS (não integrado)
    NSU: string;                // se você quiser salvar/usar
    Autorizacao: string;        // cAut
    CNPJCredenciadora: string;  // CNPJ da credenciadora (somente dígitos)
    BandeiraCod: string;        // '01' Visa, '02' Mastercard, ...
  end;



var
  fnotasfiscais: Tfnotasfiscais;

implementation

uses
  System.AnsiStrings;

{$R *.dfm}


function OnlyDigits(const S: string): string;
var
  I: Integer;
begin
  Result := '';
  for I := 1 to Length(S) do
    if CharInSet(S[I], ['0'..'9']) then
      Result := Result + S[I];
end;




function modulonfce(AOwner: TComponent; aConexao: TUniConnection; aMesChave: string; aFuncao: string; aAcesso: TAcesso;
  vemail: string): Boolean;
var
  vDia: string;
  vHora: string;
  i: Integer;
  vlHamdle: HWND;
begin
  try

    fnotasfiscais := Tfnotasfiscais.Create(AOwner);
    fnotasfiscais.zcone := aConexao;
    fnotasfiscais.Acesso := aAcesso;

    For i := 0 To fnotasfiscais.ComponentCount - 1 Do
    begin
      If fnotasfiscais.Components[i] Is TUniQuery Then
        (fnotasfiscais.Components[i] As TUniQuery).Connection := aConexao;
    end;

    (* Ajusta pasta Principal de salvamento dos arquivos. *)
    fnotasfiscais.vpPastaPrincipal := ExtractFilePath(application.ExeName);
    fnotasfiscais.vpSubPastaDoc := 'arqnfces';


  { fnfce.vpTrmCodigo := Acesso.Terminal.ToString;
    fnfce.vpClbCodigo := Acesso.Usuario.ToString;
    fnfce.vpFlacodigo := Acesso.Filial.ToString; }

{	 GerarNFCe
	 ReimprimirNFCe
   EnviaremailNFCe
   ConsultarNFCe
   InutilizarNumeracaoNFCe
   CancelarNFCe
   Status do SEFAZ}



    if LowerCase(aFuncao)='emitenfce' then
    begin

    end
    else if LowerCase(aFuncao)='imprimenfce' then
    begin

    end
    else if LowerCase(aFuncao)='cancelanfce' then
    begin

    end
    else if LowerCase(aFuncao)='ajustasituacaonfce' then
    begin

    end
    else if LowerCase(aFuncao)='inutilizarnumerosnfce' then
    begin

    end
    else if LowerCase(aFuncao)='visualizanfce' then
    begin

    end
    else if LowerCase(aFuncao)='emailnfce' then
    begin

    end;




  finally

    fnotasfiscais.Close;
    FreeAndNil(fnotasfiscais);
  end;

end;

exports modulonfce;


function StrToBandeira(const ACod: string): Integer;
begin
  // mapeamento padrão do layout 4.00:
  // 01=Visa, 02=Mastercard, 03=American Express, 04=Sorocred,
  // 05=Diners Club, 06=Elo, 07=Hipercard, 08=Aura, 09=Cabal,
  // 99=Outros
  if ACod = '' then
    Exit(0); // deixará sem tBand
  case StrToIntDef(ACod, 0) of
    1..9:   Result := StrToInt(ACod);
    99:     Result := 99;
  else
    Result := 99; // fallback "Outros"
  end;
end;

// ==== Refactor: helper de pagamento por cartão ====
procedure AddPagamentoCartao(const AValor: Double;
                             const AIsCredito: Boolean;
                             const AInfo: TCartaoInfo);
var
  vValor: Double;
  vBandeira: Integer;
begin
  if AValor <= 0 then
    Exit;

  vValor := AValor;

  // absorve diferença, se você usa essa regra nos cartões também
  if vlValorDiferenca <> 0 then
  begin
    vValor := vValor + vlValorDiferenca;
    vlValorDiferenca := 0;
  end;

  with pag.add do
  begin
    // tPag
    if AIsCredito then
      tPag := fpCartaoCredito
    else
      tPag := fpCartaoDebito;

    // valor do pagamento
    vPag := vValor;

    // ==== subgrupo do cartão ====
    // tpIntegra: 1 = TEF integrado; 2 = POS (não integrado)
    if (AInfo.TpIntegra = 1) or (AInfo.TpIntegra = 2) then
      card.tpIntegra := AInfo.TpIntegra;

    // CNPJ credenciadora
    if AInfo.CNPJCredenciadora <> '' then
      card.CNPJ := OnlyDigits(AInfo.CNPJCredenciadora);

    // Bandeira
    vBandeira := StrToBandeira(AInfo.BandeiraCod);
    if vBandeira > 0 then
      card.tBand := vBandeira;

    // Código de autorização
    if AInfo.Autorizacao <> '' then
      card.cAut := AInfo.Autorizacao;

    // Se você quiser guardar NSU em algum campo próprio seu,
    // faça aqui (não existe tag NSU no XML da NFC-e).
    // Ex.: algum campo auxiliar/log.
  end;
end;
// ==== fim helper cartões ====





procedure Tfnotasfiscais.FormShow(Sender: TObject);
begin
  Self.Width := 230;
  Self.Height := 230;

end;


procedure Tfnotasfiscais.Setzcone(const Value: TUniConnection);
begin
  Fzcone := Value;
end;

end.
