unit ufnotasfiscais;

interface

uses
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  Json,
  uni,
  pcnConversao,
  pcnConversaoNFe,
  uPegaBase,
  ufuncoes,
  Vcl.StdCtrls,
  Data.DB,
  MemDS,
  DBAccess;

type
  Tfnotasfiscais = class(TForm)
    info: TMemo;
    cfg: TUniQuery;
    cfgcfgcodigo: TIntegerField;
    cfgcfgservarqnfes: TStringField;
    cfgcfgnumecertif: TStringField;
    cfgcfgetdempresa: TIntegerField;
    cfgcfgviasnfe: TIntegerField;
    cfgcfgserienfe: TStringField;
    cfgcfgserienfce: TStringField;
    cfgcfgdescrinfe: TIntegerField;
    cfgcfgemailnfe: TStringField;
    cfgcfgemailservidornfe: TStringField;
    cfgcfgemailsenhanfe: TStringField;
    cfgcfgmailportnfe: TStringField;
    cfgcfgemailusatls: TIntegerField;
    cfgcrtcodigo: TIntegerField;
    cfgetdapelido: TStringField;
    cfgetdidentificacao: TStringField;
    cfgetddoc1: TStringField;
    cfgufscodigo: TStringField;
    cfgcddcodigo: TStringField;
    cfgedrinscest: TStringField;
    cfgedrrua: TStringField;
    cfgedrnumero: TStringField;
    cfgedrbairro: TStringField;
    cfgedrcep: TStringField;
    cfgcddnome: TStringField;
    cfgufssigla: TStringField;
    cfgetftelefone: TStringField;
    cfgcfgusanfc: TIntegerField;
    cfgcfgtoken1nfce: TStringField;
    cfgcfgnumecertifa1: TStringField;
    cfgcfgmodonfe: TIntegerField;
    cfgcfgsenhacertificadoa1: TStringField;
    cfgcfgidtokennfce: TStringField;
    cfgcfgviaassinar: TIntegerField;
    cfgcfgmensagempdv: TStringField;
    cfgcfgtoesubstforaestado: TIntegerField;
    cfgcfgtoesubstnoestado: TIntegerField;
    cfgcfgprevisualizarimpressao: TIntegerField;
    cfgcfgversao: TStringField;
    cfgcfgusacstnoproduto: TIntegerField;
    cfgcfgtoesubstanpnoestado: TIntegerField;
    cfgcfgtoesubstanpforaestado: TIntegerField;
    cfgcfgtoemesinte: TIntegerField;
    cfgcfgdefinetoeatendimento: TIntegerField;
    cfgcfgcestativo: TIntegerField;
    cfgcfgobs1: TIntegerField;
    cfgcfgproducaopropria: TIntegerField;
    cfgcfgtoeinteproducaopropria: TIntegerField;
    cfgcfgtoeforaproducaopropria: TIntegerField;
    cfgcfgtoeintesubsprodpropria: TIntegerField;
    cfgcfgtoeforasubsprodpropria: TIntegerField;
    cfgcfgtributacaoimendes: TIntegerField;
    cfgcfgcertificadoa1: TBlobField;
    cfgeteemail: TStringField;
    cfgctdboxedominio: TStringField;
    cfgcfgusapdv: TIntegerField;
    cfgcfgctacodigopix: TIntegerField;
    itm: TUniQuery;
    itmitmchave: TIntegerField;
    itmcfocfop: TStringField;
    itmprocodigo: TIntegerField;
    itmpronome: TStringField;
    itmpronomereduzido: TStringField;
    itmproncm: TStringField;
    itmitmdesccomple: TStringField;
    itmitmquantidade: TFloatField;
    itmunisimbolo: TStringField;
    itmitmvalor: TFloatField;
    itmitmdesconto: TFloatField;
    itmcstcodigo: TStringField;
    itmicmcodigo: TStringField;
    itmitmicm: TFloatField;
    itmitmbicm: TFloatField;
    itmitmaliqipi: TFloatField;
    itmitmbipi: TFloatField;
    itmitmipi: TFloatField;
    itmitmvlribpt: TFloatField;
    itmpunqtdtribtotal: TFloatField;
    itmunisimbolotrib: TStringField;
    itmitmtotal: TFloatField;
    itmitmcargatrib: TFloatField;
    itmitmcargatribest: TFloatField;
    itmcspcodigo: TStringField;
    itmcsfcodigo: TStringField;
    itmpunbarra: TStringField;
    itmpunbarrasistema: TIntegerField;
    itmcsicodigo: TStringField;
    itmtoecodigo: TIntegerField;
    itmtcecest: TStringField;
    itmtpocodigo: TIntegerField;
    itmproproducao: TIntegerField;
    itmitmpercreducaobaseicm: TFloatField;
    itmitmaliqpis: TFloatField;
    itmitmpis: TFloatField;
    itmitmbpis: TFloatField;
    itmitmaliqcofins: TFloatField;
    itmitmcofins: TFloatField;
    itmitmbcofins: TFloatField;
    itmitmfrete: TFloatField;
    itmitmoutras: TFloatField;
    itmpunidentificacao: TStringField;
    itmicmaliquota: TStringField;
    itmitmbicms: TFloatField;
    itmitmmva: TFloatField;
    itmitmicms: TFloatField;
    itmitmaliqicms: TStringField;
    itmpuncodigo: TIntegerField;
    itmitmaliqicm: TStringField;
    itmitmacrescimoav: TCurrencyField;
    mes: TUniQuery;
    mesmeschave: TIntegerField;
    mestoecodigo: TIntegerField;
    mesetdcodigo: TIntegerField;
    mesmestotal: TFloatField;
    mesrefcodigo: TIntegerField;
    mestfpcodigo: TIntegerField;
    mestdfcodigo: TStringField;
    mesmesnumero: TIntegerField;
    mesmesserie: TStringField;
    mesedritem: TIntegerField;
    mesmesdatanfe: TDateField;
    mesmescoocupom: TIntegerField;
    mesmesdatacupom: TDateField;
    mesmeschavenfe: TStringField;
    mesmesregistro: TDateField;
    mestemcodigo: TIntegerField;
    mesmesprotocolo: TStringField;
    mesclbidentificacao: TStringField;
    mesmesprodutos: TFloatField;
    mesmesobs: TStringField;
    mesmesemissao: TDateField;
    mesmeshoranfe: TTimeField;
    mesmescodigonota: TIntegerField;
    mesmesrefeicao: TIntegerField;
    mesmesoutras: TCurrencyField;
    mesmespis: TCurrencyField;
    mesmescofins: TCurrencyField;
    mesmesfrete: TFloatField;
    mesttocodigo: TIntegerField;
    mesmesinclusao: TDateTimeField;
    mesoricodigo: TIntegerField;
    mesmesretirabalcao: TIntegerField;
    mesmesdesconto: TCurrencyField;
    etd: TUniQuery;
    etdetddoc1: TStringField;
    etdedrcep: TStringField;
    etdedrrua: TStringField;
    etdedrnumero: TStringField;
    etdedrbairro: TStringField;
    etdcddcodigo: TStringField;
    etdcddnome: TStringField;
    etdufssigla: TStringField;
    etdetftelefone: TStringField;
    etdtpecodigo: TIntegerField;
    etdetdidentificacao: TStringField;
    etdedrinscest: TStringField;
    etdetdnfemodelos: TStringField;
    mic: TUniQuery;
    micmicchave: TIntegerField;
    micmeschave: TIntegerField;
    micidccodigo: TIntegerField;
    micidcnome: TStringField;
    micidcdoc: TStringField;
    oic: TUniQuery;
    oicoicchave: TIntegerField;
    oicorcchave: TIntegerField;
    oicidccodigo: TIntegerField;
    oicidcnome: TStringField;
    oicidcdoc: TStringField;
    ori: TUniQuery;
    orietdcodigo: TIntegerField;
    orietddoc1: TStringField;
    orietdapelido: TStringField;
    ctd: TUniQuery;
    ctdctdcnpj: TStringField;
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }

    vpPastaPrincipal :String;
    vpSubPastaDoc :String;

    Fzcone: TUniConnection;
    procedure Setzcone(const Value: TUniConnection);
    procedure MontarJSON_infRespTec(var jsonNFCe: TJSONObject);
    procedure MontarJSON_Ide(var jsonNFCe: TJSONObject);
    function MontarJSON_Emi: TJSONObject;


    function GeraNFCe(vMesChave: string): Boolean;
  public
    { Public declarations }
    Acesso: TAcesso;
  published
    property zcone: TUniConnection read Fzcone write Setzcone;

  end;

type
  // Para concentrar os metadados do cartão (pode vir do TEF, da venda, etc.)
  TCartaoInfo = record
    TpIntegra: Integer;         // 1 = TEF Integrado, 2 = POS (não integrado)
    NSU: string;                // se você quiser salvar/usar
    Autorizacao: string;        // cAut
    CNPJCredenciadora: string;  // CNPJ da credenciadora (somente dígitos)
    BandeiraCod: string;        // '01' Visa, '02' Mastercard, ...
  end;



var
  fnotasfiscais: Tfnotasfiscais;

implementation

uses
  System.AnsiStrings;

{$R *.dfm}


function OnlyDigits(const S: string): string;
var
  I: Integer;
begin
  Result := '';
  for I := 1 to Length(S) do
    if CharInSet(S[I], ['0'..'9']) then
      Result := Result + S[I];
end;




function modulonfce(AOwner: TComponent; aConexao: TUniConnection; aMesChave: string; aFuncao: string; aAcesso: TAcesso;
  vemail: string): Boolean;
var
  vDia: string;
  vHora: string;
  i: Integer;
  vlHamdle: HWND;
begin
  try

    fnotasfiscais := Tfnotasfiscais.Create(AOwner);
    fnotasfiscais.zcone := aConexao;
    fnotasfiscais.Acesso := aAcesso;

    For i := 0 To fnotasfiscais.ComponentCount - 1 Do
    begin
      If fnotasfiscais.Components[i] Is TUniQuery Then
        (fnotasfiscais.Components[i] As TUniQuery).Connection := aConexao;
    end;

    (* Ajusta pasta Principal de salvamento dos arquivos. *)
    fnotasfiscais.vpPastaPrincipal := ExtractFilePath(application.ExeName);
    fnotasfiscais.vpSubPastaDoc := 'arqnfces';


  { fnfce.vpTrmCodigo := Acesso.Terminal.ToString;
    fnfce.vpClbCodigo := Acesso.Usuario.ToString;
    fnfce.vpFlacodigo := Acesso.Filial.ToString; }

{	 GerarNFCe
	 ReimprimirNFCe
   EnviaremailNFCe
   ConsultarNFCe
   InutilizarNumeracaoNFCe
   CancelarNFCe
   Status do SEFAZ}



    if LowerCase(aFuncao)='emitenfce' then
    begin

    end
    else if LowerCase(aFuncao)='imprimenfce' then
    begin

    end
    else if LowerCase(aFuncao)='cancelanfce' then
    begin

    end
    else if LowerCase(aFuncao)='ajustasituacaonfce' then
    begin

    end
    else if LowerCase(aFuncao)='inutilizarnumerosnfce' then
    begin

    end
    else if LowerCase(aFuncao)='visualizanfce' then
    begin

    end
    else if LowerCase(aFuncao)='emailnfce' then
    begin

    end;




  finally

    fnotasfiscais.Close;
    FreeAndNil(fnotasfiscais);
  end;

end;

exports modulonfce;

procedure Tfnotasfiscais.MontarJSON_infRespTec(var jsonNFCe: TJSONObject);
var
  infRespTecJO : TJSONObject;
begin
  try
    infRespTecJO := TJSONObject.Create;

    // adiciona os pares chave/valor
    infRespTecJO.AddPair('CNPJ', '14477548000131');
    infRespTecJO.AddPair('email', 'mizio@miziosistemas.com.br');
    infRespTecJO.AddPair('xContato', 'Mizio Sistemas');
    infRespTecJO.AddPair('fone', '6635442765');

    jsonNFCe.AddPair('infRespTec', infRespTecJO);
  except
    infRespTecJO.Free;

  end;

end;


function Tfnotasfiscais.MontarJSON_Emi: TJSONObject;
var
  emiJO, enderEmitJO: TJSONObject;
  vCRT: Integer;
begin
  emiJO := TJSONObject.Create;
  try
    // Campos principais
    emiJO.AddPair('CNPJCPF', SomenteNumeros(cfgetddoc1.AsString));
    emiJO.AddPair('IE',      SomenteNumeros(cfgedrinscest.AsString));
    emiJO.AddPair('IEST',    '');
    emiJO.AddPair('xNome',   cfgetdidentificacao.AsString);
    emiJO.AddPair('xFant',   cfgetdapelido.AsString);

    // Endereço do emitente
    enderEmitJO := TJSONObject.Create;
    try
      enderEmitJO.AddPair('fone',   cfgetftelefone.AsString);
      enderEmitJO.AddPair('CEP',    TJSONNumber.Create(StrToIntDef(SomenteNumeros(cfgedrcep.AsString), 0)));
      enderEmitJO.AddPair('xLgr',   cfgedrrua.AsString);
      enderEmitJO.AddPair('nro',    cfgedrnumero.AsString);
      enderEmitJO.AddPair('xCpl',   '');
      enderEmitJO.AddPair('xBairro', cfgedrbairro.AsString);
      enderEmitJO.AddPair('cMun',   TJSONNumber.Create(cfgcddcodigo.AsInteger));
      enderEmitJO.AddPair('xMun',   cfgcddnome.AsString);
      enderEmitJO.AddPair('UF',     UpperCase(cfgufssigla.AsString));
      enderEmitJO.AddPair('cPais',  TJSONNumber.Create(1058));
      enderEmitJO.AddPair('xPais',  'BRASIL');

      emiJO.AddPair('enderEmit', enderEmitJO);
    except
      enderEmitJO.Free;
      raise;
    end;

    // Definição do CRT conforme cfgcrtcodigo
    case cfgcrtcodigo.AsInteger of
      1: vCRT := Ord(crtSimplesNacional);
      2: vCRT := Ord(crtSimplesExcessoReceita);
      3: vCRT := Ord(crtRegimeNormal);
    else
      vCRT := 0;
    end;

    emiJO.AddPair('CRT', TJSONNumber.Create(vCRT));

    Result := emiJO; // retorna pronto
  except
    emiJO.Free;
    raise;
  end;
end;



procedure Tfnotasfiscais.MontarJSON_Ide(var jsonNFCe: TJSONObject);
var
  ideJO, infIntermedJO: TJSONObject;
  vIndPres, vIndIntermed, vTpAmb: Integer;
  sDoc: string;
  iDoc: Int64;
begin
  if jsonNFCe = nil then
    jsonNFCe := TJSONObject.Create;

  ideJO := TJSONObject.Create;
  try
    // --- valores padrão ---
    vIndPres      := Ord(pcPresencial);
    vIndIntermed  := Ord(iiSemOperacao);
    vTpAmb        := -1; // marcador: não definido

    // --- campos fixos/imutáveis do seu exemplo ---
    ideJO.AddPair('indIntermed', TJSONNumber.Create(Ord(iiSemOperacao))); // default, pode ser sobrescrito abaixo
    ideJO.AddPair('cUF',         TJSONNumber.Create(UFtoCUF(cfgufssigla.AsString)));
    ideJO.AddPair('natOp',       'VENDA');

    ideJO.AddPair('dEmi',        FormatDateTime('yyyy-mm-dd', mesmesemissao.AsDateTime));

    ideJO.AddPair('indPag',      TJSONNumber.Create(Ord(ipVista)));
    ideJO.AddPair('cMunFG',      TJSONNumber.Create(cfgcddcodigo.AsInteger));
    ideJO.AddPair('idDest',      TJSONNumber.Create(Ord(doInterna)));
    ideJO.AddPair('finNFe',      TJSONNumber.Create(Ord(fnNormal)));
    ideJO.AddPair('tpImp',       TJSONNumber.Create(Ord(tiNFCe)));
    ideJO.AddPair('indFinal',    TJSONNumber.Create(Ord(cfConsumidorFinal)));

    // --- lógica para indPres / indIntermed / infIntermed ---
    sDoc := SomenteNumeros(Self.etdetddoc1.AsString);
    if mesoricodigo.AsInteger = 3 then
    begin
      // delivery
      if (Length(sDoc) >= 11) and TryStrToInt64(sDoc, iDoc) and (iDoc > 0) then
      begin
        vIndPres     := Ord(pcEntregaDomicilio);
        vIndIntermed := Ord(iiOperacaoSemIntermediador);
      end
      else
      begin
        vIndPres     := Ord(pcPresencial);
        vIndIntermed := Ord(iiOperacaoSemIntermediador);
      end;
    end
    else if (mesoricodigo.AsInteger = 7) or (mesoricodigo.AsInteger = 8) then
    begin
      // nuc / aiqfome
      if (Length(sDoc) >= 11) then
      begin
        vIndPres     := Ord(pcEntregaDomicilio);
        vIndIntermed := Ord(iiOperacaoSemIntermediador);
      end
      else
      begin
        vIndPres := Ord(pcPresencial);
      end;

      // Se não for presencial, monta infIntermed
      if vIndPres <> Ord(pcPresencial) then
      begin
        ori.Close;
        ori.ParamByName('oricodigo').AsInteger := mesoricodigo.AsInteger;
        ori.Open;

        infIntermedJO := TJSONObject.Create;
        try
          infIntermedJO.AddPair('CNPJ',       SoNumeros(orietddoc1.AsString));
          infIntermedJO.AddPair('idCadIntTran', cfgetdapelido.AsString);
          ideJO.AddPair('infIntermed', infIntermedJO);
        except
          infIntermedJO.Free;
          raise;
        end;
      end;
    end
    else
    begin
      vIndPres     := Ord(pcPresencial);
      vIndIntermed := Ord(iiSemOperacao);
    end;

    // aplica resultados da lógica
    // (sobrescreve o indIntermed default definido no início)
    ideJO.RemovePair('indIntermed');
    ideJO.AddPair('indIntermed', TJSONNumber.Create(vIndIntermed));
    ideJO.AddPair('indPres',     TJSONNumber.Create(vIndPres));

    // --- demais campos ---
    ideJO.AddPair('modelo',  TJSONNumber.Create(65));
    ideJO.AddPair('serie',   TJSONNumber.Create(cfgcfgserienfce.AsInteger));
    ideJO.AddPair('tpNF',    TJSONNumber.Create(Ord(tnSaida)));
    ideJO.AddPair('tpEmis',  TJSONNumber.Create(Ord(teNormal)));

    // ambiente
    if cfgcfgmodonfe.AsInteger = 2 then
      vTpAmb := Ord(taHomologacao)
    else if cfgcfgmodonfe.AsInteger = 1 then
      vTpAmb := Ord(taProducao);

    if vTpAmb >= 0 then
      ideJO.AddPair('tpAmb', TJSONNumber.Create(vTpAmb));

    ideJO.AddPair('verProc', '25.25.500.10');

    // adiciona no JSON raiz
    jsonNFCe.AddPair('ide', ideJO);
  except
    ideJO.Free;
    raise;
  end;
end;






function Tfnotasfiscais.GeraNFCe(vMesChave: string): Boolean;
Var
  vErro: String;
  vMensagemErro: String;

  vMsgRetorno: String;

  vNumeroNFe: Integer;
  vChaveNFE: String;
  vProtocoloNFe: String;

  (* Acumuladores - Totais NFCe *)
  vlQtdItens: Integer;

  vlTotBC: double;
  vlTotICMS: double;

  vlTotDesc: double;
  vlTotBruto: double;
  vlTotLiq: double;

  (* Carga Tributária *)
  vlTotTrib: double;
  vlTotTribEst: double;
  vlMensagemCargaTrib: string;
  vlMensagemCartoes: string;

  (* Retornos da SEFAZ *)
  vCStat: Integer;
  vXMotivo: String;

  vDinheiro: double;
  vVoucher: double;

  vChequeProprio: double;
  vChequeTerceiros: double;
  vCartaoDebito: double;
  vCartaoCredito: double;
  vPIX: double;
  vOnLine: double;
  vConvenio: double;
  vAFaturar: double;
  vlTroco: double;
  vTrocaDevolucao: double;
  vVale: double;
  vDoacao: double;
  vCredito: double;

  vlTotalItens: double;
  vlTotalFinalizadores: double;
  vlPercentualProdutos: double;
  vlValorDiferenca: double;

  (* CST e CSOSN *)
  vlCSTIcmsOK: Boolean;
  vlCSTIcms: TpcnCSTIcms;

  vlCSOSNIcmsOK: Boolean;
  vlCSOSNIcms: TpcnCSOSNIcms;
  ok: Boolean;

  { * exibe limite do cliente * }
  vlMensagemLimite: string;
  vlDatatual: string;

  vlcspcodigo: string;
  vlcsfcodigo: string;

  vlcfgpercentualpis: string;

  vlcfgpercentualcofins: string;
  vlNFCeProtocolo: string;
  vlNFCeChave: string;

 // vlOutras: Currency;

  // vlAgora: String;


  iReduz: Integer;

  vlTotalFrete: Currency;
  vlTotalOutras: Currency;


  vlTotalLote: Currency;
  vlMensagemicmreducao: string;

  vltotaltaxaacumulado: Currency;
  vldiferencataxa: Currency;


  vlCodigoTagPagamento: Integer;
  vlCodigoTagOK: Boolean;

  vlTotalitensProdutos: Currency;

var
  jsonNFCe, infRespTec: TJSONObject;
  ideJO, infIntermedJO: TJSONObject;
  vIndPres, vIndIntermed, vTpAmb: Integer;
  sDoc: string;
  iDoc: Int64;
var
  emitJO, enderEmitJO: TJSONObject;
  vCRT: Integer;

var
  destJO, enderDestJO: TJSONObject;
  vDoc, vNome, vUF: string;


Begin

  Result:=False;

  info.Lines.add('Inicio abertura tabelas: ' + datetimetostr(now));

  Result := False;
  vlTotalOutras := 0;

  vlQtdItens := 0;

  vlTotBC := 0;
  vlTotICMS := 0;

  vlTotDesc := 0;
  vlTotBruto := 0;
  vlTotLiq := 0;

  vlTotTrib := 0;
  vlTotTribEst := 0;
  vlMensagemCargaTrib := '';
  vlNFCeProtocolo := '';
  vlNFCeChave := '';



  //
  // ****** Carrega consulta da tabela mes e itm ********
  //

  cfg.Close;
  cfg.Connection:=zcone;
  cfg.ParamByName('flacodigo').AsInteger := Acesso.Filial;
  cfg.Open;

  mes.Close;
  mes.Connection:=zcone;
  mes.ParamByName('meschave').AsString := vMesChave;
  mes.Open;

  itm.Close;
  itm.Connection:=zcone;
  itm.ParamByName('meschave').AsString := vMesChave;
  itm.Open;



  etd.Close;
  etd.Connection:=zcone;
  etd.ParamByName('etdcodigo').AsInteger := mesetdcodigo.AsInteger;
  etd.ParamByName('edritem').AsInteger := mesedritem.AsInteger;
  etd.Open;


  if cfgetddoc1.AsString = etdetddoc1.AsString then
  begin
   // ShowMessage('Não é permitido emitir NFCe para a prórpria empresa!');

    Exit;
  end;

  mic.Close;
  mic.Params[0].AsString := vMesChave;
  mic.Open;

  oic.Close;
  oic.Params[0].AsString := vMesChave;
  oic.Open;


  vlNFCeProtocolo := mesmesprotocolo.AsString;
  vlNFCeChave := mesmeschavenfe.AsString;


  try
    jsonNFCe := TJSONObject.Create;


   // With ACBrNFeNFCe.NotasFiscais.add.NFe Do
   // Begin

    jsonNFCe.AddPair('infNFe', TJSONNumber.Create(cfgcfgversao.AsFloat));



    ideJO := TJSONObject.Create;

    try
      // --- valores padrão ---
      vIndPres      := Ord(pcPresencial);
      vIndIntermed  := Ord(iiSemOperacao);
      vTpAmb        := -1; // marcador: não definido

      // --- campos fixos/imutáveis do seu exemplo ---
      ideJO.AddPair('indIntermed', TJSONNumber.Create(Ord(iiSemOperacao))); // default, pode ser sobrescrito abaixo
      ideJO.AddPair('cUF',         TJSONNumber.Create(UFtoCUF(cfgufssigla.AsString)));
      ideJO.AddPair('natOp',       'VENDA');

      ideJO.AddPair('dEmi',        FormatDateTime('yyyy-mm-dd', mesmesemissao.AsDateTime));

      ideJO.AddPair('indPag',      TJSONNumber.Create(Ord(ipVista)));
      ideJO.AddPair('cMunFG',      TJSONNumber.Create(cfgcddcodigo.AsInteger));
      ideJO.AddPair('idDest',      TJSONNumber.Create(Ord(doInterna)));
      ideJO.AddPair('finNFe',      TJSONNumber.Create(Ord(fnNormal)));
      ideJO.AddPair('tpImp',       TJSONNumber.Create(Ord(tiNFCe)));
      ideJO.AddPair('indFinal',    TJSONNumber.Create(Ord(cfConsumidorFinal)));

      // --- lógica para indPres / indIntermed / infIntermed ---
      sDoc := SomenteNumeros(Self.etdetddoc1.AsString);
      if mesoricodigo.AsInteger = 3 then
      begin
        // delivery
        if (Length(sDoc) >= 11) and TryStrToInt64(sDoc, iDoc) and (iDoc > 0) then
        begin
          vIndPres     := Ord(pcEntregaDomicilio);
          vIndIntermed := Ord(iiOperacaoSemIntermediador);
        end
        else
        begin
          vIndPres     := Ord(pcPresencial);
          vIndIntermed := Ord(iiOperacaoSemIntermediador);
        end;
      end
      else if (mesoricodigo.AsInteger = 7) or (mesoricodigo.AsInteger = 8) then
      begin
        // nuc / aiqfome
        if (Length(sDoc) >= 11) then
        begin
          vIndPres     := Ord(pcEntregaDomicilio);
          vIndIntermed := Ord(iiOperacaoSemIntermediador);
        end
        else
        begin
          vIndPres := Ord(pcPresencial);
        end;

        // Se não for presencial, monta infIntermed
        if vIndPres <> Ord(pcPresencial) then
        begin
          ori.Close;
          ori.ParamByName('oricodigo').AsInteger := mesoricodigo.AsInteger;
          ori.Open;

          infIntermedJO := TJSONObject.Create;
          try
            infIntermedJO.AddPair('CNPJ',       SoNumeros(orietddoc1.AsString));
            infIntermedJO.AddPair('idCadIntTran', cfgetdapelido.AsString);
            ideJO.AddPair('infIntermed', infIntermedJO);
          except
            infIntermedJO.Free;
            raise;
          end;
        end;
      end
      else
      begin
        vIndPres     := Ord(pcPresencial);
        vIndIntermed := Ord(iiSemOperacao);
      end;

      // aplica resultados da lógica
      // (sobrescreve o indIntermed default definido no início)
      ideJO.RemovePair('indIntermed');
      ideJO.AddPair('indIntermed', TJSONNumber.Create(vIndIntermed));
      ideJO.AddPair('indPres',     TJSONNumber.Create(vIndPres));

      // --- demais campos ---
      ideJO.AddPair('modelo',  TJSONNumber.Create(65));
      ideJO.AddPair('serie',   TJSONNumber.Create(cfgcfgserienfce.AsInteger));
      ideJO.AddPair('tpNF',    TJSONNumber.Create(Ord(tnSaida)));
      ideJO.AddPair('tpEmis',  TJSONNumber.Create(Ord(teNormal)));

      // ambiente
      if cfgcfgmodonfe.AsInteger = 2 then
        vTpAmb := Ord(taHomologacao)
      else if cfgcfgmodonfe.AsInteger = 1 then
        vTpAmb := Ord(taProducao);

      if vTpAmb >= 0 then
        ideJO.AddPair('tpAmb', TJSONNumber.Create(vTpAmb));

      ideJO.AddPair('verProc', '25.25.500.10');

      // adiciona no JSON raiz
      jsonNFCe.AddPair('ide', ideJO);
    except
      ideJO.Free;
      raise;
    end;

    // adiciona o cnpj do contador para ele poder baixar direto o xml
    ctd.Close;
    ctd.Connection:=zcone;
    ctd.Connection := zcone;
    ctd.Open;

    if not ctd.IsEmpty then
    begin
      if (ctdctdcnpj.AsString <> '') and (ctdctdcnpj.AsString <> '0') then
      begin
        try
          if strtofloat(SoNumeros(ctdctdcnpj.AsString)) > 0 then
          begin
            jsonNFCe.AddPair('autXML', TJSONNumber.Create(SoNumeros(ctdctdcnpj.AsString)));
          end;
        except

        end;
      end;
    end;

      (*
        *
        ****** Emitente da NFC-e - EMIT ********
        *
      *)


  emitJO := TJSONObject.Create;
    try
    // Campos principais
    emitJO.AddPair('CNPJCPF', SomenteNumeros(cfgetddoc1.AsString));
    emitJO.AddPair('IE',      SomenteNumeros(cfgedrinscest.AsString));
    emitJO.AddPair('IEST',    '');
    emitJO.AddPair('xNome',   cfgetdidentificacao.AsString);
    emitJO.AddPair('xFant',   cfgetdapelido.AsString);

    // Endereço do emitente
    enderEmitJO := TJSONObject.Create;
    try
      enderEmitJO.AddPair('fone',   cfgetftelefone.AsString);
      enderEmitJO.AddPair('CEP',    TJSONNumber.Create(StrToIntDef(SomenteNumeros(cfgedrcep.AsString), 0)));
      enderEmitJO.AddPair('xLgr',   cfgedrrua.AsString);
      enderEmitJO.AddPair('nro',    cfgedrnumero.AsString);
      enderEmitJO.AddPair('xCpl',   '');
      enderEmitJO.AddPair('xBairro', cfgedrbairro.AsString);
      enderEmitJO.AddPair('cMun',   TJSONNumber.Create(cfgcddcodigo.AsInteger));
      enderEmitJO.AddPair('xMun',   cfgcddnome.AsString);
      enderEmitJO.AddPair('UF',     UpperCase(cfgufssigla.AsString));
      enderEmitJO.AddPair('cPais',  TJSONNumber.Create(1058));
      enderEmitJO.AddPair('xPais',  'BRASIL');

      emitJO.AddPair('enderEmit', enderEmitJO);
    except
      enderEmitJO.Free;
      raise;
    end;

    // Definição do CRT conforme cfgcrtcodigo
    case cfgcrtcodigo.AsInteger of
      1: vCRT := Ord(crtSimplesNacional);
      2: vCRT := Ord(crtSimplesExcessoReceita);
      3: vCRT := Ord(crtRegimeNormal);
    else
      vCRT := 0;
    end;

    emitJO.AddPair('CRT', TJSONNumber.Create(vCRT));

    jsonNFCe.AddPair('emit', emitJO);



      (*
        *
        ********* Destinatário da NFe **********
        *
      *)


      destJO := TJSONObject.Create;
      try
      // valores padrão
      vDoc  := SomenteNumeros(Self.etdetddoc1.AsString);
      vNome := etdetdidentificacao.AsString;
      vUF   := UpperCase(cfgufssigla.AsString);

      // aplica regras de escolha mic / oic
      if mic.RecordCount = 1 then
      begin
        vDoc  := SomenteNumeros(self.micidcdoc.AsString);
        vNome := micidcnome.AsString;
        vUF   := UpperCase(cfgufssigla.AsString);
      end
      else if oic.RecordCount = 1 then
      begin
        vDoc  := SomenteNumeros(self.oicidcdoc.AsString);
        vNome := oicidcnome.AsString;
        vUF   := UpperCase(cfgufssigla.AsString);
      end
      else
      begin
        // mantém defaults já atribuídos acima
      end;

      // campos principais
      destJO.AddPair('CNPJCPF', vDoc);
      destJO.AddPair('xNome',   vNome);
      destJO.AddPair('indIEDest', TJSONNumber.Create(Ord(inNaoContribuinte)));

      // endereço do destinatário (apenas UF conforme seu trecho)
      enderDestJO := TJSONObject.Create;
      try
        enderDestJO.AddPair('UF', vUF);
        destJO.AddPair('EnderDest', enderDestJO);
      except
        enderDestJO.Free;
        raise;
      end;

      vlQtdItens := 1;

      vlTotalOutras := 0;
      vlTotalLote := 0;

      vlTotalFrete := 0;

      itm.First;
      While Not itm.Eof Do
      Begin

        With Det.add Do
        Begin

          infAdProd := '';
          Prod.nItem := vlQtdItens;
          Prod.ncm := SomenteNumeros(itmproncm.AsString);

          Prod.CFOP := trim(Copy(itmcfocfop.AsString, 1, 1) + Copy(itmcfocfop.AsString, 2, 4));

          Prod.cProd := self.itmprocodigo.AsString;

          ACBrValidadorBarra.TipoDocto := docGTIN;
          ACBrValidadorBarra.Documento := Copy(itmpunbarra.AsString, 2, 13);
          if ACBrValidadorBarra.Validar then
          begin
            if itmpunbarrasistema.AsInteger = 1 then
            begin
              Prod.cEAN := 'SEM GTIN';
              Prod.cEANTrib := '';
            end
            else
            begin
              Prod.cEAN := Copy(itmpunbarra.AsString, 2, 13);
              Prod.cEANTrib := Copy(itmpunbarra.AsString, 2, 13);

            end;
          end
          else
          begin
            Prod.cEAN := 'SEM GTIN';
            Prod.cEANTrib := '';
          end;

          If cfgcfgdescrinfe.AsInteger = 0 Then
            Prod.xProd := BuscaTroca(trim(itmpronome.AsString), '%', '') + ' ' + self.itmpunidentificacao.AsString;

          If cfgcfgdescrinfe.AsInteger = 1 Then
            Prod.xProd := BuscaTroca(trim(itmpronomereduzido.AsString), '%', '') + ' ' + self.itmpunidentificacao.AsString;

          If (Copy(Prod.xProd, 1, 1) = '.') Then
            Prod.xProd := trim(Copy(Prod.xProd, 2, 300));

          Prod.qCom := self.itmitmquantidade.AsFloat;
          Prod.uCom := self.itmunisimbolo.AsString;
          Prod.vProd := Self.itmitmtotal.AsFloat+(itmitmacrescimoav.AsCurrency*Self.itmitmquantidade.AsFloat) ;

          Prod.qTrib := self.itmitmquantidade.AsFloat;
          Prod.vDesc := self.itmitmdesconto.AsFloat;


          if ide.indPres = pcPresencial then
          begin

            Prod.vOutro := self.itmitmoutras.AsCurrency+self.itmitmfrete.AsCurrency;
            vlTotalOutras := vlTotalOutras + (itmitmoutras.AsCurrency+ self.itmitmfrete.AsCurrency);

          end
          else
          begin

            Prod.vOutro := self.itmitmoutras.AsCurrency{+self.itmitmfrete.AsCurrency};
            vlTotalOutras := vlTotalOutras + (itmitmoutras.AsCurrency{+ self.itmitmfrete.AsCurrency});

            prod.vFrete := self.itmitmfrete.AsCurrency;
            vlTotalFrete := vlTotalFrete + self.itmitmfrete.AsCurrency;

          end;

          Prod.uTrib := self.itmunisimbolo.AsString;
          Prod.vUnTrib := Prod.vProd  / self.itmitmquantidade.AsFloat;

          Prod.vUnCom := Prod.vUnTrib;

          vlTotDesc := vlTotDesc + Prod.vDesc;
          vlTotBruto := vlTotBruto + (Prod.vProd);
          vlTotLiq := vlTotLiq + (vlTotBruto - vlTotDesc);

          if itmtpocodigo.AsInteger = 99 then
            Prod.CEST := '01.999.00';

          Prod.CEST := itmtcecest.AsString;

          With Imposto Do
          Begin

            Imposto.vTotTrib := { itmitmcargatrib.AsFloat + } itmitmcargatribest.AsFloat;

            (* Acumula totais de carga tributária por ente Federal e Estadual *)
            vlTotTrib := vlTotTrib { + itmitmcargatrib.AsFloat };
            vlTotTribEst := vlTotTribEst + itmitmcargatribest.AsFloat;

            With ICMS Do
            Begin
              case Emit.CRT of
                crtSimplesNacional:
                  vlCSOSNIcms := StrToCSOSNIcms(vlCSOSNIcmsOK, itmcstcodigo.AsString);
                crtRegimeNormal, crtSimplesExcessoReceita:
                  vlCSTIcms := StrToCSTICMS(vlCSTIcmsOK, Copy(self.itmcstcodigo.AsString, 2, 2));
              end;

              (* CST *)
              if vlCSTIcmsOK then
                CST := vlCSTIcms;

              (* CSOSN *)
              if vlCSOSNIcmsOK then
                CSOSN := vlCSOSNIcms;

              ICMS.modBC := dbiValorOperacao;

              If (lowercase(self.itmicmcodigo.AsString) = 'ff') Or (lowercase(self.itmicmcodigo.AsString) = 'ii') Or
                (lowercase(self.itmicmcodigo.AsString) = 'nn') Then
              Begin
                ICMS.pICMS := 0;
                ICMS.vICMS := 0;
                ICMS.vBC := 0;
              End
              Else
              Begin
                If (self.itmitmicm.AsFloat = 0.01) or (self.itmitmicm.AsFloat = 0) Then
                Begin
                  ICMS.pICMS := 0;
                  ICMS.vICMS := 0;
                  ICMS.vBC := 0;
                End
                Else
                Begin
                  ICMS.pICMS := self.itmicmaliquota.AsFloat;
                  ICMS.vICMS := itmitmicm.AsFloat;
                  ICMS.vBC := itmitmbicm.AsCurrency;
                  ICMS.pRedBC := itmitmpercreducaobaseicm.AsCurrency;

                  if (itmitmbicms.AsFloat > 0) and (itmitmaliqicms.AsFloat > 0) then
                  begin
                    ICMS.modBCST := dbisMargemValorAgregado;
                    ICMS.pMVAST := itmitmmva.AsFloat;
                    ICMS.vBCST := itmitmbicms.AsFloat;
                    ICMS.pICMSST := itmitmaliqicms.AsFloat;
                    ICMS.vICMSST := itmitmicms.AsFloat;

                  end;

                End;
              End;

              vlTotICMS := vlTotICMS + ICMS.vICMS;
              vlTotBC := vlTotBC + ICMS.vBC;
            End;

            pis.CST := StrToCSTPIS(ok, itmcspcodigo.AsString);
            if itmitmaliqpis.AsFloat > 0 then
            begin
              pis.vBC := itmitmbpis.AsCurrency;
              pis.pPIS := itmitmaliqpis.AsFloat;
              pis.vPIS := itmitmpis.AsCurrency;
            end;

            COFINS.CST := StrToCSTCOFINS(ok, itmcsfcodigo.AsString);

            if itmitmaliqcofins.AsFloat > 0 then
            begin
              COFINS.vBC := itmitmbcofins.AsCurrency;
              COFINS.pCOFINS := itmitmaliqcofins.AsFloat;
              COFINS.vCOFINS := itmitmcofins.AsCurrency;
            end;

          End;
          vlQtdItens := vlQtdItens + 1;

        End;

        itm.Next;
      End;


      if mesmesretirabalcao.AsInteger=0 then
      begin
        if (mesmesfrete.AsCurrency>0) then
        begin
          if ide.indPres= pcPresencial then
          begin
            Transp.modFrete := mfSemFrete;
          end
          else
          begin
            if StrToFloat(SomenteNumeros(Self.etdetddoc1.AsString))>0 then
              Transp.modFrete := mfContaEmitente
            else
              Transp.modFrete := mfSemFrete;
          end;
        end
        else
          Transp.modFrete := mfSemFrete;
      end
      else
      begin
        Transp.modFrete := mfSemFrete;
      end;



      if (ide.indPres= pcEntregaDomicilio) or (ide.indPres= pcTeleatendimento) then
      begin

        if etdedrcep.AsString='' then
        begin
         Dest.EnderDest.CEP := StrToInt(SomenteNumeros(cfgedrcep.AsString));
         consulta.Close;
         consulta.sql.Text:='update edr set edrcep='+QuotedStr(SomenteNumeros(etdedrcep.AsString)) + ' where etdcodigo='+mesetdcodigo.AsString;
         consulta.ExecSQL;
        end
        else
        begin
          Dest.EnderDest.CEP := StrToInt(SomenteNumeros(etdedrcep.AsString));
        end;

        Dest.EnderDest.xLgr := etdedrrua.AsString;
        Dest.EnderDest.nro := etdedrnumero.AsString;
        Dest.EnderDest.xCpl := '';
        Dest.EnderDest.xBairro := etdedrbairro.AsString;

        if etdcddcodigo.AsString='' then
        begin
          consulta.Close;
          consulta.sql.Text:='update edr set cddcodigo='+cfgcddcodigo.AsString+' where etdcodigo='+mesetdcodigo.AsString;
          consulta.ExecSQL;

          Dest.EnderDest.cMun := cfgcddcodigo.AsInteger
        end
        else
        begin
          Dest.EnderDest.cMun := etdcddcodigo.AsInteger;
        end;

        Dest.EnderDest.xMun := etdcddnome.AsString;
        Dest.EnderDest.UF := UpperCase(etdufssigla.AsString);

      end;


          (* Trata mensagem referente Carga Tributária *)
      if (vlTotTrib + vlTotTribEst) > 0 then
      begin
        vlMensagemCargaTrib := 'Trib. aprox. R$ ';
        vlMensagemCargaTrib := vlMensagemCargaTrib + FormatFloat('#,###.00', RoundTo(vlTotTrib, -2)) + ' Federal';

        if vlTotTribEst > 0 then
          vlMensagemCargaTrib := vlMensagemCargaTrib + ' e ' + FormatFloat('#,###.00', RoundTo(vlTotTribEst, -2)) + ' Estadual';

        vlMensagemCargaTrib := vlMensagemCargaTrib + ';Fonte: IBPT 5oi7eW (Lei Federal 12.741/2012)';

      end;
      vlMensagemCargaTrib := '';

      { * Exibe situação de credito do cliente * }

      vlMensagemLimite := '';

      qTomTof.Close;
      qTomTof.Connection := zcone;
      qTomTof.SQL.Text := 'SELECT distinct tofidentificacao FROM tom, tof WHERE ';
      qTomTof.SQL.add('tom.tofcodigo = tof.tofcodigo AND ');
      qTomTof.SQL.add('tof.ticcodigo IN (' + IntToStr(ticObservacao) + ') AND ');
      qTomTof.SQL.add('tom.meschave = ' + vpMesChave + ' ');
      qTomTof.SQL.add('ORDER BY tof.tofcodigo');
      qTomTof.Open;

      if qTomTof.IsEmpty then
      begin

        if cfgcfgobs1.AsString <> '' then
        begin
          tom.Connection := zcone;
          tom.Open;

          if not tom.locate('meschave;tofcodigo', VarArrayOf([vpMesChave, cfgcfgobs1.AsInteger]), []) then
          begin
            tom.Append;
            tomtofcodigo.AsInteger := cfgcfgobs1.AsInteger;
            tommeschave.AsString := vpMesChave;
            tom.post;
          end;

        end;



        qTomTof.Close;
        qTomTof.Connection := zcone;
        qTomTof.SQL.Text := 'SELECT distinct tofidentificacao FROM tom, tof WHERE ';
        qTomTof.SQL.add('tom.tofcodigo = tof.tofcodigo AND ');
        qTomTof.SQL.add('tof.ticcodigo IN (' + IntToStr(ticObservacao) + ') AND ');
        qTomTof.SQL.add('tom.meschave = ' + vpMesChave + ' ');
        qTomTof.SQL.add('ORDER BY tof.tofcodigo');
        qTomTof.Open;

      end;

      vlMensagemReducaoBase := '';

      While Not qTomTof.Eof Do
      Begin
        if pos(trim(qTomTof.Fields[0].AsString), vlMensagemCargaTrib) = 0 then
        begin
          vlMensagemCargaTrib := vlMensagemCargaTrib + trim(qTomTof.Fields[0].AsString) + ';';
        end;
        qTomTof.Next;
      End;

      vlMensagemCartoes:='';

      consultacomprovante.Close;
      consultacomprovante.Connection:=zcone;

      consultacomprovante.sql.Text := 'SELECT distinct dtl.dtlchave, dtl.mdacodigo, mda.mdaidentificacao, dtl.dtlvalor, rdc.rdccomprovante1via, rdc.rdccomprovante2via ';
      consultacomprovante.sql.Add('FROM mes INNER JOIN rfm ON mes.meschave = rfm.meschave ');
      consultacomprovante.sql.Add('INNER JOIN rfi ON rfm.rfichave = rfi.rfichave ');
      consultacomprovante.sql.Add('INNER JOIN mfi ON mfi.rfichave = rfi.rfichave ');
      consultacomprovante.sql.Add('INNER JOIN mlt ON mlt.mfichave = mfi.mfichave ');
      consultacomprovante.sql.Add('INNER JOIN dtl ON dtl.ltechave = mlt.ltechave ');
      consultacomprovante.sql.Add('INNER JOIN mda ON dtl.mdacodigo = mda.mdacodigo ');
      consultacomprovante.sql.Add('INNER JOIN ltr ON dtl.dtlchave = ltr.dtlchave ');
      consultacomprovante.sql.Add('INNER JOIN rdc ON ltr.rdcchave = rdc.rdcchave ');
      consultacomprovante.sql.Add('WHERE rfi.tfdcodigo IN (32) ');
      consultacomprovante.sql.Add('AND dtl.mdacodigo IN (4,5,6) ');
      consultacomprovante.sql.Add('AND mes.meschave ='+vpMesChave);
      consultacomprovante.Open;

      while not consultacomprovante.Eof do
      begin

        if consultacomprovante.FieldByName('rdccomprovante1via').AsString <> '' then
        begin

          if pos(consultacomprovante.FieldByName('rdccomprovante1via').AsString,vlMensagemCartoes)=0 then
          begin
            vlMensagemCartoes:=Trim(vlMensagemCartoes+consultacomprovante.FieldByName('rdccomprovante1via').AsString);
          end;

        end;
        consultacomprovante.Next;
      end;



      if consultacomprovante.IsEmpty then
      begin

        consultacomprovante.Close;
        consultacomprovante.Connection:=zcone;

        consultacomprovante.sql.Text := 'SELECT  dtl.dtlchave,  rdccomprovante1via ';
        consultacomprovante.sql.Add('FROM olt ');
        consultacomprovante.sql.Add('INNER JOIN lte ON olt.ltechave = lte.ltechave ');
        consultacomprovante.sql.Add('INNER JOIN dtl ON lte.ltechave = dtl.ltechave ');
        consultacomprovante.sql.Add('INNER JOIN mda ON dtl.mdacodigo = mda.mdacodigo ');
        consultacomprovante.sql.Add('INNER JOIN rdc ON dtl.dtlchave = rdc.dtlchave ');
        consultacomprovante.sql.Add('INNER JOIN mor ON olt.orcchave = mor.orcchave ');
        consultacomprovante.sql.Add('WHERE mor.meschave ='+vpMesChave);
        consultacomprovante.Open;

        while not consultacomprovante.Eof do
        begin

          if consultacomprovante.FieldByName('rdccomprovante1via').AsString <> '' then
          begin

            if pos(consultacomprovante.FieldByName('rdccomprovante1via').AsString,vlMensagemCartoes)=0 then
            begin
              vlMensagemCartoes:=vlMensagemCartoes+Trim(vlMensagemCartoes+consultacomprovante.FieldByName('rdccomprovante1via').AsString);
            end;

          end;
          consultacomprovante.Next;
        end;

      end;


      InfAdic.infCpl := trim(trim(vlMensagemCargaTrib) + #13+ #13 + ' ' +
                         trim(cfgcfgmensagempdv.AsString) + #13 + #13  + ' ' +
                         trim(mesmesobs.AsString) + #13 + #13 + ' ' +
                         trim(vlMensagemLimite) + #13 + #13 + ' '+
                         trim(vlMensagemReducaoBase));//+
                      //   #13 +#13 + ' ' +
                      //   vlMensagemCartoes);




      Total.ICMSTot.vTotTrib := RoundTo(vlTotTrib + vlTotTribEst, -2);

      Total.ICMSTot.vOutro := vlTotalOutras;
      Total.ICMSTot.vFrete := vlTotalFrete;

      Total.ICMSTot.vBC := vlTotBC;

      Total.ICMSTot.vICMS := RoundTo(vlTotICMS, -2);
      Total.ICMSTot.vProd := RoundTo(vlTotBruto, -2);
      Total.ICMSTot.vDesc := RoundTo(vlTotDesc, -2);

      Total.ICMSTot.vNF := RoundTo((vlTotBruto - vlTotDesc + vlTotalFrete + vlTotalOutras), -2);

      Total.ICMSTot.vPIS := mesmespis.AsCurrency;
      Total.ICMSTot.vCOFINS := mesmescofins.AsCurrency;


      qDtl.Close;
      qDtl.SQL.Text :='SELECT distinct dtl.dtlvalor, rfm.meschave, mda.mdacodigo modalidade, mda.mdatagpagamento mdacodigo, dtl.cedcodigo, dtl.rdcnrauto ';
      qDtl.SQL.add('FROM rfm ');
      qDtl.SQL.add('INNER JOIN rfi ON rfm.rfichave = rfi.rfichave ');
      qDtl.SQL.add('INNER JOIN mfi ON rfm.rfichave = mfi.rfichave ');
      qDtl.SQL.add('INNER JOIN mlt ON mfi.mfichave =mlt.mfichave ');
      qDtl.SQL.add('INNER JOIN lte ON mlt.ltechave = lte.ltechave ');
      qDtl.SQL.add('left JOIN clt ON lte.ltechave = clt.ltechave ');
      qDtl.SQL.add('INNER JOIN dtl ON lte.ltechave = dtl.ltechave ');
      qDtl.SQL.add('INNER JOIN mda ON dtl.mdacodigo = mda.mdacodigo ');
      qDtl.SQL.add('WHERE rfm.meschave='+ self.mesmeschave.AsString + ' ');
      qDtl.SQL.add('AND lte.tfdcodigo=32 ');
      qDtl.SQL.add('AND IF(dtl.mdacodigo IN(4,5),dtl.rdcnrauto<>'+QuotedStr('')+ ',TRUE) ');
      qDtl.SQL.add('AND if(rfi.tfdcodigo=2,tmfcodigo=2, tmfcodigo=21) ');

      qDtl.SQL.add('GROUP BY  dtl.dtlchave ');
      qDtl.SQL.add('ORDER BY dtl.dtlchave  ');
      qDtl.Open;



      vDinheiro := 0;
      vVoucher := 0;
      vChequeProprio := 0;
      vChequeTerceiros := 0;
      vCartaoDebito := 0;
      vCartaoCredito := 0;
      vPIX := 0;
      vOnLine := 0;
      vConvenio := 0;
      vVale := 0;
      vDoacao := 0;
      vCredito := 0;
      vTrocaDevolucao := 0;

      vAFaturar := 0;

      vlTotalItens := 0;
      vlTotalFinalizadores := 0;
      vlPercentualProdutos := 0;

      vlTotalItens := RoundTo(vlTotBruto - vlTotDesc + vlTotalFrete + vlTotalOutras, -2);

     //   vlTotalItens := RoundTo(vlTotBruto - vlTotalOutras, -2);


      while not qDtl.Eof do
      begin
        if not(qDtl.FieldByName('modalidade').AsInteger in [11, 22, 33]) then
          vlTotalFinalizadores := vlTotalFinalizadores + qDtl.FieldByName('dtlvalor').AsCurrency;

        qDtl.Next;
      end;

      vlTotalitensProdutos:=0;

      itm.first;
      while not itm.Eof do
      begin
        if itmtpocodigo.AsString='0' then
        begin
          vlTotalitensProdutos:=vlTotalitensProdutos+itmitmtotal.AsCurrency+itmitmoutras.AsCurrency;
        end;
        itm.Next;

      end;

      mes.Edit;
      mesmesprodutos.AsCurrency:=vlTotalitensProdutos;
      mes.Post;


     vlPercentualProdutos := ((mesmesprodutos.AsCurrency) + mesmesfrete.AsCurrency) / (mesmestotal.AsCurrency+mesmesdesconto.ascurrency) ;
//      vlPercentualProdutos := 1;


      qDtl.First;

      {
        1	Dinheiro	1
        3	Cheque Terceiros	2
        4	Cartão Crédito	3
        5	Cartão Débito	4
        7	Convênio	5
        78	Pagamento Online	5
        6	PIX	17
        8	Crédito	21
        17	Vale	21
      }


      while not qDtl.Eof do
      begin

        case qDtl.FieldByName('modalidade').AsInteger of
          mdaDinheiro:
            vDinheiro := vDinheiro + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaTrocoDinheiro:
            begin
              vlTroco := vlTroco - qDtl.FieldByName('dtlvalor').AsCurrency;
            end;
          mdaChequeProprio:
            begin
              vChequeProprio := vChequeProprio + qDtl.FieldByName('dtlvalor').AsCurrency;
              if qDtl.Eof then
              begin
                vlTroco := vlTroco + qDtl.FieldByName('dtlvalor').AsCurrency;
              end;
            end;
          mdaTrocoChequeProprio:
            begin
              vChequeProprio := vChequeProprio - qDtl.FieldByName('dtlvalor').AsCurrency;
              vlTroco := vlTroco + qDtl.FieldByName('dtlvalor').AsCurrency;
            end;
          mdaChequeTerceiros:
            vChequeTerceiros := vChequeTerceiros + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaTrocoChequeTerceiros:
            vChequeTerceiros := vChequeTerceiros - qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaCartaoDebito:
            vCartaoDebito := vCartaoDebito + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaCartaoCredito:
            vCartaoCredito := vCartaoCredito + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaPIX:
            vPIX := vPIX + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaOnLine:
            vOnLine := vOnLine + qDtl.FieldByName('dtlvalor').AsCurrency;

          mdaConvenio:
            vConvenio := vConvenio + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaVale:
            vVale := vVale + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaDoacao:
            vDoacao := vDoacao + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaCredito:
            vCredito := vCredito + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaTrocaDevolucao:
            vTrocaDevolucao := vTrocaDevolucao + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaVoucher:
            vVoucher:=vVoucher+ qDtl.FieldByName('dtlvalor').AsCurrency;
        end;
        qDtl.Next;
      end;


      if vVoucher > 0 then
        if vlPercentualProdutos <> 0 then
          vVoucher := RoundCurrency(vVoucher * vlPercentualProdutos);

      if vDinheiro > 0 then
        if vlPercentualProdutos <> 0 then
          vDinheiro := RoundCurrency(vDinheiro * vlPercentualProdutos);

      if vChequeProprio > 0 then
        if vlPercentualProdutos <> 0 then
          vChequeProprio := RoundCurrency(vChequeProprio * vlPercentualProdutos);

      if vChequeTerceiros > 0 then
        if vlPercentualProdutos <> 0 then
          vChequeTerceiros := RoundCurrency(vChequeTerceiros * vlPercentualProdutos);

      if vCartaoDebito > 0 then
        if vlPercentualProdutos <> 0 then
          vCartaoDebito := RoundCurrency(vCartaoDebito * vlPercentualProdutos);

      if vCartaoCredito > 0 then
        if vlPercentualProdutos <> 0 then
          vCartaoCredito := RoundCurrency(vCartaoCredito * vlPercentualProdutos);

      if vConvenio > 0 then
        if vlPercentualProdutos <> 0 then
          vConvenio := RoundCurrency(vConvenio * vlPercentualProdutos);

      if vPIX > 0 then
        if vlPercentualProdutos <> 0 then
          vPIX := RoundCurrency(vPIX * vlPercentualProdutos);

      if vOnLine > 0 then
        if vlPercentualProdutos <> 0 then
          vOnLine := RoundCurrency(vOnLine * vlPercentualProdutos);


      if vVale > 0 then
        if vlPercentualProdutos <> 0 then
          vVale := RoundCurrency(vVale * vlPercentualProdutos);

      if vDoacao > 0 then
        if vlPercentualProdutos <> 0 then
          vDoacao := RoundCurrency(vDoacao * vlPercentualProdutos);

      if vCredito > 0 then
        if vlPercentualProdutos <> 0 then
          vCredito := RoundCurrency(vCredito * vlPercentualProdutos);

      if vTrocaDevolucao > 0 then
        if vlPercentualProdutos <> 0 then
          vTrocaDevolucao := RoundCurrency(vTrocaDevolucao * vlPercentualProdutos);

      vlValorDiferenca := 0;
      vlValorDiferenca := vlTotalItens - (vVoucher+ vDinheiro + vChequeProprio + vChequeTerceiros + vCartaoDebito + vCartaoCredito + vConvenio + vOnline + vPIX + vVale +
        vTrocaDevolucao + vDoacao + vCredito);

      vlValorDiferenca := RoundCurrency(vlValorDiferenca);

      if mesetdcodigo.AsInteger = 0 then
      begin
        if vVoucher + vDinheiro + vChequeProprio + vChequeTerceiros + vCartaoDebito + vCartaoCredito + vConvenio + vPIX + vTrocaDevolucao + vVale + vDoacao +
          vCredito = 0 then
        begin
          vDinheiro := mesmestotal.AsCurrency;
          vlValorDiferenca := 0;
        end;

      end;

      if vDinheiro < 0 then
        vlValorDiferenca := vDinheiro;

      qDtl.Close;
      qDtl.SQL.Clear;
      qDtl.SQL.add('SELECT  lte.ltetroco ltetroco,lte.ltechave ');
      qDtl.SQL.add('  FROM rfm ');
      qDtl.SQL.add(' INNER JOIN rfi on rfm.rfichave = rfi.rfichave ');
      qDtl.SQL.add(' INNER JOIN mfi ON rfi.rfichave = mfi.rfichave ');
      qDtl.SQL.add(' INNER JOIN mlt ON mlt.mfichave = mfi.mfichave ');
      qDtl.SQL.add(' INNER JOIN lte ON mlt.ltechave = lte.ltechave ');
      qDtl.SQL.add(' left JOIN clt ON lte.ltechave = clt.ltechave ');
      qDtl.SQL.add(' WHERE rfm.meschave = ' + vMesChave+' ');
      qDtl.SQL.add('  AND if(rfi.tfdcodigo=2,tmfcodigo=2, tmfcodigo=21) ');
      qDtl.SQL.add(' group by lte.ltechave ');
      qDtl.Open;

      vlTroco := 0; // qDtl.FieldByName('ltetroco').AsCurrency;

      if vlTroco < 0 then
        vlTroco := vlTroco * -1;


    // daniel 31/01/2025 regando troco indevido

      qDtl.Close;
      qDtl.SQL.Text :='SELECT distinct dtl.ltechave, dtl.dtlvalor, rfm.meschave, mda.mdacodigo modalidade, mda.mdatagpagamento mdacodigo, dtl.cedcodigo, dtl.rdcnrauto, dtl.dtlchave ';
      qDtl.SQL.add('FROM rfm ');
      qDtl.SQL.add('INNER JOIN rfi ON rfm.rfichave = rfi.rfichave ');
      qDtl.SQL.add('INNER JOIN mfi ON rfm.rfichave = mfi.rfichave ');
      qDtl.SQL.add('INNER JOIN mlt ON mfi.mfichave =mlt.mfichave ');
      qDtl.SQL.add('INNER JOIN lte ON mlt.ltechave = lte.ltechave ');
      qDtl.SQL.add('left JOIN clt ON lte.ltechave = clt.ltechave ');
      qDtl.SQL.add('INNER JOIN dtl ON lte.ltechave = dtl.ltechave ');
      qDtl.SQL.add('INNER JOIN mda ON dtl.mdacodigo = mda.mdacodigo ');
      qDtl.SQL.add('WHERE rfm.meschave='+ self.mesmeschave.AsString + ' ');
      qDtl.SQL.add('AND lte.tfdcodigo=32 ');
      qDtl.SQL.add('AND IF(dtl.mdacodigo IN(4,5),dtl.rdcnrauto<>'+QuotedStr('')+ ',TRUE) ');
      qDtl.SQL.add('AND if(rfi.tfdcodigo=2,tmfcodigo=2, tmfcodigo=21) ');

      qDtl.SQL.add('GROUP BY  dtl.dtlchave ');
      qDtl.SQL.add('ORDER BY dtl.dtlchave  ');
      qDtl.Open;










      if vDinheiro > 0 then
        begin
  // Refatorado: uso AddPagamento (uPagamentosRefatorados)
  AddPagamento(pag, zcone, tagPagamento, vDinheiro, mdaDinheiro, True, vlValorDiferenca, vlTroco, vlCodigoTagOK);
end;
        end;

      if vChequeProprio > 0 then
        begin
  // Refatorado: uso AddPagamento (uPagamentosRefatorados)
  AddPagamento(pag, zcone, tagPagamento, vChequeProprio, mdaChequeProprio, False, vlValorDiferenca, vlTroco, vlCodigoTagOK);
end;

      if vChequeTerceiros > 0 then
        begin
  // Refatorado: uso AddPagamento (uPagamentosRefatorados)
  AddPagamento(pag, zcone, tagPagamento, vChequeTerceiros, mdaChequeTerceiros, False, vlValorDiferenca, vlTroco, vlCodigoTagOK);
end;



          if vlValorDiferenca <> 0 then
          begin
            vPag := vChequeTerceiros; // + vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vChequeTerceiros + vlTroco;
        end;

      if vConvenio > 0 then
        begin
  // Refatorado: uso AddPagamento (uPagamentosRefatorados)
  AddPagamento(pag, zcone, tagPagamento, vConvenio, mdaConvenio, False, vlValorDiferenca, vlTroco, vlCodigoTagOK);
end;


          if vlValorDiferenca <> 0 then
          begin
            vPag := vConvenio + vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vConvenio;
        end;



      if vVale > 0 then
        begin
  // Refatorado: uso AddPagamento (uPagamentosRefatorados)
  AddPagamento(pag, zcone, tagPagamento, vVale, mdaVale, False, vlValorDiferenca, vlTroco, vlCodigoTagOK);
end;

          if vlValorDiferenca <> 0 then
          begin
            vPag := vVale + vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vVale;
        end;

      if vDoacao > 0 then
        begin
  // Refatorado: uso AddPagamento (uPagamentosRefatorados)
  AddPagamento(pag, zcone, tagPagamento, vDoacao, mdaDoacao, False, vlValorDiferenca, vlTroco, vlCodigoTagOK);
end;

          if vlValorDiferenca <> 0 then
          begin
            vPag := vDoacao + vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vDoacao;
        end;

      if vOnline > 0 then
        begin
  // Refatorado: uso AddPagamento (uPagamentosRefatorados)
  AddPagamento(pag, zcone, tagPagamento, vOnline, mdaOnLine, False, vlValorDiferenca, vlTroco, vlCodigoTagOK);
end;

          if vlValorDiferenca <> 0 then
          begin
            vPag := vOnline + vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vOnline;
        end;


      if vCredito > 0 then
        begin
  // Refatorado: uso AddPagamento (uPagamentosRefatorados)
  AddPagamento(pag, zcone, tagPagamento, vCredito, mdaCredito, False, vlValorDiferenca, vlTroco, vlCodigoTagOK);
end;

          if vlValorDiferenca <> 0 then
          begin
            vPag := vCredito + vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vCredito;
        end;

      if vTrocaDevolucao > 0 then
        begin
  // Refatorado: uso AddPagamento (uPagamentosRefatorados)
  AddPagamento(pag, zcone, tagPagamento, vTrocaDevolucao, mdaTrocaDevolucao, False, vlValorDiferenca, vlTroco, vlCodigoTagOK);
end;


          if vlValorDiferenca <> 0 then
          begin
            vPag := vTrocaDevolucao + vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vTrocaDevolucao;

        end;


      // detalhe de dados do cartão e pix


      qDtl.FIRST;
      while not qDtl.Eof do
      begin


        dtl.close;
        dtl.Connection := zcone;
        dtl.ParamByName('ltechave').AsString:=qDtl.FieldByName('ltechave').AsString;
        dtl.ParamByName('dtlchave').AsString:=qDtl.FieldByName('dtlchave').AsString;
        dtl.Open;

        dtl.First;

        while not dtl.eof do
        begin

          if (dtl.FieldByName('mdacodigo').AsInteger=mdaCartaoDebito) then
          begin

            rdc.Close;
            rdc.Connection := zcone;
            rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
            rdc.Open;


            if rdc.IsEmpty then
            begin
              rcddtl.close;
              rcddtl.Connection := zcone;
              rcddtl.ParamByName('rdcchave').AsInteger:=-1;
              rcddtl.open;

              adc.close;
              adc.Connection := zcone;
              adc.open;
              rcddtl.Append;

              rcddtlrdcvalor.AsCurrency:=dtl.FieldByName('dtlvalor').AsCurrency;
              rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;
              rcddtlrdcvalorope.asFloat:=dtl.FieldByName('dtlvalor').AsCurrency;
              rcddtlrdcsituacao.asInteger:=1;
              rcddtlrdcdata.asDatetime:=date();
              rcddtladccodigo.asInteger:=adc.FieldByName('adccodigo').AsInteger;
              rcddtlrdcparcelas.asInteger:=1;
              rcddtltescodigo.asInteger:=0;
              rcddtlrdcobs.asString:='';
              rcddtlbdccodigo.asInteger:=1;
              rcddtlrdccomprovante1via.asString:='';
              rcddtlrdccomprovante2via.asString:='';
              rcddtlrdcconciliado.asInteger:=0;
              rcddtlrdctaxa.asFloat:= 0;
              rcddtlrdcvalordesconto.asFloat:=0;
              rcddtldtlchave.asInteger:=dtl.FieldByName('dtlchave').AsInteger;
              rcddtl.Post;

              ltr.close;
              ltr.Connection := zcone;
              ltr.open;

              ltr.Append;
              ltrrdcchave.AsInteger:=rcddtlrdcchave.AsInteger;
              ltrdtlchave.AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
              ltrrdcnrauto.AsString:=dtl.FieldByName('rdcnrauto').AsString;
              ltr.Post;



              rdc.Close;
              rdc.Connection := zcone;
              rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
              rdc.Open;


            end
            else
            begin

              rcddtl.close;
              rcddtl.Connection := zcone;
              rcddtl.ParamByName('rdcchave').AsInteger:=rdc.FieldByName('rdcchave').AsInteger;
              rcddtl.open;


              if dtl.FieldByName('rdcnrauto').AsString<>'' then
              begin
                rcddtl.Edit;
                rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;

                if (pos('{', rcddtl.FieldByName('rdcnrauto').AsString)>0) then
                begin
                  rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;
                end;
                rcddtl.Post;
              end;

            end;

            tagPagamento.Close;
            tagPagamento.Connection:=zcone;
            tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaCartaoDebito;
            tagPagamento.Open;


            if (vCartaoDebito > 0) and (rdc.RecordCount>0) {and (mesoricodigo.AsInteger<>8)} then
            begin

              with pag.add do
              begin

                tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));

                if tagPagamento.FieldByName('mdatagpagamento').AsInteger=99 then
                begin
                 xPag:=tagPagamento.FieldByName('mdadescrpagamento').AsString;
                end;

               // vPag := rdc.FieldByName('rdcvalor').AsCurrency;
                vPag := dtl.FieldByName('dtlvalor').AsCurrency;

                if (rdc.FieldByName('adccodigo').AsString<>'') and
                   (rdc.FieldByName('adccodigo').AsString<>'0') and
                   (pos('{',rdc.FieldByName('rdcnrauto').AsString)=0) and
                   (rdc.FieldByName('rdcnrauto').AsString<>'') and
                   (rdc.RecordCount >0) then
                begin
                  ide.indPres:= pcPresencial;// KUSKAO
                  Transp.modFrete := mfSemFrete;

                  with infIntermed do
                  begin
                   infIntermed.CNPJ:='';
                   infIntermed.idCadIntTran:='';
                  end;

                  infAdic.infCpl:='';

                  tpIntegra:=tiPagIntegrado;

                  CNPJ:= SoNumeros(rdc.FieldByName('etddoc1').AsString);
                  cAut:=rdc.FieldByName('rdcnrauto').AsString;

                  CNPJReceb:=SoNumeros(cfgetddoc1.AsString);
                  idTermPag:=acesso.Terminal.ToString;


                  case rdc.FieldByName('bdccodigo').AsInteger of
                    1:TBand:= bcVisa;
                    2:TBand:= bcMasterCard;
                    3:TBand:= bcAmericanExpress;
                    4:TBand:= bcSorocred;
                    5:TBand:= bcDinersClub;
                    6:TBand:= bcElo;
                    7:TBand:= bcHipercard;
                    8:TBand:= bcAura;
                    9:TBand:= bcCabal;
                    10:TBand:= bcAlelo;
                    11:TBand:= bcBanesCard;
                    12:TBand:= bcCalCard;
                    13:TBand:= bcCredz;
                    14:TBand:= bcDiscover;
                    15:TBand:= bcGoodCard;
                    16:TBand:= bcGreenCard;
                    17:TBand:= bcHiper;
                    18:TBand:= bcJcB;
                    19:TBand:= bcMais;
                    20:TBand:= bcMaxVan;
                    21:TBand:= bcPolicard;
                    22:TBand:= bcRedeCompras;
                    23:TBand:= bcSodexo;
                    24:TBand:= bcValeCard;
                    25:TBand:= bcVerocheque;
                    26:TBand:= bcVR;
                    27:TBand:= bcTicket;
                 10014:TBand:= 	bcDiscover;
                 20001:TBand:= 	bcMasterCard;
                 20002:TBand:= 	bcVisa;
                 20137:TBand:= 	bcMasterCard;
                    99:TBand:= bcOutros;
                  end;
                end
                else
                begin
                  tpIntegra:=tiPagNaoIntegrado;

                end;

              end;
            end
            else
            begin

              with pag.add do
              begin
                vPag := dtl.FieldByName('dtlvalor').AsCurrency;
                tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));
               // tpIntegra:=tiPagNaoIntegrado;
              end;
            end;

          end;

          if (dtl.FieldByName('mdacodigo').AsInteger=mdaCartaoCredito) then
          begin

            rdc.Close;
            rdc.Connection := zcone;
            rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
            rdc.Open;

            if rdc.IsEmpty then
            begin
              rcddtl.close;
              rcddtl.Connection := zcone;
              rcddtl.ParamByName('rdcchave').AsInteger:=-1;
              rcddtl.open;

              adc.close;
              adc.Connection := zcone;
              adc.open;
              rcddtl.Append;

              rcddtlrdcvalor.AsCurrency:=dtl.FieldByName('dtlvalor').AsCurrency;
              rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;
              rcddtlrdcvalorope.asFloat:=dtl.FieldByName('dtlvalor').AsCurrency;
              rcddtlrdcsituacao.asInteger:=1;
              rcddtlrdcdata.asDatetime:=date();
              rcddtladccodigo.asInteger:=adc.FieldByName('adccodigo').AsInteger;
              rcddtlrdcparcelas.asInteger:=1;
              rcddtltescodigo.asInteger:=0;
              rcddtlrdcobs.asString:='';
              rcddtlbdccodigo.asInteger:=1;
              rcddtlrdccomprovante1via.asString:='';
              rcddtlrdccomprovante2via.asString:='';
              rcddtlrdcconciliado.asInteger:=0;
              rcddtlrdctaxa.asFloat:= 0;
              rcddtlrdcvalordesconto.asFloat:=0;
              rcddtldtlchave.asInteger:=dtl.FieldByName('dtlchave').AsInteger;
              rcddtl.Post;

              ltr.close;
              ltr.Connection := zcone;
              ltr.open;

              ltr.Append;
              ltrrdcchave.AsInteger:=rcddtlrdcchave.AsInteger;
              ltrdtlchave.AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
              ltrrdcnrauto.AsString:=dtl.FieldByName('rdcnrauto').AsString;
              ltr.Post;



              rdc.Close;
              rdc.Connection := zcone;
              rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
              rdc.Open;


            end
            else
            begin

              rcddtl.close;
              rcddtl.Connection := zcone;
              rcddtl.ParamByName('rdcchave').AsInteger:=rdc.FieldByName('rdcchave').AsInteger;
              rcddtl.open;


              if dtl.FieldByName('rdcnrauto').AsString<>'' then
              begin
                rcddtl.Edit;
                rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;

                if (pos('{', rcddtl.FieldByName('rdcnrauto').AsString)>0) then
                begin
                  rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;
                end;
                rcddtl.Post;
              end;

            end;

            tagPagamento.Close;
            tagPagamento.Connection:=zcone;
            tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaCartaoCredito;
            tagPagamento.Open;

            if (vCartaoCredito > 0) and (rdc.RecordCount>0) { and (mesoricodigo.AsInteger<>8)} then
            begin

              with pag.add do
              begin

                tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));

                if tagPagamento.FieldByName('mdatagpagamento').AsInteger=99 then
                begin
                 xPag:=tagPagamento.FieldByName('mdadescrpagamento').AsString;
                end;

               // vPag := rdc.FieldByName('rdcvalor').AsCurrency;
                vPag := dtl.FieldByName('dtlvalor').AsCurrency;
                if (rdc.FieldByName('adccodigo').AsString<>'') and
                   (rdc.FieldByName('adccodigo').AsString<>'0') and
                   (pos('{',rdc.FieldByName('rdcnrauto').AsString)=0) and
                   (rdc.FieldByName('rdcnrauto').AsString<>'') and
                   (rdc.RecordCount >0)  then
                begin
                  ide.indPres:= pcPresencial;// KUSKAO
                  Transp.modFrete := mfSemFrete;

                  with infIntermed do
                  begin
                   infIntermed.CNPJ:='';
                   infIntermed.idCadIntTran:='';
                  end;

                  infAdic.infCpl:='';



                  tpIntegra:=tiPagIntegrado;
                  CNPJ:= SoNumeros(rdc.FieldByName('etddoc1').AsString);

                  CNPJReceb:=SoNumeros(cfgetddoc1.AsString);
                  idTermPag:=acesso.Terminal.ToString;

                  case rdc.FieldByName('bdccodigo').AsInteger of
                    1:TBand:= bcVisa;
                    2:TBand:= bcMasterCard;
                    3:TBand:= bcAmericanExpress;
                    4:TBand:= bcSorocred;
                    5:TBand:= bcDinersClub;
                    6:TBand:= bcElo;
                    7:TBand:= bcHipercard;
                    8:TBand:= bcAura;
                    9:TBand:= bcCabal;
                    10:TBand:= bcAlelo;
                    11:TBand:= bcBanesCard;
                    12:TBand:= bcCalCard;
                    13:TBand:= bcCredz;
                    14:TBand:= bcDiscover;
                    15:TBand:= bcGoodCard;
                    16:TBand:= bcGreenCard;
                    17:TBand:= bcHiper;
                    18:TBand:= bcJcB;
                    19:TBand:= bcMais;
                    20:TBand:= bcMaxVan;
                    21:TBand:= bcPolicard;
                    22:TBand:= bcRedeCompras;
                    23:TBand:= bcSodexo;
                    24:TBand:= bcValeCard;
                    25:TBand:= bcVerocheque;
                    26:TBand:= bcVR;
                    27:TBand:= bcTicket;
                 10014:TBand:= 	bcDiscover;
                 20001:TBand:= 	bcMasterCard;
                 20002:TBand:= 	bcVisa;
                 20137:TBand:= 	bcMasterCard;

                    99:TBand:= bcOutros;
                  end;
                  cAut:=rdc.FieldByName('rdcnrauto').AsString;
                end
                else
                begin
                  tpIntegra:=tiPagNaoIntegrado;
                end;

              end;
            end
            else
            begin
              with pag.add do
              begin
                vPag := dtl.FieldByName('dtlvalor').AsCurrency;
                tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));
               // tpIntegra:=tiPagNaoIntegrado;
              end;
            end;

          end;

          if (dtl.FieldByName('mdacodigo').AsInteger=mdaPIX) then
          begin

            rdc.Close;
            rdc.Connection := zcone;
            rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
            rdc.Open;

            if rdc.IsEmpty then
            begin
              rcddtl.close;
              rcddtl.Connection := zcone;
              rcddtl.ParamByName('rdcchave').AsInteger:=-1;
              rcddtl.open;

              adc.close;
              adc.Connection := zcone;
              adc.open;
              rcddtl.Append;

              rcddtlrdcvalor.AsCurrency:=dtl.FieldByName('dtlvalor').AsCurrency;
              rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;
              rcddtlrdcvalorope.asFloat:=dtl.FieldByName('dtlvalor').AsCurrency;
              rcddtlrdcsituacao.asInteger:=1;
              rcddtlrdcdata.asDatetime:=date();
              rcddtladccodigo.asInteger:=adc.FieldByName('adccodigo').AsInteger;
              rcddtlrdcparcelas.asInteger:=1;
              rcddtltescodigo.asInteger:=0;
              rcddtlrdcobs.asString:='';
              rcddtlbdccodigo.asInteger:=1;
              rcddtlrdccomprovante1via.asString:='';
              rcddtlrdccomprovante2via.asString:='';
              rcddtlrdcconciliado.asInteger:=0;
              rcddtlrdctaxa.asFloat:= 0;
              rcddtlrdcvalordesconto.asFloat:=0;
              rcddtldtlchave.asInteger:=dtl.FieldByName('dtlchave').AsInteger;
              rcddtl.Post;

              ltr.close;
              ltr.Connection := zcone;
              ltr.open;

              ltr.Append;
              ltrrdcchave.AsInteger:=rcddtlrdcchave.AsInteger;
              ltrdtlchave.AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
              ltrrdcnrauto.AsString:=dtl.FieldByName('rdcnrauto').AsString;
              ltr.Post;

              rdc.Close;
              rdc.Connection := zcone;
              rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
              rdc.Open;


            end
            else
            begin

              rcddtl.close;
              rcddtl.Connection := zcone;
              rcddtl.ParamByName('rdcchave').AsInteger:=rdc.FieldByName('rdcchave').AsInteger;
              rcddtl.open;


              if dtl.FieldByName('rdcnrauto').AsString<>'' then
              begin
                rcddtl.Edit;
                rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;

                if (pos('{', rcddtl.FieldByName('rdcnrauto').AsString)>0) then
                begin
                  rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;
                end;
                rcddtl.Post;
              end;
            end;


            tagPagamento.Close;
            tagPagamento.Connection:=zcone;
            tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaPIX;
            tagPagamento.Open;

            if (vPIX > 0) and (rdc.RecordCount>0) {and (mesoricodigo.AsInteger<>8)} then
            begin
              with pag.add do
              begin

                tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));

                if tagPagamento.FieldByName('mdatagpagamento').AsInteger=99 then
                begin
                 xPag:=tagPagamento.FieldByName('mdadescrpagamento').AsString;
                end;

                // vPag := rdc.FieldByName('rdcvalor').AsCurrency;
                vPag := dtl.FieldByName('dtlvalor').AsCurrency;

                if (rdc.FieldByName('adccodigo').AsString<>'') and
                   (rdc.FieldByName('adccodigo').AsString<>'0') and
                   (pos('{',rdc.FieldByName('rdcnrauto').AsString)=0) and
                   (rdc.FieldByName('rdcnrauto').AsString<>'') and
                   (rdc.RecordCount >0)  then
                begin
                  ide.indPres:= pcPresencial;// KUSKAO
                  Transp.modFrete := mfSemFrete;

                  with infIntermed do
                  begin
                   infIntermed.CNPJ:='';
                   infIntermed.idCadIntTran:='';
                  end;

                  infAdic.infCpl:='';


                  tpIntegra:=tiPagIntegrado;


                  ctapix.Close;
                  ctapix.Connection:=zcone;
                  ctapix.ParamByName('ctacodigo').AsInteger:=cfgcfgctacodigopix.AsInteger;
                  ctapix.Open;

                  if ctapix.FieldByName('ctacnpjbanco').AsString<>'' then
                    CNPJ:= SoNumeros(ctapix.FieldByName('ctacnpjbanco').AsString);


                  CNPJReceb:=SoNumeros(cfgetddoc1.AsString);
                  idTermPag:=acesso.Terminal.ToString;
                  case rdc.FieldByName('bdccodigo').AsInteger of
                    1:TBand:= bcVisa;
                    2:TBand:= bcMasterCard;
                    3:TBand:= bcAmericanExpress;
                    4:TBand:= bcSorocred;
                    5:TBand:= bcDinersClub;
                    6:TBand:= bcElo;
                    7:TBand:= bcHipercard;
                    8:TBand:= bcAura;
                    9:TBand:= bcCabal;
                    10:TBand:= bcAlelo;
                    11:TBand:= bcBanesCard;
                    12:TBand:= bcCalCard;
                    13:TBand:= bcCredz;
                    14:TBand:= bcDiscover;
                    15:TBand:= bcGoodCard;
                    16:TBand:= bcGreenCard;
                    17:TBand:= bcHiper;
                    18:TBand:= bcJcB;
                    19:TBand:= bcMais;
                    20:TBand:= bcMaxVan;
                    21:TBand:= bcPolicard;
                    22:TBand:= bcRedeCompras;
                    23:TBand:= bcSodexo;
                    24:TBand:= bcValeCard;
                    25:TBand:= bcVerocheque;
                    26:TBand:= bcVR;
                    27:TBand:= bcTicket;
                 10014:TBand:= 	bcDiscover;
                 20001:TBand:= 	bcMasterCard;
                 20002:TBand:= 	bcVisa;
                 20137:TBand:= 	bcMasterCard;

                    99:TBand:= bcOutros;
                  end;
                  cAut:=rdc.FieldByName('rdcnrauto').AsString;
                end
                else
                begin
                  tpIntegra:=tiPagNaoIntegrado;
                end;

              end;

            end
            else
            begin
              with pag.add do
              begin
                vPag := dtl.FieldByName('dtlvalor').AsCurrency;
                tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));
               // tpIntegra:=tiPagNaoIntegrado;
              end;
            end;

          end;

          if (dtl.FieldByName('mdacodigo').AsInteger=mdaVoucher) then
          begin

            rdc.Close;
            rdc.Connection := zcone;
            rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
            rdc.Open;

            if rdc.IsEmpty then
            begin
              rcddtl.close;
              rcddtl.Connection := zcone;
              rcddtl.ParamByName('rdcchave').AsInteger:=-1;
              rcddtl.open;

              adc.close;
              adc.Connection := zcone;
              adc.open;

              rcddtl.Append;
              rcddtlrdcvalor.AsCurrency:=dtl.FieldByName('dtlvalor').AsCurrency;
              rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;
              rcddtlrdcvalorope.asFloat:=dtl.FieldByName('dtlvalor').AsCurrency;
              rcddtlrdcsituacao.asInteger:=1;
              rcddtlrdcdata.asDatetime:=date();
              rcddtladccodigo.asInteger:=adc.FieldByName('adccodigo').AsInteger;
              rcddtlrdcparcelas.asInteger:=1;
              rcddtltescodigo.asInteger:=0;
              rcddtlrdcobs.asString:='';
              rcddtlbdccodigo.asInteger:=1;
              rcddtlrdccomprovante1via.asString:='';
              rcddtlrdccomprovante2via.asString:='';
              rcddtlrdcconciliado.asInteger:=0;
              rcddtlrdctaxa.asFloat:= 0;
              rcddtlrdcvalordesconto.asFloat:=0;
              rcddtldtlchave.asInteger:=dtl.FieldByName('dtlchave').AsInteger;
              rcddtl.Post;

              ltr.close;
              ltr.Connection := zcone;
              ltr.open;

              ltr.Append;
              ltrrdcchave.AsInteger:=rcddtlrdcchave.AsInteger;
              ltrdtlchave.AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
              ltrrdcnrauto.AsString:=dtl.FieldByName('rdcnrauto').AsString;
              ltr.Post;



              rdc.Close;
              rdc.Connection := zcone;
              rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
              rdc.Open;


            end
            else
            begin
              rcddtl.close;
              rcddtl.Connection := zcone;
              rcddtl.ParamByName('rdcchave').AsInteger:=rdc.FieldByName('rdcchave').AsInteger;
              rcddtl.open;


              if dtl.FieldByName('rdcnrauto').AsString<>'' then
              begin
                rcddtl.Edit;
                rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;

                if (pos('{', rcddtl.FieldByName('rdcnrauto').AsString)>0) then
                begin
                  rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;
                end;
                rcddtl.Post;
              end;

            end;

            tagPagamento.Close;
            tagPagamento.Connection:=zcone;
            tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaVoucher;
            tagPagamento.Open;

            if (vVoucher > 0) and (rdc.RecordCount>0) {and (mesoricodigo.AsInteger<>8)} then
            begin
              with pag.add do
              begin


                tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));

                if (tagPagamento.FieldByName('mdatagpagamento').AsInteger=99) or
                   (tagPagamento.FieldByName('mdatagpagamento').AsInteger=0) then
                begin
                 xPag:=tagPagamento.FieldByName('mdadescrpagamento').AsString;
                end;

               // vPag := rdc.FieldByName('rdcvalor').AsCurrency;
                vPag := dtl.FieldByName('dtlvalor').AsCurrency;

                if (rdc.FieldByName('adccodigo').AsString<>'') and
                   (rdc.FieldByName('adccodigo').AsString<>'0') and
                   (pos('{',rdc.FieldByName('rdcnrauto').AsString)=0)  and
                   (rdc.FieldByName('rdcnrauto').AsString<>'') and
                   (rdc.RecordCount >0)  then
                begin

                  ide.indPres:= pcPresencial;// KUSKAO
                  Transp.modFrete := mfSemFrete;

                  with infIntermed do
                  begin
                   infIntermed.CNPJ:='';
                   infIntermed.idCadIntTran:='';
                  end;

                  infAdic.infCpl:='';



                  tpIntegra:=tiPagIntegrado;
                  CNPJ:= SoNumeros(rdc.FieldByName('etddoc1').AsString);
                  CNPJReceb:=SoNumeros(cfgetddoc1.AsString);
                  idTermPag:=acesso.Terminal.ToString;
                  case rdc.FieldByName('bdccodigo').AsInteger of
                    1:TBand:= bcVisa;
                    2:TBand:= bcMasterCard;
                    3:TBand:= bcAmericanExpress;
                    4:TBand:= bcSorocred;
                    5:TBand:= bcDinersClub;
                    6:TBand:= bcElo;
                    7:TBand:= bcHipercard;
                    8:TBand:= bcAura;
                    9:TBand:= bcCabal;
                    10:TBand:= bcAlelo;
                    11:TBand:= bcBanesCard;
                    12:TBand:= bcCalCard;
                    13:TBand:= bcCredz;
                    14:TBand:= bcDiscover;
                    15:TBand:= bcGoodCard;
                    16:TBand:= bcGreenCard;
                    17:TBand:= bcHiper;
                    18:TBand:= bcJcB;
                    19:TBand:= bcMais;
                    20:TBand:= bcMaxVan;
                    21:TBand:= bcPolicard;
                    22:TBand:= bcRedeCompras;
                    23:TBand:= bcSodexo;
                    24:TBand:= bcValeCard;
                    25:TBand:= bcVerocheque;
                    26:TBand:= bcVR;
                    27:TBand:= bcTicket;
                 10014:TBand:= 	bcDiscover;
                 20001:TBand:= 	bcMasterCard;
                 20002:TBand:= 	bcVisa;
                 20137:TBand:= 	bcMasterCard;

                    99:TBand:= bcOutros;
                  end;
                  cAut:=rdc.FieldByName('rdcnrauto').AsString;
                end
                else
                begin
                  tpIntegra:=tiPagNaoIntegrado;
                end;

              end;
            end
            else
            begin
              with pag.add do
              begin
                vPag := dtl.FieldByName('dtlvalor').AsCurrency;
                tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));
              //  tpIntegra:=tiPagNaoIntegrado;
              end;
            end;

          end;

          dtl.next;
        end;
        qdtl.Next;
      end;

      {
      if pag.Count = 0 then
      begin

        begin
  // Refatorado: uso AddPagamento (uPagamentosRefatorados)
  AddPagamento(pag, zcone, tagPagamento, vDinheiro, mdaDinheiro, True, vlValorDiferenca, vlTroco, vlCodigoTagOK);
end;

          if vlValorDiferenca <> 0 then
          begin
            vPag := vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vTrocaDevolucao;

        end;

      end;
      }

      if (self.mesmesnumero.AsString <> '') and (self.mesmesnumero.AsString <> '0') then
      begin
        vNumeroNFe := self.mesmesnumero.AsInteger
      end
      else
      begin

        NumeroNFCe.ExecSQL;
        vNumeroNFe := NumeroNFCe.Fields[0].AsInteger;
      end;

      ide.nNF := vNumeroNFe;


      if (Copy(vlNFCeProtocolo, 1, 10) <> '0000000000') and (Length(trim(vlNFCeProtocolo)) > 0) then
      begin

        ide.cNF := StrToInt(FormatFloat('00000000', StrToInt(Copy(vlNFCeChave, 36, 8))));

        if Copy(vlNFCeChave, 35, 1) = '9' then
        begin

          ACBrNFeNFCe.Configuracoes.Geral.FormaEmissao := teOffLine;
          ide.tpEmis := teOffLine;
          ide.dhCont := mesmesdatanfe.AsDateTime; // recrecdthoraentrada.AsFloat;
          ide.xJust := 'Falha de comunicação com servidores da SEFAZ.';

        end
        else
        begin
          ACBrNFeNFCe.Configuracoes.Geral.FormaEmissao := teNormal;
          ide.tpEmis := teNormal;
        end;

      end
      else
      begin
        if (mesmescodigonota.AsString = '') or (mesmescodigonota.AsString = '0') then
        begin
          ide.cNF := GerarCodigoDFe(vNumeroNFe);
          mes.Edit;
          mesmescodigonota.AsInteger := ide.cNF;
          mes.Post;
        end
        else
        begin
          ide.cNF := mesmescodigonota.AsInteger;
        end;

      end;

      consulta.Close;
      consulta.SQL.Text := 'UPDATE mes SET ';
      consulta.SQL.add('mesnumero = ' + IntToStr(vNumeroNFe) + ', ');
      consulta.SQL.add('tdfcodigo = ''65'', ');
      consulta.SQL.add('refcodigo = 9, ');
      consulta.SQL.add('temcodigo = 4 ');
      consulta.SQL.add('WHERE meschave = ' + vMesChave);
      consulta.ExecSQL;

      info.Lines.add('Iniciar comunicação: ' + datetimetostr(now));

      if (Copy(mesmesprotocolo.AsString, 1, 15) <> '000000000000000') and (mesmesprotocolo.AsString <> '') then
      begin

        AssinaNota(ACBrNFeNFCe, vMesChave, vFlaCodigo);

        vpNomeArquivoNFCe := mesmeschavenfe.AsString;

        vpNomeArquivoNFCe := vpPastaPrincipal + vpSubPastaDoc + '\' + formatdatetime('yyyymm', mesmesdatanfe.AsDateTime) + '\' + vpNomeArquivoNFCe +
          '-nfe.xml';

        ConsultaNFCe(mesmeschave.AsString, vpNomeArquivoNFCe, Acesso.Filial.ToString);

      end
      else
      begin

        if AssinaNota(ACBrNFeNFCe, vMesChave, vFlaCodigo) then
        begin
          info.Lines.add('Nota Assinada: ' + datetimetostr(now));
          Result := True;

        end;
      end;

    End;

    Result := True;

  except
    On E: Exception Do
    Begin
      Result := False;
    End;
  end;
End;





procedure Tfnotasfiscais.FormShow(Sender: TObject);
begin
  Self.Width := 230;
  Self.Height := 230;

end;


procedure Tfnotasfiscais.Setzcone(const Value: TUniConnection);
begin
  Fzcone := Value;
end;

end.
