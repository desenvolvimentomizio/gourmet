unit ufprincipromochopp;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, UniProvider, MySQLUniProvider, Data.DB,
  DBAccess, Uni, DASQLMonitor, UniSQLMonitor, inifiles, Vcl.ExtCtrls, MemDS;

type
  Tfprincipromochopp = class(TForm)
    UniSQLMonitor: TUniSQLMonitor;
    Conexao: TUniConnection;
    MySQLUniProvider: TMySQLUniProvider;
    plrodape: TPanel;
    plbanco: TPanel;
    plservidor: TPanel;
    Inicializar: TTimer;
    promochopp: TUniQuery;
    plrelogio: TPanel;
    consulta: TUniQuery;
    Panel1: TPanel;
    procedure InicializarTimer(Sender: TObject);
    procedure FormShow(Sender: TObject);
  private
    procedure ConectaBanco;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  fprincipromochopp: Tfprincipromochopp;

implementation

{$R *.dfm}

Procedure Tfprincipromochopp.ConectaBanco;
Var
  arquini: TIniFile;
  vlNomeBanco: String;
  vlPortaBanco: String;
  vlServidor: String;
  vlUsuario: String;
  vlSenha: String;
  vlMonitor: String;
  vlTipoBanco: String;
Begin
  try
    arquini := TIniFile.Create(ExtractFilePath(Application.ExeName) + 'gourmeterp.ini');
    With arquini Do
    Begin
      vlNomeBanco := ReadString('posi', 'nomebanco', 'mizio');
      vlServidor := ReadString('posi', 'servidor', '127.0.0.1');
      vlUsuario := ReadString('posi', 'usuario', 'root');
      vlSenha := ReadString('posi', 'senha', 'xda973');
      vlPortaBanco := ReadString('posi', 'portabanco', '3306');
      vlMonitor := ReadString('posi', 'monitor', '0');
      vlTipoBanco := ReadString('posi', 'tipo', 'mysql');

      if vlNomeBanco = 'sulani' then
        vlSenha := 'riticami';

    End;
    arquini.Free;

    plbanco.Caption := vlNomeBanco;
    plservidor.Caption := vlServidor;

    (* Configuração para DBMonitor *)
    if vlMonitor = '1' then
      UniSQLMonitor.Active := true
    else
      UniSQLMonitor.Active := False;

    if lowercase(vlTipoBanco) = 'mysql' then
      Conexao.ProviderName := 'mySQL';

    if lowercase(vlTipoBanco) = 'postgresql' then
      Conexao.ProviderName := 'PostgreSQL';

    Conexao.Connected := False;
    Conexao.Database := vlNomeBanco;
    Conexao.Username := vlUsuario;
    Conexao.Password := vlSenha;
    Conexao.Port := StrToInt(vlPortaBanco);
    Conexao.Server := vlServidor;

    Conexao.Connected := true;

  except
    plbanco.Caption := 'ERRO';
    plservidor.Caption := 'ERRO';

  end;
End;

procedure Tfprincipromochopp.FormShow(Sender: TObject);
begin
  Inicializar.Enabled := true;
end;

procedure Tfprincipromochopp.InicializarTimer(Sender: TObject);
begin
  Conexao.Connected := False;
  ConectaBanco;
  try
    consulta.Close;
    consulta.SQL.Text := 'select now() as agora';
    consulta.Open;

    promochopp.ExecSQL;
    plrelogio.Caption := consulta.FieldByName('agora').AsString;
    Application.ProcessMessages;
  except
    plrelogio.Caption := 'ERRO';
    Application.ProcessMessages;

  end;

end;

end.
