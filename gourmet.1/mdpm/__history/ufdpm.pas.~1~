unit ufdpm;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Data.DB, MemDS, DBAccess, Uni, uPegaBase, ufuncoes;

type
  Tfdpm = class(TForm)
    cfg: TUniQuery;
    cfgufscodigo: TStringField;
    cfgcfgserienfe: TStringField;
    cfgcfgpccvenda: TStringField;
    cfgcfgdefinetoeatendimento: TIntegerField;
    cfgcfgtoemesfora: TIntegerField;
    cfgcfgtoemesinte: TIntegerField;
    cfgcfgtoetransflainte: TIntegerField;
    cfgcfgtoetransflafora: TIntegerField;
    mes: TUniQuery;
    mesmeschave: TIntegerField;
    mesetdcodigo: TIntegerField;
    mesclbcodigo: TIntegerField;
    mesmesemissao: TDateField;
    mesmesregistro: TDateField;
    mestdfcodigo: TStringField;
    messdecodigo: TStringField;
    mesmesserie: TStringField;
    mesmesnumero: TIntegerField;
    mesmeschavenfe: TStringField;
    mestoecodigo: TIntegerField;
    mesmesvalor: TFloatField;
    mesmesdesconto: TFloatField;
    mesmestotal: TFloatField;
    mestfpcodigo: TIntegerField;
    mesrefcodigo: TIntegerField;
    mesmesfrete: TFloatField;
    mesmesseguro: TFloatField;
    mesmesoutras: TFloatField;
    mesmesbicm: TFloatField;
    mesmesicm: TFloatField;
    mesmesbicms: TFloatField;
    mesmesicms: TFloatField;
    mesmesipi: TFloatField;
    mesmespis: TFloatField;
    mesmescofins: TFloatField;
    mesmespiss: TFloatField;
    mesmescofinss: TFloatField;
    mestrmcodigo: TIntegerField;
    mesmesprotocolo: TStringField;
    mestrfcodigo: TStringField;
    mestemcodigo: TIntegerField;
    mesedritem: TIntegerField;
    mesmesservicos: TFloatField;
    mesmesprodutos: TFloatField;
    mesclbvendedor: TIntegerField;
    meseqpcodigo: TIntegerField;
    mesflacodigo: TIntegerField;
    itm: TUniQuery;
    itmitmchave: TIntegerField;
    itmmeschave: TIntegerField;
    itmitmitem: TIntegerField;
    itmprocodigo: TIntegerField;
    itmcstcodigo: TStringField;
    itmprocodigoori: TStringField;
    itmpronomeori: TStringField;
    itmitmdesccomple: TStringField;
    itmitmquantidade: TFloatField;
    itmitmvalor: TFloatField;
    itmitmdesconto: TFloatField;
    itmitmtotal: TFloatField;
    itmitmmovifisico: TStringField;
    itmtoecodigo: TIntegerField;
    itmcfocfop: TStringField;
    itmitmbicm: TFloatField;
    itmicmcodigo: TStringField;
    itmitmaliqicm: TStringField;
    itmitmicm: TFloatField;
    itmitmbicms: TFloatField;
    itmitmaliqicms: TFloatField;
    itmitmicms: TFloatField;
    itmitmapuipi: TStringField;
    itmcsicodigo: TStringField;
    itmceicodigo: TStringField;
    itmitmbipi: TFloatField;
    itmitmaliqipi: TFloatField;
    itmitmipi: TFloatField;
    itmcspcodigo: TStringField;
    itmitmbpis: TFloatField;
    itmitmaliqpis: TFloatField;
    itmitmpis: TFloatField;
    itmitmquantpis: TFloatField;
    itmitmaliqpisvalor: TFloatField;
    itmitmbcofins: TFloatField;
    itmcsfcodigo: TStringField;
    itmitmaliqcofins: TFloatField;
    itmitmquantcofins: TFloatField;
    itmitmaliqcofinsvalor: TFloatField;
    itmitmcofins: TFloatField;
    itmpcccodigo: TStringField;
    itmunicodigo: TIntegerField;
    itmpuncodigo: TIntegerField;
    itmprogtin: TStringField;
    itmitmcontendo: TFloatField;
    itmcfocfopdestinacao: TStringField;
    itmunicodigobase: TIntegerField;
    itmitmoutras: TFloatField;
    itmitmseguro: TFloatField;
    itmitmfrete: TFloatField;
    itmitmcusto: TFloatField;
    itmitmtipodesc: TIntegerField;
    itmitminfadprod: TStringField;
    itmitmproservico: TStringField;
    itmflacodigo: TIntegerField;
    finalizador: TTimer;
    consulta: TUniQuery;
    orc: TUniQuery;
    orcetdcodigo: TIntegerField;
    orcclbcodigo: TIntegerField;
    orctdecodigo: TIntegerField;
    orctfpcodigo: TIntegerField;
    orctrmcodigo: TIntegerField;
    orcedritem: TIntegerField;
    orcclbvendedor: TIntegerField;
    orceqpcodigo: TIntegerField;
    orctdfcodigo: TStringField;
    orcflacodigo: TIntegerField;
    ito: TUniQuery;
    itl: TUniQuery;
    itlclbcodigo: TIntegerField;
    itlitmchave: TIntegerField;
    itlitlpercentual: TFloatField;
    imv: TUniQuery;
    imvimvchave: TIntegerField;
    imvitmchave: TIntegerField;
    imvvrpcodigo: TIntegerField;
    imvimvquantidade: TFloatField;
    ioc: TUniQuery;
    imc: TUniQuery;
    imcimcchave: TIntegerField;
    imcclbcodigo: TIntegerField;
    imcitmchave: TIntegerField;
    imcimcpercentual: TFloatField;
    orcmeschave: TIntegerField;
    orcmesregistro: TDateField;
    orcmestotal: TFloatField;
    orcmesdesconto: TFloatField;
    orcmesobs: TStringField;
    mdt: TUniQuery;
    orcmesvalor: TFloatField;
    itoitmchave: TIntegerField;
    itomeschave: TIntegerField;
    itoprocodigo: TIntegerField;
    itopuncodigo: TIntegerField;
    itounicodigo: TIntegerField;
    itoitmquantidade: TFloatField;
    itoitmcontendo: TFloatField;
    itoitmproservico: TStringField;
    itoitmitem: TIntegerField;
    itoidtquantidade: TFloatField;
    itoidtvalor: TFloatField;
    itoidtdesconto: TFloatField;
    itoidttotal: TFloatField;
    itoprogtin: TStringField;
    iocimcchave: TIntegerField;
    iocclbcodigo: TIntegerField;
    iocitmchave: TIntegerField;
    iocimcpercentual: TFloatField;
    dfr: TUniQuery;
    dfrdfrchave: TIntegerField;
    dfretdcodigo: TIntegerField;
    dfrtdfcodigo: TStringField;
    dfrdfrchavenfe: TStringField;
    dfrdfrserie: TStringField;
    dfrdfrnumero: TIntegerField;
    dfrdfremissao: TDateField;
    dfredritem: TIntegerField;
    dfrmeschave: TIntegerField;
    orcmesserie: TStringField;
    orcmeschavenfe: TStringField;
    orcmesnumero: TIntegerField;
    mdtmdtchave: TIntegerField;
    mdtmdtregistro: TDateField;
    mdtclbcodigo: TIntegerField;
    orcmesemissao: TDateField;
    cfgcfgetdempresa: TIntegerField;
    cfgetddoc1: TStringField;
    cfgcfgtoedevolconsum: TIntegerField;
    idt: TUniQuery;
    idtmeschave: TIntegerField;
    mdtmeschavedestino: TIntegerField;
    cfgcfgproinativsaldozero: TIntegerField;
    saldo: TUniQuery;
    procedure finalizadorTimer(Sender: TObject);
    procedure FormShow(Sender: TObject);
  private
    Fzcone: TUniConnection;
    function ProcessaVenda(vMdtChave: string): string;
    { Private declarations }
  protected

    Acesso: TAcesso;

  published
    property zcone: TUniConnection read Fzcone write Fzcone;

  public
    { Public declarations }
    vchave: string;
    vretorno: string;
    vmeschave: string;
    vpToeCodigo: INteger;

  public
    { Public declarations }
  end;

var
  fdpm: Tfdpm;

implementation

{$R *.dfm}

function ProcessaDevolucao(AOwner: TComponent; Conexao: TUniConnection; pChave: string; pAcesso: TAcesso): string;
Var
  i: INteger;
Begin
  Application.CreateForm(Tfdpm, fdpm);
  try
    fdpm.zcone := Conexao;
    fdpm.vchave := pChave;
    fdpm.Acesso := pAcesso;

    fdpm.vmeschave := fdpm.ProcessaVenda(fdpm.vchave);

    fdpm.vretorno := fdpm.vmeschave;
    Result := fdpm.vretorno;
  finally
    fdpm.Free;
  end;
End;

exports ProcessaDevolucao;

procedure Tfdpm.finalizadorTimer(Sender: TObject);
begin
  close;
end;

procedure Tfdpm.FormShow(Sender: TObject);
begin
  Self.vmeschave := ProcessaVenda(Self.vchave);

  finalizador.Enabled := True;
end;

function Tfdpm.ProcessaVenda(vMdtChave: string): string;
var
  i: INteger;
  VTotServicos: double;
  VTotProdutos: double;
  VTotal: double;
  VDesconto: double;
  VValor: double;
  vlSaldo: double;
  vlSaldoDisp: double;

begin

  Result := '';
  vmeschave := '';

  try
    For i := 0 To Self.ComponentCount - 1 Do
      If Self.Components[i] Is TUniQuery Then
        (Self.Components[i] As TUniQuery).Connection := zcone;

    zcone.StartTransaction;

    try

      cfg.Open;

      (*
        *Inicia Processamento da Venda
      *)

      mdt.close;
      mdt.ParamByName('mdtchave').AsString := vMdtChave;
      mdt.Open;

      mdt.First;

      idt.close;
      idt.ParamByName('mdtchave').AsString := mdtmdtchave.AsString;
      idt.Open;

      while not idt.Eof do
      begin
        orc.close;
        orc.ParamByName('meschave').AsString := idtmeschave.AsString;
        orc.Open;

        mes.Open;
        mes.Append;
        mesetdcodigo.AsInteger := Self.cfgcfgetdempresa.AsInteger;
        mesclbcodigo.AsInteger := Self.orcclbcodigo.AsInteger;
        if Self.orcclbvendedor.AsInteger <> 0 then
          mesclbvendedor.AsInteger := Self.orcclbvendedor.AsInteger
        else
          mesclbvendedor.AsInteger := Self.orcclbcodigo.AsInteger;

        mesmesemissao.AsFloat := Date;
        mesmesregistro.AsFloat := Date;
        mestdfcodigo.AsString := tdfMovimentoEmAndamento;

        messdecodigo.AsString := '00';
        mesmesserie.AsString := Self.cfgcfgserienfe.AsString;
        mesmesnumero.AsString := '0';

        mesedritem.AsInteger := orcedritem.AsInteger;
        mestoecodigo.AsInteger := cfgcfgtoedevolconsum.AsInteger;

        { * calcular separado o valor de produtos e serviços * }
        VTotServicos := 0;
        VTotProdutos := 0;

        VTotal := 0;
        VDesconto := 0;
        VValor := 0;

        ito.close;
        ito.Params[0].AsString := Self.vchave;
        ito.Open;

        while not ito.Eof do
        begin

          VTotal := VTotal + Self.itoidttotal.AsFloat;
          VDesconto := VDesconto + Self.itoidtdesconto.AsFloat;
          VValor := VValor + Self.itoidtvalor.AsFloat;

          VTotProdutos := VTotProdutos + Self.itoidttotal.AsFloat;
          ito.Next;
        end;

        mesmesservicos.AsFloat := VTotServicos;
        mesmesprodutos.AsFloat := VTotProdutos;

        mesmestotal.AsFloat := VTotal;
        mesmesdesconto.AsFloat := VDesconto;
        mesmesvalor.AsFloat := VValor;

        mestfpcodigo.AsInteger := tfpAVista;
        mesrefcodigo.AsInteger := 0;
        mesmesfrete.AsFloat := 0;
        mesmesseguro.AsFloat := 0;
        mesmesoutras.AsFloat := 0;
        mesmesbicm.AsFloat := 0;
        mesmesicm.AsFloat := 0;
        mesmesbicms.AsFloat := 0;
        mesmesicms.AsFloat := 0;
        mesmesipi.AsFloat := 0;
        mesmespis.AsFloat := 0;
        mesmescofins.AsFloat := 0;
        mesmespiss.AsFloat := 0;
        mesmescofinss.AsFloat := 0;
        mestrmcodigo.AsInteger := Self.orctrmcodigo.AsInteger;
        mesmesprotocolo.AsString := '';
        mestrfcodigo.AsInteger := 0;
        mestemcodigo.AsInteger := 1;

        (* Equipamento de OS *)
        if orceqpcodigo.AsInteger > 0 then
          meseqpcodigo.AsInteger := orceqpcodigo.AsInteger;

        mesflacodigo.AsInteger := orcflacodigo.AsInteger;
        mes.Post;

        { ** }

        vmeschave := Self.mesmeschave.AsString;
        vretorno := vmeschave;
        vpToeCodigo := Self.mestoecodigo.AsInteger;
        mes.close;

        dfr.close;
        dfr.ParamByName('meschave').AsString := vmeschave;
        dfr.Open;

        if dfr.IsEmpty then
          dfr.Append
        else
          dfr.Edit;

        dfretdcodigo.AsInteger := orcetdcodigo.AsInteger;
        dfrtdfcodigo.AsString := orctdfcodigo.AsString;
        dfrdfrchavenfe.AsString := orcmeschavenfe.AsString;
        dfrdfrserie.AsString := orcmesserie.AsString;
        dfrdfrnumero.AsString := orcmesnumero.AsString;
        dfrdfremissao.AsFloat := orcmesemissao.AsFloat;
        dfredritem.AsInteger := orcedritem.AsInteger;
        dfrmeschave.AsString := vmeschave;
        dfr.Post;

        mdt.Edit;
        mdtmeschavedestino.AsInteger := StrToInt(vmeschave) - 1; // orcmeschave.AsString;
        mdt.Post;

        (*
          * Itens da Venda
        *)
        itm.Open;
        ito.close;
        ito.Params[0].AsString := idtmeschave.AsString;
        ito.Open;
        itl.Open;

        while not ito.Eof do
        begin
          itm.Append;
          itmmeschave.AsString := vmeschave;
          itmitmitem.AsInteger := Self.itoitmitem.AsInteger;
          itmprocodigo.AsInteger := Self.itoprocodigo.AsInteger;

          consulta.close;
          consulta.SQL.Text := 'select cstcodigo from pro where procodigo=' + Self.itoprocodigo.AsString;
          consulta.Open;

          itmcstcodigo.AsString := consulta.FieldByName('cstcodigo').AsString;
          consulta.close;

          itmitmquantidade.AsFloat := Self.itoidtquantidade.AsFloat;

          itmitmvalor.AsFloat := Self.itoidtvalor.AsFloat;
          itmitmdesconto.AsFloat := Self.itoidtdesconto.AsFloat;
          itmitmtotal.AsFloat := Self.itoidttotal.AsFloat;

          itmitmmovifisico.AsInteger := 0;

          itmitmbicm.AsFloat := 0;
          itmicmcodigo.AsString := '00';
          itmitmaliqicm.AsFloat := 0;
          itmitmicm.AsFloat := 0;

          itmitmbicms.AsFloat := 0;
          itmitmaliqicms.AsFloat := 0;
          itmitmicms.AsFloat := 0;

          itmcsicodigo.AsString := '99';
          itmitmapuipi.AsInteger := 1;
          itmitmbipi.AsFloat := 0;
          itmitmaliqipi.AsFloat := 0;
          itmitmipi.AsFloat := 0;

          itmcspcodigo.AsString := '99';
          itmitmbpis.AsFloat := 0;
          itmitmaliqpis.AsFloat := 0;
          itmitmpis.AsFloat := 0;
          itmitmquantpis.AsFloat := 0;
          itmitmaliqpisvalor.AsFloat := 0;

          itmcsfcodigo.AsString := '99';
          itmitmbcofins.AsFloat := 0;
          itmitmaliqcofins.AsFloat := 0;
          itmitmquantcofins.AsFloat := 0;
          itmitmaliqcofinsvalor.AsFloat := 0;
          itmitmcofins.AsFloat := 0;

          itmpcccodigo.AsString := Self.cfgcfgpccvenda.AsString;

          itmunicodigo.AsInteger := Self.itounicodigo.AsInteger;
          itmpuncodigo.AsInteger := Self.itopuncodigo.AsInteger;

          consulta.close;
          consulta.SQL.Text := 'SELECT unicodigobase FROM pun WHERE puncodigo=' + itmpuncodigo.AsString;
          consulta.Open;

          itmunicodigobase.AsInteger := consulta.Fields[0].AsInteger;
          consulta.close;

          itmitmcontendo.AsFloat := itoitmcontendo.AsFloat;

          itmprogtin.AsString := Self.itoprogtin.AsString;

          consulta.close;
          consulta.SQL.Text := 'SELECT toecfopsaida FROM toe WHERE toecodigo=' + inttostr(vpToeCodigo);
          consulta.Open;

          itmtoecodigo.AsInteger := vpToeCodigo;
          itmcfocfopdestinacao.AsString := Self.consulta.FieldByName('toecfopsaida').AsString;
          itmcfocfop.AsString := Self.consulta.FieldByName('toecfopsaida').AsString;
          consulta.close;

          itmitmoutras.AsFloat := 0;
          itmitmseguro.AsFloat := 0;
          itmitmfrete.AsFloat := 0;
          itmitmcusto.AsFloat := 0;
          itmitmtipodesc.AsInteger := 0;

          itmitminfadprod.AsString := '';
          itmitmproservico.AsString := '';

          itm.Post;

          vlSaldo := 0;
          consulta.close;
          consulta.SQL.Text := 'select calcSaldoProduto(' + itmprocodigo.AsString + ')';
          consulta.Open;
          vlSaldo := consulta.Fields[0].AsFloat;

          vlSaldoDisp := 0;
          consulta.close;
          consulta.SQL.Text := 'select calcSaldoProdutoDisp(' + itmprocodigo.AsString + ')';
          consulta.Open;
          vlSaldoDisp := consulta.Fields[0].AsFloat;

          consulta.close;
          consulta.SQL.Text := 'UPDATE pro SET prosaldo = ' + buscatroca(floattostr(vlSaldo), ',', '.') + ', prosaldodisp =  ' + buscatroca(floattostr(vlSaldoDisp), ',', '.') +
            ' where procodigo=' + itmprocodigo.AsString;
          consulta.ExecSQL;

          if cfgcfgproinativsaldozero.AsInteger = 1 then
          begin

            saldo.close;
            saldo.SQL.Text := 'CALL AjustaSitacaoProduto(' + itmprocodigo.AsString + ', IF((select prosaldo from pro where procodigo=' + itmprocodigo.AsString + ')=0,2,1) )';
            saldo.ExecSQL;

            saldo.close;
            saldo.SQL.Text := 'CALL AjustaSitacaoProduto(' + itmprocodigo.AsString + ', IF((select prosaldodisp from pro where procodigo=' + itmprocodigo.AsString + ')=0,2,1) )';
            saldo.ExecSQL;

          end;

          (* Verifica se produto possui variação e salva a movimentação desta *)

          { if itovrpcodigo.AsInteger > 0 then
            begin
            if not imv.Active then
            imv.Open;
            imv.Append;
            imvitmchave.AsInteger := itmitmchave.AsInteger;
            imvvrpcodigo.AsInteger := itovrpcodigo.AsInteger;
            imvimvquantidade.AsFloat := itmitmquantidade.AsFloat;
            imv.Post;
            end; }

          (* Processa o Colaborador e percentual de comissão do item *)
          ioc.close;
          ioc.ParamByName('itmchave').AsInteger := itoitmchave.AsInteger;
          ioc.Open;

          while not ioc.Eof do
          begin

            if iocclbcodigo.AsInteger <> 0 then
            begin

              if not imc.Active then
                imc.Open;

              imc.Append;
              imcclbcodigo.AsInteger := iocclbcodigo.AsInteger;
              imcitmchave.AsInteger := itmitmchave.AsInteger;
              imcimcpercentual.AsFloat := imcimcpercentual.AsFloat;
              imc.Post;
            end;

            ioc.Next;
          end;

          itl.Open;
          itl.Append;
          itlclbcodigo.AsInteger := Self.orcclbcodigo.AsInteger;
          itlitmchave.AsInteger := Self.itmitmchave.AsInteger;
          itlitlpercentual.AsFloat := 100;
          itl.Post;
          itl.close;

          ito.Next;
        end;
        idt.Next;
      end;
      Result := Self.vmeschave;

      zcone.Commit;

      Result := Self.vmeschave;
    except
      on e: Exception do
      begin
        if zcone.TransactionCount > 0 then
          zcone.Rollback;

        MessageDlg('Erro finaliza venda: ' + #13 + e.Message, mtError, [mbOK], 0);
        SalvarTextoEmArquivo('Mensagem: ' + e.Message + #13 + #13 + e.StackTrace, ExtractFilePath(Application.ExeName) + 'Erros\Atendimento\' + FormatDateTime('ddmmyyhhnnsszzz',
          Now()) + '.txt');

        Exit;
      end;
    end;

  finally

    itm.close;
    ito.close;
    itl.close;

    orc.close;
    cfg.close;

  end;
end;

end.
