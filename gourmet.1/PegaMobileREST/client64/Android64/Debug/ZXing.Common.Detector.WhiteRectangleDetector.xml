<?xml version="1.0" encoding="utf-8"?>
<namespace name="ZXing.Common.Detector.WhiteRectangleDetector" platform="Android">
  <class name="TWhiteRectangleDetector" sealed="true" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="31">
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="DisposeOf" visibility="public" procflags="inline">
      </methodref>
      <methodref name="InitInstance" visibility="public" procflags="class">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public" procflags="inline">
      </methodref>
      <methodref name="ClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassNameIs" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassParent" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassInfo" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InstanceSize" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InheritsFrom" visibility="public" procflags="class">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodName" visibility="public" procflags="class">
      </methodref>
      <methodref name="QualifiedClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="UnitName" visibility="public" procflags="class">
      </methodref>
      <methodref name="UnitScope" visibility="public" procflags="class">
      </methodref>
      <methodref name="Equals" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetHashCode" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Dispatch" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="DefaultHandler" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="NewInstance" visibility="public" procflags="class virtual">
      </methodref>
      <methodref name="FreeInstance" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor virtual">
      </methodref>
      <methodref name="CPP_ABI_1" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="CPP_ABI_2" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="CPP_ABI_3" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetDisposed" visibility="protected" procflags="inline">
      </methodref>
      <methodref name="CheckDisposed" visibility="protected" procflags="inline">
      </methodref>
      <propertyref name="Disposed" visibility="protected">
      </propertyref>
    </ancestor>
    <members>
      <field name="CORR" type="Integer" visibility="private" varflags="class" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="33" />
      <field name="INIT_SIZE" type="Integer" visibility="private" varflags="class" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="34" />
      <field name="downInit" type="Integer" visibility="private" size="4" offset="8" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="37" />
      <field name="height" type="Integer" visibility="private" size="4" offset="12" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="38" />
      <field name="image" type="TBitMatrix" visibility="private" size="8" offset="16" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="39" />
      <field name="leftInit" type="Integer" visibility="private" size="4" offset="24" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="40" />
      <field name="rightInit" type="Integer" visibility="private" size="4" offset="28" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="41" />
      <field name="upInit" type="Integer" visibility="private" size="4" offset="32" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="42" />
      <field name="width" type="Integer" visibility="private" size="4" offset="36" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="43" />
      <constructor name="Create" visibility="private" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="44">
        <parameters>
          <parameter name="image" type="TBitMatrix" />
        </parameters>
      </constructor>
      <constructor name="Create" visibility="private" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="45">
        <parameters>
          <parameter name="image" type="TBitMatrix" />
          <parameter name="initSize" type="Integer" />
          <parameter name="x" type="Integer" />
          <parameter name="y" type="Integer" />
        </parameters>
      </constructor>
      <function name="centerEdges" visibility="private" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="47">
        <parameters>
          <parameter name="y" type="IResultPoint" />
          <parameter name="z" type="IResultPoint" />
          <parameter name="x" type="IResultPoint" />
          <parameter name="t" type="IResultPoint" />
          <retval type="TArray&lt;ZXing.ResultPoint.IResultPoint&gt;" />
        </parameters>
      </function>
      <function name="containsBlackPoint" visibility="private" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="49">
        <parameters>
          <parameter name="a" type="Integer" />
          <parameter name="b" type="Integer" />
          <parameter name="fixed" type="Integer" />
          <parameter name="horizontal" type="Boolean" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="getBlackPointOnSegment" visibility="private" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="51">
        <parameters>
          <parameter name="aX" type="Single" />
          <parameter name="aY" type="Single" />
          <parameter name="bX" type="Single" />
          <parameter name="bY" type="Single" />
          <retval type="IResultPoint">
            <devnotes>
               <summary>
               To mimic &quot;garbage collection&quot; (or ARC) with old-gen compilers we have to use
               interfaces. IResultPoint is the interface that maps TResultPoint which is now
               implemented as a TInterfacedObject descendant which supports automatic deallocation
               based on reference counting of interface variables.
               See ZXing.ResultPointImplementation to see the actual implementation of this interface.
               since we are using automatic reference counting, we don't need the Clone method any more.
               </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="New" visibility="public" procflags="class overload" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="54">
        <parameters>
          <parameter name="image" type="TBitMatrix" />
          <retval type="TWhiteRectangleDetector" />
        </parameters>
      </function>
      <function name="New" visibility="public" procflags="static overload" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="55">
        <parameters>
          <parameter name="image" type="TBitMatrix" />
          <parameter name="initSize" type="Integer" />
          <parameter name="x" type="Integer" />
          <parameter name="y" type="Integer" />
          <retval type="TWhiteRectangleDetector" />
        </parameters>
      </function>
      <function name="detect" visibility="public" file="ZXing.Common.Detector.WhiteRectangleDetector.pas" line="57">
        <parameters>
          <retval type="TArray&lt;ZXing.ResultPoint.IResultPoint&gt;" />
        </parameters>
      </function>
    </members>
  </class>
</namespace>
