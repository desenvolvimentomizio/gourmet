<?xml version="1.0" encoding="utf-8"?>
<namespace name="ZXing.Datamatrix.Internal.Decoder" platform="Android">
  <class name="TDataMatrixDecoder" sealed="true" file="ZXing.Datamatrix.Internal.Decoder.pas" line="41">
    <devnotes>
       <summary>
       <p>The main class which implements Data Matrix Code decoding -- as opposed to locating and extracting
       the Data Matrix Code from an image.</p>
       </summary>
    </devnotes>
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="DisposeOf" visibility="public" procflags="inline">
      </methodref>
      <methodref name="InitInstance" visibility="public" procflags="class">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public" procflags="inline">
      </methodref>
      <methodref name="ClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassNameIs" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassParent" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassInfo" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InstanceSize" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InheritsFrom" visibility="public" procflags="class">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodName" visibility="public" procflags="class">
      </methodref>
      <methodref name="QualifiedClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="UnitName" visibility="public" procflags="class">
      </methodref>
      <methodref name="UnitScope" visibility="public" procflags="class">
      </methodref>
      <methodref name="Equals" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetHashCode" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Dispatch" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="DefaultHandler" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="NewInstance" visibility="public" procflags="class virtual">
      </methodref>
      <methodref name="FreeInstance" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor virtual">
      </methodref>
      <methodref name="CPP_ABI_1" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="CPP_ABI_2" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="CPP_ABI_3" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetDisposed" visibility="protected" procflags="inline">
      </methodref>
      <methodref name="CheckDisposed" visibility="protected" procflags="inline">
      </methodref>
      <propertyref name="Disposed" visibility="protected">
      </propertyref>
    </ancestor>
    <members>
      <field name="rsDecoder" type="TReedSolomonDecoder" visibility="private" size="4" offset="4" file="ZXing.Datamatrix.Internal.Decoder.pas" line="43" />
      <constructor name="Create" visibility="public" file="ZXing.Datamatrix.Internal.Decoder.pas" line="45">
        <devnotes>
<!-- Badly formed XML comment ignored for member 'Create' -->
        </devnotes>
        <parameters>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="ZXing.Datamatrix.Internal.Decoder.pas" line="46">
        <parameters>
        </parameters>
      </destructor>
      <function name="correctErrors" visibility="public" file="ZXing.Datamatrix.Internal.Decoder.pas" line="48">
        <devnotes>
           <summary>
           <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to
           correct the errors in-place using Reed-Solomon error correction.</p>
          
           <param name="codewordBytes">data and error correction codewords</param>
           <param name="numDataCodewords">number of codewords that are data bytes</param>
           </summary>
        </devnotes>
        <parameters>
          <parameter name="codewordBytes" type="TArray&lt;System.Byte&gt;" />
          <parameter name="numDataCodewords" type="Integer" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="decode" visibility="public" procflags="overload" file="ZXing.Datamatrix.Internal.Decoder.pas" line="49">
        <devnotes>
<!-- Badly formed XML comment ignored for member 'decode' -->
        </devnotes>
        <parameters>
          <parameter name="bits" type="TBitMatrix" />
          <retval type="TDecoderResult" />
        </parameters>
      </function>
      <function name="decode" visibility="public" procflags="overload" file="ZXing.Datamatrix.Internal.Decoder.pas" line="50">
        <parameters>
          <parameter name="image" type="TArray&lt;System.TArray&lt;System.Boolean&gt;&gt;" />
          <retval type="TDecoderResult" />
        </parameters>
      </function>
    </members>
  </class>
</namespace>
