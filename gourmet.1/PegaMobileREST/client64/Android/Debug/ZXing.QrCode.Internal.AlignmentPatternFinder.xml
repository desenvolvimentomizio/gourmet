<?xml version="1.0" encoding="utf-8"?>
<namespace name="ZXing.QrCode.Internal.AlignmentPatternFinder" platform="Android">
  <class name="TAlignmentPatternFinder" sealed="true" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="47">
    <devnotes>
       <summary> <p>This class attempts to find alignment patterns in a QR Code. Alignment patterns look like finder
       patterns but are smaller and appear at regular intervals throughout the image.</p>
      
       <p>At the moment this only looks for the bottom-right alignment pattern.</p>
      
       <p>This is mostly a simplified copy of {@link FinderPatternFinder}. It is copied,
       pasted and stripped down here for maximum performance but does unfortunately duplicate
       some code.</p>
      
       <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.</p>
      
       </summary>
    </devnotes>
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="DisposeOf" visibility="public" procflags="inline">
      </methodref>
      <methodref name="InitInstance" visibility="public" procflags="class">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public" procflags="inline">
      </methodref>
      <methodref name="ClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassNameIs" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassParent" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassInfo" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InstanceSize" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InheritsFrom" visibility="public" procflags="class">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodName" visibility="public" procflags="class">
      </methodref>
      <methodref name="QualifiedClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="UnitName" visibility="public" procflags="class">
      </methodref>
      <methodref name="UnitScope" visibility="public" procflags="class">
      </methodref>
      <methodref name="Equals" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetHashCode" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Dispatch" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="DefaultHandler" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="NewInstance" visibility="public" procflags="class virtual">
      </methodref>
      <methodref name="FreeInstance" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor virtual">
      </methodref>
      <methodref name="CPP_ABI_1" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="CPP_ABI_2" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="CPP_ABI_3" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetDisposed" visibility="protected" procflags="inline">
      </methodref>
      <methodref name="CheckDisposed" visibility="protected" procflags="inline">
      </methodref>
      <propertyref name="Disposed" visibility="protected">
      </propertyref>
    </ancestor>
    <members>
      <field name="image" type="TBitMatrix" visibility="private" size="4" offset="4" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="49" />
      <field name="possibleCenters" type="TList&lt;ZXing.QrCode.Internal.AlignmentPattern.IAlignmentPattern&gt;" visibility="private" size="4" offset="8" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="50" />
      <field name="startX" type="Integer" visibility="private" size="4" offset="12" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="51" />
      <field name="startY" type="Integer" visibility="private" size="4" offset="16" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="51" />
      <field name="width" type="Integer" visibility="private" size="4" offset="20" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="52" />
      <field name="height" type="Integer" visibility="private" size="4" offset="24" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="52" />
      <field name="moduleSize" type="Single" visibility="private" size="4" offset="28" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="53" />
      <field name="crossCheckStateCount" type="TArray&lt;System.Integer&gt;" visibility="private" size="4" offset="32" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="54" />
      <field name="resultPointCallback" type="TResultPointCallback" visibility="private" size="8" offset="36" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="55" />
      <function name="centerFromEnd" visibility="private" procflags="static" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="60">
        <devnotes>
           <summary> Given a count of black/white/black pixels just seen and an end position,
           figures the location of the center of this black/white/black run.
           </summary>
        </devnotes>
        <parameters>
          <parameter name="stateCount" type="TArray&lt;System.Integer&gt;" paramflags="const" />
          <parameter name="pEnd" type="Integer" paramflags="const" />
          <retval type="Single" />
        </parameters>
      </function>
      <function name="foundPatternCross" visibility="private" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="68">
        <devnotes>
           <param name="stateCount">count of black/white/black pixels just read
           </param>
           <returns> true iff the proportions of the counts is close enough to the 1/1/1 ratios
           used by alignment patterns to be considered a match
           </returns>
        </devnotes>
        <parameters>
          <parameter name="stateCount" type="TArray&lt;System.Integer&gt;" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="crossCheckVertical" visibility="private" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="83">
        <devnotes>
           <summary>
             <p>After a horizontal scan finds a potential alignment pattern, this method
           &quot;cross-checks&quot; by scanning down vertically through the center of the possible
           alignment pattern to see if the same proportion is detected.</p>
           </summary>
           <param name="startI">row where an alignment pattern was detected</param>
           <param name="centerJ">center of the section that appears to cross an alignment pattern</param>
           <param name="maxCount">maximum reasonable number of modules that should be
           observed in any reading state, based on the results of the horizontal scan</param>
           <param name="originalStateCountTotal">The original state count total.</param>
           <returns>
           vertical center of alignment pattern, or null if not found
           </returns>
        </devnotes>
        <parameters>
          <parameter name="startI" type="Integer" paramflags="const" />
          <parameter name="centerJ" type="Integer" paramflags="const" />
          <parameter name="maxCount" type="Integer" paramflags="const" />
          <parameter name="originalStateCountTotal" type="Integer" paramflags="const" />
          <retval type="Single" />
        </parameters>
      </function>
      <function name="handlePossibleCenter" visibility="private" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="100">
        <devnotes>
           <summary> <p>This is called when a horizontal scan finds a possible alignment pattern. It will
           cross check with a vertical scan, and if successful, will see if this pattern had been
           found on a previous horizontal scan. If so, we consider it confirmed and conclude we have
           found the alignment pattern.</p>
          
           </summary>
           <param name="stateCount">reading state module counts from horizontal scan
           </param>
           <param name="i">row where alignment pattern may be found
           </param>
           <param name="j">end of possible alignment pattern in row
           </param>
           <returns> {@link TAlignmentPattern} if we have found the same pattern twice, or null if not
           </returns>
        </devnotes>
        <parameters>
          <parameter name="stateCount" type="TArray&lt;System.Integer&gt;" paramflags="const" />
          <parameter name="i" type="Integer" paramflags="const" />
          <parameter name="j" type="Integer" paramflags="const" />
          <retval type="IAlignmentPattern">
            <devnotes>
               <summary>
                As we did for ResultPoint, we use an interfaced object to implement automatic deallocation
               of TAligmnentPattern instances
               the actual implementation of this interface is in unit ZXing.QrCode.Internal.AlignmentPatternImplementation
               </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="118">
        <devnotes>
           <summary> <p>Creates a finder that will look in a portion of the whole image.</p>
          
           </summary>
           <param name="image">image to search
           </param>
           <param name="startX">left column from which to start searching
           </param>
           <param name="startY">top row from which to start searching
           </param>
           <param name="width">width of region to search
           </param>
           <param name="height">height of region to search
           </param>
           <param name="moduleSize">estimated module size so far
           </param>
        </devnotes>
        <parameters>
          <parameter name="image" type="TBitMatrix" paramflags="const" />
          <parameter name="startX" type="Integer" paramflags="const" />
          <parameter name="startY" type="Integer" paramflags="const" />
          <parameter name="width" type="Integer" paramflags="const" />
          <parameter name="height" type="Integer" paramflags="const" />
          <parameter name="moduleSize" type="Single" paramflags="const" />
          <parameter name="resultPointCallback" type="TResultPointCallback" />
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="121">
        <parameters>
        </parameters>
      </destructor>
      <function name="find" visibility="public" file="ZXing.QrCode.Internal.AlignmentPatternFinder.pas" line="129">
        <devnotes>
           <summary> <p>This method attempts to find the bottom-right alignment pattern in the image. It is a bit messy since
           it's pretty performance-critical and so is written to be fast foremost.</p>
          
           </summary>
           <returns> {@link TAlignmentPattern} if found
           </returns>
        </devnotes>
        <parameters>
          <retval type="IAlignmentPattern">
            <devnotes>
               <summary>
                As we did for ResultPoint, we use an interfaced object to implement automatic deallocation
               of TAligmnentPattern instances
               the actual implementation of this interface is in unit ZXing.QrCode.Internal.AlignmentPatternImplementation
               </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
    </members>
  </class>
</namespace>
