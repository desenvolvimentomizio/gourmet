<?xml version="1.0" encoding="utf-8"?>
<namespace name="ZXing.OneD.ITFReader" platform="Android">
  <class name="TITFReader" file="ZXing.OneD.ITFReader.pas" line="51">
    <devnotes>
       <summary>
       <p>Implements decoding of the ITF format, or Interleaved Two of Five.</p>
      
       <p>This Reader will scan ITF barcodes of certain lengths only.
       At the moment it reads length 6, 8, 10, 12, 14, 16, 18, 20, 24, 44 and 48 as these have appeared &quot;in the wild&quot;. Not all
       lengths are scanned, especially shorter ones, to avoid false positives. This in turn is due to a lack of
       required checksum function.</p>
      
       <p>The checksum is optional and is not applied by this Reader. The consumer of the decoded
       value will have to apply a checksum if required.</p>
      
       <p><a href="http://en.wikipedia.org/wiki/Interleaved_2_of_5">http://en.wikipedia.org/wiki/Interleaved_2_of_5</a>
       is a great reference for Interleaved 2 of 5 information.</p>
       </summary>
    </devnotes>
    <ancestor name="TOneDReader" namespace="ZXing.OneD.OneDReader">
      <interfaces>
        <implements name="IReader" />
      </interfaces>
      <methodref name="doDecode" visibility="private">
      </methodref>
      <methodref name="InitializeClass" visibility="private" procflags="static" />
      <methodref name="patternMatchVariance" visibility="protected" procflags="static">
      </methodref>
      <methodref name="RecordPatternInReverse" visibility="protected" procflags="static">
      </methodref>
      <methodref name="recordPattern" visibility="protected" procflags="static overload">
      </methodref>
      <methodref name="reset" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="decode" visibility="public" procflags="overload">
      </methodref>
      <methodref name="decode" visibility="public" procflags="overload virtual">
      </methodref>
      <methodref name="recordPattern" visibility="public" procflags="static overload">
      </methodref>
      <methodref name="decodeRow" visibility="public" procflags="abstract virtual">
      </methodref>
      <ancestor name="TInterfacedObject" namespace="System">
        <interfaces>
          <implements name="IInterface" />
        </interfaces>
        <methodref name="GetRefCount" visibility="private" procflags="inline">
        </methodref>
        <methodref name="__MarkDestroying" visibility="protected" procflags="static inline">
        </methodref>
        <methodref name="QueryInterface" visibility="protected">
        </methodref>
        <methodref name="_AddRef" visibility="protected">
        </methodref>
        <methodref name="_Release" visibility="protected">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="override">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="override">
        </methodref>
        <methodref name="NewInstance" visibility="public" procflags="class override">
        </methodref>
        <propertyref name="RefCount" visibility="public">
        </propertyref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="CPP_ABI_1" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="CPP_ABI_2" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="CPP_ABI_3" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="LARGEST_DEFAULT_ALLOWED_LENGTH" type="Integer" visibility="public" varflags="class" file="ZXing.OneD.ITFReader.pas" line="53" />
      <field name="N" type="Integer" visibility="public" varflags="class" file="ZXing.OneD.ITFReader.pas" line="54" />
      <field name="W" type="Integer" visibility="public" varflags="class" file="ZXing.OneD.ITFReader.pas" line="55" />
      <field name="PATTERNS" type="TArray&lt;System.TArray&lt;System.Integer&gt;&gt;" visibility="private" varflags="class" file="ZXing.OneD.ITFReader.pas" line="58" />
      <field name="END_PATTERN_REVERSED" type="TArray&lt;System.Integer&gt;" visibility="private" varflags="class" file="ZXing.OneD.ITFReader.pas" line="59" />
      <field name="MAX_AVG_VARIANCE" type="Integer" visibility="private" varflags="class" file="ZXing.OneD.ITFReader.pas" line="60" />
      <field name="MAX_INDIVIDUAL_VARIANCE" type="Integer" visibility="private" varflags="class" file="ZXing.OneD.ITFReader.pas" line="61" />
      <field name="DEFAULT_ALLOWED_LENGTHS" type="TArray&lt;System.Integer&gt;" visibility="private" varflags="class" file="ZXing.OneD.ITFReader.pas" line="62" />
      <field name="START_PATTERN" type="TArray&lt;System.Integer&gt;" visibility="private" varflags="class" file="ZXing.OneD.ITFReader.pas" line="65" />
      <field name="narrowLineWidth" type="Integer" visibility="private" varflags="class" file="ZXing.OneD.ITFReader.pas" line="66" />
      <function name="decodeDigit" visibility="private" procflags="static" file="ZXing.OneD.ITFReader.pas" line="68">
        <parameters>
          <parameter name="counters" type="TArray&lt;System.Integer&gt;" />
          <parameter name="bestMatch" type="Integer" paramflags="out" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="decodeEnd" visibility="private" file="ZXing.OneD.ITFReader.pas" line="70">
        <parameters>
          <parameter name="row" type="IBitArray" />
          <retval type="TArray&lt;System.Integer&gt;" />
        </parameters>
      </function>
      <function name="skipWhiteSpace" visibility="private" procflags="static" file="ZXing.OneD.ITFReader.pas" line="71">
        <parameters>
          <parameter name="row" type="IBitArray" />
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="findGuardPattern" visibility="private" procflags="static" file="ZXing.OneD.ITFReader.pas" line="72">
        <parameters>
          <parameter name="row" type="IBitArray" />
          <parameter name="rowOffset" type="Integer" />
          <parameter name="pattern" type="TArray&lt;System.Integer&gt;" />
          <retval type="TArray&lt;System.Integer&gt;" />
        </parameters>
      </function>
      <function name="validateQuietZone" visibility="private" file="ZXing.OneD.ITFReader.pas" line="74">
        <parameters>
          <parameter name="row" type="IBitArray" />
          <parameter name="startPattern" type="Integer" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="decodeStart" visibility="private" file="ZXing.OneD.ITFReader.pas" line="75">
        <parameters>
          <parameter name="row" type="IBitArray" />
          <retval type="TArray&lt;System.Integer&gt;" />
        </parameters>
      </function>
      <function name="decodeMiddle" visibility="private" procflags="static" file="ZXing.OneD.ITFReader.pas" line="76">
        <parameters>
          <parameter name="row" type="IBitArray" />
          <parameter name="payloadStart" type="Integer" />
          <parameter name="payloadEnd" type="Integer" />
          <parameter name="SBResult" type="TStringBuilder" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="ClassInit" visibility="private" procflags="class" file="ZXing.OneD.ITFReader.pas" line="79">
      </procedure>
      <function name="decodeRow" visibility="public" procflags="override" file="ZXing.OneD.ITFReader.pas" line="81">
        <parameters>
          <parameter name="rowNumber" type="Integer" paramflags="const" />
          <parameter name="row" type="IBitArray" paramflags="const" />
          <parameter name="hints" type="TDictionary&lt;ZXing.DecodeHintType.TDecodeHintType,System.TObject&gt;" paramflags="const" />
          <retval type="TReadResult" />
        </parameters>
      </function>
      <procedure name="Create@" visibility="class private" procflags="class constructor noself" generated="true">
      </procedure>
      <procedure name="Destroy@" visibility="class private" procflags="class destructor noself" generated="true">
      </procedure>
    </members>
  </class>
</namespace>
