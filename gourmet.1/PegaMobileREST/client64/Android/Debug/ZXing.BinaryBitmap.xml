<?xml version="1.0" encoding="utf-8"?>
<namespace name="ZXing.BinaryBitmap" platform="Android">
  <class name="TBinaryBitmap" file="ZXing.BinaryBitmap.pas" line="31">
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="DisposeOf" visibility="public" procflags="inline">
      </methodref>
      <methodref name="InitInstance" visibility="public" procflags="class">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public" procflags="inline">
      </methodref>
      <methodref name="ClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassNameIs" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassParent" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassInfo" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InstanceSize" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InheritsFrom" visibility="public" procflags="class">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodName" visibility="public" procflags="class">
      </methodref>
      <methodref name="QualifiedClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="UnitName" visibility="public" procflags="class">
      </methodref>
      <methodref name="UnitScope" visibility="public" procflags="class">
      </methodref>
      <methodref name="Equals" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetHashCode" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Dispatch" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="DefaultHandler" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="NewInstance" visibility="public" procflags="class virtual">
      </methodref>
      <methodref name="FreeInstance" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor virtual">
      </methodref>
      <methodref name="CPP_ABI_1" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="CPP_ABI_2" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="CPP_ABI_3" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetDisposed" visibility="protected" procflags="inline">
      </methodref>
      <methodref name="CheckDisposed" visibility="protected" procflags="inline">
      </methodref>
      <propertyref name="Disposed" visibility="protected">
      </propertyref>
    </ancestor>
    <members>
      <field name="Binarizer" type="TBinarizer" visibility="private" size="4" offset="4" file="ZXing.BinaryBitmap.pas" line="33" />
      <field name="Matrix" type="TBitMatrix" visibility="private" size="4" offset="8" file="ZXing.BinaryBitmap.pas" line="34" />
      <function name="GetWidth" visibility="private" file="ZXing.BinaryBitmap.pas" line="35">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="GetHeight" visibility="private" file="ZXing.BinaryBitmap.pas" line="36">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="GetBlackMatrix" visibility="private" file="ZXing.BinaryBitmap.pas" line="37">
        <parameters>
          <retval type="TBitMatrix">
            <devnotes>
               <summary>
               <p>Represents a 2D matrix of bits. In function arguments below, and throughout the common
               module, x is the column position, and y is the row position. The ordering is always x, y.
               The origin is at the top-left.</p>
               <p>Internally the bits are represented in a 1-D array of 32-bit ints. However, each row begins
               with a new int. This is done intentionally so that we can copy out a row into a BitArray very
               efficiently.</p>
               <p>The ordering of bits is row-major. Within each int, the least significant bits are used first,
               meaning they represent lower x values. This is compatible with BitArray's implementation.</p>
               </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="ZXing.BinaryBitmap.pas" line="39">
        <parameters>
          <parameter name="Binarizer" type="TBinarizer" />
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="ZXing.BinaryBitmap.pas" line="40">
        <parameters>
        </parameters>
      </destructor>
      <function name="getBlackRow" visibility="public" file="ZXing.BinaryBitmap.pas" line="51">
        <devnotes>
           <summary>
           Converts one row of luminance data to 1 bit data. May actually do the conversion, or return
           cached data. Callers should assume this method is expensive and call it as seldom as possible.
           This method is intended for decoding 1D barcodes and may choose to apply sharpening.
           </summary>
           <param name="y">The row to fetch, which must be in [0, bitmap height).</param>
           <param name="row">An optional preallocated array. If null or too small, it will be ignored.
           If used, the Binarizer will call BitArray.clear(). Always use the returned object.
           </param>
           <returns> The array of bits for this row (true means black).</returns>
        </devnotes>
        <parameters>
          <parameter name="y" type="Integer" />
          <parameter name="row" type="IBitArray" />
          <retval type="IBitArray" />
        </parameters>
      </function>
      <function name="RotateSupported" visibility="public" file="ZXing.BinaryBitmap.pas" line="52">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="rotateCounterClockwise" visibility="public" file="ZXing.BinaryBitmap.pas" line="53">
        <parameters>
          <retval type="TBinaryBitmap" />
        </parameters>
      </function>
      <property name="Width" visibility="public" read="GetWidth" type="Integer" file="ZXing.BinaryBitmap.pas" line="55" />
      <property name="Height" visibility="public" read="GetHeight" type="Integer" file="ZXing.BinaryBitmap.pas" line="56" />
      <property name="BlackMatrix" visibility="public" read="GetBlackMatrix" type="TBitMatrix" file="ZXing.BinaryBitmap.pas" line="57" />
    </members>
  </class>
</namespace>
