unit uFprinciMizioWhats;

interface

uses
  inifiles,
  System.SysUtils,
  System.Types,
  System.UITypes,
  System.Classes,
  System.Variants,
  FMX.Types,
  FMX.Controls,
  FMX.Forms,
  FMX.Graphics,
  FMX.Dialogs,
  uCEFApplication,

  // Units Whats
  uService.WhatsApp,
  uModel.StatusWhats,
  uModel.StatusPhone,
  uModel.ContactWhats,
  uModel.MessageReceivedWhats,

  IdBaseComponent,
  IdIntercept,
  IdLogBase,
  IdLogEvent,
  IdComponent,
  IdTCPConnection,
  IdTCPClient,
  IdHTTP,
  IdIOHandler,
  IdIOHandlerSocket,
  IdIOHandlerStack,
  IdSSL,
  IdSSLOpenSSL,
  FMX.Memo.Types,
  FMX.Controls.Presentation,
  FMX.ScrollBox,
  FMX.Memo,
  UniProvider,
  MySQLUniProvider,
  Data.DB,
  DBAccess,
  Uni, IdSSLOpenSSLHeaders, MemDS, FMX.Objects, FMX.StdCtrls;

type
  TFprinciMizioWhats = class(TForm)
    MizioServiceWhtasApp: TServiceWhtasApp;
    IdLogEvent1: TIdLogEvent;
    IdHTTP1: TIdHTTP;
    IdSSLIOHandlerSocketOpenSSL1: TIdSSLIOHandlerSocketOpenSSL;
    MmLogs: TMemo;
    MmRecebidas: TMemo;
    Conexao: TUniConnection;
    MySQLUniProvider: TMySQLUniProvider;
    TmInicializar: TTimer;
    czn: TUniQuery;
    czncznchave: TIntegerField;
    immpedido: TUniQuery;
    immpedidoorcchave: TIntegerField;
    immpedidofoacodigo: TIntegerField;
    immpedidostocodigo: TIntegerField;
    immpedidorelarquivo: TBlobField;
    immpedidoorcobs: TStringField;
    immpedidoorcgeralav: TFloatField;
    immpedidogricodigo: TIntegerField;
    immpedidogrpcodigo: TIntegerField;
    immpedidoimmchave: TIntegerField;
    itopedido: TUniQuery;
    itopedidoorcchave: TIntegerField;
    itopedidoimmnumepedido: TIntegerField;
    itopedidotcicodigo: TIntegerField;
    itopedidotciporta: TStringField;
    itopedidomitidentificacao: TStringField;
    itopedidofoacodigo: TIntegerField;
    itopedidopedidoaux: TIntegerField;
    itopedidoitochave: TIntegerField;
    immsaida: TUniQuery;
    immsaidaorcchave: TIntegerField;
    immsaidafoacodigo: TIntegerField;
    immsaidastocodigo: TIntegerField;
    immsaidarelarquivo: TBlobField;
    immsaidaorcobs: TStringField;
    immsaidaorcgeralav: TFloatField;
    immsaidagricodigo: TIntegerField;
    immsaidagrpcodigo: TIntegerField;
    immsaidaimmchave: TIntegerField;
    itosaida: TUniQuery;
    itosaidaorcchave: TIntegerField;
    itosaidaimmnumepedido: TIntegerField;
    itosaidatcicodigo: TIntegerField;
    itosaidatciporta: TStringField;
    itosaidamitidentificacao: TStringField;
    itosaidafoacodigo: TIntegerField;
    itosaidapedidoaux: TIntegerField;
    itosaidaitochave: TIntegerField;
    immretorno: TUniQuery;
    immretornoorcchave: TIntegerField;
    immretornofoacodigo: TIntegerField;
    immretornostocodigo: TIntegerField;
    immretornorelarquivo: TBlobField;
    immretornoorcobs: TStringField;
    immretornoorcgeralav: TFloatField;
    immretornogricodigo: TIntegerField;
    immretornogrpcodigo: TIntegerField;
    immretornoimmchave: TIntegerField;
    itoretorno: TUniQuery;
    itoretornoorcchave: TIntegerField;
    itoretornoimmnumepedido: TIntegerField;
    itoretornotcicodigo: TIntegerField;
    itoretornotciporta: TStringField;
    itoretornomitidentificacao: TStringField;
    itoretornofoacodigo: TIntegerField;
    itoretornopedidoaux: TIntegerField;
    itoretornoitochave: TIntegerField;
    cfg: TUniQuery;
    cfgcfgcodigo: TIntegerField;
    cfgcfgmgoumensapedido0: TStringField;
    cfgcfgmgoumensasaida0: TStringField;
    cfgcfgmgoumensaretorno0: TStringField;
    cfgcfgmgoumensapedido1: TStringField;
    cfgcfgmgoumensasaida1: TStringField;
    cfgcfgmgoumensaretorno1: TStringField;
    cfgcfgmgoumensapedido2: TStringField;
    cfgcfgmgoumensasaida2: TStringField;
    cfgcfgmgoumensaretorno2: TStringField;
    cfgcfgmgoumensapedido3: TStringField;
    cfgcfgmgoumensasaida3: TStringField;
    cfgcfgmgoumensaretorno3: TStringField;
    cfgcfgmgoumensapedido4: TStringField;
    cfgcfgmgoumensasaida4: TStringField;
    cfgcfgmgoumensaretorno4: TStringField;
    cfgcfgmgoumensapedido5: TStringField;
    cfgcfgmgoumensasaida5: TStringField;
    cfgcfgmgoumensaretorno5: TStringField;
    cfgcfgmgoumensapedido6: TStringField;
    cfgcfgmgoumensasaida6: TStringField;
    cfgcfgmgoumensaretorno6: TStringField;
    cfgcfgmgoumensapedido7: TStringField;
    cfgcfgmgoumensasaida7: TStringField;
    cfgcfgmgoumensaretorno7: TStringField;
    cfgcfgmgoumensapedido8: TStringField;
    cfgcfgmgoumensasaida8: TStringField;
    cfgcfgmgoumensaretorno8: TStringField;
    cfgcfgmgoumensapedido9: TStringField;
    cfgcfgmgoumensasaida9: TStringField;
    cfgcfgmgoumensaretorno9: TStringField;
    cfgcfgmgoustatuswhats: TDateTimeField;
    orc: TUniQuery;
    consulta: TUniQuery;
    TmVerificarPedidos: TTimer;
    RcTopo: TRectangle;
    RcHora: TRectangle;
    plHora: TLabel;
    MmEnviadas: TMemo;
    RtStatus: TRectangle;
    LbStatus: TLabel;
    procedure FormShow(Sender: TObject);
    procedure MizioServiceWhtasAppStarted(Sender: TObject; const Started: Boolean);
    procedure MizioServiceWhtasAppStatus(Sender: TObject; const Status: IStatusWhats);
    procedure MizioServiceWhtasAppReceiveMessage(Sender: TObject; const Contact: IContactWhats; MessageReceived: IMessageReceivedWhats);
    procedure TmInicializarTimer(Sender: TObject);
    procedure TmVerificarPedidosTimer(Sender: TObject);
    procedure MizioServiceWhtasAppStatusPhone(Sender: TObject;
      const Status: IStatusPhone);
  private
    function conectabanco: Boolean;
    { Private declarations }
  public
    { Public declarations }
    vpCznChave:String;
  end;

procedure CreateGlobalCEFApp;

var
  FprinciMizioWhats: TFprinciMizioWhats;

implementation

{$R *.fmx}

procedure CreateGlobalCEFApp;
begin
  GlobalCEFApp := TCefApplication.Create;
  GlobalCEFApp.WindowlessRenderingEnabled := True;
  GlobalCEFApp.EnableHighDPISupport := True;
  GlobalCEFApp.OnWebKitInitialized := GlobalCEFApp_OnWebKitInitialized;
  // Use Hardware Acceleration when available
  // GlobalCEFApp.EnableGPU                  := False;
end;

procedure TFprinciMizioWhats.FormShow(Sender: TObject);
begin
  if conectabanco then
  begin
    MizioServiceWhtasApp.ShowWhatsApp;
    Application.ProcessMessages;
  end;
end;

procedure TFprinciMizioWhats.MizioServiceWhtasAppReceiveMessage(Sender: TObject; const Contact: IContactWhats;
  MessageReceived: IMessageReceivedWhats);
begin
  MmRecebidas.lines.Add(MessageReceived.MESSAGE);
end;

procedure TFprinciMizioWhats.MizioServiceWhtasAppStarted(Sender: TObject; const Started: Boolean);
begin
  MizioServiceWhtasApp.GetStatus;
end;

procedure TFprinciMizioWhats.MizioServiceWhtasAppStatus(Sender: TObject; const Status: IStatusWhats);
begin
  MmLogs.lines.Add(Status.MyNumber);
end;

procedure TFprinciMizioWhats.MizioServiceWhtasAppStatusPhone(Sender: TObject;
  const Status: IStatusPhone);
begin
  if Status.Connected then
  begin
 //   LbStatus.Font.Color := clGreen;
    LbStatus.text := 'Conectado';
  end
  else
  begin
//    LbStatus.Font.Color := clRed;
    LbStatus.text := 'Desconectado';
  end;

end;

procedure TFprinciMizioWhats.TmInicializarTimer(Sender: TObject);

var
  i: Integer;
begin
  TmInicializar.ENABLED := False;

  for i := 0 to self.ComponentCount - 1 do
  begin
    if self.Components[i] is TUniQuery then
      (self.Components[i] as TUniQuery).Connection := Conexao;

  end;

  if conectabanco then
  begin

    czn.close;
    czn.Open;

    vpCznChave := czncznchave.AsString;



   // tmVerificarPedidos.ENABLED := True;
   // tmVerificarSaidas.ENABLED := True;
   // tmVerificarRetornos.ENABLED := True;

  end;

end;

procedure TFprinciMizioWhats.TmVerificarPedidosTimer(Sender: TObject);
begin
  try

    czn.close;
    czn.Open;

    if vpCznChave <> czncznchave.AsString then
    begin
      MmEnviadas.Lines.Clear;

    end;

    tmVerificarPedidos.ENABLED := False;

    plHora.Text := timetostr(time);

    Application.ProcessMessages;

    if LbStatus.Text = 'Conectado' then
    begin
    //  VerificaPedidos;
    end;

  finally
    tmVerificarPedidos.ENABLED := True;
  end;

end;

function TFprinciMizioWhats.conectabanco: Boolean;
Var
  arquini: TIniFile;
  vnomebanco: String;
  vportabanco: String;
  vservidor: String;
  vusuario: String;
  vsenha: String;
  vlNomeIni: String;
Begin
  result := False;
  vlNomeIni := System.SysUtils.GetCurrentDir + '\gourmeterp.ini';

  if fileexists(vlNomeIni) then
  begin

    arquini := TIniFile.Create(vlNomeIni);
    With arquini Do
    Begin
      vnomebanco := ReadString('posi', 'nomebanco', 'mizio');
      vservidor := ReadString('posi', 'servidor', '127.0.0.1');
      vusuario := ReadString('posi', 'usuario', 'root');
      vsenha := ReadString('posi', 'senha', 'xda973');
      vportabanco := ReadString('posi', 'portabanco', '3306');

    End;
    arquini.Free;

    Conexao.Connected := False;
    Conexao.Database := vnomebanco;
    Conexao.Username := vusuario;
    Conexao.Password := vsenha;
    Conexao.Port := StrToInt(vportabanco);
    Conexao.Server := vservidor;
    Conexao.Connected := True;

    if not Conexao.Connected then
    begin
      ShowMessage('Falha de conexão com o Banco de Dados. Verifique as configurações do gourmeterp.ini');
      Application.Terminate;
    end
    else
    begin
      result := True;
    end;
  end
  else
  begin
    ShowMessage('Nao localicou o arquivo de configuração para conexão:' + #13 + vlNomeIni);
    result := False;
    Application.Terminate;

  end
End;

end.
