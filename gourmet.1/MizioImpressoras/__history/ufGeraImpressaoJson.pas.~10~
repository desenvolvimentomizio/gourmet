unit ufGeraImpressaoJson;

interface

uses
  Winapi.Windows, Winapi.Messages, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, ACBrBase, ACBrPosPrinter, Data.DB,
  MemDS, DBAccess, Uni, Vcl.StdCtrls, json,RESTRequest4D;

type
  TfGeraImpressaoJson = class(TForm)
    orc: TUniQuery;
    ito: TUniQuery;
    brd: TUniQuery;
    sbr: TUniQuery;
    isi: TUniQuery;
    cfg: TUniQuery;
    total: TUniQuery;
    ori: TUniQuery;
    consulta: TUniQuery;
  private
    { Private declarations }
  public
    { Public declarations }
    fzcone:TUniConnection;
    function EnviarPedidoServidorImpressao(aOrcchave, aTciCodigo: String): Boolean;
    function EstadoImpressora(aTciCodigo: String):Integer;
  end;

var
  fGeraImpressaoJson: TfGeraImpressaoJson;

implementation

uses
  System.AnsiStrings, System.StrUtils, System.SysUtils;

{$R *.dfm}

  { TfGeraImpressaoJson }


function TfGeraImpressaoJson.EnviarPedidoServidorImpressao(aOrcchave: String;aTciCodigo:String): Boolean;
var
  A:STRING;

  JsonObjOrc:TJsonObject;

  JsonArrIto:TJsonArray;
  JsonObjIto:TJsonObject;
  JsonParIto:TJSONPair;


  JsonArrBrd:TJsonArray;
  JsonObjBrd:TJsonObject;
  JsonParBrd:TJSONPair;

  JsonArrSbr:TJsonArray;
  JsonObjSbr:TJsonObject;
  JsonParSbr:TJSONPair;


  JsonArrIsi:TJsonArray;
  JsonObjIsi:TJsonObject;
  JsonParisio:TJSONPair;


begin
  try
    Result:=False;


    cfg.close;
    cfg.Connection:=fzcone;
    cfg.Open;

    orc.close;
    orc.Connection:=fzcone;
    orc.ParamByName('orcchave').AsString:=aOrcchave;
    orc.ParamByName('tcicodigo').AsString:=aTciCodigo;
    orc.open;

    total.close;
    total.Connection:=fzcone;
    total.ParamByName('orcchave').AsString:=aOrcchave;
    total.open;

    ori.close;
    ori.Connection:=fzcone;
    ori.ParamByName('orcchave').AsString:=aOrcchave;
    ori.open;

    ito.close;
    ito.Connection:=fzcone;
    ito.ParamByName('orcchave').AsString:=aOrcchave;
    ito.ParamByName('tcicodigo').AsString:=aTciCodigo;
    ito.open;

    // cabeçalho

    JsonObjOrc:=TJsonObject.Create;
    JsonObjOrc.AddPair('immnumepedido',orc.FieldByName('immnumepedido').AsString);
    JsonObjOrc.AddPair('orcmesa',orc.FieldByName('orcmesa').AsString);

    if not ito.IsEmpty then
    begin
      JsonArrIto:=TJsonArray.Create;

      while not ito.Eof do
      begin

        JsonObjIto := TJSONObject.Create;
        JsonObjIto.AddPair('itoquantidade', ito.FieldByName('itoquantidade').AsString);
        JsonObjIto.AddPair('pronome', ito.FieldByName('pronome').AsString);
        JsonObjIto.AddPair('uninome', ito.FieldByName('uninome').AsString);
        JsonObjIto.AddPair('itoobs', ito.FieldByName('itoobs').AsString);


        brd.Close;
        brd.Connection:=fzcone;
        brd.ParamByName('itochave').AsString:=ito.FieldByName('itochave').AsString;
        brd.Open;

        if not brd.IsEmpty then
        begin

          JsonArrBrd:=TJsonArray.Create;

          while not brd.Eof do
          begin

            JsonObjBrd:=TJsonObject.Create;
            JsonObjBrd.AddPair('brdidentificacao', brd.FieldByName('brdidentificacao').AsString);
            JsonArrBrd.Add(JsonObjBrd);

            brd.Next;
          end;
          JsonObjIto.AddPair('bordas',JsonArrBrd);
        end;

        sbr.Close;
        sbr.Connection:=fzcone;
        sbr.ParamByName('itochave').AsString:=ito.FieldByName('itochave').AsString;
        sbr.Open;

        if (not sbr.IsEmpty) and (ito.FieldByName('sfncodigo').AsString<>'') then
        begin

          JsonArrSbr:=TJsonArray.Create;

          while not sbr.Eof do
          begin

            if ito.FieldByName('sfncodigo').AsString<>'' then
            begin

              JsonObjSbr:=TJsonObject.Create;

              JsonObjSbr.AddPair('sfncodigo', brd.FieldByName('sfncodigo').AsString);
              JsonObjSbr.AddPair('sbiobs', brd.FieldByName('sbiobs').AsString);
              JsonObjSbr.AddPair('sbridentificacao', brd.FieldByName('sbridentificacao').AsString);


              // ingredientes

              isi.Close;
              isi.Connection:=fzcone;
              isi.ParamByName('sbichave').AsString:=sbr.FieldByName('sbichave').AsString;
              isi.Open;

              if not isi.IsEmpty then
              begin
                JsonArrIsi:=TJsonArray.Create;

                while not isi.Eof do
                begin
                  JsonObjIsi:=TJsonObject.create;
                  JsonObjIsi.AddPair('tsicodigo', brd.FieldByName('tsicodigo').AsString);
                  JsonObjIsi.AddPair('isitipo', brd.FieldByName('isitipo').AsString);
                  JsonObjIsi.AddPair('tsiidentificacao', brd.FieldByName('tsiidentificacao').AsString);
                  JsonObjIsi.AddPair('ingnome', brd.FieldByName('ingnome').AsString);

                  JsonArrIsi.add(JsonObjIsi);


                  isi.Next;
                end;
                JsonObjSbr.AddPair('ingredientes',JsonArrIsi);

              end;
            end;
            JsonObjIto.AddPair('sabores',JsonArrBrd);

            sbr.Next;
          end;

        end;

        JsonArrIto.Add(JsonObjIto);

        ito.Next;
      end;
      JsonObjOrc.AddPair('itens',JsonArrIto);

    end;

//    JsonObjOrc.AddPair('orcpedidoaux',orc.FieldByName('orcpedidoaux').AsString);
//    JsonObjOrc.AddPair('orcpedidoaux',orc.FieldByName('orcpedidoaux').AsString);
    JsonObjOrc.AddPair('etdidentificacao',orc.FieldByName('etdidentificacao').AsString);
    JsonObjOrc.AddPair('edrrua',orc.FieldByName('edrrua').AsString);
    JsonObjOrc.AddPair('edrnumero',orc.FieldByName('edrnumero').AsString);
    JsonObjOrc.AddPair('edrbairro',orc.FieldByName('edrbairro').AsString);
    JsonObjOrc.AddPair('etftelefone',orc.FieldByName('etftelefone').AsString);
    JsonObjOrc.AddPair('etdobs',orc.FieldByName('etdobs').AsString);
    JsonObjOrc.AddPair('edrobs',orc.FieldByName('edrobs').AsString);
    JsonObjOrc.AddPair('orcobs',orc.FieldByName('orcobs').AsString);
    JsonObjOrc.AddPair('orcdataabert',orc.FieldByName('orcdataabert').AsString);
    JsonObjOrc.AddPair('orchoraabert',orc.FieldByName('orchoraabert').AsString);
    JsonObjOrc.AddPair('clbidentificacao',orc.FieldByName('clbidentificacao').AsString);
    JsonObjOrc.AddPair('oriidentificacao',orc.FieldByName('oriidentificacao').AsString);
    JsonObjOrc.AddPair('orcpedidointegracao',orc.FieldByName('orcpedidointegracao').AsString);
    JsonObjOrc.AddPair('orcnumeropedido',orc.FieldByName('orcnumeropedido').AsString);
    JsonObjOrc.AddPair('orcpedidointegracao',orc.FieldByName('orcpedidointegracao').AsString);
    JsonObjOrc.AddPair('orcqrcode',orc.FieldByName('orcqrcode').AsString);

    A:= JsonObjOrc.ToString;

    Result:=True;



  except
  on E: Exception do
    begin
       showmessage('Erro 234 '+e.Message);
       Result:=False;
    end;
  end;

end;

function CleanJsonString(const JsonString: string): string;
var
  I: Integer;
  SB: TStringBuilder;
begin
  SB := TStringBuilder.Create;
  for I := 1 to Length(JsonString) do
  begin
    if CharInSet(JsonString[I], [' ', #9, #10, #13]) then
      Continue //Pula espaços, tabs, CRs e LFs
    else
      SB.Append(JsonString[I]);
  end;
  Result := SB.ToString;
  SB.Free;
end;



function TfGeraImpressaoJson.EstadoImpressora(aTciCodigo: String): Integer;
var
  LResponse: IResponse;
var
   a:string;
  vlJsonValue:TJsonValue;
  vlsituacao:String;



begin

  LResponse := TRequest.New.BaseURL('http://localhost:8100/v1/statusimpressora')
    .AddBody(TJSONObject
                    .Create
                    .AddPair('portaimpressora',aTciCodigo))
    .Accept('application/json')
    .Get;

  if LResponse.StatusCode = 200 then
  begin
      a:=CleanJsonString(LResponse.Content);

      vlJsonValue := TJSonObject.ParseJSONValue(a);

      vlJsonValue := TJSonObject.ParseJSONValue(a);
      vlsituacao:= vlJsonValue.GetValue<string>('situacao', EmptyStr);
      if vlsituacao<>'' then
         result:=vlsituacao.ToInteger;
  end
  else
      result:=999;



end;

end.
