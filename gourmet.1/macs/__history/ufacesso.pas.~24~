Unit ufacesso;

Interface

Uses
  Vcl.Forms, Data.DB, DBAccess, Uni, MemDS, Vcl.StdCtrls, Vcl.Buttons, Vcl.Mask,
  Vcl.DBCtrls, Vcl.Controls, Vcl.ExtCtrls, Vcl.Imaging.jpeg, System.Classes,
  System.SysUtils, Winapi.Windows, ufuncoes, Vcl.Dialogs, Winapi.Messages,
  System.Variants, uPegaBase,pingsend, Winapi.WinInet, dateutils, RESTRequest4D;

Type
  TFormaValidacao = (fvUsuario, fvAcesso);

  Tfacesso = Class(TForm)
    PlTopo: TPanel;
    PlTitulo: TPanel;
    GBAcesso: TGroupBox;
    LbUsuario: TLabel;
    LbSenha: TLabel;
    usuario: TEdit;
    senha: TEdit;
    plbotoes: TPanel;
    bConfirma: TBitBtn;
    bcancela: TBitBtn;
    clb: TUniQuery;
    fla: TUniQuery;
    flaflacodigo: TIntegerField;
    flaflaidentificacao: TStringField;
    Dfla: tunidatasource;
    logoacesso: TImage;
    cfg: TUniQuery;
    cfgcfgdtinictb: TDateField;
    cfgcfgdtfinctb: TDateField;
    consulta: TUniQuery;
    cfgcfgdatapadrao: TDateField;
    acs: TUniQuery;
    btAlterarSenha: TButton;
    clbclbcodigo: TIntegerField;
    clbclbidentificacao: TStringField;
    clbclbsenha: TStringField;
    acsacschave: TIntegerField;
    acsclbcodigo: TIntegerField;
    acsflacodigo: TIntegerField;
    acsacspid: TIntegerField;
    acsacsusuariodb: TStringField;
    acsacsipconexao: TStringField;
    acsacsnomemicro: TStringField;
    acsacsusuariomicro: TStringField;
    acstrmcodigo: TIntegerField;
    clbclbativo: TStringField;
    qhoje: TUniQuery;
    qhojeqhoje: TDateField;
    mfi: TUniQuery;
    plInfo: TPanel;
    cfgmctb: TUniQuery;
    licencao: TUniQuery;
    cfgetddoc1: TStringField;
    Procedure bConfirmaClick(Sender: TObject);
    Procedure FormCreate(Sender: TObject);
    procedure bcancelaClick(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure btAlterarSenhaClick(Sender: TObject);
    procedure usuarioExit(Sender: TObject);
    procedure FormShow(Sender: TObject);

  Private
    { Private declarations }
    RecAcesso: TAcesso;
    FDataHora: TDateTime;
    FDataInvalida: Boolean;
    Fzcone: TUniConnection;
    FColaborador: Integer;
    FTerminal: Integer;
    FAcesso: Integer;
    ConexaoWeb: TUniConnection;

    function AjustarSenha: Boolean;
    procedure SetDataHora(const Value: TDateTime);
    procedure SetDataInvalida(const Value: Boolean);
    procedure SetMainForm(FormAtivo: TForm);
    procedure Setzcone(const Value: TUniConnection);
    function ValidaUsuario(pFormaValidacao: TFormaValidacao): Boolean;
    procedure SetColaborador(const Value: Integer);
    procedure processaconsumointerno;
    procedure VerificaLicenca;
    function ConectaBancoRemoto: Boolean;
    function Conectar: Boolean;

  Public
    { Public declarations }
  published
    property zcone: TUniConnection read Fzcone write Setzcone;
    property DataHora: TDateTime read FDataHora write SetDataHora;
    property DataInvalida: Boolean read FDataInvalida write SetDataInvalida;
    property Colaborador: Integer read FColaborador write SetColaborador;
    property Terminal: Integer read FTerminal write FTerminal;
    property Acesso: Integer read FAcesso;
  end;

  TProcessaConsumoInterno = function(pAOwner: TApplication; pConexao: TUniConnection): Integer;

Var
  FAcesso: Tfacesso;
  vpTentativas: Integer = 0;

Implementation

uses
  uflicenca;

{$R *.dfm}

function InternetAtiva: Boolean;
var
  Flags: Cardinal;
begin
  result := False;
  if not InternetGetConnectedState(@Flags, 0) then
    result := False
  else
    result := true;
end;

function Acesso(pAOwner: TApplication; pConexao: TUniConnection; pTerminal: Integer): Integer;
begin
  result := 0;

  FAcesso := Tfacesso.Create(pAOwner);
  try
    FAcesso.zcone := pConexao;
    FAcesso.Terminal := pTerminal;

    (* Consulta a data e hora do servidor *)
    FAcesso.qhoje.Close;
    FAcesso.qhoje.SQL.Text := 'SELECT CURRENT_date() as qhoje';
    FAcesso.qhoje.Open;

    FAcesso.DataHora := FAcesso.qhoje.Fields[0].AsFloat;

    (* Se data do servidor é inválida não é permitido abrir o sistema *)
    if FAcesso.DataInvalida = true then
      Exit;

    if FAcesso.ShowModal = mrOk then
      result := FAcesso.Acesso;
  finally
    FAcesso.Free;
  end;
end;

exports Acesso;

function Tfacesso.AjustarSenha: Boolean;
var
  ExecForm: function(CargaFrame: TCargaFrame): String;
  vlCargaFrame: TCargaFrame;
  vlPack: NativeUInt;
  vlResult: String;
begin
  result := False;

  vlPack := LoadPackage('modulos\mals.bpl');
  if vlPack <> 0 then
    try
      @ExecForm := GetProcAddress(vlPack, PChar('formulario'));

      if Assigned(ExecForm) then
      begin
        RecAcesso.usuario := clbclbcodigo.AsInteger;
        vlCargaFrame := CargaFormu(Application, zcone, RecAcesso, '', '', '');
        vlResult := ExecForm(vlCargaFrame);
        if vlResult <> '' then
          result := true;
      end;
    finally
      DoUnLoadPackage(Application, vlPack);

      (* Consulta é atualizada para carregar a senha criptografada *)
      if result = true then
        clb.Refresh;
    end;
end;

procedure Tfacesso.bcancelaClick(Sender: TObject);
begin
  Self.ModalResult := mrCancel;
end;

Procedure Tfacesso.bConfirmaClick(Sender: TObject);
begin
  (*
    * Valida login e senha do usuário para acesso ao sistema;
    * Se não for válido abandona a rotina
  *)
  if not ValidaUsuario(fvAcesso) then
    Exit;

  { * Força a ativação dos Triggers * }
  consulta.Close;
  consulta.SQL.Text := 'SET @disable_triggers=NULL';
  consulta.ExecSQL;

  (* Registra Acesso no Sistema *)
  consulta.Close;
  consulta.SQL.Text := 'SELECT CONNECTION_ID(), SESSION_USER() FROM dual';
  consulta.Open;

  { * Cria cfgmctb * }

  cfgmctb.Close;
  cfgmctb.Open;

  if cfgmctb.IsEmpty then
  begin
    cfgmctb.Append;
    cfgmctb.FieldByName('cfgcodigo').AsInteger := 1;
    cfgmctb.FieldByName('cfgctbcliindiv').AsInteger := 0;
    cfgmctb.FieldByName('cfgctbforindiv').AsInteger := 0;
    cfgmctb.FieldByName('ccgcodigo').AsInteger := 1;
    cfgmctb.FieldByName('cfgctbmodo').AsInteger := 0;
    cfgmctb.FieldByName('cfgctbusaccg').AsInteger := 0;
    cfgmctb.FieldByName('cfgctbclbindiv').AsInteger := 0;
    cfgmctb.FieldByName('cfgctbtrnindiv').AsInteger := 0;
    cfgmctb.FieldByName('ctbpcgrectaproduap').AsInteger := 0;
    cfgmctb.FieldByName('cfgctbpcgrectamercaap').AsInteger := 0;
    cfgmctb.FieldByName('cfgctbpcgrectaserviap').AsInteger := 0;
    cfgmctb.FieldByName('cfgctbpcgdevolmerca').AsInteger := 0;
    cfgmctb.FieldByName('cfgctbpcgdevolmercaap').AsInteger := 0;
    cfgmctb.FieldByName('cfgctbusanucleosgeren').AsInteger := 0;
    cfgmctb.FieldByName('cfgctgusaorcamento').AsInteger := 0;
    cfgmctb.Post;
  end;

  plInfo.Visible := true;
  Application.ProcessMessages;

  if pos('atendimento', lowercase(application.ExeName))=0 then
  begin
    mfi.Close;
    mfi.ExecSQL;
  end;

  plInfo.Visible := False;
  Application.ProcessMessages;

  acs.Open;
  acs.Append;
  acsclbcodigo.AsInteger := Colaborador;
  acsflacodigo.AsInteger := 1;
  acstrmcodigo.AsInteger := Terminal;
  acsacspid.AsString := consulta.Fields[0].AsString;
  acsacsusuariodb.AsString := Fzcone.Username;
  acsacsipconexao.AsString := Copy(consulta.Fields[1].AsString, Pos('@', consulta.Fields[1].AsString) + 1, 200);
  acsacsnomemicro.AsString := ComputerName;
  acsacsusuariomicro.AsString := Username;
  acs.Post;
  FAcesso := acsacschave.AsInteger;

  Self.ModalResult := mrOk;
end;

procedure Tfacesso.btAlterarSenhaClick(Sender: TObject);
begin
  if AjustarSenha then
  begin
    Self.senha.Text := '';
    Self.usuario.SetFocus;
  end;
end;

Procedure Tfacesso.FormCreate(Sender: TObject);
begin
  (* Torna o formulário atual o MainForm da Aplicação somente no login inicial *)
  if (Screen.Forms[0].Visible = False) then
    SetMainForm(Self);

  Self.Height := 380;
  Self.Width := 780;
end;

procedure Tfacesso.FormKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = ';' then
    Key := #0;

  if Key = '\' then
    Key := #0;

  if Key = #13 then
  begin
    Key := #0;
    Perform(WM_NEXTDLGCTL, 0, 0);
  end
  else if Key = #27 then
  begin
    Key := #0;
    bcancela.Click;
  end;
end;

procedure Tfacesso.VerificaLicenca;
var
  vlfLicenca: Tflicenca;
  vlentdoc1: string;
  vlDias: Integer;
  vlDataLicenca:String;
  vlURL:String;
var
  LResponse: IResponse;

  vlPing:Integer;

begin
  vlPing:=pinghost('api.miziosistemas.com.br');

  if vlPing=0 then
  begin
    vlURL:='http://api.miziosistemas.com.br:9797/licenca';
    vlentdoc1 := cfgetddoc1.AsString;

   try
    LResponse := TRequest.New.BaseURL(vlURL)
      .Accept('application/text-plain')
      .AddBody(vlentdoc1)
      .Get;
    vlDataLicenca:=LResponse.Content;
   except
    vlDataLicenca:='';
   end;
  end;


  if vlDataLicenca<>'' then
  begin
    try
      vlDias := DaysBetween(StrTodate(vlDataLicenca), date());
    except
      vlDataLicenca:=DateTostr(now());
    end;

    if StrTodate(vlDataLicenca) < date() then
      vlDias := vlDias * -1;

    if vlDias <= 7 then
    begin
      vlfLicenca := Tflicenca.Create(Self);
      vlfLicenca.vpDias := vlDias;
      vlfLicenca.ShowModal;
    end;
  end;


end;

procedure Tfacesso.FormShow(Sender: TObject);
begin

  if Screen.PixelsPerInch = 96 then
  begin
    Self.Height := 290;
    Self.Width := 620;
  end
  else
  begin
    Self.Height := 350;
    Self.Width := 785;
  end;

  AjustaImagem(logoacesso, MIZ_IMG_ACESSO);

  Ajustacor(PlTitulo);

   if InternetAtiva then
   begin
     if cfg.Active then
     begin
       VerificaLicenca;
     end;
   end;
end;

procedure Tfacesso.SetColaborador(const Value: Integer);
begin
  (* Se não existe necessidade abandona a rotina *)
  if FColaborador = Value then
    Exit;

  FColaborador := Value;

  fla.Filter := 'clbcodigo = ' + FColaborador.ToString();

end;

procedure Tfacesso.SetDataHora(const Value: TDateTime);
var
  vlDataAtual: TDate;
begin
  FDataHora := Value;

  (* Atualiza property que identifica se data do servidor está inválida *)
  vlDataAtual := FDataHora;
  DataInvalida := vlDataAtual < cfgcfgdatapadrao.AsDateTime;

  if not(DataInvalida) then
  begin
    if cfgcfgdatapadrao.AsDateTime <> FDataHora then
    begin

    end;

    cfg.Edit;
    cfgcfgdatapadrao.AsDateTime := FDataHora;
    cfg.Post;

    // processaconsumointerno;

  end;

  (* Compara a data do servidor com o terminal *)
  if DateToStr(vlDataAtual) <> DateToStr(date) then
    Application.MessageBox(PChar('Verifique a data deste terminal, está diferente da data do servidor!'), 'Atenção', MB_ICONWARNING + MB_OK);

end;

procedure Tfacesso.processaconsumointerno;
var
  processaconsumointerno: TProcessaConsumoInterno;
  vlRetorno: Integer;
  vlActCodigo: Integer;
  vlPackLia: Cardinal;
begin

  vlPackLia := LoadPackage('modulos\mcsm.bpl');
  if vlPackLia <> 0 then
    try
      @processaconsumointerno := GetProcAddress(vlPackLia, PChar('ProcessaConsumoInterno'));

      if Assigned(processaconsumointerno) then
      begin
        vlRetorno := processaconsumointerno(Application, zcone);
      end;
    finally
    end;

end;

procedure Tfacesso.SetDataInvalida(const Value: Boolean);
begin
  FDataInvalida := Value;

  if FDataInvalida = true then
    Application.MessageBox(PChar('Não foi possível abrir o sistema.' + #13 + #13 + 'A data do servidor está anterior a última data de movimentação: '
      + #13 + 'Data do Servidor: ' + DateToStr(DataHora) + #13 + 'Data de Movimentação: ' + DateToStr(cfgcfgdatapadrao.AsDateTime)), 'Atenção',
      MB_ICONERROR + MB_OK);
end;

procedure Tfacesso.SetMainForm(FormAtivo: TForm);
var
  TmpMain: ^TCustomForm;
begin
  TmpMain := @Application.MainForm;
  TmpMain^ := FormAtivo;
end;

procedure Tfacesso.Setzcone(const Value: TUniConnection);
var
  I: Integer;
begin
  Fzcone := Value;

  for I := 0 to Self.ComponentCount - 1 do
    if Self.Components[I] is TUniQuery then
      TUniQuery(Self.Components[I]).Connection := zcone;

  (* Carrega as configurações *)
  if not cfg.Active then
    cfg.Open;

  (* Carrega as filias de acesso dos colaboradores *)
  if not fla.Active then
    fla.Open;

  (* Carrega os colaboradores ativos *)
  if not clb.Active then
    clb.Open;
end;

procedure Tfacesso.usuarioExit(Sender: TObject);
begin
  if ActiveControl = bcancela then
    Exit;

  if ValidaUsuario(fvUsuario) then
    btAlterarSenha.Enabled := true
  else
    btAlterarSenha.Enabled := False;
end;

function Tfacesso.ValidaUsuario(pFormaValidacao: TFormaValidacao): Boolean;
var
  vlUsuario: String;
  vlSenha: String;
  vlSenhaMD5: string;
begin

  clb.Close;
  clb.Open;

  result := False;

  vlUsuario := Self.usuario.Text;
  vlSenha := Self.senha.Text;

  { if (vlUsuario='') or (vlSenha='') then
    exit; }

  case pFormaValidacao of
    (*
      *
      * Identifica se é um usuário válido
      *
    *)
    fvUsuario:
      if clb.Locate('clbidentificacao', VarArrayOf([usuario.Text]), [loCaseInsensitive]) then
        if clbclbativo.AsString = '1' then
          result := true
        else
        begin
          Application.MessageBox(PChar('Usuário inativo!'), 'Atenção', MB_ICONWARNING + MB_OK);
          usuario.SetFocus;
          Exit;
        end;

    (*
      *
      * Valida usuário e senha para acesso ao sistema
      *
    *)

    fvAcesso:
      begin
        (* Valida se usuário definiu Filial *)

        (* Identifica se usuário ainda não possui senha criptografada *)
        if clb.Locate('clbidentificacao;clbsenha', VarArrayOf([vlUsuario, vlSenha]), [loCaseInsensitive]) then
        begin
          if AjustarSenha then
          begin
            Self.senha.Text := '';
            Self.usuario.SetFocus;
          end;

          Exit;
        end;

        (* Valida login do usuário *)
        vlSenhaMD5 := AnsiLowerCase(Copy(MD5texto(UpperCase(vlSenha + 'pega')), 1, 15));

        if not clb.Locate('clbidentificacao;clbsenha', VarArrayOf([vlUsuario, vlSenhaMD5]), [loCaseInsensitive]) then
        begin
          Application.MessageBox(PChar('Usuário ou senha inválidos!'), 'Atenção', MB_ICONWARNING + MB_OK);

          vpTentativas := vpTentativas + 1;
          if vpTentativas = 3 then
          begin
            Application.MessageBox(PChar('Acesso negado!'), 'Atenção', MB_ICONWARNING + MB_OK);
            Self.ModalResult := mrCancel;
          end;

          Exit;
        end;

        (* Se passou nas validações retorna válido *)
        result := true;
      end;
  end;

  (* Atualiza o código do usuário *)
  if result = true then
    Colaborador := clb.FieldByName('clbcodigo').AsInteger;
end;

function Tfacesso.Conectar: Boolean;
var
  vlHost: string;
begin
  try
    ConexaoWeb.Connect;
    bConfirma.Enabled := true;
    result := true;
  except
    if ConexaoWeb.Connected = False then
    begin
      result := False;
    end;
  end;
end;

function Tfacesso.ConectaBancoRemoto: Boolean;
begin
  try
    result := true;
    ConexaoWeb := TUniConnection.Create(Self);
    ConexaoWeb.Password := 'SuRiCa973';
    ConexaoWeb.Server := 'servaut.miziosistemas.com.br';
    ConexaoWeb.LoginPrompt := False;
    ConexaoWeb.Port := 8369;
    ConexaoWeb.Username := 'root';
    ConexaoWeb.Database := 'empresa';
    ConexaoWeb.ProviderName := 'mySQL';
    result := Conectar;

  except
    result := False;
  end;
end;

end.
