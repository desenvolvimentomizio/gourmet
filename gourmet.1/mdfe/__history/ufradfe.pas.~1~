unit ufradfe;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, ufrabase, Data.DB, Xml.xmldom,
  Xml.XMLIntf, Xml.XMLDoc,  System.ImageList, Vcl.ImgList,
  Vcl.ExtCtrls, VirtualTable, MemDS, DBAccess, Uni, Vcl.Menus, System.Actions,
  Vcl.ActnList, Vcl.StdCtrls, Vcl.Buttons, Vcl.Grids, Vcl.DBGrids,
  Vcl.Imaging.jpeg, Vcl.Mask, Vcl.DBCtrls, Vcl.Imaging.pngimage, uPegaBase, ufuncoes,
  pcnRetDistDFeInt, ACBrBase, ACBrDFe, ACBrNFe, ACBrDFeReport,
  ACBrDFeDANFeReport, ACBrNFeDANFEClass, ACBrNFeDANFeRLClass, ACBrDFeSSL, blcksock, StrUtils, pcnConversao,
  Vcl.Samples.Spin, pcnEventoNFe, Vcl.ComCtrls, pcnRetConsSitNFe;

type
  Tfradfe = class(Tfrabase)
    uqtabeladfechave: TIntegerField;
    uqtabelaflacodigo: TIntegerField;
    uqtabeladfechaveacesso: TStringField;
    uqtabeladfemodelo: TIntegerField;
    uqtabeladfeserie: TIntegerField;
    uqtabeladfenumero: TIntegerField;
    uqtabeladfedoc1: TStringField;
    uqtabeladfeinscest: TStringField;
    uqtabeladfeidentificacao: TStringField;
    uqtabeladfeemissao: TDateTimeField;
    uqtabeladfevalor: TFloatField;
    uqtabeladfemanifdatahoraevento: TDateTimeField;
    uqtabeladfemanifprotocolo: TStringField;
    uqtabeladfemanifcestat: TIntegerField;
    uqtabeladfemanifestado: TIntegerField;
    ACBrNFe1: TACBrNFe;
    ACBrNFeDANFeRL1: TACBrNFeDANFeRL;
    lblTotalDocumentos: TLabel;
    edtUltimoNSU: TSpinEdit;
    Label1: TLabel;
    CmdGravarDFe: TUniQuery;
    CmdManifestarDFe: TUniQuery;
    cfg: TUniQuery;
    cfgcfgultimonsu: TIntegerField;
    cfgcfgviasnfe: TIntegerField;
    cfgcfgnumeronfe: TIntegerField;
    cfgcfgserienfe: TStringField;
    cfgcfgnumeronfce: TIntegerField;
    cfgcfgserienfce: TStringField;
    cfgcfgobs1: TIntegerField;
    cfgcfgobs2: TIntegerField;
    cfgcfgobs3: TIntegerField;
    cfgcfgobs4: TIntegerField;
    cfgcfgdescrinfe: TIntegerField;
    cfgcfgmodonfe: TIntegerField;
    cfgcfgservarqnfes: TStringField;
    cfgcfgnumecertifa1: TStringField;
    cfgcfgsenhacertificado: TStringField;
    cfgcfgsenhacertificadoa1: TStringField;
    cfgcfgmodoautenticacao: TIntegerField;
    cfgcfgdatahoraultimadfe: TDateTimeField;
    cfgcfgusanfc: TIntegerField;
    cfgetdapelido: TStringField;
    cfgetdidentificacao: TStringField;
    cfgetddoc1: TStringField;
    cfgufssigla: TStringField;
    cfgufscodigo: TStringField;
    ActConsultar: TAction;
    ActManifestar: TAction;
    uqtabeladfeoperacao: TIntegerField;
    uqtabeladfedocxml: TBlobField;
    uqtabeladfenfexml: TBlobField;
    mostra: TProgressBar;
    ActConsultarEsta: TAction;
    procedure DBGListaDrawColumnCell(Sender: TObject; const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure ActAtualizarExecute(Sender: TObject);
    procedure ActConsultarExecute(Sender: TObject);
    procedure ActManifestarExecute(Sender: TObject);
  private

    CNPJ: string;
    RAZAO_SOCIAL: string;
    UF: string;
    UF_IBGE: Integer;
    AMBIENTE: string;
    SSL_LIB: Integer;
    CERTIFICADO: string;
    CERTIFICADO_SENHA: AnsiString;
    ULTIMO_NSU: Integer;
    DTHR_ULTIMA_CONSULTA: TDateTime;

    FCNPJEmpresa: string;

    { Private declarations }
    procedure ConfigurarNFe(const ACNPJ: string);
    procedure ConsultarDFE;
    procedure MensagemStatus(const AMensagem: String);
    procedure GravarDocumentoDFe(const ACNPJEmpresa, AChaveAcesso, ASituacao, ANSU: String; const AModelo, ASerie, ANumero: Integer;
      const ACNPJ, AInscrEstadual, ARazaoSocial, AOperacao: String; const ADataEmissao: TDateTime; const AValor: Double; const AXML: string; const AManifestado: Boolean);
    procedure GravarManifestacaoDFe(const AChaveAcesso: String; const ADtHrEvento: TDateTime; const ANumProtocolo: String; const AcStat: Integer; const AxMotivo, AXML: string);
    procedure SetUltimoNSU(const ACNPJ: string; const AUltimoNSU: Integer);
    function ConsultarPorChave(ACNPJ, AChaveAcesso: string): Boolean;
    procedure carregarxmls(vChaveNfe: string);
  public
    { Public declarations }

    property CNPJEmpresa: string read FCNPJEmpresa write FCNPJEmpresa;

    procedure Clear;
    procedure Get(const ACNPJ: string);

  end;

var
  fradfe: Tfradfe;

  // Início ID do Módulo fratoe
const
  vPlIdMd = '00.00.00.001-01';
  vPlTitMdl = 'Documentos Fiscais';

  // Fim ID do Módulo fratoe

implementation

uses
  ufdfe, ufaguarde;

{$R *.dfm}

function TamanhoArquivo(Arquivo: string): Integer;
begin
  with TFileStream.Create(Arquivo, fmOpenRead or fmShareExclusive) do
    try
      Result := Size;
    finally
      Free;
    end;
end;

function formuFrame(pCargaFrame: TCargaFrame): string;
begin
  pCargaFrame.IdModulo := vPlIdMd;
  pCargaFrame.Titulo := vPlTitMdl;
  fradfe := Tfradfe.Create(pCargaFrame);
end;

procedure defineacesso(pCargaFrame: TCargaFrame);
begin
  pCargaFrame.Titulo := vPlTitMdl;
  fradfe := Tfradfe.Create(pCargaFrame);
  try
    fradfe.CriaAcoesDeAcesso;
  finally
    fradfe.Free;
  end;
end;

exports formuFrame, defineacesso;

type
  { expor propriedades e metodso privadas e protegindos do dbgrid }
  TFriendly = class(TCustomDBGrid);

procedure Tfradfe.Get(const ACNPJ: string);
var
  TmpDataset: TDataSet;
begin
  Self.Clear;

  cfg.Close;
  cfg.ParamByName('flacodigo').AsInteger := Acesso.Filial;
  cfg.Open;

  try
    if not cfg.IsEmpty then
    begin
      CNPJ := cfg.FieldByName('etddoc1').AsString;
      RAZAO_SOCIAL := cfg.FieldByName('etdidentificacao').AsString;
      UF := cfg.FieldByName('ufssigla').AsString;
      UF_IBGE := cfg.FieldByName('ufscodigo').AsInteger;
      AMBIENTE := cfg.FieldByName('cfgmodonfe').AsString;
      SSL_LIB :=  cfg.FieldByName('cfgmodoautenticacao').AsInteger;

      CERTIFICADO := cfg.FieldByName('cfgnumecertifa1').AsString;
      CERTIFICADO_SENHA := cfg.FieldByName('cfgsenhacertificadoa1').AsAnsiString;
      ULTIMO_NSU := cfg.FieldByName('cfgultimonsu').AsInteger;
      DTHR_ULTIMA_CONSULTA := cfg.FieldByName('cfgdatahoraultimadfe').AsDateTime;
      CNPJEmpresa := CNPJ;
    end
    else
      Showmessage('CNPJ ' + ACNPJ + ' não encontrado!');
  finally

  end;
end;

function Tfradfe.ConsultarPorChave(ACNPJ, AChaveAcesso: string): Boolean;
var
  cStat: Integer;
  xMotivo: String;
  RetornoDist: TretDistDFeInt;
  DocumentoZip: TdocZipCollectionItem;
  Chave: String;
  Modelo, Serie, Numero: Integer;
  Situacao, DocXML: String;

const
  MENSAGEM_XML_NAO_LOCALIZADO: String = 'Nenhum documento XML foi localizado para a nota eletrônica selecionada, ' +
    'a SEFAZ pode demorar algumas horas para disponilizar o documento após a manifestação, ' + sLineBreak + sLineBreak +
    'Verifique se o documento já foi manifestado ou tente novamente mais tarde!';
begin
  Result := False;

  try
    // ConfigurarNFe(CNPJ);
    Get(ACNPJ);

    if ACBrNFe1.DistribuicaoDFePorChaveNFe(UF_IBGE, CNPJ, AChaveAcesso) then
    begin
      RetornoDist := ACBrNFe1.WebServices.DistribuicaoDFe.retDistDFeInt;
      cStat := RetornoDist.cStat;
      xMotivo := RetornoDist.xMotivo;

      if (RetornoDist.docZip.Count > 0) and (cStat = 138) then
      begin
        DocumentoZip := RetornoDist.docZip.Items[0];
        Chave := DocumentoZip.resDFe.chDFe;

        if Chave <> EmptyStr then
        begin
          if Pos('nfeProc', DocumentoZip.Xml) > 0 then
            DocXML := DocumentoZip.Xml
          else
            DocXML := '';

          if DocXML.Trim.IsEmpty then
          begin
            exit;
          end;

          Modelo := StrToInt(Copy(Chave, 21, 2));
          Numero := StrToInt(Copy(Chave, 26, 9));
          Serie := StrToInt(Copy(Chave, 23, 3));

          case DocumentoZip.resDFe.cSitDFe of
            snAutorizado:
              Situacao := 'A';
            snDenegado:
              Situacao := 'D';
            snCancelado:
              Situacao := 'C';
            snEncerrado:
              Situacao := 'E';
          end;

          GravarDocumentoDFe(ACNPJ, Chave, Situacao, DocumentoZip.NSU, Modelo, Serie, Numero, DocumentoZip.resDFe.CNPJCPF, DocumentoZip.resDFe.IE, DocumentoZip.resDFe.xNome,
            IfThen(DocumentoZip.resDFe.tpNF = tnEntrada, 'E', 'S'), DocumentoZip.resDFe.dhEmi, DocumentoZip.resDFe.vNF, DocXML, True);

          Result := True;
        end;
      end
      else
      begin
        if cStat = 137 then
        begin

          // raise Exception.Create(MENSAGEM_XML_NAO_LOCALIZADO);
        end
        else
        begin

          // raise Exception.CreateFmt('Ocorreu um erro ao consultar o webservice de distribuição de DFe: %d - %s', [cStat, xMotivo]);
        end;
      end;
    end;
  except

  end;
end;

procedure Tfradfe.ActConsultarExecute(Sender: TObject);
begin
  inherited;
  // try
  ConsultarDFE;
  PnlRodapeGrid.Caption := '';
  ActAtualizar.Execute;
  // except
  // ShowMessage('Serviço indisponível no Ambiente Nacional, favor aguardar e tentar novamente mais tarde!');
  // end;
end;

procedure Tfradfe.carregarxmls(vChaveNfe: string);
var

  PathApp: String;
  PathDocumentos: String;

begin

  application.ProcessMessages;
  vChaveNfe := uqtabeladfechaveacesso.AsString;

  PathApp := ExtractFilePath(ParamStr(0));
  PathDocumentos := IncludeTrailingPathDelimiter(PathApp + 'documentos\download');

  if ArquivoExiste(PathDocumentos + vChaveNfe + '-nfe.xml') then
  begin
    uqtabela.Edit;
    uqtabeladfenfexml.LoadFromFile(PathDocumentos + vChaveNfe + '-nfe.xml');
    uqtabela.Post;
  end;

end;

procedure Tfradfe.ActManifestarExecute(Sender: TObject);
var
  cStat: Integer;
  xMotivo: String;
  NumeroLote: Integer;
  RetornoEvento: TRetInfEvento;
  vlTipoEvento: Integer;
  vlNomexml: string;

  RetornoDist: TretDistDFeInt;
  iDocZip: Integer;
  DocumentoZip: TdocZipCollectionItem;
  CountDocumentos: Integer;
  Chave: String;
  vlPode: Boolean;
  vltexto: string;
  vlArquivo: TStringList;
  vlrecno: Integer;
  vlQtdEventos: Integer;
  vlnumeroprotocolo: string;
  vlTentativas: Integer;
begin
  if (uqtabeladfemanifestado.AsInteger <> 0) and (uqtabeladfemanifprotocolo.AsString <> '') then
  begin
    Showmessage('Este documento já foi manifestado!');
  end
  else
  begin
    vlPode := False;
    if ACBrNFe1.DistribuicaoDFePorChaveNFe(UF_IBGE, CNPJ, Self.uqtabeladfechaveacesso.AsString) then
    begin

      RetornoDist := ACBrNFe1.WebServices.DistribuicaoDFe.retDistDFeInt;
      cStat := RetornoDist.cStat;
      xMotivo := RetornoDist.xMotivo;

      if cStat = 138 then
      begin
        CountDocumentos := CountDocumentos + RetornoDist.docZip.Count;
        lblTotalDocumentos.Caption := 'Total de Documentos: ' + CountDocumentos.ToString;

        for iDocZip := 0 to RetornoDist.docZip.Count - 1 do
        begin
          DocumentoZip := RetornoDist.docZip.Items[iDocZip];

          Chave := DocumentoZip.resDFe.chDFe;
          if Chave <> EmptyStr then
          begin
            vltexto := DocumentoZip.Xml;

            vlNomexml := ExtractFilePath(application.ExeName) + 'xml-recebidos\' + uqtabeladfechaveacesso.AsString + '.xml';

            vlArquivo := TStringList.Create;
            vlArquivo.Text := vltexto;
            vlArquivo.SaveToFile(vlNomexml);

            // uqtabeladfedocxml.SaveToFile(vltexto);

          end;
        end;
      end;

      vlPode := True;
    end;

    if vlPode then
    begin

      if CriaFormulario(Tfdfe, Self.uqtabeladfechave.AsString, '') then
      begin
        vlTipoEvento := uqtabeladfeoperacao.AsInteger;

        cfg.Close;
        cfg.ParamByName('flacodigo').AsInteger := Acesso.Filial;
        cfg.Open;

        // ConfigurarNFe(CNPJEmpresa);

        vlNomexml := ExtractFilePath(application.ExeName) + 'xml-recebidos\' + uqtabeladfechaveacesso.AsString + '.xml';
        // uqtabeladfedocxml.SaveToFile(vlNomexml);
        if fileexists(vlNomexml) then
        begin
          ACBrNFe1.EventoNFe.Evento.Clear;
          // ACBrNFe1.NotasFiscais.LoadFromFile(vlNomexml);

          with ACBrNFe1.EventoNFe.Evento.New do
          begin
            infEvento.cOrgao := 91;
            infEvento.chNFe := uqtabeladfechaveacesso.AsString;
            infEvento.CNPJ := CNPJEmpresa;
            infEvento.dhEvento := Now;

            case vlTipoEvento of
              0:
                infEvento.tpEvento := teManifDestConfirmacao;
              1:
                infEvento.tpEvento := teManifDestCiencia;
              2:
                infEvento.tpEvento := teManifDestDesconhecimento;
              3:
                infEvento.tpEvento := teManifDestOperNaoRealizada;
            else
              Showmessage('Tipo de evento desconhecido, verifique!');
            end;
          end;

          // Manifesta e muda a tag do banco informando que foi manisfestada
          NumeroLote := StrToInt(FormatDateTime('yymmddhhmm', Now));

          if ACBrNFe1.EnviarEvento(NumeroLote) then
          begin
            application.CreateForm(tfaguarde, faguarde);
            faguarde.Show;
            faguarde.Repaint;

            sleep(5000);

            RetornoEvento := ACBrNFe1.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].RetInfEvento;

            cStat := RetornoEvento.cStat;
            xMotivo := RetornoEvento.xMotivo;
            vlnumeroprotocolo := RetornoEvento.nProt;

            if cStat = 573 then
            begin

              RetornoDist := ACBrNFe1.WebServices.DistribuicaoDFe.retDistDFeInt;

              cStat := RetornoDist.cStat;
              xMotivo := RetornoDist.xMotivo;
              edtUltimoNSU.Value := StrToIntDef(RetornoDist.ultNSU, 0);

              ACBrNFe1.DistribuicaoDFePorChaveNFe(UF_IBGE, CNPJ, Self.uqtabeladfechaveacesso.AsString);

              for vlQtdEventos := 0 to ACBrNFe1.WebServices.Consulta.procEventoNFe.Count - 1 do
              begin
                if ACBrNFe1.WebServices.Consulta.procEventoNFe.Items[vlQtdEventos].RetEventoNFe.retEvento.Items[0].RetInfEvento.tpEvento = teManifDestConfirmacao then
                begin

                  Showmessage(DateTimeToStr(ACBrNFe1.WebServices.Consulta.procEventoNFe.Items[vlQtdEventos].RetEventoNFe.retEvento.Items[0].RetInfEvento.dhRegEvento));

                end;
              end;

              RetornoDist := ACBrNFe1.WebServices.DistribuicaoDFe.retDistDFeInt;
              cStat := RetornoDist.cStat;
              xMotivo := RetornoDist.xMotivo;

              CountDocumentos := CountDocumentos + RetornoDist.docZip.Count;
              lblTotalDocumentos.Caption := 'Total de Documentos: ' + CountDocumentos.ToString;

              for iDocZip := 0 to RetornoDist.docZip.Count - 1 do
              begin
                DocumentoZip := RetornoDist.docZip.Items[iDocZip];

                Chave := DocumentoZip.resDFe.chDFe;
                if Chave <> EmptyStr then
                begin
                  vltexto := DocumentoZip.Xml;

                  vlNomexml := ExtractFilePath(application.ExeName) + 'xml-recebidos\' + uqtabeladfechaveacesso.AsString + '.xml';

                  vlArquivo := TStringList.Create;
                  vlArquivo.Text := vltexto;
                  vlArquivo.SaveToFile(vlNomexml);




                  // uqtabeladfedocxml.SaveToFile(vltexto);

                end;
              end;

            end;

            faguarde.Close;

            if not(cStat in [135, 136]) then
            begin
              Showmessage('Ocorreu o seguinte erro ao enviar a manifestação do documento:' + sLineBreak + 'Código:' + Inttostr(cStat) + sLineBreak + 'Motivo: ' + xMotivo);
            end;

            application.CreateForm(tfaguarde, faguarde);
            faguarde.Show;
            if cStat <> 573 then
            begin

              GravarManifestacaoDFe(uqtabeladfechaveacesso.AsString, RetornoEvento.dhRegEvento, RetornoEvento.nProt, RetornoEvento.cStat, RetornoEvento.xMotivo,
                string(RetornoEvento.Xml));

              sleep(5000);
            end;

            vlrecno := uqtabela.RecNo;
            ActConsultar.Execute;
            uqtabela.RecNo := vlrecno;

            mostra.Max := 10;
            mostra.Position := 0;
            application.ProcessMessages;

            for vlTentativas := 1 to 10 do
            begin

              mostra.Position := vlTentativas;
              application.ProcessMessages;

              if length(uqtabeladfenfexml.AsString) = 0 then
              begin
                if ConsultarPorChave(CNPJ, uqtabeladfechaveacesso.AsString) then
                begin
                  if fileexists(ExtractFilePath(application.ExeName) + 'documentos\download\' + uqtabeladfechaveacesso.AsString + '-nfe.xml') then
                  begin

                    uqtabela.Edit;
                    uqtabeladfenfexml.LoadFromFile(ExtractFilePath(application.ExeName) + 'documentos\download\' + uqtabeladfechaveacesso.AsString + '-nfe.xml');
                    uqtabela.Post;

                    vlNomexml := ExtractFilePath(application.ExeName) + 'xml-recebidos\' + uqtabeladfechaveacesso.AsString + '.xml';

                    uqtabeladfenfexml.SaveToFile(vlNomexml);

                    if TamanhoArquivo(vlNomexml) > 2048 then
                      break;

                  end;
                end;

                if fileexists(ExtractFilePath(application.ExeName) + 'documentos\download\' + uqtabeladfechaveacesso.AsString + '-nfe.xml') then
                begin

                  uqtabela.Edit;
                  uqtabeladfenfexml.LoadFromFile(ExtractFilePath(application.ExeName) + 'documentos\download\' + uqtabeladfechaveacesso.AsString + '-nfe.xml');
                  uqtabela.Post;

                  vlNomexml := ExtractFilePath(application.ExeName) + 'xml-recebidos\' + uqtabeladfechaveacesso.AsString + '.xml';

                  uqtabeladfenfexml.SaveToFile(vlNomexml);

                  if TamanhoArquivo(vlNomexml) > 2048 then
                    break;

                end;

              end;

            end;

            ActAtualizar.Execute;
            if uqtabeladfemanifprotocolo.AsString <> '' then
            begin
              carregarxmls(uqtabeladfechaveacesso.AsString);
            end;
            ActAtualizar.Execute;

            faguarde.Close;

            Showmessage('Manifestação' + #13 + 'Manifestação efetuada com sucesso!');

          end
          else
          begin
            Showmessage('Erro ao manifestar a nota: ' + ACBrNFe1.WebServices.EnvEvento.cStat.ToString + ' - ' + ACBrNFe1.WebServices.EnvEvento.xMotivo);
          end;
        end;

        inherited;
      end
    end;
  end;
end;

procedure Tfradfe.Clear;
begin
  CNPJ := EmptyStr;
  RAZAO_SOCIAL := EmptyStr;
  UF := EmptyStr;
  AMBIENTE := EmptyStr;
  SSL_LIB := 0;
  CERTIFICADO := EmptyStr;
  CERTIFICADO_SENHA := EmptyAnsiStr;
  ULTIMO_NSU := 0;
  DTHR_ULTIMA_CONSULTA := 0.0;
end;

procedure Tfradfe.ActAtualizarExecute(Sender: TObject);
begin
  Get(CNPJEmpresa);
  edtUltimoNSU.Value := ULTIMO_NSU;
  ConfigurarNFe(Acesso.Filial.ToString);

  inherited;

end;

procedure Tfradfe.ConfigurarNFe(const ACNPJ: string);
var
  PathApp: String;
  PathDocumentos: String;

begin

  PathApp := ExtractFilePath(ParamStr(0));
  PathDocumentos := IncludeTrailingPathDelimiter(PathApp + 'documentos');

  // diretorios
  ACBrNFe1.Configuracoes.WebServices.ResourceName := 'ACBrNFeServicos';
  ACBrNFe1.Configuracoes.Arquivos.IniServicos := ExtractFilePath(application.ExeName) + 'schemas\ACBrNFeServicos.ini';
  ACBrNFe1.Configuracoes.Arquivos.PathSchemas := PathApp + 'schemas\';

  ACBrNFe1.Configuracoes.Arquivos.PathNFe := PathDocumentos + 'nfe\';

  if not DirectoryExists(ACBrNFe1.Configuracoes.Arquivos.PathNFe) then
  begin
    ForceDirectories(ACBrNFe1.Configuracoes.Arquivos.PathNFe)
  end;

  ACBrNFe1.Configuracoes.Arquivos.PathEvento := PathDocumentos + 'eventos\';

  if not DirectoryExists(ACBrNFe1.Configuracoes.Arquivos.PathEvento) then
  begin
    ForceDirectories(ACBrNFe1.Configuracoes.Arquivos.PathEvento)
  end;

  ACBrNFe1.Configuracoes.Arquivos.PathInu := PathDocumentos + 'inutilizacao\';
  if not DirectoryExists(ACBrNFe1.Configuracoes.Arquivos.PathInu) then
  begin
    ForceDirectories(ACBrNFe1.Configuracoes.Arquivos.PathInu)
  end;

  ACBrNFe1.Configuracoes.Arquivos.PathSalvar := PathDocumentos + 'salvar\';
  if not DirectoryExists(ACBrNFe1.Configuracoes.Arquivos.PathSalvar) then
  begin
    ForceDirectories(ACBrNFe1.Configuracoes.Arquivos.PathSalvar)
  end;

  // diretorio de padfs
  ACBrNFe1.DANFE.PathPDF := PathDocumentos + 'pdf';

  if not DirectoryExists(ACBrNFe1.DANFE.PathPDF) then
  begin
    ForceDirectories(ACBrNFe1.DANFE.PathPDF)
  end;

  // arquivos baixados
  ACBrNFe1.Configuracoes.Arquivos.DownloadDFe.PathDownload := PathDocumentos + 'download\';
  if not DirectoryExists(ACBrNFe1.Configuracoes.Arquivos.DownloadDFe.PathDownload) then
  begin
    ForceDirectories(ACBrNFe1.Configuracoes.Arquivos.DownloadDFe.PathDownload)
  end;

  // acesso e certificado
  Get(ACNPJ);
  if Trim(CNPJ) = '' then
    raise EDatabaseError.CreateFmt('CNPJ "%s" não cadastrado!', [ACNPJ]);

  if AMBIENTE = 'H' then
    ACBrNFe1.Configuracoes.WebServices.AMBIENTE := taHomologacao
  else
    ACBrNFe1.Configuracoes.WebServices.AMBIENTE := taProducao;

  ACBrNFe1.Configuracoes.Certificados.ArquivoPFX := '';
  ACBrNFe1.Configuracoes.Certificados.NumeroSerie := '';

  case SSL_LIB of
    0:
      begin
        ACBrNFe1.Configuracoes.Geral.SSLLib := libWinCrypt;
        ACBrNFe1.Configuracoes.Geral.SSLXmlSignLib := xsLibXml2;
        ACBrNFe1.Configuracoes.Geral.SSLHttpLib:=httpWinINet;

        if fileexists(CERTIFICADO) then
          ACBrNFe1.Configuracoes.Certificados.ArquivoPFX := CERTIFICADO
        else
          ACBrNFe1.Configuracoes.Certificados.NumeroSerie := CERTIFICADO;
      end;

    1:
      begin
        ACBrNFe1.Configuracoes.Geral.SSLLib := libOpenSSL;
        ACBrNFe1.Configuracoes.Geral.SSLHttpLib:=httpWinINet;

        if fileexists(CERTIFICADO) then
          ACBrNFe1.Configuracoes.Certificados.ArquivoPFX := CERTIFICADO
        else
          ACBrNFe1.Configuracoes.Certificados.NumeroSerie := CERTIFICADO;
      end;

    2:
      begin
        if Pos('.pfx', CERTIFICADO) > 0 then
          raise EDatabaseError.Create('Capicom não suporta carregamento de certificado por arquivo!');

        ACBrNFe1.Configuracoes.Geral.SSLLib := libCapicom;
        ACBrNFe1.Configuracoes.Certificados.NumeroSerie := CERTIFICADO;
        ACBrNFe1.Configuracoes.Geral.SSLHttpLib:=httpWinINet;
      end;
  end;

  ACBrNFe1.Configuracoes.Certificados.Senha := CERTIFICADO_SENHA;

  ACBrNFe1.Configuracoes.WebServices.SSLType := LT_all;
  ACBrNFe1.Configuracoes.WebServices.UF := UF;
  ACBrNFe1.Configuracoes.WebServices.Tentativas := 10;
  ACBrNFe1.Configuracoes.WebServices.TimeOut := 50000;

end;

procedure Tfradfe.MensagemStatus(const AMensagem: String);
begin
  // criar o formulario
  PnlRodapeGrid.Visible := True;
  PnlRodapeGrid.Caption := AMensagem;
  application.ProcessMessages;
end;

procedure Tfradfe.GravarManifestacaoDFe(const AChaveAcesso: String; const ADtHrEvento: TDateTime; const ANumProtocolo: String; const AcStat: Integer; const AxMotivo: string;
  const AXML: string);
begin

  CmdManifestarDFe.Close;
  CmdManifestarDFe.SQL.Text := '';
  CmdManifestarDFe.SQL.ADD(' UPDATE dfe ');
  CmdManifestarDFe.SQL.ADD(' SET dfemanifestado = :dfemanifestado, ');
  CmdManifestarDFe.SQL.ADD('    dfemanifdatahoraevento = :dfemanifdatahoraevento, ');
  CmdManifestarDFe.SQL.ADD('    dfemanifprotocolo = :dfemanifprotocolo, ');
  CmdManifestarDFe.SQL.ADD('    dfemanifcestat = :dfemanifcestat, ');
  CmdManifestarDFe.SQL.ADD('    dfemanifxmotivo = :dfemanifxmotivo, ');
  CmdManifestarDFe.SQL.ADD('    dfemanifxml = :dfemanifxml ');
  CmdManifestarDFe.SQL.ADD(' WHERE dfechaveacesso = :dfechaveacesso ');

  CmdManifestarDFe.ParamByName('dfemanifestado').AsString := '1';
  CmdManifestarDFe.ParamByName('dfemanifdatahoraevento').AsDateTime := ADtHrEvento;
  CmdManifestarDFe.ParamByName('dfemanifprotocolo').AsString := ANumProtocolo;
  CmdManifestarDFe.ParamByName('dfemanifcestat').AsInteger := AcStat;
  CmdManifestarDFe.ParamByName('dfemanifxmotivo').AsString := AxMotivo;
  CmdManifestarDFe.ParamByName('dfemanifxml').AsString := AXML;
  CmdManifestarDFe.ParamByName('dfechaveacesso').AsString := AChaveAcesso;
  CmdManifestarDFe.Execute;
end;

procedure Tfradfe.GravarDocumentoDFe(const ACNPJEmpresa, AChaveAcesso, ASituacao, ANSU: String; const AModelo, ASerie, ANumero: Integer;
  const ACNPJ, AInscrEstadual, ARazaoSocial, AOperacao: String; const ADataEmissao: TDateTime; const AValor: Double; const AXML: string; const AManifestado: Boolean);
begin

  CmdGravarDFe.Close;
  CmdGravarDFe.ParamByName('dfechaveacesso').AsString := AChaveAcesso;
  CmdGravarDFe.Open;

  if CmdGravarDFe.IsEmpty then
    CmdGravarDFe.Append
  else
    CmdGravarDFe.Edit;

  CmdGravarDFe.FieldByName('flacodigo').AsString := Acesso.Filial.ToString;
  CmdGravarDFe.FieldByName('dfechaveacesso').AsString := AChaveAcesso;
  CmdGravarDFe.FieldByName('dfensu').AsString := ANSU;
  CmdGravarDFe.FieldByName('dfeoperacao').AsString := IfThen(AOperacao = 'S', '1', '0');
  CmdGravarDFe.FieldByName('dfesituacao').AsString := IfThen(ASituacao = 'A', '1', '0');
  CmdGravarDFe.FieldByName('dfemanifestado').AsString := IfThen(AManifestado, '1', '0');
  CmdGravarDFe.FieldByName('dfemodelo').AsInteger := AModelo;
  CmdGravarDFe.FieldByName('dfeserie').AsInteger := ASerie;
  CmdGravarDFe.FieldByName('dfenumero').AsInteger := ANumero;
  CmdGravarDFe.FieldByName('dfedoc1').AsString := ACNPJ;
  CmdGravarDFe.FieldByName('dfeinscest').AsString := AInscrEstadual;
  CmdGravarDFe.FieldByName('dfeidentificacao').AsString := ARazaoSocial;
  CmdGravarDFe.FieldByName('dfeemissao').AsDateTime := ADataEmissao;
  CmdGravarDFe.FieldByName('dfevalor').AsFloat := AValor;
  CmdGravarDFe.FieldByName('dfedocxml').AsString := AXML;
  CmdGravarDFe.Post;

end;

procedure Tfradfe.SetUltimoNSU(const ACNPJ: string; const AUltimoNSU: Integer);
begin
  cfg.Close;
  cfg.ParamByName('flacodigo').AsInteger := Acesso.Filial;
  cfg.Open;
  cfg.Edit;
  cfgcfgultimonsu.AsInteger := AUltimoNSU;
  cfg.Post;
end;

procedure Tfradfe.ConsultarDFE;
var
  cStat: Integer;
  xMotivo: String;
  RetornoDist: TretDistDFeInt;
  iDocZip: Integer;
  DocumentoZip: TdocZipCollectionItem;
  Chave: String;
  Modelo, Serie, Numero: Integer;
  DtHrUltimaConsulta: TDateTime;
  MinutosEntre: Integer;
  Situacao, DocXML: String;
  CountDocumentos: Integer;
  MaximoNSU: Integer;
  Manifestado: Boolean;

  vltexto: string;
  vlArquivo: TStringList;
  vlNomexml: string;
  vlEntativas: Integer;
begin

  CountDocumentos := 0;

  ConfigurarNFe(CNPJEmpresa);

  try
    ActAtualizar.Enabled := False;
    MensagemStatus('Consultando notas emitidas contra o CNPJ...');
    repeat
      if ACBrNFe1.DistribuicaoDFePorUltNSU(UF_IBGE, CNPJEmpresa, Inttostr(edtUltimoNSU.Value)) then
      begin
        RetornoDist := ACBrNFe1.WebServices.DistribuicaoDFe.retDistDFeInt;
        cStat := RetornoDist.cStat;
        xMotivo := RetornoDist.xMotivo;
        edtUltimoNSU.Value := StrToIntDef(RetornoDist.ultNSU, 0);
        MaximoNSU := StrToIntDef(RetornoDist.maxNSU, 0);

        if cStat = 138 then
        begin
          CountDocumentos := CountDocumentos + RetornoDist.docZip.Count;
          lblTotalDocumentos.Caption := 'Total de Documentos: ' + CountDocumentos.ToString;

          for iDocZip := 0 to RetornoDist.docZip.Count - 1 do
          begin
            DocumentoZip := RetornoDist.docZip.Items[iDocZip];

            Chave := DocumentoZip.resDFe.chDFe;
            if Chave <> EmptyStr then
            begin
              Modelo := StrToInt(Copy(Chave, 21, 2));
              Numero := StrToInt(Copy(Chave, 26, 9));
              Serie := StrToInt(Copy(Chave, 23, 3));

              case DocumentoZip.resDFe.cSitDFe of
                snAutorizado:
                  Situacao := 'A';
                snDenegado:
                  Situacao := 'D';
                snCancelado:
                  Situacao := 'C';
                snEncerrado:
                  Situacao := 'E';
              end;

              if Pos('nfeProc', DocumentoZip.Xml) > 0 then
                DocXML := DocumentoZip.Xml
              else
                DocXML := '';

              Manifestado := Trim(DocXML) <> EmptyStr;

              GravarDocumentoDFe(CNPJEmpresa, Chave, Situacao, DocumentoZip.NSU, Modelo, Serie, Numero, DocumentoZip.resDFe.CNPJCPF, DocumentoZip.resDFe.IE,
                DocumentoZip.resDFe.xNome, IfThen(DocumentoZip.resDFe.tpNF = tnEntrada, 'E', 'S'), DocumentoZip.resDFe.dhEmi, DocumentoZip.resDFe.vNF, DocXML, Manifestado);

              // verificar se possui o evento de manifestação
              try
                if DocumentoZip.procEvento <> nil then
                begin
                  if DocumentoZip.procEvento.tpEvento in [teManifDestConfirmacao, teManifDestCiencia, teManifDestDesconhecimento, teManifDestOperNaoRealizada] then
                  begin
                    GravarManifestacaoDFe(Chave, DocumentoZip.procEvento.RetInfEvento.dhRegEvento, DocumentoZip.procEvento.RetInfEvento.nProt,
                      DocumentoZip.procEvento.RetInfEvento.cStat, DocumentoZip.procEvento.RetInfEvento.xMotivo, DocumentoZip.Xml);
                  end;
                end;
              except
              end;
            end;
          end;
        end;

        SetUltimoNSU(CNPJEmpresa, edtUltimoNSU.Value);

        if edtUltimoNSU.Value < MaximoNSU then
        begin
          MensagemStatus('Aguardando intervalo entre consultas...');
          sleep(3000);
        end;
      end
      else
      begin
        RetornoDist := ACBrNFe1.WebServices.DistribuicaoDFe.retDistDFeInt;

        Showmessage('Ocorreu um erro ao consultar o webservice de distribuição de DFe: ' + Inttostr(RetornoDist.cStat) + ' - ' + RetornoDist.xMotivo);
      end;
    until (edtUltimoNSU.Value >= MaximoNSU) or (cStat = 137);

    PnlRodapeGrid.Visible := True;

    uqtabela.First;
    mostra.Max := uqtabela.RecordCount;
    mostra.Position := 0;
    application.ProcessMessages;

    sleep(1000);

    vlEntativas := 1;
    lblTotalDocumentos.Visible := True;
    lblTotalDocumentos.Caption := 'Efetuando baixa do XML da nota manifestada!';
    application.ProcessMessages;

    for vlEntativas := 1 to 10 do
    begin

      while not uqtabela.eof do
      begin
        mostra.Position := mostra.Position + 1;
        application.ProcessMessages;
        if length(uqtabeladfenfexml.AsString) = 0 then
        begin
          if ConsultarPorChave(CNPJ, uqtabeladfechaveacesso.AsString) then
          begin
            if fileexists(ExtractFilePath(application.ExeName) + 'documentos\download\' + uqtabeladfechaveacesso.AsString + '-nfe.xml') then
            begin

              uqtabela.Edit;
              uqtabeladfenfexml.LoadFromFile(ExtractFilePath(application.ExeName) + 'documentos\download\' + uqtabeladfechaveacesso.AsString + '-nfe.xml');
              uqtabela.Post;

              vlNomexml := ExtractFilePath(application.ExeName) + 'xml-recebidos\' + uqtabeladfechaveacesso.AsString + '.xml';

              uqtabeladfenfexml.SaveToFile(vlNomexml);

            end;
          end;

          if fileexists(ExtractFilePath(application.ExeName) + 'documentos\download\' + uqtabeladfechaveacesso.AsString + '-nfe.xml') then
          begin

            uqtabela.Edit;
            uqtabeladfenfexml.LoadFromFile(ExtractFilePath(application.ExeName) + 'documentos\download\' + uqtabeladfechaveacesso.AsString + '-nfe.xml');
            uqtabela.Post;

            vlNomexml := ExtractFilePath(application.ExeName) + 'xml-recebidos\' + uqtabeladfechaveacesso.AsString + '.xml';

            uqtabeladfenfexml.SaveToFile(vlNomexml);

          end;

        end;

        uqtabela.Next;
      end;

    end;
    PnlRodapeGrid.Visible := False;

    if edtUltimoNSU.Value >= MaximoNSU then
    begin
      Showmessage('Distribuição DF-e' + #13 + 'Atualização realizada com sucesso!');
    end;

  finally
    ActAtualizar.Enabled := True;

  end;
end;

procedure Tfradfe.DBGListaDrawColumnCell(Sender: TObject; const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
var
  fixRect: TRect;
  tmpck: Integer;
  R: TRect;
  i: Integer;
begin

  fixRect := Rect;

  If Odd(DStabela.DataSet.RecNo) Then
    DBGLista.Canvas.Brush.Color := PEG_COR_BASE
  Else
    DBGLista.Canvas.Brush.Color := CLWHITE;

  if uqtabeladfemanifestado.AsInteger = 1 then
  begin
    DBGLista.Canvas.Font.Color := clGray;
    DBGLista.Canvas.Font.Style := [fsbold];

  end
  else
  begin
    DBGLista.Canvas.Font.Color := clblack;
    DBGLista.Canvas.Font.Style := [];

  end;

  If gdSelected In State Then
    With (Sender As TDBGrid).Canvas Do
    Begin
      Brush.Color := clsilver; // $004080FF;
      FillRect(fixRect);
      Font.Color := CLWHITE;
    End;

  with TFriendly(DBGLista) do
  begin
    { Get active record within grids TDataLink. The active record will be
      the current record in the dataset. tmpck against Row that we are
      trying to Draw, -1 to offset the column headings within grid. }

    if TDataLink(DataLink).ActiveRecord = Row - 1 then
    begin
      with Canvas do
      begin
        { set grids canvas to win highlight colour }
        Brush.Color := clsilver; // $004080FF;
        { now redraw the cell, but highlighted }
        DefaultDrawColumnCell(fixRect, DataCol, Column, State);
      end;
    end;
  end;

  TDBGrid(Sender).DefaultDrawDataCell(fixRect, TDBGrid(Sender).Columns[DataCol].Field, State);

  if Column.FieldName = 'dfemanifestado' then
  begin
    // Desenha um tmpckbox no dbgrid

    DBGLista.Canvas.FillRect(Rect);

    tmpck := 0;
    if uqtabeladfemanifestado.AsString = '1' then
      tmpck := DFCS_CHECKED
    else
      tmpck := 0;

    R := Rect;
    InflateRect(R, -2, -2); { Diminui o tamanho do tmpckBox }
    DrawFrameControl(DBGLista.Canvas.Handle, R, DFC_BUTTON, DFCS_BUTTONCHECK or tmpck);
  end;

end;

end.
