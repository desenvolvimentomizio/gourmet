unit uftransacaoLTETEFAPI;

interface

uses
  uni,
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Variants,
  System.Classes,
  System.TypInfo,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  Vcl.ComCtrls,
  Vcl.StdCtrls,
  Vcl.ExtCtrls,
  ACBrTEFComum,
  ACBrTEFAPI,
  ACBrBase,
  ACBrTEFAPIComum,
  ACBrDelphiZXingQRCode,
  ufuncoes,
  uRecordsTEF;


const
  cPagamentos: array[0..12] of array [0..1] of String =
     ( ('01','Dinheiro'),
       ('02','Cheque'),
       ('03','Cartão de Crédito'),
       ('04','Cartão de Débito'),
       ('05','Carteira Digital'),
       ('06','Vale Refeição'),
       ('07',''),
       ('08',''),
       ('09',''),
       ('10',''),
       ('11',''),
       ('12','Vale Refeição'),
       ('99','Outros') );

const

  ConstProcesTEFAtiva = 0;
  ConstProcesTEFPagamento = 1;
  ConstProcesTEFCancelamento = 2;

  ConstProcesTEFChamaMenuADM = 99999;

type

  TTipoBotaoOperacao = (bopNaoExibir, bopCancelarVenda, bopLiberarCaixa, bopCancelarEsperaTEF);


type
  TftransacaoTEFAPI = class(TForm)
    CompACBrTEF: TACBrTEFAPI;
    plMensagems: TPanel;
    pMensagem: TPanel;
    pMensagemOperador: TPanel;
    lMensagemOperador: TLabel;
    Panel9: TPanel;
    Panel2: TPanel;
    pStatus: TPanel;
    pMensagemCliente: TPanel;
    Panel4: TPanel;
    lMensagemCliente: TLabel;
    TimerProcessaTransacao: TTimer;
    Panel3: TPanel;
    mLog: TMemo;
    pQRCode: TPanel;
    imgQRCode: TImage;
    bCancelarResp: TButton;
    procedure TimerProcessaTransacaoTimer(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure CompACBrTEFQuandoDetectarTransacaoPendente(RespostaTEF: TACBrTEFResp; const MsgErro: string);
    procedure CompACBrTEFQuandoEsperarOperacao( OperacaoAPI: TACBrTEFAPIOperacaoAPI; var Cancelar: Boolean);
    procedure CompACBrTEFQuandoExibirMensagem(const Mensagem: string;Terminal: TACBrTEFAPITela; MilissegundosExibicao: Integer);
    procedure CompACBrTEFQuandoExibirQRCode(const DadosQRCode: string);
    procedure CompACBrTEFQuandoFinalizarOperacao(RespostaTEF: TACBrTEFResp);
    procedure CompACBrTEFQuandoFinalizarTransacao(RespostaTEF: TACBrTEFResp; AStatus: TACBrTEFStatusTransacao);
    procedure CompACBrTEFQuandoGravarLog(const ALogLine: string; var Tratado: Boolean);
    procedure CompACBrTEFQuandoPerguntarCampo( DefinicaoCampo: TACBrTEFAPIDefinicaoCampo; var Resposta: string; var Validado, Cancelado: Boolean);
    procedure CompACBrTEFQuandoPerguntarMenu(const Titulo: string;  Opcoes: TStringList; var ItemSelecionado: Integer);
    procedure bCancelarRespClick(Sender: TObject);
  private
    { Private declarations }

    FWebOnLine: Boolean;

    FOperacaoTEF:TOperacaoTEF;
    Fzcone: tuniconnection;
    FOrcChave:String;

    fcomprovanteretorno1via:String;
    fcomprovanteretorno2via:String;

    FCanceladoPeloOperador: Boolean;
    FTempoDeEspera: TDateTime;
    vCancelado: Boolean;


    FTipoBotaoOperacao: TTipoBotaoOperacao;
    fTipoProcessamento: Integer;

    procedure ExibirPainelQRCode;
    procedure OcultatPainelQRCode;

    procedure AdicionarLinhaLog(AMensagem: String);

    procedure SetTipoBotaoOperacao(const AValue: TTipoBotaoOperacao);

    procedure TratarException(Sender: TObject; E: Exception);
    procedure MensagemTEF(const MsgOperador, MsgCliente: String);

    procedure cancelarOperacaoTEF;
    procedure Cancelamento;

    function AtivarConexaoTEF(vConfiguracaoTEF: TConfiguracaoTEF): Boolean;

    procedure ConfigurarTEFAPI;
    procedure Ativa(vConfiguracaoTEF: TConfiguracaoTEF);
    procedure ChamaMenu(vConfiguracaoTEF: TConfiguracaoTEF);
    function ProcessaPagamentoTEF(aConfiguracaoTEF: TConfiguracaoTEF; aOperacaoTEF: TOperacaoTEF): TOperacaoTEF;
    function AcharTransacaoTEF(aRede,aNSU:String): TACBrTEFResp;
    procedure RegistraStatus(aStatus:String; aNSU:String; aBandeira:String; aRede:string; aValor:Currency=0; aQtdParcelas:Integer=1);
//    function BuscaTransacaoPendente: String;
    function RetornaAdcCodigo: String;
    function RetornaBdcCodigo(aBandeira: String): String;
    Function RemoverPagamento(aRede: String;aNSU: String):boolean;

    procedure CancelarVenda;
    function GeraSequencial: String;
  //  procedure ProcessaPagamentosPendentes;
    function ProcessaTransacaoPendente(aRede, aAutorizacao: string):boolean;


  public
    { Public declarations }


    fConfiguracaoTEF: TConfiguracaoTEF;


    function ChamaMenuADM(aConfiguracaoTEF: TConfiguracaoTEF):String;
    function ObtemCPF(aConfiguracaoTEF: TConfiguracaoTEF):String;

    function ProcessaCancelamento(aConfiguracaoTEF: TConfiguracaoTEF; vOperacaoTEF: TOperacaoTEF): TOperacaoTEF;
    function VerificaTransacaoPendente: TOperacaoTEF;
    function AtivaTEF(aConfiguracaoTEF: TConfiguracaoTEF): boolean;

    procedure Mensagem(aTexto:string; aConfiguracaoTEF: TConfiguracaoTEF);
    procedure MensagemPinPag(aTexto: String; aConfiguracaoTEF: TConfiguracaoTEF);
    function IncluirPagamento(AValor: Double; aCodFormaPagamento: Integer): Boolean;
    function AdicionarPagamento(const Indice: String; AValor: Double):boolean;
    Function ConsultarPagamentoRecebido(aRede: String;aNSU: String):boolean;

  published

    property OperacaoTEF: TOperacaoTEF read FOperacaoTEF write FOperacaoTEF;


    property TipoProcessamento:Integer read fTipoProcessamento write fTipoProcessamento;
    property TipoBotaoOperacao: TTipoBotaoOperacao read FTipoBotaoOperacao write SetTipoBotaoOperacao;
    property ComprovanteRetorno1via: String read FComprovanteRetorno1via write fComprovanteRetorno1via;
    property ComprovanteRetorno2via: String read FComprovanteRetorno2via write fComprovanteRetorno2via;

    property ZCone: tuniconnection read Fzcone write Fzcone;
    property OrcChave: String read FOrcChave write FOrcChave;
    property WebOnLine: Boolean read FWebOnLine write FWebOnLine;


  end;

var
  ftransacaoTEFAPI: TftransacaoTEFAPI;

implementation

uses
  frExibeMensagem, dateutils, math, strutils,
  ACBrUtil,
  ACBrTEFPayGoComum, ACBrTEFAPIPayGoWeb,ACBrTEFAPIClisitef, frObtemCampo, frMenuTEF,
  Data.DB, pingsend;

{$R *.dfm}
{ TftransacaoTEFAPI }

function AtivaTEF(vConfiguracaoTEF: TConfiguracaoTEF):boolean;
begin

  ftransacaoTEFAPI.fConfiguracaoTEF :=vConfiguracaoTEF;
  ftransacaoTEFAPI.ConfigurarTEFAPI;
  ftransacaoTEFAPI.TipoProcessamento := ConstProcesTEFAtiva;

  if ftransacaoTEFAPI.ShowModal=mrok then
    result:=True
  else
    result:=False;

end;


function TftransacaoTEFAPI.ObtemCPF(aConfiguracaoTEF: TConfiguracaoTEF):String;
var
  Saida:String;
  i:Byte;
  Tentativas:Integer;
begin
  vCancelado := False;
  Tentativas:=0;

  while Tentativas<10 do
  begin

    try

      if not CompACBrTEF.Inicializado then
      begin
      //  ConfigurarTEFAPI;
        CompACBrTEF.DadosTerminal.PortaPinPad:='AUTO_USB';
      if WebOnLine then
        CompACBrTEF.Inicializar
      else
        exit;
      end;

      Saida:=CompACBrTEF.ObterDadoPinPad(dpCPF);

      if Saida<>'' then
      begin
        break
      end
      else
      begin
          sleep(1000);
          Tentativas := Tentativas+1
      end;

      except
        on E: Exception do
        begin
        CompACBrTEF.DesInicializar;
          Result:='';
      //    CompACBrTEF.DoException('Erro 219 '+e.Message);
        end;

    end;

  end;

  if (Saida = '') then
    ShowMessage('Falha ao Obter CPF no PinPad');

  Result:=Saida;

end;

function TftransacaoTEFAPI.ChamaMenuADM(aConfiguracaoTEF: TConfiguracaoTEF):String;
var
  ftransacaoTEFAPI: TftransacaoTEFAPI;
begin
  try

    ftransacaoTEFAPI := TftransacaoTEFAPI.Create(application);
    ftransacaoTEFAPI.ComprovanteRetorno1via:='';
    ftransacaoTEFAPI.ComprovanteRetorno2via:='';

    ftransacaoTEFAPI.vCancelado := False;
    ftransacaoTEFAPI.fConfiguracaoTEF :=aConfiguracaoTEF;
  //  ftransacaoTEFAPI.ConfigurarTEFAPI;
    ftransacaoTEFAPI.TipoProcessamento := ConstProcesTEFChamaMenuADM;
    ftransacaoTEFAPI.ChamaMenu(aConfiguracaoTEF);
     Result:=ftransacaoTEFAPI.ComprovanteRetorno1via+'_'+ftransacaoTEFAPI.ComprovanteRetorno2via;

  finally

  end;

end;




function ProcessaCancelamento(aConfiguracaoTEF: TConfiguracaoTEF; vOperacaoTEF: TOperacaoTEF): TOperacaoTEF;
var
  ftransacaoTEFAPI: TftransacaoTEFAPI;
begin
  try
    ftransacaoTEFAPI := TftransacaoTEFAPI.Create(application);
    ftransacaoTEFAPI.vCancelado := False;
    ftransacaoTEFAPI.OperacaoTEF := vOperacaoTEF;
    ftransacaoTEFAPI.fConfiguracaoTEF :=aConfiguracaoTEF;
    ftransacaoTEFAPI.ConfigurarTEFAPI;
    ftransacaoTEFAPI.TipoProcessamento := ConstProcesTEFCancelamento;
    ftransacaoTEFAPI.ShowModal;
    result := ftransacaoTEFAPI.OperacaoTEF;
  finally

  end;

end;

function ProcessaPagamento(vConfiguracaoTEF: TConfiguracaoTEF; vOperacaoTEF: TOperacaoTEF): TOperacaoTEF;
begin

    ftransacaoTEFAPI.vCancelado := False;
    ftransacaoTEFAPI.OperacaoTEF := vOperacaoTEF;
    ftransacaoTEFAPI.fConfiguracaoTEF :=vConfiguracaoTEF;
    ftransacaoTEFAPI.ConfigurarTEFAPI;
    ftransacaoTEFAPI.TipoProcessamento := ConstProcesTEFPagamento;
    ftransacaoTEFAPI.ShowModal;
    result := ftransacaoTEFAPI.OperacaoTEF;

end;




procedure TftransacaoTEFAPI.ExibirPainelQRCode;
begin
  if pQRCode.Visible then
    Exit;

  pQRCode.Visible := True;
  pQRCode.Align := alClient;
end;

procedure TftransacaoTEFAPI.OcultatPainelQRCode;
begin
  if not pQRCode.Visible then
    Exit;

  pQRCode.Visible := False;
end;




procedure TftransacaoTEFAPI.RegistraStatus(aStatus:String; aNSU:String; aBandeira:String;aRede:string; aValor:Currency=0; aQtdParcelas:Integer=1);
var
 vlrct:TUniQuery;
 CodigoADC:Integer;
 CodigoBDC:Integer;
 vlBandeira:String;
 vBdc:TUniquery;
 vChaveBdc:TUniquery;

begin
  if aNSU<>'' then
  begin



    CodigoADC:= Strtoint(RetornaAdcCodigo);

    if (CompACBrTEF.TEF is TACBrTEFAPIClassPayGoWeb) then
    begin
      vlBandeira:=RetornaBdcCodigo(trim(aBandeira));

      if vlBandeira='' then
      begin
        vChaveBdc:=TUniquery.Create(nil);
        vChaveBdc.Close;
        vChaveBdc.Connection := ZCone;
        vChaveBdc.SQL.Text:='SELECT max(bdccodigo) as bdccodigo FROM bdc ';

        if (CompACBrTEF.TEF is TACBrTEFAPIClassPayGoWeb) then
        begin
          vChaveBdc.SQL.Add('where lower(trmestabelecimentotipotef)=' + QuotedStr('paygoweb')+ ' and bdccodigo<99');
        end
        else if (CompACBrTEF.TEF is TACBrTEFAPIClassCliSiTef) then
        begin
          vChaveBdc.SQL.Add('where lower(trmestabelecimentotipotef)=' + QuotedStr('skytef'));
        end;

        vChaveBdc.Open;

        vBdc:=TUniquery.Create(nil);
        try

          vBdc.Close;
          vBdc.Connection := ZCone;
          vBdc.SQL.Text:='SELECT bdccodigo, bdcidentificacao, trmestabelecimentotipotef, bdcnaturza FROM bdc limit 0';
          vBdc.Open;

          vBdc.Append;

          if CompACBrTEF.TEF is TACBrTEFAPIClassPayGoWeb then
          begin
             vBdc.FieldByName('bdcidentificacao').AsString:=uppercase(aBandeira);
             vBdc.FieldByName('bdccodigo').AsInteger:=vChaveBdc.FieldByName('bdccodigo').AsInteger+1;
             vBdc.FieldByName('trmestabelecimentotipotef').AsString:= 'PayGoWeb';
             vBdc.FieldByName('bdcnaturza').AsString := 'Débido';
          end
          else
          begin
              vBdc.FieldByName('bdcidentificacao').AsString:=vlBandeira;
              vBdc.FieldByName('bdccodigo').AsString:=aBandeira;
              vBdc.FieldByName('trmestabelecimentotipotef').AsString:= 'SyTef';
              vBdc.FieldByName('bdcnaturza').AsString := 'Débido';
          end;

          vBdc.Post;

        finally


        end;
        vlBandeira:=vBdc.FieldByName('bdccodigo').AsString;
        vlBandeira:=RetornaBdcCodigo(trim(aBandeira));


      end;

      CodigoBDC:= StrToInt(vlBandeira);


    end
    else if (CompACBrTEF.TEF is TACBrTEFAPIClassCliSiTef) then
    begin

      if aBandeira='' then
        CodigoBDC:= 99
      else
       CodigoBDC:= StrToInt(aBandeira);

    end;

    vlrct:=TUniQuery.Create(nil);
    vlrct.close;
    vlrct.Connection:=ZCone;
    vlrct.sql.Text:='SELECT rctchave, rctvalor, rctnrauto, adccodigo, rctparcelas, '+
                    'bdccodigo, rctcomprovante1via, rctcomprovante2via, rcthora, orcchave, rctstatus, rctrede '+
                    'FROM rct where orcchave=:orcchave and rctnrauto=:rctnrauto ';

    if OrcChave='' then
      vlrct.ParamByName('orcchave').AsString:='0'
    else
      vlrct.ParamByName('orcchave').AsString:=OrcChave;

    vlrct.ParamByName('rctnrauto').AsString:=aNSU;
    vlrct.Open;

    if vlrct.IsEmpty then
      vlrct.Append
    else
      vlrct.Edit;

    vlrct.FieldByName('rctvalor').AsCurrency:=aValor;
    vlrct.FieldByName('rctnrauto').AsString:=aNSU;
    vlrct.FieldByName('adccodigo').AsInteger:=CodigoADC;
    vlrct.FieldByName('rctparcelas').AsInteger:=  aQtdParcelas;
    vlrct.FieldByName('bdccodigo').AsInteger:=CodigoBDC;
    vlrct.FieldByName('rctcomprovante1via').AsString:='';
    vlrct.FieldByName('rctcomprovante2via').AsString:='';
    vlrct.FieldByName('rctstatus').AsString:=aStatus;
    vlrct.FieldByName('rctrede').AsString:=arede;
    vlrct.FieldByName('rcthora').AsDateTime:=Now();
    vlrct.FieldByName('orcchave').AsString:=OrcChave;
    vlrct.post;



    vlrct.Close;

  end;

end;



procedure TftransacaoTEFAPI.FormKeyPress(Sender: TObject; var Key: Char);
begin

  if key=#27 then
  begin
     key:=#0;
  end;

end;

procedure TftransacaoTEFAPI.FormShow(Sender: TObject);
begin

  if OperacaoTEF=nil then
    OperacaoTEF:=TOperacaoTEF.Create;

  OperacaoTEF.AutorizacaoRetorno := '';

  TimerProcessaTransacao.Enabled := True;

  vCancelado := False;

end;



procedure TftransacaoTEFAPI.SetTipoBotaoOperacao(const AValue: TTipoBotaoOperacao);
begin
  FTipoBotaoOperacao := AValue;
end;

procedure TftransacaoTEFAPI.TimerProcessaTransacaoTimer(Sender: TObject);
begin

  TimerProcessaTransacao.Enabled:=false;

  if TipoProcessamento = ConstProcesTEFPagamento then
  begin
    IncluirPagamento(OperacaoTEF.Valor, OperacaoTEF.Modalidade);
  end
  else if TipoProcessamento = ConstProcesTEFCancelamento then
  begin
  if RemoverPagamento(OperacaoTEF.Rede,OperacaoTEF.DocumentoRetorno) then
    modalresult:=mrok;
  end;

end;

procedure TftransacaoTEFAPI.TratarException(Sender: TObject; E: Exception);
begin
  AdicionarLinhaLog('');
  AdicionarLinhaLog('***************' + E.ClassName + '***************');
  AdicionarLinhaLog(E.Message);
  AdicionarLinhaLog('');

end;


function TftransacaoTEFAPI.ProcessaTransacaoPendente(aRede: String; aAutorizacao:string):boolean;
var
  AResp: TACBrTEFResp;
begin

  Result := False;

  if (aRede<>'') and (aAutorizacao<>'') then
  begin

        CompACBrTEF.FinalizarTransacao( aRede,
                                        aAutorizacao,
                                        '4',
                                        tefstsSucessoManual);

        AResp := AcharTransacaoTEF(aRede,aAutorizacao);

        if AResp<>nil then
        begin
          if  AResp.CNFEnviado then
          Result := true
          else
          Result := false;
        end
        else
          Result := false;


   {   if (AResp.ArqBackup <> '') and FileExists(AResp.ArqBackup) then
      begin
      //  DeleteFile( AResp.ArqBackup );
      end;}

  end;
end;




function TftransacaoTEFAPI.VerificaTransacaoPendente: TOperacaoTEF;
var
   AResp: TACBrTEFResp;
begin

  if (OperacaoTEF.Rede<>'') and (OperacaoTEF.AutorizacaoRetorno<>'') then
  begin

    AResp := AcharTransacaoTEF(OperacaoTEF.Rede,OperacaoTEF.AutorizacaoRetorno);

    if AResp<>nil then
    begin
      if not AResp.CNFEnviado then
      begin

        CompACBrTEF.FinalizarTransacao( AResp.Rede,
                                        AResp.NSU,
                                        AResp.Finalizacao,
                                        tefstsSucessoManual);
      end;

      if (AResp.ArqBackup <> '') and FileExists(AResp.ArqBackup) then
      begin
        DeleteFile( AResp.ArqBackup );
      end;

    end;

  end;
end;

procedure TftransacaoTEFAPI.AdicionarLinhaLog(AMensagem: String);
begin
  mLog.Lines.Add(AMensagem);
end;

procedure TftransacaoTEFAPI.MensagemTEF(const MsgOperador, MsgCliente: String);
begin
  if (MsgOperador <> '') then
    lMensagemOperador.Caption := MsgOperador;

  if (MsgCliente <> '') then
    lMensagemCliente.Caption := MsgCliente;

  pMensagemOperador.Visible := (Trim(lMensagemOperador.Caption) <> '');
  pMensagemCliente.Visible := (Trim(lMensagemCliente.Caption) <> '');
  pMensagem.Visible := pMensagemOperador.Visible or pMensagemCliente.Visible;
 // application.ProcessMessages;
end;

procedure TftransacaoTEFAPI.cancelarOperacaoTEF;
begin
  AdicionarLinhaLog('- btOperacaoClick');

  case TipoBotaoOperacao of
    bopLiberarCaixa:
      begin
        CompACBrTEF.LimparRespostasTEF; // Limpa respostas TEF anteriores, e apaga Arqs Backup
      end;

    bopCancelarEsperaTEF:
      begin
        AdicionarLinhaLog('  Operação Cancelada Pelo Operador');
        FCanceladoPeloOperador := True;
        OperacaoTEF.Valor := 0;
        OperacaoTEF.AutorizacaoRetorno:='';
        OperacaoTEF.DocumentoRetorno:='';
        OperacaoTEF.Rede:='';
      end;
  end;
end;


procedure TftransacaoTEFAPI.Mensagem(aTexto:string; aConfiguracaoTEF: TConfiguracaoTEF);
begin

  MensagemPinPag(atexto,aConfiguracaoTEF);

end;

procedure TftransacaoTEFAPI.Ativa(vConfiguracaoTEF: TConfiguracaoTEF);
begin

  IF AtivarConexaoTEF(vConfiguracaoTEF) then
  begin

    ModalResult:=Mrok
  end
  else
    ModalResult:=MrCancel;

end;

Function  TftransacaoTEFAPI.GeraSequencial:String;
var
  vlSequencial: String;
  vlData:String;

  Function SoNumeros(Const Texto: String): String;
  Var
    i: Integer;
    S: String;
  Begin
    S := '';
    For i := 1 To length(Texto) Do
    Begin
      If (Texto[i] In ['0' .. '9']) Then
      Begin
        S := S + Copy(Texto, i, 1);
      End;
    End;
    result := S;
  End;

begin
  vlData := FormatDateTime('yymmddhhnn', Now());
  vlData := copy(vlData,2,length(vlData));
  vlSequencial:=sonumeros(vlData);
  Result := vlSequencial;
end;



procedure TftransacaoTEFAPI.ChamaMenu(vConfiguracaoTEF: TConfiguracaoTEF);
begin


  ConfigurarTEFAPI;

  if PingHost('google.com')>0 then
    WebOnLine :=true
  else
    WebOnLine :=False;


  if not CompACBrTEF.Inicializado then
  begin
    if WebOnLine then
      CompACBrTEF.Inicializar
    else
      exit;
  end;

  AdicionarLinhaLog('- btAdministrativoClick');

  CompACBrTEF.EfetuarAdministrativa(tefopAdministrativo,GeraSequencial);

end;


procedure TftransacaoTEFAPI.CancelarVenda;
begin
  AdicionarLinhaLog('- CancelarVenda');
  // AQUI você deve cancelar a sua venda no Banco de Dados, desfazendo baixa de
  // estoque ou outras operações que ocorreram durante a venda.

  CompACBrTEF.CancelarOuEstornarTransacoesDiretorioTrabalho;

end;

Function TftransacaoTEFAPI.ConsultarPagamentoRecebido(aRede: String;aNSU: String):boolean;
var
  AResp: TACBrTEFResp;
  Recebido: Boolean;
begin


  Recebido := False;

  AResp := AcharTransacaoTEF(aRede,aNSU);

  if Assigned(AResp) then
  begin
    if AResp.CNFEnviado then
    begin
      Recebido := True;
    end
    else
    begin
      CompACBrTEF.FinalizarTransacao( AResp.Rede,
                                      AResp.NSU,
                                      AResp.Finalizacao,
                                      tefstsErroDiverso );
      Recebido := True;

    end;
  end;

  result := Recebido;

end;

Function TftransacaoTEFAPI.RemoverPagamento(aRede: String;aNSU: String):boolean;
var
  AResp: TACBrTEFResp;
  Cancelada: Boolean;

begin


  Cancelada := False;
  AResp := AcharTransacaoTEF(aRede,aNSU);

  if Assigned(AResp) then
  begin
    if AResp.CNFEnviado then
      Showmessage('Pagamento TEF já foi Confirmado.'+sLineBreak+
                                 'Para cancelar o mesmo, cancele Toda a Operação'+sLineBreak+
                                 AResp.NSU)
    else
    begin


      CompACBrTEF.FinalizarTransacao( AResp.Rede,
                                      AResp.NSU,
                                      AResp.Finalizacao,
                                      tefstsErroDiverso );
      Cancelada := True;
    end;

    if Cancelada then
    begin
      if (AResp.ArqBackup <> '') and FileExists(AResp.ArqBackup) then
      begin
        DeleteFile( AResp.ArqBackup );
      end;
    end;
  end
  else
  begin
      Cancelada := True;
  end;

  result:=Cancelada;

end;


function TftransacaoTEFAPI.AdicionarPagamento(const Indice: String; AValor: Double):boolean;
var
  Ok, TemTEF: Boolean;
  Modalidade: TACBrTEFModalidadePagamento;
  CartoesAceitos: TACBrTEFTiposCartao;
  ReajusteValor: Double;
  IndicePagto: LongInt;
  NomeAdministradora:String;
  vlHora:String;
  vlTime:TTime;
  qtParc:String;
  Espera:Integer;
begin

  try

    Result:=False;

    if AtivarConexaoTEF(fConfiguracaoTEF) then
    begin

      try
        CompACBrTEF.ResolverTransacaoPendente;
      except
        on E: Exception do
        begin
          Result:=True;
          CompACBrTEF.DoException('Erro 792 '+e.Message);
        end;
      end;

      Ok := False;
      TemTEF := False;

      IndicePagto := StrToIntDef(Indice, 0);


      TemTEF := (IndicePagto >= 2) and (IndicePagto <= 12);
      case IndicePagto of
        2:
          Modalidade := tefmpCheque;
        4:
          begin
            CartoesAceitos := [teftcCredito];
            Modalidade := tefmpCartao;
          end;
        5:
          begin
            Modalidade := tefmpCartao;
             CartoesAceitos := [teftcDebito];
             Modalidade := tefmpCartao;
          end;
        6:
          Modalidade := tefmpCarteiraVirtual;
        11:
          begin
            Modalidade := tefmpCartao;
            CartoesAceitos := [teftcVoucher];
            Modalidade := tefmpCartao;
          end;
        12:
          begin
            Modalidade := tefmpCartao;
            CartoesAceitos := [teftcVoucher];
            Modalidade := tefmpCartao;
          end;
      end;

      if TemTEF then
      begin


        if AValor>0 then
        begin

          Ok := False;

          qtParc := '1';

          OperacaoTEF.QuantidadeParcela:=qtParc;

          Ok := CompACBrTEF.EfetuarPagamento(IntToStr(OperacaoTEF.numero), AValor, Modalidade, CartoesAceitos, tefmfAVista);
          sleep(300);

          if ok then
          begin

            RegistraStatus('PENDENTE', CompACBrTEF.UltimaRespostaTEF.NSU,  CompACBrTEF.UltimaRespostaTEF.CodigoBandeiraPadrao, CompACBrTEF.UltimaRespostaTEF.Rede,AValor, CompACBrTEF.UltimaRespostaTEF.QtdParcelas );

            while Espera<=10 do
            begin
              if ConsultarPagamentoRecebido(CompACBrTEF.UltimaRespostaTEF.Rede,  CompACBrTEF.UltimaRespostaTEF.NSU) then
              begin
                Ok :=True;
                RegistraStatus('APROVADA', CompACBrTEF.UltimaRespostaTEF.NSU,  CompACBrTEF.UltimaRespostaTEF.CodigoBandeiraPadrao, CompACBrTEF.UltimaRespostaTEF.Rede,AValor, CompACBrTEF.UltimaRespostaTEF.QtdParcelas );
                break;
              end
              else
              begin
                sleep(300);
                Ok :=False;
                Espera := Espera+1;
              end;
            end;

          end;

        end
        else
         Ok :=False;

      end
      else
        Ok := False;
    end;



    if Ok then
    begin

      if TemTEF then
      begin

        try
          if (CompACBrTEF.TEF is TACBrTEFAPIClassPayGoWeb) then
          begin
            OperacaoTEF.Bandeira := CompACBrTEF.UltimaRespostaTEF.CodigoBandeiraPadrao;
            OperacaoTEF.Bandeira := copy(OperacaoTEF.Bandeira,1,pos(' ',OperacaoTEF.Bandeira)-1);
          end
          else if (CompACBrTEF.TEF is TACBrTEFAPIClassCliSiTef) then
          begin
            if lowercase(CompACBrTEF.UltimaRespostaTEF.Rede)='pix' then
            begin
              OperacaoTEF.Bandeira :='99';
            end
            else
            begin
              OperacaoTEF.Bandeira := CompACBrTEF.UltimaRespostaTEF.CodigoBandeiraPadrao;
              OperacaoTEF.Bandeira := OperacaoTEF.Bandeira;
            end;
          end;
        except
        on E: Exception do
        begin
          Result:=True;
          CompACBrTEF.DoException('Erro 887 '+e.Message);
        end;

        end;

        if (DateTimetostr(CompACBrTEF.UltimaRespostaTEF.DataHoraTransacaoHost)<>'30/12/1899')  or
           (DateTimetostr(CompACBrTEF.UltimaRespostaTEF.DataHoraTransacaoHost)<>'00/00/0000')  then
        begin

          try
            vlHora:= DateTimetostr(CompACBrTEF.UltimaRespostaTEF.DataHoraTransacaoHost);
            vlTime:=Strtotime(copy(vlHora,11,10));
            OperacaoTEF.Hora :=Trim(copy(vlHora,11,10));
          except
            OperacaoTEF.Hora :=Timetostr(now());
          end;

        end
        else
        begin
          vlHora:=Timetostr(now());
          OperacaoTEF.Hora :=Timetostr(now());
        end;

        try
          if (CompACBrTEF.TEF is TACBrTEFAPIClassPayGoWeb) then
          begin
            if lowercase(CompACBrTEF.UltimaRespostaTEF.Rede)='pix' then
            begin
              OperacaoTEF.Bandeira := '99';
            end
            else
            begin
              OperacaoTEF.Bandeira := RetornaBdcCodigo(trim(OperacaoTEF.Bandeira));
            end;
          end
          else if (CompACBrTEF.TEF is TACBrTEFAPIClassCliSiTef) then
          begin
            OperacaoTEF.Bandeira := OperacaoTEF.Bandeira;
          end;
        except

          on E: Exception do
          begin
            Result:=True;
            CompACBrTEF.DoException('Erro 930 '+e.Message);
          end;

        end;

        try
          OperacaoTEF.DocumentoRetorno := CompACBrTEF.UltimaRespostaTEF.DocumentoPessoa;
          OperacaoTEF.ImagemComprovante1aVia := CompACBrTEF.UltimaRespostaTEF.ImagemComprovante1aVia.Text;
          OperacaoTEF.ImagemComprovante2aVia := CompACBrTEF.UltimaRespostaTEF.ImagemComprovante2aVia.Text;

          OperacaoTEF.Rede := CompACBrTEF.UltimaRespostaTEF.Rede;
          OperacaoTEF.AutorizacaoRetorno := CompACBrTEF.UltimaRespostaTEF.NSU;
          OperacaoTEF.Valor := AValor;
          OperacaoTEF.QuantidadeParcela:= CompACBrTEF.UltimaRespostaTEF.QtdParcelas.ToString;
        except

          on E: Exception do
          begin
            Result:=True;
            CompACBrTEF.DoException('Erro 930 '+e.Message);
          end;

        end;

        Result:= True;

      end
      else
      begin
        Result:= False;
      end;

    end
    else
    begin

    end;

  except
    on E: Exception do
    begin
      Result:=False;
      CompACBrTEF.DoException('Erro 969 '+e.Message);
    end;

  end;

end;

procedure TftransacaoTEFAPI.CompACBrTEFQuandoDetectarTransacaoPendente(
  RespostaTEF: TACBrTEFResp; const MsgErro: string);
var
  AStatus: TACBrTEFStatusTransacao;
  i: Integer;
  ATEFResp: TACBrTEFResp;
  AMsgErro: String;
  MR: TModalResult;
  FormMenuTEF: TFormMenuTEF;
begin


  // Aqui você pode Confirmar ou Desfazer as transações pendentes de acordo com
  // a sua regra de negócios

  // ----------- Exemplo 0 - Deixe o ACBrTEFAndroid CONFIRMAR todas transações pendentes automaticamente
  // ACBrTEFAPI1.TratamentoTransacaoPendente := tefpenConfirmar;
  // Nesse caso... esse evento nem será disparado.

  // ----------- Exemplo 1 - Envio de confirmação automática -----------
  // AStatus := stsSucessoManual;
  // ACBrTEFAPI1.ResolverOperacaoPendente(AStatus);
  // ---------- Fim Exemplo 1 ------------


  // ----------- Exemplo 2 -  Fazer uma pergunta ao usuário ------------
  if (MsgErro = '') then
    AMsgErro := RespostaTEF.TextoEspecialOperador
  else
    AMsgErro := MsgErro;

  FormMenuTEF := TFormMenuTEF.Create(self);
  try
    FormMenuTEF.Titulo := 'Transação Pendente';
    FormMenuTEF.Opcoes.Add('1 - Confirmação Manual');
    FormMenuTEF.Opcoes.Add('2 - Estorno Manual');
    FormMenuTEF.Opcoes.Add('3 - Estorno, Falta de Energia');
    FormMenuTEF.Opcoes.Add('4 - Estorno, Erro na Impressão');
    FormMenuTEF.Opcoes.Add('5 - Estorno, Erro no Dispensador');
    FormMenuTEF.UsaTeclasDeAtalho := True;
    FormMenuTEF.ItemSelecionado := 0;
    FormMenuTEF.btVoltar.Visible := False;

    MR := FormMenuTEF.ShowModal ;
    if (MR = mrOK) then
    begin
      case FormMenuTEF.ItemSelecionado of
        0: AStatus := tefstsSucessoManual;
        1: AStatus := tefstsErroDiverso;
        2: AStatus := tefstsErroEnergia;
        3: AStatus := tefstsErroImpressao;
        4: AStatus := tefstsErroDispesador;
      else
        AStatus := tefstsSucessoManual;
      end;

      CompACBrTEF.ResolverTransacaoPendente(AStatus);
    end;
  finally
    FormMenuTEF.Free;
  end;
  // ---------- Fim Exemplo 2 ------------

  // Opcional... Se confirmou, vamos re-imprimir a transação que ficou pendente
  if (AStatus in [tefstsSucessoAutomatico, tefstsSucessoManual]) then
  begin
    // Achando a transação original...
    i := CompACBrTEF.RespostasTEF.AcharTransacao( RespostaTEF.Rede,
                                                  RespostaTEF.NSU,
                                                  RespostaTEF.Finalizacao);
    if (i >= 0) then
      ATEFResp := CompACBrTEF.RespostasTEF[i]
    else
      ATEFResp := RespostaTEF;

    if (AStatus in [tefstsSucessoAutomatico, tefstsSucessoManual]) then
    begin
      MR := MessageDlg('Transação TEF efetuada.'+sLineBreak+sLineBreak+
                         'Favor reimprimir útimo cumpo.'+sLineBreak+sLineBreak+
                         'Caso seja Cielo utilizar apenas 6 útimos dígitos.'+sLineBreak+sLineBreak+
                         'NSU (HOST): '+ATEFResp.NSU,
                        TMsgDlgType.mtInformation,
                        [mbok], 0 );

    end;

  //  ImprimirComprovantes(ATEFResp);
  end;


end;

procedure TftransacaoTEFAPI.CompACBrTEFQuandoEsperarOperacao(
  OperacaoAPI: TACBrTEFAPIOperacaoAPI; var Cancelar: Boolean);
begin

  AdicionarLinhaLog( 'QuandoEsperarOperacao: '+
                     GetEnumName(TypeInfo(TACBrTEFAPIOperacaoAPI), integer(OperacaoAPI) ) );

  if FCanceladoPeloOperador then
  begin
    bCancelarResp.Visible:=False;
    FCanceladoPeloOperador := False;
    Cancelar := True;  // Aborta o TEF em andamento
  end
  else
  begin

    bCancelarResp.Visible:=true; // StatusVenda := stsAguardandoTEF;   // Liga Botão que permite cancelar
    FCanceladoPeloOperador := False;
  end;

 // Application.ProcessMessages;

end;

procedure TftransacaoTEFAPI.CompACBrTEFQuandoExibirMensagem(
  const Mensagem: string; Terminal: TACBrTEFAPITela;
  MilissegundosExibicao: Integer);
var
  FormExibeMensagem: TFormExibeMensagem;
begin

  if pos('cielo',lowercase(Mensagem))>0 then
    exit;


  if (Mensagem = '') then
  begin
    if (Terminal in [telaCliente, telaTodas]) then
      MensagemTEF('',' ');
    if (Terminal in [telaOperador, telaTodas]) then
      MensagemTEF(' ','');
  end
  else if (MilissegundosExibicao >= 0) then
  begin
    FormExibeMensagem := TFormExibeMensagem.Create(Self);
    try
      FormExibeMensagem.Mensagem := Mensagem;
      FormExibeMensagem.TempoEspera := MilissegundosExibicao;
      FormExibeMensagem.ShowModal;
    finally
      FormExibeMensagem.Free;
    end;
  end
  else
  begin
    if (Terminal in [telaCliente, telaTodas]) then
      MensagemTEF('',Mensagem);
    if (Terminal in [telaOperador, telaTodas]) then
      MensagemTEF(Mensagem,'');
  end;

  if lowercase(lMensagemOperador.Caption)='transacao autorizada'  then
  begin
    Panel2.Visible:=false;
    //application.ProcessMessages;
  end
  else
  begin
    Panel2.Visible:=True;
  //  application.ProcessMessages;
  end;


end;

procedure TftransacaoTEFAPI.CompACBrTEFQuandoExibirQRCode(
  const DadosQRCode: string);
var
  QRCode: TDelphiZXingQRCode;
  QRCodeBitmap: TBitmap;
  Row, Column: Integer;
begin


  if (DadosQRCode <> '') then
    ExibirPainelQRCode
  else
  begin
    OcultatPainelQRCode;
    Exit;
  end;

  QRCode := TDelphiZXingQRCode.Create;
  QRCodeBitmap := TBitmap.Create;
  try
    QRCode.Encoding  := qrUTF8BOM;
    QRCode.QuietZone := 2;
    QRCode.Data      := widestring(DadosQRCode);

    QRCodeBitmap.Width  := QRCode.Columns;
    QRCodeBitmap.Height := QRCode.Rows;

    for Row := 0 to QRCode.Rows - 1 do
    begin
      for Column := 0 to QRCode.Columns - 1 do
      begin
        if (QRCode.IsBlack[Row, Column]) then
          QRCodeBitmap.Canvas.Pixels[Column, Row] := clBlack
        else
          QRCodeBitmap.Canvas.Pixels[Column, Row] := clWhite;
      end;
    end;

    imgQRCode.Picture.Bitmap.Assign(QRCodeBitmap);
  finally
    QRCode.Free;
    QRCodeBitmap.Free;
  end;


end;

procedure TftransacaoTEFAPI.CompACBrTEFQuandoFinalizarOperacao(
  RespostaTEF: TACBrTEFResp);
var
  MsgFinal: String;
  MR:integer;
begin

  MsgFinal := RespostaTEF.TextoEspecialOperador;

  AdicionarLinhaLog('');
  AdicionarLinhaLog('');
  AdicionarLinhaLog('------ Fim da Operação ------');
  AdicionarLinhaLog('Sucesso: '+IfThen(RespostaTEF.Sucesso, 'SIM', 'NÃO'));
  AdicionarLinhaLog('Resultado: '+MsgFinal);

  // Usando as propriedades de TACBrTEFResp
  if (RespostaTEF.ValorTotal > 0) then
  begin
    AdicionarLinhaLog('');
    AdicionarLinhaLog('- Rede: '  + RespostaTEF.Rede );
    AdicionarLinhaLog('- NSU: '  + RespostaTEF.NSU );
    AdicionarLinhaLog('- Parcelas: '+ IntToStr(RespostaTEF.QtdParcelas) +
                      ', parcelado por: '+ GetEnumName(TypeInfo(TACBrTEFRespParceladoPor),
                                                       integer(RespostaTEF.ParceladoPor) ));
    AdicionarLinhaLog('- Tipo Cartão: '+IfThen(RespostaTEF.Debito, 'Debito',
                                        IfThen(RespostaTEF.Credito, 'Crédito', '')) );
    AdicionarLinhaLog(' - Valor: '+ FormatFloat(',0.00',RespostaTEF.ValorTotal)) ;
  end;

  // Lendo um Campo Específico //
  if (CompACBrTEF.Modelo = tefApiPayGoWeb) then
    AdicionarLinhaLog('- PWINFO_REQNUM: ' + RespostaTEF.LeInformacao(PWINFO_REQNUM,0).AsString );

  // Exemplo de como processar a Impressão dos comprovantes
  if not RespostaTEF.Sucesso then
  begin
    if (pos('PENDENTE', UpperCase(MsgFinal)) > 0) then
    begin
      if (CompACBrTEF.TratamentoTransacaoPendente = tefpenConfirmar) then
        MsgFinal := MsgFinal + sLineBreak + 'Transação será CONFIRMADA'
      else if (CompACBrTEF.TratamentoTransacaoPendente = tefpenEstornar) then
          MsgFinal := MsgFinal + sLineBreak + 'Transação será ESTORNADA'
      else
        MsgFinal := '';  // Ignora esse erro, pois será tratado em QuandoDetectarTransacaoPendente
    end;

   { if (MsgFinal <> '')  then
      MessageDlg('949 '+MsgFinal, mtError, [mbOK], 0);}
  end
  else
  begin
    // Para Confirmar a transação Automáticamento... use:
    //      "ConfirmarTransacoesAutomaticamente := True"

    // ----- Para Confirmar Manualmente a trasação, use o exemplo abaixo -----
    // COMENTAR PARA PRODUÇÃO

    {HOMOLOGACAO

    if  RespostaTEF.Confirmar then
    begin
      MR := MessageDlg( 'TEF: '+
                        'Transação Autorizada'+sLineBreak+sLineBreak+
                        'Deseja Confirmar ?',
                        mtConfirmation,
                        [mbYes, mbNo], 0 );

      if (MR = mrYes) then
         CompACBrTEF.FinalizarTransacao(tefstsSucessoManual)
      else
         CompACBrTEF.FinalizarTransacao(tefstsErroDiverso);

    end; }

    // Se não for Venda, já podemos Confirmar e imprimir os comprovantes
    if (RespostaTEF.Header <> CHEADER_PAGAMENTO) then
    begin
      if (not CompACBrTEF.ConfirmarTransacaoAutomaticamente) and  RespostaTEF.Confirmar then
      begin
        CompACBrTEF.FinalizarTransacao(tefstsSucessoAutomatico);  // ...então confirme
      end;

      if (RespostaTEF.ImagemComprovante1aVia.Count > 10) then
      begin
        ComprovanteRetorno1via:=RespostaTEF.ImagemComprovante1aVia.Text;
      end;

      if (RespostaTEF.ImagemComprovante2aVia.Count > 10) then
      begin
        ComprovanteRetorno2via:=RespostaTEF.ImagemComprovante2aVia.Text;
      end;

     // verificar ImprimirTodosComprovantes
    end;
  end;

  // --- Exemplo de como usar as Propriedades da API, fazendo TypeCast
  (*
  if (ACBrTEFAPI1.TEF is TACBrTEFAPIClassPayGoWeb) then
  begin
    AdicionarLinhaLog('');
    AdicionarLinhaLog( '-- Retornos do PayGoWeb API --');
    with TACBrTEFAPIClassPayGoWeb(ACBrTEFAPI1.TEF) do
    begin
      for i := 0 to TEFPayGoAPI.DadosDaTransacao.Count-1 do
      begin
        ParseKeyValue(TEFPayGoAPI.DadosDaTransacao[i], TheKey, TheValue);
        nINFO := StrToIntDef(TheKey,-1);
        if (nINFO >= 0) then
          AdicionarLinhaLog(PWINFOToString(nINFO) + ' = ' + TheValue );
      end;
    end;
  end;
  *)


end;

procedure TftransacaoTEFAPI.CompACBrTEFQuandoFinalizarTransacao(
  RespostaTEF: TACBrTEFResp; AStatus: TACBrTEFStatusTransacao);
var
  Atualizou, Sucesso: Boolean;
begin

  Sucesso := (AStatus in [tefstsSucessoAutomatico, tefstsSucessoManual]);
  Atualizou := False;

  if (RespostaTEF.Header = CHEADER_PAGAMENTO) then
  begin

    if Sucesso then
    begin

    end
    else

  end

  else if (RespostaTEF.Header = CHEADER_CANCELAMENTO) then
  begin
    if Sucesso then
  end

  else if (RespostaTEF.Header = CHEADER_ADMINISTRATIVA) then
  begin
    if Sucesso then
    begin
      // https://www.projetoacbr.com.br/forum/topic/61001-como-detectar-se-em-uma-transa%C3%A7%C3%A3o-adm-houve-um-cancelamento/

      if (RespostaTEF.NSUTransacaoCancelada <> '') and (RespostaTEF.ImagemComprovante1aVia.Count > 10) then
      begin
        ComprovanteRetorno1via:=RespostaTEF.ImagemComprovante1aVia.Text;
      end;

      if (RespostaTEF.NSUTransacaoCancelada <> '') and (RespostaTEF.ImagemComprovante2aVia.Count > 10) then
      begin
        ComprovanteRetorno2via:=RespostaTEF.ImagemComprovante2aVia.Text;
      end;

      if (RespostaTEF.NSUTransacaoCancelada = '') and (RespostaTEF.ImagemComprovante1aVia.Count > 10) then
      begin
        ComprovanteRetorno1via:=RespostaTEF.ImagemComprovante1aVia.Text;
      end;

      if (RespostaTEF.NSUTransacaoCancelada = '') and (RespostaTEF.ImagemComprovante2aVia.Count > 10) then
      begin
        ComprovanteRetorno2via:=RespostaTEF.ImagemComprovante2aVia.Text;
      end;





    end;
  end;



end;

procedure TftransacaoTEFAPI.CompACBrTEFQuandoGravarLog(const ALogLine: string;
  var Tratado: Boolean);
begin
  AdicionarLinhaLog(ALogLine);
  Tratado := False;
end;

procedure TftransacaoTEFAPI.CompACBrTEFQuandoPerguntarCampo(
  DefinicaoCampo: TACBrTEFAPIDefinicaoCampo; var Resposta: string; var Validado,
  Cancelado: Boolean);
Var
  MR: TModalResult ;
  FormObtemCampo: TFormObtemCampo;
begin

  AdicionarLinhaLog( 'QuandoPerguntarCampo: '+DefinicaoCampo.TituloPergunta );

  { NOTA: Se DefinicaoCampo.ValidacaoDado = "pgvSenhaLojista"
          Você deve chamar a Tela de Senha do seu sistema, e retornar o NOME do
          Operador, NUNCA a Senha digitada

  if (DefinicaoCampo.ValidacaoDado = pgvSenhaLojista) then
  begin
    Validado := True;
    Cancelado := False;
    Resposta := fOperador;
    Exit;
  end;
  }

  FormObtemCampo := TFormObtemCampo.Create(self);
  try
    FormObtemCampo.Titulo := DefinicaoCampo.TituloPergunta;
    FormObtemCampo.TamanhoMaximo := DefinicaoCampo.TamanhoMaximo;
    FormObtemCampo.TamanhoMinimo := DefinicaoCampo.TamanhoMinimo;
    FormObtemCampo.Resposta := DefinicaoCampo.ValorInicial;
    FormObtemCampo.Ocultar := DefinicaoCampo.OcultarDadosDigitados;
    FormObtemCampo.Mascara := DefinicaoCampo.MascaraDeCaptura;
    FormObtemCampo.btVoltar.Visible := False;  // PayGoWeb não suporta Voltar;

    if (pos('R$', DefinicaoCampo.MascaraDeCaptura) > 0) or
       (pos('@.@@@,@@', DefinicaoCampo.MascaraDeCaptura) > 0) or
       (pos('@@@@@@,@@', DefinicaoCampo.MascaraDeCaptura) > 0) then
      FormObtemCampo.TipoCampo := tcoCurrency
    else
    begin
      case DefinicaoCampo.TipoDeEntrada of
        tedApenasLeitura:
          FormObtemCampo.edtResposta.ReadOnly := True;
        tedNumerico:
          if (pos('@,@@', DefinicaoCampo.MascaraDeCaptura) > 0) then
            FormObtemCampo.TipoCampo := tcoDecimal
          else
            FormObtemCampo.TipoCampo := tcoNumeric;
        tedAlfabetico:
          FormObtemCampo.TipoCampo := tcoAlfa;
        tedAlfaNum:
          FormObtemCampo.TipoCampo := tcoAlfaNum;
      else
        FormObtemCampo.TipoCampo := tcoString;
      end;
    end;

    MR := FormObtemCampo.ShowModal ;

    Cancelado := (MR <> mrOK) ;
    Validado := False;  // Não fizemos as validações de "DefinicaoCampo.ValidacaoDado", vamos deixar o ACBrTEFAPI validar
    Resposta := FormObtemCampo.Resposta;
  finally
    FormObtemCampo.Free;
  end;


end;

procedure TftransacaoTEFAPI.CompACBrTEFQuandoPerguntarMenu(const Titulo: string;
  Opcoes: TStringList; var ItemSelecionado: Integer);
Var
  MR: TModalResult ;
  FormMenuTEF : TFormMenuTEF;
begin

  AdicionarLinhaLog( 'QuandoPerguntarMenu: '+Titulo + sLineBreak + Opcoes.Text );
  if (Opcoes.Count < 1) then
  begin
    ItemSelecionado := -1;
    Exit;
  end;

  FormMenuTEF := TFormMenuTEF.Create(self);
  try
    FormMenuTEF.Titulo := Titulo;
    FormMenuTEF.Opcoes := Opcoes;
    FormMenuTEF.UsaTeclasDeAtalho := (copy(Opcoes[0],1,4) = '1 - ');
    FormMenuTEF.ItemSelecionado := ItemSelecionado;

    MR := FormMenuTEF.ShowModal ;

    case MR of
      mrOK:
        ItemSelecionado := FormMenuTEF.ItemSelecionado;
      mrRetry:
        ItemSelecionado := -2;  // Voltar
    else
      ItemSelecionado := -1;   // Cancelar
    end;
  finally
    FormMenuTEF.Free;
  end;


end;

procedure TftransacaoTEFAPI.ConfigurarTEFAPI;
begin


  if UpperCase(fConfiguracaoTEF.EstabelecimentoTipoTEF)='SKYTEF' then
  begin
    CompACBrTEF.DiretorioTrabalho:= extractfilepath(application.ExeName)+ 'tef\Clisitef\';
    CompACBrTEF.Modelo :=TACBrTEFAPITipo.tefApiCliSiTEF;
  end
  else if UpperCase(fConfiguracaoTEF.EstabelecimentoTipoTEF)='PAYGOWEB' then
  begin
    CompACBrTEF.Modelo :=TACBrTEFAPITipo.tefApiPayGoWeb;
  end;


  CompACBrTEF.DadosAutomacao.AutoAtendimento := False;
  CompACBrTEF.DadosAutomacao.ImprimeViaClienteReduzida := False;


  // teste 33, 34 e 38
  // ativar para homologacao

  CompACBrTEF.TratamentoTransacaoInicializacao := TACBrTEFTratamentoTransacaoInicializacao.tefopiProcessarPendentes;
  CompACBrTEF.TratamentoTransacaoPendente := TACBrTEFTratamentoTransacaoPendente.tefpenConfirmar;

  CompACBrTEF.ConfirmarTransacaoAutomaticamente := True;



  if not DirectoryExists(extractfilepath(application.ExeName) + '\logstef\' + FormatDateTime('yyyymmdd', now)) then
    ForceDirectories(extractfilepath(application.ExeName) + '\logstef\' + FormatDateTime('yyyymmdd', now));

  CompACBrTEF.ArqLOG :=(extractfilepath(application.ExeName) + '\logstef\' + FormatDateTime('yyyymmdd', now) + '\' + FormatDateTime('hhnn', now) + 'logtef.txt');


  CompACBrTEF.DadosAutomacao.SuportaDesconto := True;
  CompACBrTEF.DadosAutomacao.SuportaSaque := False;
  CompACBrTEF.DadosAutomacao.NomeSoftwareHouse :='PEGASUS DESENVOLVIMENTO DE SISTEMAS DE INFORMATICA LTDA -ME';

  if UpperCase(fConfiguracaoTEF.EstabelecimentoTipoTEF)='SKYTEF' then
  begin
    CompACBrTEF.DiretorioTrabalho:= extractfilepath(application.ExeName)+ 'tef\Clisitef\';
    CompACBrTEF.DadosAutomacao.CNPJSoftwareHouse := '14477548000131'
  end
  else
    CompACBrTEF.DadosAutomacao.CNPJSoftwareHouse := '14.477.548/0001-31';

  CompACBrTEF.DadosAutomacao.NomeAplicacao := 'Pegasus Mercato';
  CompACBrTEF.DadosAutomacao.VersaoAplicacao := '24.27.300.18';

  CompACBrTEF.DadosEstabelecimento.RazaoSocial := fConfiguracaoTEF.EstabelecimentoRazaoSocial;
  CompACBrTEF.DadosEstabelecimento.CNPJ :=  fConfiguracaoTEF.EstabelecimentoCNPJ;
  CompACBrTEF.DadosTerminal.Operador := fConfiguracaoTEF.TerminalOperador;

  CompACBrTEF.ExibicaoQRCode := qrapiExibirPinPad;


  if (CompACBrTEF.TEF is TACBrTEFAPIClassPayGoWeb) then
  begin
    TACBrTEFAPIClassPayGoWeb(CompACBrTEF.TEF).DiretorioTrabalho :=  'c:\PAYGOWEB';
  end;

  CompACBrTEF.DadosTerminal.PortaPinPad :=fConfiguracaoTEF.TerminalPortaPinPad;

  CompACBrTEF.DadosTerminal.CodTerminal:=fConfiguracaoTEF.TerminalCodTerminal;
  CompACBrTEF.DadosTerminal.CodEmpresa:=fConfiguracaoTEF.TerminalCodEmpresa;

  CompACBrTEF.DadosTerminal.CodFilial:=fConfiguracaoTEF.TerminalCodFilial;
  CompACBrTEF.DadosTerminal.EnderecoServidor:=fConfiguracaoTEF.TerminalEnderecoServidor;


end;


function TftransacaoTEFAPI.IncluirPagamento(AValor: Double; aCodFormaPagamento: Integer): Boolean;
begin

  if AdicionarPagamento(cPagamentos[aCodFormaPagamento, 0], AValor) then
    modalresult:=mrok
  else
    ModalResult:=MrCancel;

end;


function TftransacaoTEFAPI.ProcessaCancelamento(aConfiguracaoTEF: TConfiguracaoTEF; vOperacaoTEF: TOperacaoTEF): TOperacaoTEF;
begin

  if RemoverPagamento(vOperacaoTEF.Rede, vOperacaoTEF.AutorizacaoRetorno) then
    modalresult:=mrok
  else
    ModalResult:=MrCancel;

end;



function TftransacaoTEFAPI.ProcessaPagamentoTEF(aConfiguracaoTEF: TConfiguracaoTEF; aOperacaoTEF: TOperacaoTEF): TOperacaoTEF;
begin

  fConfiguracaoTEF:=aConfiguracaoTEF;

  OperacaoTEF:=aOperacaoTEF;

  AdicionarPagamento(cPagamentos[OperacaoTEF.Modalidade, 0], OperacaoTEF.Valor);

end;


procedure TftransacaoTEFAPI.Cancelamento;
begin
  if not AtivarConexaoTEF(fConfiguracaoTEF) then
  begin
    OperacaoTEF.AutorizacaoRetorno := '';
    close;
  end
  else
  begin
    if CompACBrTEF.EfetuarAdministrativa(tefopAdministrativo) then
    begin
      OperacaoTEF.AutorizacaoRetorno := '';
      close;
    end
    else
    begin
      OperacaoTEF.AutorizacaoRetorno := '';
      close;
    end;
  end;
end;

function TftransacaoTEFAPI.AtivarConexaoTEF(vConfiguracaoTEF: TConfiguracaoTEF): Boolean;
begin



  if not CompACBrTEF.Inicializado then
  begin
    ConfigurarTEFAPI;

   if WebOnLine then
    CompACBrTEF.Inicializar;

  end;

  Result :=CompACBrTEF.Inicializado;

end;



procedure TftransacaoTEFAPI.MensagemPinPag(aTexto: String; aConfiguracaoTEF: TConfiguracaoTEF);
begin

  if CompACBrTEF.Inicializado then
  begin
    CompACBrTEF.ExibirMensagemPinPad('PEGASUS'+#13+'Mercato');
  end;

end;


function TftransacaoTEFAPI.AcharTransacaoTEF(aRede,aNSU:String): TACBrTEFResp;
var
  i: Integer;
begin
  Result := Nil;


  i := CompACBrTEF.RespostasTEF.AcharTransacao( aRede,aNSU );
  if (i >= 0) then
    Result := CompACBrTEF.RespostasTEF[i];
end;



function TftransacaoTEFAPI.RetornaBdcCodigo(aBandeira:String):String;
var
 vlbdc:TUniquery;
 vBdc:TUniquery;
 vChaveBdc:TUniquery;
 vlBandeira:String;
 i:Integer;
begin

    vlBandeira := aBandeira;

    if vlBandeira='' then
     vlBandeira:='99';

    if vlBandeira<>'' then
    begin

      vlbdc:=TUniquery.Create(nil);

      try

        if (CompACBrTEF.Modelo = tefApiCliSiTEF) then
        begin
          vlbdc.Close;
          vlbdc.Connection := ZCone;
          vlbdc.SQL.Text:='SELECT bdccodigo, bdcidentificacao,trmestabelecimentotipotef FROM bdc '+
          'where  lower(trmestabelecimentotipotef)='+QuotedStr('sytef')+ ' and bdccodigo='+vlBandeira;
          vlbdc.Open;
        end
        else if (CompACBrTEF.Modelo = tefApiPayGoWeb) then
        begin
          vlbdc.Close;
          vlbdc.Connection := ZCone;

          if (pos('ALELO REFEIC',vlBandeira)>0) or (pos('ALELO ALIMEN',vlBandeira)>0) then
          begin

            vlbdc.SQL.Text:='SELECT bdccodigo, bdcidentificacao,trmestabelecimentotipotef FROM bdc '+
            'where  lower(trmestabelecimentotipotef)='+QuotedStr('paygoweb')+ ' and bdcidentificacao='+ QuotedStr('ALELO REFEIC');

          end
          else
          begin

            vlbdc.SQL.Text:='SELECT bdccodigo, bdcidentificacao,trmestabelecimentotipotef FROM bdc '+
            'where  lower(trmestabelecimentotipotef)='+QuotedStr('paygoweb')+ ' and bdcidentificacao like '+ QuotedStr(vlBandeira+'%');

          end;


          vlbdc.Open;
        end;

      except
      on E: Exception do
        begin

        i:=0;
        while True do
        begin

          sleep(1000);
          TRY

           if not ZCone.Connected then
             ZCone.Connected:=true;

            vlbdc.Open;
          EXCEPT
            sleep(1000);
          END;

          try
          if vlbdc.Active then
            break;
          except
          end;

          if i>30 then
          begin
            Result:='';
            exit;
          end;

        end;

        end;
      end;

      Result:=vlbdc.FieldByName('bdccodigo').AsString;


      if vlbdc.FieldByName('bdccodigo').AsString='' then
      begin

        if vlBandeira<>'OUTROS' then
        begin
          vChaveBdc:=TUniquery.Create(nil);

          try
            vChaveBdc.Close;
            vChaveBdc.Connection := ZCone;
            vChaveBdc.SQL.Text:='SELECT max(bdccodigo) as bdccodigo FROM bdc ';

            if (CompACBrTEF.TEF is TACBrTEFAPIClassPayGoWeb) then
            begin
              vChaveBdc.SQL.Add('where lower(trmestabelecimentotipotef)=' + QuotedStr('paygoweb')+ ' and bdccodigo<99');
            end
            else if (CompACBrTEF.TEF is TACBrTEFAPIClassCliSiTef) then
            begin
              vChaveBdc.SQL.Add('where lower(trmestabelecimentotipotef)=' + QuotedStr('skytef'));
            end;

            vChaveBdc.Open;
          except
            i:=0;
            while True do
            begin

              try
                if not ZCone.Connected then
                 ZCone.Connected:=true;

                vChaveBdc.Open;
              except
                sleep(1000);
              end;

              try

              if vChaveBdc.Active then
                break;
              except
              end;
              if i>30 then
              begin
                Result:='';
                exit;
              end;

            end;

          end;

          vBdc:=TUniquery.Create(nil);
          try
            vBdc.Close;
            vBdc.Connection := ZCone;
            vBdc.SQL.Text:='SELECT bdccodigo, bdcidentificacao, trmestabelecimentotipotef,bdcnaturza FROM bdc limit 0';
            vBdc.Open;
          except
            i:=0;
            while True do
            begin


              try
                vBdc.Open;
              except
               sleep(1000);

               if not ZCone.Connected then
                 ZCone.Connected:=true;

              end;
              try
              if vBdc.Active then
                break;
              except
              end;

              if i>30 then
              begin
                Result:='';
                exit;
              end;

            end;
          end;

          try
            vBdc.Append;

            if CompACBrTEF.TEF is TACBrTEFAPIClassPayGoWeb then
            begin
              vBdc.FieldByName('bdcidentificacao').AsString:=uppercase(vlBandeira);
              vBdc.FieldByName('bdccodigo').AsInteger:=vChaveBdc.FieldByName('bdccodigo').AsInteger+1;
              vBdc.FieldByName('trmestabelecimentotipotef').AsString:= 'PayGoWeb';
             vBdc.FieldByName('bdcnaturza').AsString := 'Débido';
            end
            else
            begin
              vBdc.FieldByName('bdcidentificacao').AsString:=vlBandeira;
              vBdc.FieldByName('bdccodigo').AsString:=aBandeira;
              vBdc.FieldByName('trmestabelecimentotipotef').AsString:= 'SyTef';
              vBdc.FieldByName('bdcnaturza').AsString := 'Débido';
            end;

            vBdc.Post;
          except

            i:=0;
            while True do
            begin

              sleep(1000);

              try
                vBdc.Post;
              except
                 if not ZCone.Connected then
                 ZCone.Connected:=true;
              end;
              try
              if vBdc.State<>dsInsert then
              begin
                result:='';
                break;
              end;
              except
              end;
              if i>30 then
              begin
                Result:='';
                exit;
              end;

            end;

          end;

          vBdc.Close;
          vBdc.Free;

          vChaveBdc.Close;
          vChaveBdc.Free;

        end;

      end;

    end;
    vlbdc.Close;
    vlbdc.Free;

end;


function TftransacaoTEFAPI.RetornaAdcCodigo:String;
var
 vladc:TUniquery;
begin

    vladc:=TUniquery.Create(nil);
    vladc.Close;
    vladc.Connection := ZCone;
    vladc.SQL.Text:='SELECT adccodigo, adcidentificacao, etdcodigo, adcpropria, '+
                    'bdccodigo, ctacodigo FROM adc  where adcencerramento is null ';
    vladc.Open;

    Result:=vladc.FieldByName('adccodigo').AsString;

    vladc.Close;

    vladc.Free;

end;


function TftransacaoTEFAPI.AtivaTEF(aConfiguracaoTEF: TConfiguracaoTEF): boolean;
var
 msg:String;
 I:Integer;
begin

  Result:= True;

  if not CompACBrTEF.Inicializado then
  begin

    fConfiguracaoTEF:=aConfiguracaoTEF;

    if UpperCase(fConfiguracaoTEF.EstabelecimentoTipoTEF)='SKYTEF' then
    begin
      CompACBrTEF.DiretorioTrabalho:= extractfilepath(application.ExeName)+ 'tef\Clisitef\';

    end;


   // ConfigurarTEFAPI;

    if not CompACBrTEF.Inicializado then
    begin

      try


        if UpperCase(fConfiguracaoTEF.EstabelecimentoTipoTEF)='SKYTEF' then
        begin
          CompACBrTEF.DiretorioTrabalho:= extractfilepath(application.ExeName)+ 'tef\Clisitef\';
          CompACBrTEF.Modelo :=TACBrTEFAPITipo.tefApiCliSiTEF;
        end
        else if UpperCase(fConfiguracaoTEF.EstabelecimentoTipoTEF)='PAYGOWEB' then
        begin
          CompACBrTEF.Modelo :=TACBrTEFAPITipo.tefApiPayGoWeb;
        end;


        CompACBrTEF.DadosAutomacao.AutoAtendimento := False;
        CompACBrTEF.DadosAutomacao.ImprimeViaClienteReduzida := False;


        // teste 33, 34 e 38
        // ativar para homologacao

        CompACBrTEF.TratamentoTransacaoInicializacao := TACBrTEFTratamentoTransacaoInicializacao.tefopiProcessarPendentes;
        CompACBrTEF.TratamentoTransacaoPendente := TACBrTEFTratamentoTransacaoPendente.tefpenConfirmar;
        CompACBrTEF.ConfirmarTransacaoAutomaticamente := True;



        if not DirectoryExists(extractfilepath(application.ExeName) + '\logstef\' + FormatDateTime('yyyymmdd', now)) then
          ForceDirectories(extractfilepath(application.ExeName) + '\logstef\' + FormatDateTime('yyyymmdd', now));

        CompACBrTEF.ArqLOG :=(extractfilepath(application.ExeName) + '\logstef\' + FormatDateTime('yyyymmdd', now) + '\' + FormatDateTime('hhnn', now) + 'logtef.txt');


        CompACBrTEF.DadosAutomacao.SuportaDesconto := True;
        CompACBrTEF.DadosAutomacao.SuportaSaque := False;
        CompACBrTEF.DadosAutomacao.NomeSoftwareHouse :='PEGASUS DESENVOLVIMENTO DE SISTEMAS DE INFORMATICA LTDA -ME';

        if UpperCase(fConfiguracaoTEF.EstabelecimentoTipoTEF)='SKYTEF' then
        begin

          if not DirectoryExists(extractfilepath(application.ExeName)+ 'tef\Clisitef\') then
             ForceDirectories(extractfilepath(application.ExeName)+ 'tef\Clisitef\');

          CompACBrTEF.DiretorioTrabalho:= extractfilepath(application.ExeName)+ 'tef\Clisitef\';
          CompACBrTEF.DadosAutomacao.CNPJSoftwareHouse := '14477548000131'
        end
        else
          CompACBrTEF.DadosAutomacao.CNPJSoftwareHouse := '14.477.548/0001-31';

        CompACBrTEF.DadosAutomacao.NomeAplicacao := 'Pegasus Mercato';
        CompACBrTEF.DadosAutomacao.VersaoAplicacao := '24.27.300.18';

        CompACBrTEF.DadosEstabelecimento.RazaoSocial := fConfiguracaoTEF.EstabelecimentoRazaoSocial;
        CompACBrTEF.DadosEstabelecimento.CNPJ :=  fConfiguracaoTEF.EstabelecimentoCNPJ;
        CompACBrTEF.DadosTerminal.Operador := fConfiguracaoTEF.TerminalOperador;

        CompACBrTEF.ExibicaoQRCode := qrapiExibirPinPad;

        if (CompACBrTEF.TEF is TACBrTEFAPIClassPayGoWeb) then
        begin
          TACBrTEFAPIClassPayGoWeb(CompACBrTEF.TEF).DiretorioTrabalho :=  'c:\PAYGOWEB';
        end;

        CompACBrTEF.DadosTerminal.PortaPinPad :=fConfiguracaoTEF.TerminalPortaPinPad;

        CompACBrTEF.DadosTerminal.CodTerminal:=fConfiguracaoTEF.TerminalCodTerminal;
        CompACBrTEF.DadosTerminal.CodEmpresa:=fConfiguracaoTEF.TerminalCodEmpresa;

        CompACBrTEF.DadosTerminal.CodFilial:=fConfiguracaoTEF.TerminalCodFilial;
        CompACBrTEF.DadosTerminal.EnderecoServidor:=fConfiguracaoTEF.TerminalEnderecoServidor;


        CompACBrTEF.TratamentoTransacaoPendente := tefpenConfirmar;
        CompACBrTEF.TratamentoTransacaoInicializacao :=tefopiProcessarPendentes;

        if UpperCase(fConfiguracaoTEF.EstabelecimentoTipoTEF)='SKYTEF' then
        begin
          CompACBrTEF.DiretorioTrabalho:= extractfilepath(application.ExeName)+ 'tef\Clisitef\';
          CompACBrTEF.DadosAutomacao.CNPJSoftwareHouse := '14477548000131'
        end
        else
          CompACBrTEF.DadosAutomacao.CNPJSoftwareHouse := '14.477.548/0001-31';

        CompACBrTEF.DadosAutomacao.NomeAplicacao := 'Pegasus Mercato';
        CompACBrTEF.DadosAutomacao.VersaoAplicacao := '24.27.300.18';

        CompACBrTEF.DadosEstabelecimento.RazaoSocial := fConfiguracaoTEF.EstabelecimentoRazaoSocial;
        CompACBrTEF.DadosEstabelecimento.CNPJ :=  fConfiguracaoTEF.EstabelecimentoCNPJ;

        if PingHost('google.com')>0 then
          WebOnLine :=true
        else
          WebOnLine :=False;

        if WebOnLine then
          CompACBrTEF.Inicializar
        else
        begin
          Result:=False;
          exit;
        end;


      except
        on E: Exception do
        begin
          Result:=False;
          CompACBrTEF.DoException('Erro 1867 '+e.Message);
        end;
      end;
    end;

    if CompACBrTEF.Inicializado then
    begin


     if (CompACBrTEF.Modelo = tefApiPayGoWeb) then
         msg:='     MIZIO'+#13+'     Gourmet'
     else

        msg:='MIZIO'+#13+'Gourmet';




      try

        if CompACBrTEF.Inicializado then
        begin
          CompACBrTEF.ExibirMensagemPinPad(msg);
        end;

        Result := True;

      except
        on E: Exception do
        begin
         Result:=False;
        end;
      end;

      result:=True;
    end
    else
      Result:=False;

  end;

end;



procedure TftransacaoTEFAPI.bCancelarRespClick(Sender: TObject);
begin
  OperacaoTEF.Valor:=0;
  FCanceladoPeloOperador := True;
  vCancelado := True;
end;





end.
