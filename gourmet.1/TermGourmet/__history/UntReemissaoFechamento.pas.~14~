unit UntReemissaoFechamento;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.Grids,
  Vcl.DBGrids, Data.DB, DBAccess, Uni;

type
  TFrmReemissaoFechamento = class(TForm)
    Panel11: TPanel;
    LbMesa: TLabel;
    Panel2: TPanel;
    Panel10: TPanel;
    Panel1: TPanel;
    DBGridItens: TDBGrid;
    PnRecebimentos: TPanel;
    PnItensRecebidos: TPanel;
    DBGrid2: TDBGrid;
    DBGrid1: TDBGrid;
    Panel22: TPanel;
    Panel24: TPanel;
    BtnFechar: TButton;
    Button10: TButton;
    dolt: TUniDataSource;
    dmsapgto: TUniDataSource;
    Panel3: TPanel;
    pllista: TPanel;
    Label1: TLabel;
    edMesa: TEdit;
    procedure doltDataChange(Sender: TObject; Field: TField);
    procedure dmsapgtoDataChange(Sender: TObject; Field: TField);
    procedure BtnFecharClick(Sender: TObject);
    procedure Button10Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure DBGridItensTitleClick(Column: TColumn);
    procedure DBGridItensKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure DBGrid1KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure DBGrid2KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edMesaKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
  private
    procedure EmiteComprovante(pMesChave: Integer);
    procedure EmiteRecibo(pLteChave: Integer);
    { Private declarations }
  public
    { Public declarations }
    function mrfrImprimir(Dados: TUniDataSource; DirRelatorio: String; TipoImpressao: Integer): String;
  end;

var
  FrmReemissaoFechamento: TFrmReemissaoFechamento;

implementation

uses
  UntDmDados, UntPegaConst, System.Math, UntPrincipal;

{$R *.dfm}

procedure TFrmReemissaoFechamento.Button10Click(Sender: TObject);
begin
 {   if FPrinciGou.vpOrcChave='' then
    begin}
    DmDados.oltmes.close;
    DmDados.oltmes.ParamByName('orcchave').AsString:= dmdados.msapgtoorcchave.AsString;
    DmDados.oltmes.Open;


{    end
    else
    begin
    DmDados.oltmes.close;
    DmDados.oltmes.ParamByName('orcchave').AsString:=FPrinciGou.vpOrcChave;
    DmDados.oltmes.Open;
    end;}


  if not DmDados.olt.IsEmpty then
  begin
    if DmDados.oltmesmeschave.AsInteger > 0 then
      EmiteComprovante(DmDados.oltmesmeschave.AsInteger)
    else if DmDados.oltltechave.AsInteger > 0 then
      EmiteRecibo(DmDados.oltltechave.AsInteger);
  end
  else
  begin
    EmiteComprovante(DmDados.oltmesmeschave.AsInteger);
  end;
end;

procedure TFrmReemissaoFechamento.DBGrid1KeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  If (((Shift = [ssCtrl]) And (Key = 46))) or ((ssCtrl in Shift) and (Key = VK_DELETE)) Then
    Abort;
end;

procedure TFrmReemissaoFechamento.DBGrid2KeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  If (((Shift = [ssCtrl]) And (Key = 46))) or ((ssCtrl in Shift) and (Key = VK_DELETE)) Then
    Abort;
end;

procedure TFrmReemissaoFechamento.DBGridItensKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
         If (((Shift = [ssCtrl]) And (Key = 46))) or ((ssCtrl in Shift) and (Key = VK_DELETE)) Then
    Abort;
end;

procedure TFrmReemissaoFechamento.DBGridItensTitleClick(Column: TColumn);
begin
  // try
  DmDados.msapgto.IndexFieldNames := Column.FieldName;
  // except

  // end;
end;

procedure TFrmReemissaoFechamento.EmiteRecibo(pLteChave: Integer);
var
  vRetorno: String;
  vDirRelatorio: String;
  vImprimeDireto: Boolean;
begin
  if pLteChave > 0 then
  begin
    vDirRelatorio := Extractfilepath(Application.ExeName) + 'relat\recibo.fr3';
    vImprimeDireto := DmDados.Usuario.MitTipCodigo = tipTermica48Col;
    if DmDados.ConsultaSQL('SELECT ''' + IntToStr(pLteChave) + ''' ltechave') then
      mrfrImprimir(DmDados.dConsulta, vDirRelatorio, IfThen(vImprimeDireto, tiImprimirDireto, tiImprimir));
  end;
end;

procedure TFrmReemissaoFechamento.FormShow(Sender: TObject);
begin
  BtnFechar.SetFocus;
end;

function TFrmReemissaoFechamento.mrfrImprimir(Dados: TUniDataSource; DirRelatorio: String; TipoImpressao: Integer): String;
type
  Impressao = function(AOwner: TComponent; Conexao: TUniConnection; vtabela: TUniDataSource; DirRelatorio: String; Impressora: String = ''; vUsuCodigo: string = ''): string;

var
  Pack: Cardinal;
  Exec: Impressao;
  vNomeRotina: String;

begin
  case TipoImpressao of
    tiImprimir:
      vNomeRotina := 'mrfrImpressao';
    tiGerador:
      vNomeRotina := 'mrfrGerador';
    tiImprimirDireto:
      vNomeRotina := 'mrfrImpressaoDireta';
  end;

  Pack := LoadPackage('modulos\mrfr.bpl');
  if Pack <> 0 then
    try
      @Exec := GetProcAddress(Pack, PChar(vNomeRotina));

      if Assigned(Exec) then
        Result := Exec(Application, DmDados.Conexao, Dados, DirRelatorio, DmDados.Usuario.TciTciPorta, IntToStr(DmDados.Usuario.ClbCodigo));

    finally
      // DoUnLoadPackage(Application, Pack);
    end;
end;

procedure TFrmReemissaoFechamento.EmiteComprovante(pMesChave: Integer);
var
  vRetorno: String;
  vDirRelatorio: String;
  vImprimeDireto: Boolean;
  vlImpConvenio: Boolean;
  vlEtdcodigo: Integer;
begin
  if pMesChave > 0 then
  begin
    vDirRelatorio := Extractfilepath(Application.ExeName) + 'relat\comprovante.fr3';
    vImprimeDireto := DmDados.Usuario.MitTipCodigo = tipTermica48Col;
    vlEtdcodigo := 0;
    vlImpConvenio := False;
    DmDados.dadosrelatorio.close;
    DmDados.dadosrelatorio.sql.text:='SELECT mor.orcchave, mor.meschave, mes.etdcodigo FROM mor, mes WHERE mor.meschave=mes.meschave and mor.meschave = ''' + IntToStr(pMesChave) +
      ''' LIMIT 1';
    DmDados.dadosrelatorio.open;

    if not DmDados.dadosrelatorio.isempty then
    begin

      vlEtdcodigo := DmDados.dadosrelatorio.Fields[2].AsInteger;
      mrfrImprimir(DmDados.dsdadosrelatorio, vDirRelatorio,  tiImprimir);

      DmDados.ConsultaSQL('SELECT cfgviaassinar FROM cfgmcre LIMIT 1');
      if (DmDados.Consulta.Fields[0].AsInteger = 1) and (vlEtdcodigo > 0) then
        vlImpConvenio := True;

      if vlImpConvenio then
      begin
        vDirRelatorio := Extractfilepath(Application.ExeName) + 'relat\viaassinar.fr3';
        vImprimeDireto := DmDados.Usuario.MitTipCodigo = tipTermica48Col;

        if DmDados.ConsultaSQL('SELECT orcchave, meschave FROM mor WHERE meschave = ''' + IntToStr(pMesChave) + ''' LIMIT 1') then
          mrfrImprimir(DmDados.dConsulta, vDirRelatorio, IfThen(vImprimeDireto, tiImprimirDireto, tiImprimir));
      end;

    end;
  end;

end;

procedure TFrmReemissaoFechamento.BtnFecharClick(Sender: TObject);
begin
  Close;
end;

procedure TFrmReemissaoFechamento.dmsapgtoDataChange(Sender: TObject; Field: TField);
begin
  // buscando dados de pagamentos
  DmDados.olt.Close;
  DmDados.olt.Params[0].AsInteger := DmDados.msapgtoorcchave.AsInteger;
  DmDados.olt.Open;
end;

procedure TFrmReemissaoFechamento.doltDataChange(Sender: TObject; Field: TField);
begin
 { if DmDados.Olttipobaixa.AsInteger = 0 then
  begin}

    if DmDados.oltorcchave.AsInteger<>0 then
    begin

      DmDados.itoparcial.Close;
      DmDados.itoparcial.Params[0].AsInteger := DmDados.oltorcchave.AsInteger;
      DmDados.itoparcial.Open;
      if not DmDados.itoparcial.IsEmpty then
        PnItensRecebidos.Visible := True
      else
        PnItensRecebidos.Visible := False;
    end
    else
    begin
      DmDados.itoparcial.Close;
      PnItensRecebidos.Visible := False;
    end;

  {end
  else
  begin
  DmDados.itoparcial.Close;
    PnItensRecebidos.Visible := False;
  end;}
end;

procedure TFrmReemissaoFechamento.edMesaKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  try
    DBGridItens.DataSource.DataSet.Locate('mesa',edMesa.Text,[loCaseInsensitive, loPartialKey]);
  except

  end;
end;

end.
