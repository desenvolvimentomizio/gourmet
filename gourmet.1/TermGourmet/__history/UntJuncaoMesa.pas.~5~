unit UntJuncaoMesa;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons, Vcl.Grids,
  Vcl.DBGrids, Vcl.ExtCtrls, Data.DB,ufuncoes;

type
  TFrmJuncaoMesa = class(TForm)
    Panel11: TPanel;
    Lbtitulo: TLabel;
    Panel2: TPanel;
    Panel1: TPanel;
    Panel4: TPanel;
    Panel9: TPanel;
    BtnCardRetornar: TButton;
    Button2: TButton;
    Panel3: TPanel;
    Panel16: TPanel;
    Panel5: TPanel;
    BtnIncSabores: TBitBtn;
    BtnExcSabores: TBitBtn;
    Panel13: TPanel;
    DBGridMesas: TDBGrid;
    Panel15: TPanel;
    Panel7: TPanel;
    Panel17: TPanel;
    Panel12: TPanel;
    LbMesa: TLabel;
    Panel10: TPanel;
    Label2: TLabel;
    Panel19: TPanel;
    Panel6: TPanel;
    Label1: TLabel;
    DBGrid4: TDBGrid;
    procedure FormShow(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure BtnCardRetornarClick(Sender: TObject);
    procedure BtnIncSaboresClick(Sender: TObject);
    procedure BtnExcSaboresClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure DBGridMesasDblClick(Sender: TObject);
    procedure DBGrid4DblClick(Sender: TObject);
  private
    { Private declarations }
    procedure IncluirMesa;
    procedure ExcluirMesa;

    procedure MostraMesas(pOrcChave: integer);
    function consultamesa(vMesa: integer): boolean;

  public
    { Public declarations }
    vpOrcChave: integer;
  end;

var
  FrmJuncaoMesa: TFrmJuncaoMesa;

implementation

uses
  UntDmDados, UntPrincipal;

{$R *.dfm}

procedure TFrmJuncaoMesa.BtnCardRetornarClick(Sender: TObject);
begin
  with Dmdados do
  begin
    unm.Close;
    unm.Params[0].AsInteger := 0;
    unm.Open;
    if not vtmsajuncao.IsEmpty then
    begin
      vtmsajuncao.First;
      while not vtmsajuncao.eof do
      begin
        unm.Append;
        unmorcchave.AsInteger := orcorcchave.AsInteger;
        unmunmmesa.AsInteger := vtmsajuncaoid.AsInteger;
        unm.Post;
        vtmsajuncao.Next;
      end;

      if Dmdados.vtmsajuncao.Active then
      begin
        vtmsajuncao.EmptyDataSet;
      end;
      try

        unm.ApplyUpdates();

        ShowMessage('Junção de Mesas realizada com sucesso !');
        Close;
      except

        ShowMessage('Ocorreu um erro ao tentar fazer junção das mesas, verifique !');
      end;
    end;
  end;
end;

procedure TFrmJuncaoMesa.BtnExcSaboresClick(Sender: TObject);
begin
  if not Dmdados.vtmsajuncao.IsEmpty then
    ExcluirMesa;
end;

procedure TFrmJuncaoMesa.BtnIncSaboresClick(Sender: TObject);
begin
  if not Dmdados.vtmesa.IsEmpty then
    IncluirMesa;

end;

procedure TFrmJuncaoMesa.Button2Click(Sender: TObject);
begin
  Close;
end;

procedure TFrmJuncaoMesa.DBGrid4DblClick(Sender: TObject);
begin
  if not Dmdados.vtmesa.IsEmpty then
    ExcluirMesa;
end;

procedure TFrmJuncaoMesa.DBGridMesasDblClick(Sender: TObject);
begin
  if not Dmdados.trfmesa.IsEmpty then
    IncluirMesa;
end;

procedure TFrmJuncaoMesa.ExcluirMesa;
var
  vRecNo: integer;
begin
  with Dmdados do
  begin
    if not vtmsajuncao.IsEmpty then
    begin
      if MessageDlg('* * * * *  A t e n ç ã o  * * * * *' + #13 + #13 + vtmsajuncaomesa.AsString + #13 + 'Deseja realmente tirar da lista de ' +
        Dmdados.Usuario.TituloOperador + ' selecionadas ?', mtConfirmation, [mbYes, mbNo], 0, mbNo) = mrYes then
      begin
        vRecNo := vtmesa.RecNo;

        vtmesa.DisableControls;
        vtmesa.Filtered := False;
        if vtmesa.Locate('id', vtmsajuncaoid.AsInteger, []) then
        begin
          vtmesa.Edit;
          vtmesasel.AsInteger := 0;
          vtmesa.Post;
        end;
        vtmesa.Filtered := True;
        vtmesa.EnableControls;

        vtmsajuncao.Delete;
      end;
    end
    else
      ShowMessage('Não existem itens na comanda, não é possível excluir!');
  end;
end;

procedure TFrmJuncaoMesa.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  if Dmdados.ttro.Active then
    Dmdados.ttro.Close;
  if Dmdados.trfmesa.Active then
    Dmdados.trfmesa.Close;

  if Dmdados.vtmesa.Active then
  begin
    Dmdados.vtmesa.EmptyDataSet;
  end;

  if Dmdados.vtmsajuncao.Active then
  begin
    Dmdados.vtmsajuncao.EmptyDataSet;
  end;

  if Dmdados.vtmesa.Active then
    Dmdados.vtmesa.Close;
  if Dmdados.vtmsajuncao.Active then
    Dmdados.vtmsajuncao.Close;

  LbMesa.Caption := Dmdados.Usuario.TituloOperador;
end;

procedure TFrmJuncaoMesa.FormShow(Sender: TObject);
begin
  Lbtitulo.Caption := 'Junção de ' + Dmdados.Usuario.TituloOperador;

  if not Dmdados.vtmesa.Active then
    Dmdados.vtmesa.Open;

  if not Dmdados.vtmsajuncao.Active then
    Dmdados.vtmsajuncao.Open;

  if Dmdados.vtmesa.Active then
  begin
    Dmdados.vtmesa.EmptyDataSet;
  end;

  if Dmdados.vtmsajuncao.Active then
  begin

    Dmdados.vtmsajuncao.EmptyDataSet;
  end;

  MostraMesas(Dmdados.orcorcchave.AsInteger);
  DBGridMesas.SetFocus;
end;

procedure TFrmJuncaoMesa.IncluirMesa;
begin
  with Dmdados do
  begin
    vtmsajuncao.Append;
    vtmsajuncaoid.AsInteger := vtmesaid.AsInteger;
    vtmsajuncaomesa.AsString := vtmesamesa.AsString;
    vtmsajuncao.Post;

    vtmesa.Edit;
    vtmesasel.AsInteger := 1;
    vtmesa.Post;
  end;
end;

procedure TFrmJuncaoMesa.MostraMesas(pOrcChave: integer);
var
  vPos: integer;
  vSQL: String;
  vlMesaVendaRapida: string;
begin
    Dmdados.vtmesa.close;


  if not Dmdados.vtmesa.Active then
    Dmdados.vtmesa.Open;

  if Dmdados.vtmesa.Active then
  begin
    Dmdados.vtmesa.EmptyDataSet;
  end;



  if (Dmdados.Usuario.MesaVendaRapida <> '') and (Dmdados.Usuario.MesaVendaRapida <> '0') then
  begin
    vlMesaVendaRapida := Dmdados.Usuario.MesaVendaRapida;
  end;

  if vlMesaVendaRapida='' then
    vlMesaVendaRapida:='0';

  try
    for vPos := 1 to Dmdados.Usuario.QtdMesa do
    begin

      if (consultamesa(vPos)) and  (strtoint(vlMesaVendaRapida)<>vpos) then
      begin
          Dmdados.vtmesa.Append;
          Dmdados.vtmesaid.AsInteger := vPos;
          Dmdados.vtmesamesa.AsString := (sonumeros(Dmdados.Usuario.TituloOperador) + ' ' + IntToStr(vPos));
          Dmdados.vtmesasel.AsInteger := 0;
          Dmdados.vtmesa.Post;

      end;
    end;
  except
  on E: Exception do
    begin
    Showmessage( '[' + E.ClassName + ']' + #13 + ' - Erro: ' + E.Message + ']');
    end;
  end;
  // aplicando filtro para mostrar apenas mesas que ainda não foram incluidas
  Dmdados.vtmesa.Filter := 'sel = 0';
  Dmdados.vtmesa.Filtered := True;
  Dmdados.vtmesa.First;
end;

function TFrmJuncaoMesa.consultamesa(vMesa: integer): boolean;
var
  i: integer;
  vScrollBox: TScrollBox;
  vlNomeMesa: string;
  vlNomePanel: string;
begin

  if FPrinciGou.findcomponent('SBMesa') <> nil then
  begin

    vScrollBox := FPrinciGou.findcomponent('SBMesa') as TScrollBox;

    for i := 0 to vScrollBox.ComponentCount - 1 do
    begin

      if (vScrollBox.Components[i] is TPanel) then
      begin
        vlNomeMesa := 'BtnMesa' + IntToStr(vMesa);
        vlNomePanel := (vScrollBox.Components[i] as TPanel).Name;
        if (vScrollBox.Components[i] as TPanel).FindChildControl(vlNomeMesa) <> nil then
        begin
          if ((vScrollBox.Components[i] as TPanel).FindChildControl(vlNomeMesa) as TBitBtn).font.color = clblack then
          begin
            result := True;
          end
          else
          begin
            result := False;
          end;
          break;
        end;
      end;

    end;
  end;
end;

end.
