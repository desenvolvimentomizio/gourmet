unit UntPrincipal;

interface

uses

  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Grids, Vcl.DBGrids, Vcl.StdCtrls,
  Vcl.themes, uRecordsTEF, ufltePDVTEF,
  Vcl.ExtCtrls, Vcl.ComCtrls, Data.DB, DBAccess, uni, Vcl.Imaging.jpeg,
  IniFiles, UntPegaUtils,pingsend,
  Vcl.Imaging.pngimage, Vcl.DBCtrls, Vcl.Buttons, Vcl.Menus, System.Actions,
  UntPegaConst, uftransacaoLTETEFAPI,
  Vcl.ActnList, DASQLMonitor, UniSQLMonitor, System.Math, upegabase, ACBrBase,
  ACBrValidador, pcnConversaoNFe,ufstonehide,
  WinSvc, Vcl.Consts, System.ImageList, Vcl.ImgList, PngImageList,
  Winapi.WinInet, Vcl.AppEvnts, psAPI, MemDS, System.DateUtils, ACBrDFe, ACBrNFe
  ;

const

  SOKButton = 'OK';
  SCancelButton = '&Cancela';
  SYesButton = '&Sim';
  SNoButton = '&Não';
  SHelpButton = '&Ajuda';
  SCloseButton = '&Fecha';
  SIgnoreButton = '&Ignora';
  SRetryButton = '&Retenta';
  SAbortButton = 'Aborta';
  SAllButton = '&Todos';

  //
  // Service Types
  //
  SERVICE_KERNEL_DRIVER = $00000001;
  SERVICE_FILE_SYSTEM_DRIVER = $00000002;
  SERVICE_ADAPTER = $00000004;
  SERVICE_RECOGNIZER_DRIVER = $00000008;

  SERVICE_DRIVER = (SERVICE_KERNEL_DRIVER or SERVICE_FILE_SYSTEM_DRIVER or SERVICE_RECOGNIZER_DRIVER);

  SERVICE_WIN32_OWN_PROCESS = $00000010;
  SERVICE_WIN32_SHARE_PROCESS = $00000020;
  SERVICE_WIN32 = (SERVICE_WIN32_OWN_PROCESS or SERVICE_WIN32_SHARE_PROCESS);

  SERVICE_INTERACTIVE_PROCESS = $00000100;

  SERVICE_TYPE_ALL = (SERVICE_WIN32 or SERVICE_ADAPTER or SERVICE_DRIVER or SERVICE_INTERACTIVE_PROCESS);

const

  (* Situação do Orçamento - stocodigo *)
  stoEmDigitacao = 1;
  stoEmAberto = 2;
  stoVendido = 3;
  stoEmCaixa = 4;
  stoEmFechamento = 5;
  stoUnificado = 6;
  stoRetornado = 8;
  stoCancelado = 88;

  (* Modo do Orçamento - moccodigo *)
  mocNovoRegistro = 0;
  mocOrcamento = 1;
  mocCondicional = 2;
  mocOrdemServico = 3;
  mocAFaturar = 4;
  mocMesa = 5;
  mocPrisma = 6;
  mocDelivery = 7;
  mocEntrega = 9;

type

  TGroupBox = class(Vcl.StdCtrls.TGroupBox)
    // declare this before of your form definition
  public

    procedure Paint; override;
  end;

  TFPrinciGou = class(TForm)
    Panel2: TPanel;
    Panel3: TPanel;
    PnSuperior: TPanel;
    Panel4: TPanel;
    Panel6: TPanel;
    Panel13: TPanel;
    Panel7: TPanel;
    LbMesa: TLabel;
    PCMesa: TPageControl;
    TabItens: TTabSheet;
    TabCardapio: TTabSheet;
    DBGrid1: TDBGrid;
    Panel12: TPanel;
    LbItemGeral: TLabel;
    PnCozinha: TPanel;
    LbCozinha: TLabel;
    TmCozinha: TTimer;
    Panel5: TPanel;
    BtnCardRetornar: TButton;
    Panel9: TPanel;
    Panel10: TPanel;
    Panel11: TPanel;
    LbOpcoes: TLabel;
    DBGrid3: TDBGrid;
    PnSabores: TPanel;
    Panel14: TPanel;
    LbIngredientes: TLabel;
    Panel15: TPanel;
    DBGrid4: TDBGrid;
    MemIngredientes: TMemo;
    dproc: TUniDataSource;
    PnLeft: TPanel;
    PnMesas: TPanel;
    pnInfoTopo: TPanel;
    GBdescmax: TGroupBox;
    LbDescMaximo: TLabel;
    pversao: TPanel;
    LbVersao: TLabel;
    lbtitversao: TLabel;
    GroupBox3: TGroupBox;
    LbHost: TLabel;
    GroupBox7: TGroupBox;
    LbEmpresa: TLabel;
    GroupBox13: TGroupBox;
    LbDados: TLabel;
    GBTerminal: TGroupBox;
    LbTerminal: TLabel;
    GBModoNFs: TGroupBox;
    LbModoNFe: TLabel;
    GBCaixa: TGroupBox;
    plAgora: TPanel;
    LbData: TLabel;
    LbColaborador: TLabel;
    LbOrcChave: TLabel;
    Panel8: TPanel;
    Label1: TLabel;
    dGrp: TUniDataSource;
    Panel16: TPanel;
    LbItemQtde: TLabel;
    Panel17: TPanel;
    PUMenuRelatorios: TPopupMenu;
    TmMesa: TTimer;
    Acoes: TActionList;
    ActAbreCaixa: TAction;
    ActFechaCaixa: TAction;
    ActSangria: TAction;
    ActSuprimento: TAction;
    ActImprimeCaixa: TAction;
    ActFechaMesa: TAction;
    LbRecebido: TLabel;
    PnOperacoes: TPanel;
    GBCaixaVar: TGroupBox;
    SBAbertura: TSpeedButton;
    SBRetirada: TSpeedButton;
    SBFechamento: TSpeedButton;
    SBSuprimento: TSpeedButton;
    SBImpFechamento: TSpeedButton;
    GBUtilitarios: TGroupBox;
    SBTransfMesa: TSpeedButton;
    SBReabreMesa: TSpeedButton;
    SBPedido: TSpeedButton;
    SBJuntarMesas: TSpeedButton;
    ActJuntarMesas: TAction;
    ActTranferirMesas: TAction;
    ActIniciaFechamento: TAction;
    ActReemissaoFechamento: TAction;
    LbItemDesconto: TLabel;
    LbItemTotal: TLabel;
    LbReceber: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    Panel22: TPanel;
    LbOperador: TLabel;
    Panel23: TPanel;
    Panel24: TPanel;
    Panel25: TPanel;
    EdtOperador: TEdit;
    Panel26: TPanel;
    Panel27: TPanel;
    Label12: TLabel;
    Panel28: TPanel;
    Panel29: TPanel;
    Panel30: TPanel;
    EdtProduto: TEdit;
    DBGrid2: TDBGrid;
    Label5: TLabel;
    Panel36: TPanel;
    Label13: TLabel;
    Panel31: TPanel;
    Panel33: TPanel;
    Label15: TLabel;
    Panel34: TPanel;
    Label16: TLabel;
    Panel32: TPanel;
    Label14: TLabel;
    ActReabirMesa: TAction;
    SBImpComanda: TSpeedButton;
    SbRecebimentos: TSpeedButton;
    ActReceberDelivery: TAction;
    ActReceberConvenio: TAction;
    SpeedButton2: TSpeedButton;
    ActExcluirJuncao: TAction;
    Panel18: TPanel;
    Label2: TLabel;
    Panel20: TPanel;
    Panel21: TPanel;
    EdtCodprod: TEdit;
    ActGaveta: TAction;
    ActCancelaItem: TAction;
    ActCancelaTodos: TAction;
    lbFilial: TLabel;
    lbCaixa: TLabel;
    ACBrValidador: TACBrValidador;
    Image1: TImage;
    ActVendaRapida: TAction;
    SbVendaRapida: TSpeedButton;
    GBSalvar: TGroupBox;
    plImp: TPanel;
    ListaImagemMesas: TPngImageList;
    btBuscaERP: TButton;
    Image2: TImage;
    ActReimprimeNFCe: TAction;
    SpeedButton3: TSpeedButton;
    SpeedButton5: TSpeedButton;
    ActReimprimirComprovantes: TAction;
    LbReceberTaxa: TLabel;
    LbCapReceberTaxa: TLabel;
    plDBGridItoRec: TPanel;
    DBGridItoRec: TDBGrid;
    Panel1: TPanel;
    ApplicationEvents1: TApplicationEvents;
    ActiCancelarDelivery: TAction;
    verhorario: TUniQuery;
    horario: TLabel;
    LbItemTotalGeral: TLabel;
    Label4: TLabel;
    Label3: TLabel;
    LbItensRecebido: TLabel;
    Label6: TLabel;
    lbhoraatualizacao: TLabel;
    lbmemoria: TLabel;
    ACBrNFeNotas: TACBrNFe;
    plmesasemfechamento: TPanel;
    ActDesconto: TAction;
    GBFuncoes: TGroupBox;
    SBCancelaItem: TSpeedButton;
    SBProduto: TSpeedButton;
    SBFechaMesa: TSpeedButton;
    SBIniciarFechamento: TSpeedButton;
    SBSair: TSpeedButton;
    SBCancelaPedido: TSpeedButton;
    SdReceberConvenio: TSpeedButton;
    SpeedButton1: TSpeedButton;
    imStoneonLine: TImage;
    ActFechaRefeicao: TAction;
    SpeedButton4: TSpeedButton;
    procedure FormShow(Sender: TObject);
    procedure TmCozinhaTimer(Sender: TObject);
    procedure BtnCardRetornarClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure dprocDataChange(Sender: TObject; Field: TField);
    procedure DBGrid3DblClick(Sender: TObject);
    procedure SBSairClick(Sender: TObject);
    procedure SBProdutoClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure dGrpDataChange(Sender: TObject; Field: TField);
    procedure DBGrid3KeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure DBGrid4KeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure DBGrid2KeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure DBGrid1KeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure DBGrid2DblClick(Sender: TObject);
    procedure DBGrid2KeyPress(Sender: TObject; var Key: Char);
    procedure TmMesaTimer(Sender: TObject);
    procedure SBImpComandaClick(Sender: TObject);
    procedure FormMouseWheel(Sender: TObject; Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint; var Handled: Boolean);
    procedure ActAbreCaixaExecute(Sender: TObject);
    procedure ActFechaMesaExecute(Sender: TObject);
    procedure ActSuprimentoExecute(Sender: TObject);
    procedure ActSangriaExecute(Sender: TObject);
    procedure ActFechaCaixaExecute(Sender: TObject);
    procedure ActImprimeCaixaExecute(Sender: TObject);
    procedure SBPedidoClick(Sender: TObject);
    procedure DBGrid1DblClick(Sender: TObject);
    procedure ActJuntarMesasExecute(Sender: TObject);
    procedure ActTranferirMesasExecute(Sender: TObject);
    procedure BtnTesteClick(Sender: TObject);
    procedure ActIniciaFechamentoExecute(Sender: TObject);
    procedure ActReemissaoFechamentoExecute(Sender: TObject);
    procedure lbtitversaoDblClick(Sender: TObject);
    procedure EdtOperadorKeyPress(Sender: TObject; var Key: Char);
    procedure EdtOperadorEnter(Sender: TObject);
    procedure TabCardapioShow(Sender: TObject);
    procedure EdtProdutoEnter(Sender: TObject);
    procedure EdtProdutoKeyPress(Sender: TObject; var Key: Char);
    procedure ActReabirMesaExecute(Sender: TObject);
    procedure EdtOperadorExit(Sender: TObject);
    procedure ActReceberDeliveryExecute(Sender: TObject);
    procedure LbVersaoClick(Sender: TObject);
    procedure TabItensShow(Sender: TObject);
    procedure EdtCodprodKeyPress(Sender: TObject; var Key: Char);
    procedure EdtCodprodEnter(Sender: TObject);
    procedure EdtCodprodExit(Sender: TObject);
    procedure EdtProdutoExit(Sender: TObject);
    procedure DBGrid1CellClick(Column: TColumn);
    procedure ActGavetaExecute(Sender: TObject);
    procedure EdtProdutoKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure DBGrid2KeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure DBGrid3KeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure DBGrid2Enter(Sender: TObject);
    procedure DBGrid2Exit(Sender: TObject);
    procedure DBGrid3Exit(Sender: TObject);
    procedure DBGrid3Enter(Sender: TObject);
    procedure DBGrid3KeyPress(Sender: TObject; var Key: Char);
    procedure ActCancelaItemExecute(Sender: TObject);
    procedure ActCancelaTodosExecute(Sender: TObject);
    procedure ActReceberConvenioExecute(Sender: TObject);
    procedure AcoesExecute(Action: TBasicAction; var Handled: Boolean);
    procedure ActExcluirJuncaoExecute(Sender: TObject);
    procedure Image1Click(Sender: TObject);
    procedure ActVendaRapidaExecute(Sender: TObject);
    procedure btBuscaERPClick(Sender: TObject);
    procedure ActReimprimeNFCeExecute(Sender: TObject);
    procedure ActReimprimirComprovantesExecute(Sender: TObject);
    procedure ApplicationEvents1Message(var Msg: tagMSG; var Handled: Boolean);
    procedure DBGridItoRecKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure ActiCancelarDeliveryExecute(Sender: TObject);
    procedure DBGridResumoitensKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure DBGrid1TitleClick(Column: TColumn);
    procedure FormActivate(Sender: TObject);
    procedure ApplicationEvents1Activate(Sender: TObject);
    procedure FormDblClick(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure FormResize(Sender: TObject);
    procedure ActDescontoExecute(Sender: TObject);
    procedure ActFechaRefeicaoExecute(Sender: TObject);
    procedure FormClick(Sender: TObject);
    procedure FormAlignPosition(Sender: TWinControl; Control: TControl;
      var NewLeft, NewTop, NewWidth, NewHeight: Integer; var AlignRect: TRect;
      AlignInfo: TAlignInfo);
    procedure FormPaint(Sender: TObject);

  private
    { Private declarations }
    vpVendaRapida: Boolean;
    vpPackNFCe: Cardinal;
    FWebOnLine: Boolean;
    FAcesso: Integer;

    procedure CarregaMesa;
    procedure VerificaMesa;
    procedure ConsultaMesa;
    procedure CalculaRecebimentos(vorcchave: string);
    procedure AjustaBotoes(pEnabled: Boolean);
    procedure GeraMesa(Panel: TPanel; QtdPanel, Pos: Integer);
    procedure EventoBtnClick(Sender: TObject);
    procedure ImprimeResumo(pOrcChave: Integer; pOrigem: Integer = 1);
    procedure MostraTab(Tab: TTabSheet);
    procedure BuscaOpcoes;
    procedure MostraItens;
    procedure IncluirItemFracionado;
    procedure IncluirItem;
    procedure CarregaUsuario;
    procedure LimpaMesa;
    procedure AbreMesa(pNumMesa: Integer);
    procedure MontaMenuRelatorios;
    procedure ChamaRelatorio(Sender: TObject);
    procedure ImprimirComprovantesCCX(vTocCodigo: Integer);
    procedure ApresentaItem(pOrcChave, pItoChave: Integer);
    procedure AlteraFonte(pObjeto: TRichEdit; pTamanho: Integer; pTipo: TFontStyle; pCor: TColor);

    function VerificaCozinha: Boolean;
    function Logarsistema: Boolean;
    function VersaoExe(Const FileNAme: String): String;
    function ImprimeRelatorio(varquivo: string): string;
    function RegistraOperacaoCaixa(vTocCodigo: Integer): string;
    procedure ItemFracionado(pGrupo: Integer);
    procedure IncluirItemComum(vBarra: String = ''; vQuantidade: Double = 1);
    function mostralista(pModulo, pUsuario: string; pFiltro: string): string;
    procedure BuscaProdutoVendaRapida(CodPro: Integer; vBarra: String = ''; vQuantidade: Double = 1);
    procedure BuscaProduto(CodPro: Integer; vBarra: String = ''; vQuantidade: Double = 1);

    procedure ImprimeEntrega(pOrcChave: Integer);
    procedure SetAcesso(const Value: Integer);
    function ComunicarECF(vfuncao, vTrmCodigo, vmeschave: string): Boolean;

    procedure RegistraTaxaServico(vValorConta: Double);
    procedure CriaAcoesDeAcesso;
    procedure AtribuiTagAcesso;
    function BuscaAtendimentos(Modo: Integer): String;
    function CarregaFrame(pacote: string; destino: TPanel; conexao: tuniconnection): thandle;
    procedure AjustaQuantidade(Quantidade: Double);

    function ListaComprovantes: Boolean;
    function ListaNFCE: Boolean;
    function RegistroAcessoOperacao(vactcodigo, vMotivo: string; vtabela: string = ''; vregistro: string = ''): Boolean;
    procedure AjustaCodigoCozinha;
    procedure EstadoMemoria;
    procedure AtualizaMesas;
    procedure VerificaValidadeCertificado;
    function LerConfiguracao: Boolean;
    procedure Incluir(vBarra: String = ''; vQuantidade: Double = 1);
    function LoteAtivaTEF: boolean;
    procedure CarregaDadosConfiguracaoTEF;
    procedure DadosConfiguracao;
    function GetHoraAtual: TTime;
    function ConsultaAtivaPDVTEF(AOwner: TComponent; aZcone: tuniconnection;  aAcesso: TAcesso): Boolean;
    function EnviaPagamentoHide(aOrcMesa:String; pOrcChave: Integer): Boolean;

    procedure CancelaRecebimentoStone;
    procedure MostraRecebimentoStone(aMesa:string;aorcchave:Integer);
    function MostraPainelRecebimentoStone(aMesa:String; aPedido:String; aValor:Currency; aBotao:TBitBtn; aToken:String):boolean;
    function AtualizaPainelRecebimentoStone(affrmstonehide:Tfstonehide;aMesa: String;      aValor: Currency): Boolean;
    function CalculaRecebimentosStone(vorcchave: string): Currency;
    procedure VerificaIntegracaoPagarme;
    procedure ConfimaRecebimentoStone;
    procedure IncluirItemRefeicao;

  Var

    c: Integer;
    vpMesaGer: Integer;
    vpTotal: Extended;
    vpTotalOutras: Extended;
    vpTotalTaxas: Extended;

    vpRecebimentos: Extended;
    vpDesconto: Extended;
    vpSQL: String;

    VCBarra: String;
    vpOrcDelChave: String;
    vpEtdCodigo: Integer;
  protected
  //  procedure CreateParams(var Params: TCreateParams); override;

  public

    RegAcesso: TAcesso;
    vpPOdeFechar: Boolean;

    fDocumentoFiscal: String;
    fOperador: String;

    vpLarguraTela: Integer;
    vpAlturaTela: Integer;

    fTeclaFinalizador: Integer;
    fValorFinalizador: Currency;

    fMdaCodigo: Integer;
    fMdaIdentificacao: String;

    fEtdCodigo:Integer;
    fEtdCodigoConvenio:Integer;
    fEdritem:Integer;
    fEdrCodigo:Integer;

    fEtdIdenticicacao: String;

    fMesChave:String;
    fOrcChave:String;

    fCcoChave:String;


    Fzcone: tuniconnection;
    FDataAtual: TDate;
    FContaCaixa: Integer;
    FContaPIX: Integer;
    FCcxchave: Integer;
    fusacre: Integer;
    FUsaAdc: Integer;
    fTEFAtivo: Boolean;
    fcontrolalimite: Integer;

    FCodigoADC: Integer;
    FAdquirenteADC: String;
    FContaADC: Integer;
    FEntidadeADC: Integer;

    festabelecimentotipotef:string;
    festabelecimentocnpj:string;
    festabelecimentorazaosocial:string;
    fterminalcodempresa:string;
    fterminalcodfilial:string;
    fterminalcodterminal:string;
    fterminalenderecoservidor:string;
    fterminalportapinpad:string;

    flteChave:string;
    flteprincipal: currency;
    fltedesconto: currency;
    flteliquido: currency;
    fltetroco: currency;
    flterecebido: currency;

    fdtlChave:Integer;
    fTdfCodigo:String;

    fConfiguracaoTEF: TConfiguracaoTEF;


    fCPFnaNota: String;
    fStatusVenda: TStatusVenda;

    vpPackPDV: cardinal;
    vpPodeTEF:Boolean;

    vpTeclaFinalizador:Integer;
    vpValorFinalizador:Double;
    vpEdritem:String;
    vpimprimeDAV:String;
    vpImprimiuDAV:Boolean;
    vpImprimiuNFE:Boolean;
    vpImprimiuNFCe:Boolean;



    vpacknfe: Cardinal;

    vpMesaAtual: Integer;
    vpTaxa: String;
    vpImprimeResumo: string;
    vpPackIpo: Cardinal;
    vpProcodigo: String;
    vpTerminal: Integer;
    vpUsaBalanca: Boolean;
    pack: Integer;
    AcessoRec: TAcesso;
    vlPackECF: Cardinal;
    vpCznChave: String;
    vpCznDataAbertura: String;

    vpCcxChave: string;
    vpReimprimeCcxChave: string;
    vpOrcChave: String;
    vpSbrCodigo: Integer;
    vpQuantidade: Double;
    vScrollBox: TScrollBox;
    function AbreGavetaNF: Boolean;
    procedure VerAtualizacao(pacote: string);
    function Autorizado(pAction: TAction; pMotivo: String): Boolean;
    procedure ImprimirTicket(vOrchave: string; vTickets: string);
  published

    property Acesso: Integer read FAcesso write SetAcesso;
    property WebOnLine: Boolean read FWebOnLine write FWebOnLine;

    property CodigoADC: Integer read FCodigoADC write FCodigoADC;
    property AdquirenteADC: String read FAdquirenteADC write FAdquirenteADC;
    property ContaADC: Integer read FContaADC write FContaADC;
    property EntidadeADC: Integer read FEntidadeADC write FEntidadeADC;


    property DataAtual: TDate read FDataAtual write fDataAtual;
    property HoraAtual: TTime read GetHoraAtual;
    property ContaCaixa: Integer read FContaCaixa write FContaCaixa;
    property ContaPIX: Integer read FContaPIX write FContaPIX;


    property UsaCre: Integer read FUsaCre write FUsaCre;
    property UsaAdc: Integer read FUsaAdc write FUsaAdc;
    property ControlaLimite: Integer read FControlaLimite write FControlaLimite;

    property estabelecimentocnpj: String read festabelecimentocnpj write festabelecimentocnpj;
    property estabelecimentorazaosocial: String read festabelecimentorazaosocial write festabelecimentorazaosocial;

    property estabelecimentotipotef:string read festabelecimentotipotef write festabelecimentotipotef;
    property terminalcodempresa:string read fterminalcodempresa write fterminalcodempresa;
    property terminalcodfilial:string read fterminalcodfilial write fterminalcodfilial;
    property terminalcodterminal:string read fterminalcodterminal write fterminalcodterminal;
    property terminalenderecoservidor:string read fterminalenderecoservidor write fterminalenderecoservidor;
    property terminalportapinpad:string read fterminalportapinpad write fterminalportapinpad;

    property lteprincipal: currency  read flteprincipal write flteprincipal;
    property ltedesconto: currency  read fltedesconto write fltedesconto;
    property lteliquido: currency  read flteliquido write flteliquido;
    property ltetroco: currency  read fltetroco write fltetroco;
    property lterecebido: currency  read flterecebido write flterecebido;

    property DtlChave: Integer read fDtlChave write fDtlChave;
    property TdfCodigo: String read fTdfCodigo write fTdfCodigo;

    property CPFnaNota: String read fCPFnaNota write fCPFnaNota;
    property StatusVenda: TStatusVenda read fStatusVenda write fStatusVenda;
    property DocumentoFiscal: String read fDocumentoFiscal write fDocumentoFiscal;
    property Operador: String read fOperador write fOperador;


    { Public declarations }
    // vpTrmCodigo: String;
    // function mrfrImprimir(Dados: TUniDataSource; DirRelatorio: String; TipoImpressao: Integer): String;

  end;

  TComunicaECF = function(AOwner: TComponent; conexao: tuniconnection; trmcodigo: string; meschave: string; comando: string): Boolean;

  TBuscaItens = Function(AOwner: TComponent; conexao: tuniconnection; Acesso: TAcesso; Moccodigo: Integer; Vchave: String): String;

  TCarregaOrc = function(AOwner: TComponent; conexao: tuniconnection; pOrcChave: string; pMesChave: string; pAcesso: TAcesso;
    AFaturar: Boolean = False): string;
  TMoniImp = function(AOwner: TComponent; Parente: TWinControl; conexao: tuniconnection; vCznChave: string): TFrame;

  TliberacaoRFI = function(AOwner: TComponent; conexao: tuniconnection; vusuario: string; vactcodigo: string; vMotivo: string;
    vtdecodigo, vorcchave, vmeschave: String; vltecodigo, vddfcodigo: String; vForcaLogin: Boolean = False; vtabela: string = '';
    vregistro: string = ''): string;



var
  FPrinciGou: TFPrinciGou;
  ftransacaoTEF: TftransacaoTEFAPI;
  LastTick: DWORD;

implementation

uses
  UntDmDados, UntIngredienteComum, UntIngredienteFracionado, UntJuncaoMesa,
  UntIngredienteIndividual, UntTranfereMesa, UntCancelaItem, UntFinalizaMesa,
  UntVisualizarItem, UntResumoPessoa, UntReemissaoFechamento,
  UntIngredientePesado,  UntDmScripts, uBuscaProduto,
  UntListaCaixas, UntVendaRapida, ACBrDFeSSL, UntDesconto, ufRefeicao;

// construtor / exportação de procedure

function GetAppVersionStr(arq: string): string;
var
  Exe: string;
  Size, Handle: DWORD;
  Buffer: TBytes;
  FixedPtr: PVSFixedFileInfo;
begin
  try
    Exe := ParamSTR(0);
    Size := GetFileVersionInfoSize(PChar(arq), Handle);
    if Size = 0 then
      RaiseLastOSError;
    SetLength(Buffer, Size);
    if not GetFileVersionInfo(PChar(arq), Handle, Size, Buffer) then
      RaiseLastOSError;
    if not VerQueryValue(Buffer, '\', Pointer(FixedPtr), Size) then
      RaiseLastOSError;

    { result := Format('%d.%s.%s.%s', [LongRec(FixedPtr.dwFileVersionMS).Hi, // major
      formatfloat('00', LongRec(FixedPtr.dwFileVersionMS).Lo), // minor
      formatfloat('000', LongRec(FixedPtr.dwFileVersionLS).Hi), // release
      formatfloat('0000', LongRec(FixedPtr.dwFileVersionLS).Lo)]); // build }

    result := Format('%d.%d.%d.%d', [LongRec(FixedPtr.dwProductVersionMS).Hi, // major
      LongRec(FixedPtr.dwProductVersionMS).Lo, // minor
      LongRec(FixedPtr.dwProductVersionLS).Hi, // release
      LongRec(FixedPtr.dwProductVersionLS).Lo]) // build

    { LongRec(FixedPtr.dwFileVersionLS).Hi,  //release
      LongRec(FixedPtr.dwFileVersionLS).Lo] }

  except
    result := '0.0.0.0';
  end;
end;

Function SoNumeros(Const Texto: String): String;

//
// Remove caracteres de uma string deixando apenas numeros
//
Var
  I: Integer;
  S: String;
Begin
  S := '';
  For I := 1 To Length(Texto) Do
  Begin
    If (Texto[I] In ['0' .. '9']) Then
    Begin
      S := S + Copy(Texto, I, 1);
    End;
  End;
  result := S;
End;


procedure TrimAppMemorySize;
var
  MainHandle: thandle;
begin
  try
    MainHandle := OpenProcess(PROCESS_ALL_ACCESS, False, GetCurrentProcessID);
    SetProcessWorkingSetSize(MainHandle, $FFFFFFFF, $FFFFFFFF);
    CloseHandle(MainHandle);

  except
  end;
//  Application.ProcessMessages;
end;

procedure MainForm(AOwner: TApplication);
begin
  FPrinciGou := TFPrinciGou.Create(AOwner);
end;

exports MainForm;

{$R *.dfm}

type
  { expor propriedades e metodso privadas e protegindos do dbgrid }
  TFriendly = class(TCustomDBGrid);
  TCellGrid = class(TCustomGrid);

  { TGroupBox }

  // Get the service key name that is
  // associated with a specified
  // service's display name
  // ie: 'Browser' is the key name for
  // 'Computer Browser'
  //
  // sMachine:
  // machine name, ie: \SERVER
  // empty = local machine
  //
  // sService
  // service display name,
  // ie: 'Computer Browser'

  //
function ServiceGetKeyName(sMachine, sServiceDispName: string): string;
var
  //
  // service control
  // manager handle
  schm: SC_Handle;

  //
  // max key name len
  nMaxNameLen: Cardinal;

  //
  // temp. string
  psServiceName: PChar;
begin
  result := '';

  // expect a service key
  // name shorter than 255
  // characters
  nMaxNameLen := 255;

  // connect to the service
  // control manager
  schm := OpenSCManager(PChar(sMachine), Nil, SC_MANAGER_CONNECT);

  // if successful...
  if (schm > 0) then
  begin
    psServiceName := StrAlloc(nMaxNameLen + 1);

    if (nil <> psServiceName) then
    begin

      if (GetServiceKeyName(schm, PChar(sServiceDispName), psServiceName, nMaxNameLen)) then
      begin
        psServiceName[nMaxNameLen] := #0;

        result := StrPas(psServiceName);
      end;

      StrDispose(psServiceName);
    end;

    // close service control
    // manager handle
    CloseServiceHandle(schm);
  end;
end;

function MemoryUsed: Cardinal;
var
  MemCounters: TProcessMemoryCounters;
begin
  MemCounters.cb := SizeOf(MemCounters);
  if GetProcessMemoryInfo(GetCurrentProcess, @MemCounters, SizeOf(MemCounters)) then
    result := MemCounters.WorkingSetSize
  else
    RaiseLastOSError;
end;
{
  function MemoryUsed: Cardinal;
  var
  st: TMemoryManagerState;
  sb: TSmallBlockTypeState;
  begin
  GetMemoryManagerState(st);
  Result := st.TotalAllocatedMediumBlockSize + st.TotalAllocatedLargeBlockSize;
  for sb in st.SmallBlockTypeStates do
  begin
  result :=  st.TotalAllocatedMediumBlockSize * st.AllocatedMediumBlockCount
  + st.TotalAllocatedLargeBlockSize * st.AllocatedLargeBlockCount;

  end;
  end; }

procedure TGroupBox.Paint;
var
  H: Integer;
  R: TRect;
  Flags: Longint;
  CaptionRect, OuterRect: TRect;
  Size: TSize;
  Box: TThemedButton;
  Details: TThemedElementDetails;
begin
  with Canvas do
  begin
    Font := Self.Font;

    if ThemeControl(Self) then
    begin
      if Text <> '' then
      begin
        GetTextExtentPoint32(Handle, PChar(Text), Length(Text), Size);
        CaptionRect := Rect(0, 0, Size.cx, Size.cy);
        if not UseRightToLeftAlignment then
          OffsetRect(CaptionRect, 8, 0)
        else
          OffsetRect(CaptionRect, Width - 8 - CaptionRect.Right, 0);
      end
      else
        CaptionRect := Rect(0, 0, 0, 0);

      OuterRect := ClientRect;
      OuterRect.Top := (CaptionRect.Bottom - CaptionRect.Top) div 2;
      with CaptionRect do
        ExcludeClipRect(Handle, Left, Top, Right, Bottom);
      if Enabled then
        Box := tbGroupBoxNormal
      else
        Box := tbGroupBoxDisabled;
      Details := ThemeServices.GetElementDetails(Box);
      // Draw the themed frame
      ThemeServices.DrawElement(Handle, Details, OuterRect);
      SelectClipRgn(Handle, 0);
      if Text <> '' then
      begin
        Font.Name := 'Tahoma';
        Font.Size := 9;
        Font.Style := [fsBold];
        H := TextHeight('0');
        if not UseRightToLeftAlignment then
          R := Rect(8, 0, 0, H)
        else
          R := Rect(R.Right - Canvas.TextWidth(Text) - 8, 0, 0, H);
        Flags := DrawTextBiDiModeFlags(DT_SINGLELINE);
        // Now using the Windows.DrawText
        DrawText(Handle, PChar(Text), Length(Text), R, Flags or DT_CALCRECT);
        if Tag > 0 then
          Font.Color := clwhite; // background color of the caption

        Brush.Color := Color; // background color of the caption
        DrawText(Handle, PChar(Text), Length(Text), R, Flags);
      end;
    end
    else
      inherited;
    // if the control is not themed then use the original paint method.
  end;

end;

// -------------------------------------
// Get a list of services
//
// return TRUE if successful
//
// sMachine:
// machine name, ie: \\SERVER
// empty = local machine
//
// dwServiceType
// SERVICE_WIN32,
// SERVICE_DRIVER or
// SERVICE_TYPE_ALL
//
// dwServiceState
// SERVICE_ACTIVE,
// SERVICE_INACTIVE or
// SERVICE_STATE_ALL
//
// slServicesList
// TStrings variable to storage
//

function pubNomeComputador: string;
const
  MAX_COMPUTER_LENGTH = 30;
var
  pNome: PChar;
  len: DWORD;
begin
  try
    len := MAX_COMPUTER_LENGTH + 1;
    GetMem(pNome, len);
    if GetComputerName(pNome, len) then
      result := pNome
    else
      result := 'Não foi possível obter o nome deste computador!';
  finally
    FreeMem(pNome, len);
  end;
end;



// Para inciar: ServiceStart('nome_do_computador', 'nome_do_servico');
// Para Parar: ServiceStop('nome_do_computador', 'nome_do_servico');

// ServiceStop(pubNomeComputador,'Spooler');
// ServiceStart(pubNomeComputador,'Spooler');

//
// start service
//
// return TRUE if successful
//
// sMachine:
// machine name, ie: \SERVER
// empty = local machine
//
// sService
// service name, ie: Alerter
//
function ServiceStart(sMachine, sService: string): Boolean;
var
  //
  // service control
  // manager handle
  schm,
  //
  // service handle
  schs: SC_Handle;
  //
  // service status
  ss: TServiceStatus;
  //
  // temp char pointer
  psTemp: PChar;
  //
  // check point
  dwChkP: DWORD;
begin
  ss.dwCurrentState := 0;
  // connect to the service
  // control manager
  schm := OpenSCManager(PChar(sMachine), Nil, SC_MANAGER_CONNECT);
  // if successful...
  if (schm > 0) then
  begin
    // open a handle to
    // the specified service
    schs := OpenService(schm, PChar(sService),
      // we want to
      // start the service and
      SERVICE_START or
      // query service status
      SERVICE_QUERY_STATUS);
    // if successful...
    if (schs > 0) then
    begin
      psTemp := Nil;
      if (StartService(schs, 0, psTemp)) then
      begin
        // check status
        if (QueryServiceStatus(schs, ss)) then
        begin
          while (SERVICE_RUNNING <> ss.dwCurrentState) do
          begin
            //
            // dwCheckPoint contains a
            // value that the service
            // increments periodically
            // to report its progress
            // during a lengthy
            // operation.
            //
            // save current value
            //
            dwChkP := ss.dwCheckPoint;
            //
            // wait a bit before
            // checking status again
            //
            // dwWaitHint is the
            // estimated amount of time
            // the calling program
            // should wait before calling
            // QueryServiceStatus() again
            //
            // idle events should be
            // handled here...
            //
            Sleep(ss.dwWaitHint);
            if (not QueryServiceStatus(schs, ss)) then
            begin
              // couldn't check status
              // break from the loop
              break;
            end;
            if (ss.dwCheckPoint < dwChkP) then
            begin
              // QueryServiceStatus
              // didn't increment
              // dwCheckPoint as it
              // should have.
              // avoid an infinite
              // loop by breaking
              break;
            end;
          end;
        end;
      end;
      // close service handle
      CloseServiceHandle(schs);
    end;
    // close service control
    // manager handle
    CloseServiceHandle(schm);
  end;
  // return TRUE if
  // the service status is running
  result := SERVICE_RUNNING = ss.dwCurrentState;
end;

//
// stop service
//
// return TRUE if successful
//
// sMachine:
// machine name, ie: \SERVER
// empty = local machine
//
// sService
// service name, ie: Alerter
//
function ServiceStop(sMachine, sService: string): Boolean;

var
  //
  // service control
  // manager handle
  schm,
  //
  // service handle
  schs: SC_Handle;
  //
  // service status
  ss: TServiceStatus;
  //
  // check point
  dwChkP: DWORD;
begin
  // connect to the service
  // control manager
  schm := 0;
  schm := OpenSCManager(PChar(sMachine), Nil, SC_MANAGER_CONNECT);
  // if successful...
  if (schm > 0) then
  begin
    // open a handle to
    // the specified service
    schs := OpenService(schm, PChar(sService), SERVICE_STOP);
    // SERVICE_QUERY_STATUS
    // if successful...
    if (schs > 0) then
    begin
      if ControlService(schs, SERVICE_CONTROL_STOP, ss) then
      begin
        // check status
        if (QueryServiceStatus(schs, ss)) then
        begin
          while (SERVICE_STOPPED <> ss.dwCurrentState) do
          begin
            //
            // dwCheckPoint contains a
            // value that the service
            // increments periodically
            // to report its progress
            // during a lengthy
            // operation.
            //
            // save current value
            //
            dwChkP := ss.dwCheckPoint;
            //
            // wait a bit before
            // checking status again
            //
            // dwWaitHint is the
            // estimated amount of time
            // the calling program
            // should wait before calling
            // QueryServiceStatus() again
            //
            // idle events should be
            // handled here...
            //
            Sleep(ss.dwWaitHint);
            if (not QueryServiceStatus(schs, ss)) then
            begin
              // couldn't check status
              // break from the loop
              break;
            end;
            if (ss.dwCheckPoint < dwChkP) then
            begin
              // QueryServiceStatus
              // didn't increment
              // dwCheckPoint as it
              // should have.
              // avoid an infinite
              // loop by breaking
              break;
            end;
          end;
        end;
      end;
      // close service handle
      CloseServiceHandle(schs);
    end;
    // close service control
    // manager handle
    CloseServiceHandle(schm);
  end;
  // return TRUE if
  // the service status is stopped
  result := SERVICE_STOPPED = ss.dwCurrentState;
end;
{
procedure TFPrinciGou.CreateParams(var Params: TCreateParams);
begin
  inherited;
  Params.ExStyle := Params.ExStyle OR WS_EX_APPWINDOW;
end;}

procedure TFPrinciGou.EdtCodprodEnter(Sender: TObject);
begin
  EdtCodprod.Color := $0080FFFF;
  EdtCodprod.Clear;
end;

procedure TFPrinciGou.EdtCodprodExit(Sender: TObject);
begin
  EdtCodprod.Color := clwhite;
end;

Function TFPrinciGou.BuscaAtendimentos(Modo: Integer): String;
Var
  vlBuscaItens: TBuscaItens;
  vNomeRotina: String;
  vlPackBcd: Cardinal;
  vlRetorno: string;
Begin
  if dmdados.orc.Active then
    if (dmdados.orcstocodigo.AsInteger = stoEmDigitacao) and (Modo <> mocMesa) then
    begin
      Application.MessageBox(PChar('Operação não permitida!' + #13 + #13 + 'Conclua o lançamento atual.'), 'Atenção', MB_OK + MB_ICONWARNING);
      Exit;
    end;

  case Modo of
    mocOrcamento:
      vNomeRotina := 'BuscaAtdOrc';
    mocCondicional:
      vNomeRotina := 'BuscaAtdCnd';
    mocEntrega:
      vNomeRotina := 'BuscaAtdEnt';
    mocDelivery:
      vNomeRotina := 'BuscaAtdOrc';
    mocOrdemServico:
      vNomeRotina := 'BuscaAtdOse';
    mocAFaturar:
      vNomeRotina := 'BuscaAtdAfa';
    mocMesa:
      vNomeRotina := 'BuscaMesa';
    mocPrisma:
      vNomeRotina := 'BuscaPrisma';
  end;

  vlPackBcd := LoadPackage('modulos\mbat.bpl');
  If vlPackBcd <> 0 Then
    Try
      @vlBuscaItens := GetProcAddress(vlPackBcd, PChar(vNomeRotina));

      If Assigned(vlBuscaItens) Then
        vlRetorno := vlBuscaItens(Application, dmdados.conexao, AcessoRec, Modo, vpOrcChave);

    Finally
      // DoUnLoadPackage(Application, vlPackBcd);
    End;

  result := vlRetorno;
End;

procedure ApertateclaEnter;
var
  Inp: TInput;
  I: Integer;
begin
  // press
  Inp.Itype := INPUT_KEYBOARD;
  Inp.ki.wVk := 13;
  Inp.ki.dwFlags := 0;
  SendInput(1, Inp, SizeOf(Inp));

  // release
  Inp.Itype := INPUT_KEYBOARD;
  Inp.ki.wVk := 13;
  Inp.ki.dwFlags := KEYEVENTF_KEYUP;
  SendInput(1, Inp, SizeOf(Inp));

//  Application.ProcessMessages;
  Sleep(80);
end;

procedure TFPrinciGou.EdtCodprodKeyPress(Sender: TObject; var Key: Char);
var
  vlOrcChave: String;
  vlPackopm: Cardinal;
  CarregaOrc: TCarregaOrc;
  vlProcodigo: Integer;
  vlValorBalanca: String;
  VCBarraAjustada: String;
  VProduto: Integer;
  vEmbalagem: Integer;
  vVariacao: Integer;
  I: Integer;
  vlNomeMesa: String;
  vlNomePanel: String;

begin
  if not(Key in ['0' .. '9', #8, ',', #13, #27]) then
    Key := #0;

  if Key = #13 then
  begin

   if sonumeros(EdtCodprod.Text)='' then
    begin
      Key := #0;
      Exit
    end;



  if sonumeros(LbMesa.caption)='' then
    begin
      Key := #0;
      Exit
    end;

    if vpMesaAtual = dmdados.Usuario.MesaVendaRapida.ToInteger then
    begin
      Key := #0;
      Exit
    end;

    vpQuantidade := 1;

    VCBarra := EdtCodprod.Text;

    ACBrValidador.Documento := VCBarra;
    if ACBrValidador.Validar = False then
      VCBarra := '';

    Key := #0;
    vEmbalagem := 0;
    vVariacao := 0;

    if Length(EdtCodprod.Text) = 0 then
    begin

      SBProduto.Click;
      if EdtProduto.Visible then
      begin
        if EdtProduto.Enabled then
        begin
          try
            EdtProduto.SetFocus;
            ApertateclaEnter;
          except
          end;
        end;
      end;

    end;

    if not VerificaCozinha then
      Exit;

    if (Copy(VCBarra, 1, 5) = '99999') and (Length(VCBarra) > 10) then
    begin
      ACBrValidador.Documento := VCBarra;

      if ACBrValidador.Validar = False then
      begin
        Showmessage('Falha de Leitura!');
        EdtCodprod.Text := '';
        VCBarra := '';

        Exit;
      end;

      vpOrcDelChave := Copy(VCBarra, 6, 7);

      for I := 0 to vScrollBox.ComponentCount - 1 do
      begin

        if (vScrollBox.Components[I] is TPanel) then
        begin
          vlNomeMesa := 'BtnMesa' + InttoStr(StrtoInt(vpOrcDelChave));
          vlNomePanel := (vScrollBox.Components[I] as TPanel).Name;
          if (vScrollBox.Components[I] as TPanel).FindChildControl(vlNomeMesa) <> nil then
          begin

            EventoBtnClick(((vScrollBox.Components[I] as TPanel).FindChildControl(vlNomeMesa) as TBitBtn));
            EdtCodprod.Text := '';
            VCBarra := '';
            Exit;

          end;

        end;

      end;

      Showmessage('Comanda ou Mesa não localizada!');
      EdtCodprod.Text := '';
      VCBarra := '';
      Exit;

    end;

    if dmdados.orcorcchave.AsInteger > 0 then
    begin
      with dmdados do
      begin
        tito.Close;
        tito.Open;

        pun.Close;
        proc.Close;

        grp.Close;
        grp.Open;
      end;

      if (Copy(VCBarra, 1, 1) = '2') and (Length(VCBarra) > 10) then
      begin

        dmdados.cpb.Close;
        dmdados.cpb.Params[0].AsString := Copy(VCBarra, 2, dmdados.cfgmcfgcfgdigitosbalanca.AsInteger);
        dmdados.cpb.Open;

        if dmdados.cpb.RecordCount = 1 then
        begin
          vlProcodigo := dmdados.cpbprocodigo.AsInteger;

          vlValorBalanca := Copy(VCBarra, (dmdados.cfgmcfgcfgdigitosbalanca.AsInteger + 2), 10);

          vlValorBalanca := Copy(vlValorBalanca, 1, 5) + '0';

          if dmdados.cfgmcfgcfgetiquetabalanca.AsInteger = 1 then
          begin

            case dmdados.cfgmcfgcfgdigitosbalanca.AsInteger of
              4:
                VCBarraAjustada := '2' + formatfloat('0000', vlProcodigo) + vlValorBalanca;
              5:
                VCBarraAjustada := '2' + formatfloat('00000', vlProcodigo) + vlValorBalanca;
              6:
                VCBarraAjustada := '2' + formatfloat('000000', vlProcodigo) + vlValorBalanca;
              7:
                VCBarraAjustada := '2' + formatfloat('0000000', vlProcodigo) + vlValorBalanca;
            end;
            vpQuantidade := StrToFloat(vlValorBalanca) / 10000;
            // vpQuantidade := 1;

          end
          else
          begin

            case dmdados.cfgmcfgcfgdigitosbalanca.AsInteger of
              4:
                VCBarraAjustada := '2' + formatfloat('0000', vlProcodigo) + vlValorBalanca;
              5:
                VCBarraAjustada := '2' + formatfloat('00000', vlProcodigo) + vlValorBalanca;
              6:
                VCBarraAjustada := '2' + formatfloat('000000', vlProcodigo) + vlValorBalanca;
              7:
                VCBarraAjustada := '2' + formatfloat('0000000', vlProcodigo) + vlValorBalanca;
            end;

            vpQuantidade := StrToFloat(vlValorBalanca) / 10000;

          end;

        end;

        dmdados.consulta.Close;
        dmdados.consulta.sql.Text := 'select probalanca from pro where procodigo=' + InttoStr(vlProcodigo);
        dmdados.consulta.Open;
        if dmdados.consulta.fields[0].AsString <> '' then
        begin
          if (dmdados.consulta.fields[0].AsInteger = 1) and (Copy(VCBarra, 1, 1) = '2') and (Length(VCBarra) > 10) then
          begin
            VCBarra := VCBarraAjustada;
          end;
        end;

      end;

      dmdados.consulta.Close;

      { *  fim da rotina de troca de codigo de produtos pesados * }

      VProduto := BuscaProdutoBarra(Application, dmdados.conexao, VCBarra, vEmbalagem, vVariacao);

      if VProduto = -1 then
        VCBarra := ''
      else
        EdtCodprod.Text := InttoStr(VProduto);

      //
      try
        BuscaProduto(StrtoInt(EdtCodprod.Text), VCBarra, vpQuantidade);
      except

      end;
      MostraItens;
      EdtCodprod.Clear;
      EdtCodprod.SetFocus;
    end;
  end;

  if Key = #27 then
  begin
    EdtCodprod.Clear;
    EdtCodprod.SetFocus;
  end;

end;

Procedure TFPrinciGou.AjustaQuantidade(Quantidade: Double);
Var
  vQuantidade, VQuantidadeTeste: Double;
  VEstoqueDisponivel: Boolean;
Begin

  if not dmdados.ito.Active then
    Exit;

  dmdados.ito.Refresh;

  { If (dmdados.ito.Locate('itochave', dmdados.titoID.AsInteger, [])) Then
    Begin }

  vQuantidade := Quantidade;

  if vQuantidade <= 0 then
  begin
    Application.MessageBox(PChar('Quantidade inválida!!'), 'Atenção', MB_OK + MB_ICONWARNING);
    Exit;
  end;

  dmdados.ito.Edit;
  dmdados.itoitoquantidade.AsFloat := vQuantidade;
  // dmdados.itoclbatendente.asstring:= AcessoRec.usuario.ToString;
  dmdados.ito.Post;
  dmdados.ito.ApplyUpdates;

  { End; }
End;

procedure TFPrinciGou.EdtOperadorEnter(Sender: TObject);
begin
  EdtOperador.Color := $0080FFFF;
  EdtOperador.Clear;
end;

procedure TFPrinciGou.EdtOperadorExit(Sender: TObject);
begin
  EdtOperador.Color := clwhite;
  EdtOperador.Clear;
end;


procedure TFPrinciGou.EdtOperadorKeyPress(Sender: TObject; var Key: Char);
var
  vNumMesa: Integer;
  vlNomeMesa: String;
  vlNomePanel: String;
  I: Integer;
begin
  if Key = #13 then
  begin
    if trim(EdtOperador.Text) = '' then
    begin
      if (SoNumeros(LbMesa.Caption) <> '') then
      begin
        EdtCodprod.SetFocus;
        Exit;

      end
      else
      begin

        Key := #0;
        Exit;
      end;
    end;

    if Length(EdtOperador.Text) > 4 then
    begin
      Showmessage('Código de Mesa/Comanda Inválido!');
      EdtOperador.Text := '';

      Exit;

    end;
    if Length(EdtOperador.Text) > 0 then
    begin
      // '5000000001002'

      if ((Copy(EdtOperador.Text, 1, 5) = '99999') and (Length(EdtOperador.Text) > 10)) or
        ((Copy(EdtOperador.Text, 1, 8) = '50000000') and (Length(EdtOperador.Text) > 12)) then
      begin
        ACBrValidador.Documento := EdtOperador.Text;

        if ACBrValidador.Validar = False then
        begin
          Showmessage('Falha de Leitura!');
          EdtOperador.Text := '';
          Exit;
        end;

        if ((Copy(EdtOperador.Text, 1, 8) = '50000000') and (Length(EdtOperador.Text) > 12)) then
        begin
          vpOrcDelChave := Copy(EdtOperador.Text, 8, 5);
          vNumMesa := StrtoInt(vpOrcDelChave);
          EdtOperador.Text := Copy(EdtOperador.Text, 8, 5);
        end
        else
        begin

          vpOrcDelChave := Copy(EdtOperador.Text, 6, 7);
          vNumMesa := StrtoInt(vpOrcDelChave);
          EdtOperador.Text := Copy(EdtOperador.Text, 6, 7);

        end;
      end
      else
      begin
        vNumMesa := 0;
      end;

      // mesa do pedido
      vNumMesa := StrtoInt(EdtOperador.Text);
      if (vNumMesa > 0) and (vNumMesa <= dmdados.Usuario.QtdMesa) then
      begin
        AbreMesa(vNumMesa);
        EdtOperador.Clear;
        vpMesaAtual := vNumMesa;
      end
      else
      begin
        Showmessage('Atenção, ' + dmdados.Usuario.TituloOperador + ' ' + InttoStr(vNumMesa) + ' inexistente, verifique !');
        EdtOperador.Clear;
        EdtOperador.SetFocus;
      end;
    end
    else
    begin
      if (LbMesa.Caption <> '') and (LbMesa.Caption <> 'M e s a') and (LbMesa.Caption <> dmdados.Usuario.TituloOperador) then
      begin
        EdtCodprod.SetFocus;
        ApertateclaEnter;

      end;
    end;
  end;
  if Key = #27 then
  begin
    EdtOperador.Clear;
    EdtOperador.SetFocus;
  end;

  if not(Key in ['0' .. '9', #8]) then
    Key := #0
end;

procedure TFPrinciGou.EdtProdutoEnter(Sender: TObject);
begin
  EdtProduto.Color := $0080FFFF;
  EdtProduto.Clear;
end;

procedure TFPrinciGou.EdtProdutoExit(Sender: TObject);
begin
  try
    EdtProduto.Color := clwhite;
  except
  end;
end;

procedure TFPrinciGou.EdtProdutoKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then
  begin
    Key := #0;

    if Length(EdtProduto.Text) = 0 then
    begin
      btBuscaERP.Click;
    end;

    if trim(EdtProduto.Text) <> '' then
    begin
      BuscaProduto(StrtoInt(EdtProduto.Text));
    end;
  end;

  if Key = #27 then
  begin
    EdtProduto.Clear;
    EdtProduto.SetFocus;
  end;

  if not(Key in ['0' .. '9', #8]) then
    Key := #0;
end;

procedure TFPrinciGou.EdtProdutoKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin

  if Key = 40 then
  begin
    Key := 0;
    DBGrid2.SetFocus;
    DBGrid2.DataSource.DataSet.Next;
  end;
  if Key = 390 then
  begin
    Key := 0;
    DBGrid3.SetFocus;
  end;

  if DBGrid2.DataSource.DataSet.Bof then
  begin
    if Key = 38 then
    begin
      Key := 0;
      EdtProduto.SetFocus;
    end;
  end;

end;

procedure TFPrinciGou.BuscaProdutoVendaRapida(CodPro: Integer; vBarra: String = ''; vQuantidade: Double = 1);
var
  vCodPro: Integer;
  vSabores: String;
begin
  vCodPro := CodPro;
  if vCodPro > 0 then
  begin
    dmdados.buscaPro.Close;
    dmdados.buscaPro.Params[0].AsInteger := vCodPro;
    dmdados.buscaPro.Open;
    if not dmdados.buscaPro.IsEmpty then
    begin
      dmdados.grp.Locate('grpcodigo', dmdados.BuscaProgrpcodigo.AsInteger, []);
      // produto facionado
      if dmdados.BuscaProsfnqtde.AsInteger > 0 then
      begin
        dmdados.proc.Close;
        dmdados.proc.Params[0].AsInteger := 0;
        dmdados.proc.Open;

        // abrindo a tabela de preços
        dmdados.pun.Close;
        dmdados.pun.Params[0].AsInteger := 0;
        dmdados.pun.Open;

        ItemFracionado(dmdados.BuscaProgrpcodigo.AsInteger);
      end
      else
      begin
        dmdados.proc.Close;
        dmdados.proc.Params[0].AsInteger := dmdados.BuscaProgrpcodigo.AsInteger;
        dmdados.proc.Open;
        if dmdados.proc.IsEmpty then
        begin
          Showmessage('Opções de Cardapio não Disponível, verifica se existe impressora definida para esse Grupo !');
          Exit;
        end
        else
        begin
          if dmdados.proc.Locate('procodigo', vCodPro, []) then
          begin
            MemIngredientes.Text := '';
            // abrindo a tabela de preços
            dmdados.pun.Close;
            dmdados.pun.Params[0].AsInteger := dmdados.procprocodigo.AsInteger;
            dmdados.pun.Open;

            vBarra := dmdados.punpunbarra.AsString;

            // ingredientes do produto
            dmdados.sbr.Close;
            dmdados.sbr.Params[0].AsInteger := dmdados.Usuario.tsicodigo;
            dmdados.sbr.Params[1].AsInteger := dmdados.procprocodigo.AsInteger;
            dmdados.sbr.Open;

            if not dmdados.sbr.IsEmpty then
            begin
              vSabores := '';
              dmdados.sbr.DisableControls;
              dmdados.sbr.First;
              while not dmdados.sbr.Eof do
              begin
                if dmdados.sbr.Bof then
                  vSabores := dmdados.sbrpronome.AsString
                else
                  vSabores := vSabores + ',  ' + dmdados.sbrpronome.AsString;
                dmdados.sbr.Next;
              end;
              dmdados.sbr.EnableControls;
              MemIngredientes.Text := vSabores;
            end;
            // busca item

            IncluirItemComum(vBarra, vpQuantidade);
          end
          else
            Showmessage('Opções de Cardapio não Disponível !');
        end;
      end;
    end;
    EdtProduto.Clear;
  end;
end;

procedure TFPrinciGou.BuscaProduto(CodPro: Integer; vBarra: String = ''; vQuantidade: Double = 1);
var
  vCodPro: Integer;
  vSabores: String;
begin
  vCodPro := CodPro;
  if vCodPro > 0 then
  begin
    dmdados.buscaPro.Close;
    dmdados.buscaPro.Params[0].AsInteger := vCodPro;
    dmdados.buscaPro.Open;
    if not dmdados.buscaPro.IsEmpty then
    begin
      dmdados.grp.Locate('grpcodigo', dmdados.BuscaProgrpcodigo.AsInteger, []);
      // produto facionado
      if dmdados.BuscaProsfnqtde.AsInteger > 0 then
      begin
        dmdados.proc.Close;
        dmdados.proc.Params[0].AsInteger := 0;
        dmdados.proc.Open;

        // abrindo a tabela de preços
        dmdados.pun.Close;
        dmdados.pun.Params[0].AsInteger := 0;
        dmdados.pun.Open;

        ItemFracionado(dmdados.BuscaProgrpcodigo.AsInteger);
      end
      else
      begin
        dmdados.proc.Close;
        dmdados.proc.Params[0].AsInteger := dmdados.BuscaProgrpcodigo.AsInteger;
        dmdados.proc.Open;
        if dmdados.proc.IsEmpty then
        begin
          Showmessage('Opções de Cardapio não Disponível, verifica se existe impressora definida para esse Grupo !');
          Exit;
        end
        else
        begin
          if dmdados.proc.Locate('procodigo', vCodPro, []) then
          begin
            MemIngredientes.Text := '';
            // abrindo a tabela de preços
            dmdados.pun.Close;
            dmdados.pun.Params[0].AsInteger := dmdados.procprocodigo.AsInteger;
            dmdados.pun.Open;

            // ingredientes do produto
            dmdados.sbr.Close;
            dmdados.sbr.Params[0].AsInteger := dmdados.Usuario.tsicodigo;
            dmdados.sbr.Params[1].AsInteger := dmdados.procprocodigo.AsInteger;
            dmdados.sbr.Open;

            if not dmdados.sbr.IsEmpty then
            begin
              vSabores := '';
              dmdados.sbr.DisableControls;
              dmdados.sbr.First;
              while not dmdados.sbr.Eof do
              begin
                if dmdados.sbr.Bof then
                  vSabores := dmdados.sbrpronome.AsString
                else
                  vSabores := vSabores + ',  ' + dmdados.sbrpronome.AsString;
                dmdados.sbr.Next;
              end;
              dmdados.sbr.EnableControls;
              MemIngredientes.Text := vSabores;
            end;
            // busca item
            IncluirItemComum(vBarra, vpQuantidade);
          end
          else
            Showmessage('Opções de Cardapio não Disponível !');
        end;
      end;
    end;
    EdtProduto.Clear;
  end;
end;

procedure TFPrinciGou.EventoBtnClick(Sender: TObject);
var
  vNumMesa: Integer;
begin
  try

    TmMesa.Enabled := False;
    vNumMesa := 0;
    if (Sender is TBitBtn) then
    begin
      (Sender as TBitBtn).Enabled := False;
      // mesa do pedido

      vNumMesa := (Sender as TBitBtn).Tag;
      vpMesaAtual := vNumMesa;
      if vNumMesa > 0 then
      begin
        if UPPERCASE(Copy(dmdados.Usuario.VendaIndividual, 1, 1)) = 'S' THEN
        begin
          Logarsistema;
        end;
        AbreMesa(vNumMesa);

        if not dmdados.adctef.Active then
          dmdados.adctef.open;

        if (Sender as TBitBtn).Font.Color=clred then
        begin
          if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
          begin
            if dmdados.adctef.FieldByName('adcchaveintegracao').asstring<>'' then
            begin
              MostraRecebimentoStone(vNumMesa.ToString,StrtoInt(sonumeros(LbOrcChave.Caption)));
            end;
          end;
        end;

      end;
      (Sender as TBitBtn).Enabled := True;
    end;

    // LbVersao.Caption := InttoStr(MemoryUsed);
  finally
    EstadoMemoria;
    TmMesa.Enabled := True;
    dmdados.dIto.DataSet.EnableControls;

  end;

end;

procedure TFPrinciGou.AbreMesa(pNumMesa: Integer);
var
  vContador: Integer;
  vlorcOrigem: string;
begin

  if pNumMesa > 0 then
  begin
    dmdados.unm.Close;
    dmdados.unm.Params[0].AsInteger := pNumMesa;
    dmdados.unm.Open;

    if not dmdados.unm.IsEmpty then
    begin
      Showmessage('Atenção, ' + dmdados.Usuario.TituloOperador + ' esta unida à ' + dmdados.Usuario.TituloOperador + ' ' +
        dmdados.unmorcmesa.AsString);
    end;

    dmdados.ccx.Close;
    dmdados.ccx.ParamByName('clbcodigo').AsInteger := dmdados.Usuario.clbcodigo;
    dmdados.ccx.Open;
    FCcxchave:=dmdados.ccx.FieldByName('ccxchave').AsInteger;

    dmdados.orc.Close;
    dmdados.orc.Parambyname('orcmesa').AsInteger := pNumMesa;
 //   dmdados.orc.Parambyname('ccxchave').AsInteger := FCcxchave;
    dmdados.orc.Open;

    vpOrcChave := dmdados.orcorcchave.AsString;

    dmdados.trorec.Close;
    dmdados.trorec.Params[0].AsInteger := dmdados.orcorcchave.AsInteger;
    dmdados.trorec.Open;

    if not dmdados.trorec.IsEmpty then
    begin

      if dmdados.trorecorcchaveorigem.AsInteger = 0 then
      begin
        dmdados.itorec.Close;
        dmdados.itorec.ParamByName('orcchave').AsInteger := dmdados.orcorcchave.AsInteger;
        // dmdados.itorec.ParamByName('orcchaveatual').AsInteger := dmdados.trorecorcchaveorigem.AsInteger;
        dmdados.itorec.Open;
      end
      else
      begin

        dmdados.itorec.Close;
        dmdados.itorec.ParamByName('orcchave').AsInteger := dmdados.trorecorcchaveorigem.AsInteger;
        // dmdados.itorec.ParamByName('orcchaveatual').AsInteger := dmdados.orcorcchave.AsInteger;
        dmdados.itorec.Open;
      end;
    end
    else
    begin

      if (vpOrcChave <> '') and  (vpOrcChave <> '0') then
      begin
        dmdados.tropar.Close;
        dmdados.tropar.sql.Text := ' SELECT tro.trochave , tro.orcchaveorigem  , tro.orcchavedestino ';
        dmdados.tropar.sql.Add('FROM tro where tro.orcchavedestino=' + vpOrcChave);
        dmdados.tropar.Open;
        vlorcOrigem := dmdados.tropar.FieldByName('orcchaveorigem').AsString;

        if vlorcOrigem <> '' then
        begin
          dmdados.itorec.Close;
          dmdados.itorec.ParamByName('orcchave').AsString := vlorcOrigem;
          // dmdados.itorec.ParamByName('orcchaveatual').AsString := vlorcOrigem;
          dmdados.itorec.Open;
        end
        else
        begin
          dmdados.itorec.Close;
          plDBGridItoRec.Visible := False;
        end;

      end
      else
      begin
        dmdados.itorec.Close;
      end;
    end;

    if dmdados.itorec.Active then
    begin
      if not dmdados.itorec.IsEmpty then
      begin
        plDBGridItoRec.Visible := True;
        plDBGridItoRec.Align := altop;
        plDBGridItoRec.Align := alBottom;

      end
      else
      begin
        plDBGridItoRec.Visible := False;
      end;
    end
    else
    begin
      plDBGridItoRec.Visible := False;
    end;

    if dmdados.orcstocodigo.AsInteger = 1 then
    begin
      Showmessage(dmdados.Usuario.TituloOperador + ' esta sendo usado por outra terminal, verifique !');
      Exit;
    end;

    AjustaCodigoCozinha;

    if dmdados.orc.IsEmpty then
    begin
      dmdados.MobAbreMesa.Close;
      dmdados.MobAbreMesa.Params[0].AsInteger := 0; // etdcodigo
      dmdados.MobAbreMesa.Params[1].AsInteger := dmdados.Usuario.clbcodigo;
      dmdados.MobAbreMesa.Params[2].AsInteger := 5; // moccodigo
      dmdados.MobAbreMesa.Params[3].AsInteger := pNumMesa; // moccodigo
      dmdados.MobAbreMesa.Params[4].AsInteger := dmdados.cfgmcfgflacodigo.AsInteger; // moccodigo
      dmdados.MobAbreMesa.Params[5].AsInteger := dmdados.Usuario.trmcodigo;
      dmdados.MobAbreMesa.ExecSQL;

      vpOrcchave:=dmdados.MobAbreMesa.ParamByName('pOrcChave').AsString;

      dmdados.consulta.Close;
      dmdados.consulta.sql.Text := 'update orc set ccxchave=' + vpCcxChave + ' where ((ccxchave=0) or (ccxchave=null)) and orcchave=' + vpOrcChave;
      dmdados.consulta.ExecSQL;

      dmdados.consulta.Close;
      dmdados.consulta.sql.Text := 'update orc set cznchave=' + vpCznChave + ' where  orcchave=' + vpOrcChave;
      dmdados.consulta.ExecSQL;

      dmdados.ccx.Close;
      dmdados.ccx.ParamByName('clbcodigo').AsInteger := dmdados.Usuario.clbcodigo;
      dmdados.ccx.Open;
      FCcxchave:=dmdados.ccx.FieldByName('ccxchave').AsInteger;

      if dmdados.MobAbreMesa.Params[4].AsInteger > 0 then
      begin



        dmdados.orc.Close;
        dmdados.orc.Parambyname('orcmesa').AsInteger := pNumMesa;
        dmdados.orc.Open;


        if not dmdados.orc.IsEmpty then
        begin

        dmdados.orc.Edit;
        dmdados.orcorcdataabert.AsString := vpCznDataAbertura;
        dmdados.orc.Post;
        end;

      end
      else
      begin
        LbMesa.Caption := dmdados.Usuario.TituloOperador;
        LbOrcChave.Caption := 'Nº: 000000';
        Showmessage('Não foi possível abrir ' + dmdados.Usuario.TituloOperador + ' verifique com a gerência !');
        Exit;
      end;
    end
    else
    begin
      dmdados.orc.Edit;
      dmdados.orcorcdataabert.AsString := vpCznDataAbertura;
      dmdados.orc.Post;

    end;
    if  vpOrcChave<>'' then
    begin

    LbMesa.Caption := dmdados.Usuario.TituloOperador + '  ' + InttoStr(pNumMesa);

    LbOrcChave.Caption := 'Nº: ' + formatfloat('######000000', dmdados.orcorcchave.AsInteger);

//    vpOrcChave := dmdados.orcorcchave.AsString;

    dmdados.consulta.Close;
    dmdados.consulta.sql.Text := 'update orc set  ccxchave=' + vpCcxChave + ' where ((ccxchave=0) or (ccxchave=null)) and orcchave=' + vpOrcChave;
    dmdados.consulta.ExecSQL;

    dmdados.consulta.Close;
    dmdados.consulta.sql.Text := 'update orc set cznchave=' + vpCznChave + ' where  orcchave=' + vpOrcChave;
    dmdados.consulta.ExecSQL;

    MostraItens;

    end;

    // daniel 30/12/2020 teste de velocidade

    dmdados.tbrd.Close;
    dmdados.tbrd.Open;

    dmdados.tisi.Close;
    dmdados.tisi.Open;

    dmdados.trfi.Close;
    dmdados.trfi.Open;

    dmdados.trdc.Close;
    dmdados.trdc.Open;

    EdtCodprod.Clear;

    EdtCodprod.ReadOnly := False;
    EdtCodprod.Enabled := True;

    lbhoraatualizacao.Caption := timetostr(now());
   // Application.ProcessMessages;

    EdtCodprod.SetFocus;
  end
  else
    Showmessage('Atenção Não foi possível abrir ' + dmdados.Usuario.TituloOperador + ' !');
end;

procedure SetMainForm(FormAtivo: TForm);
var
  TmpMain: ^TCustomForm;
begin
  TmpMain := @Application.MainForm;
  TmpMain^ := FormAtivo;
end;

procedure TFPrinciGou.FormActivate(Sender: TObject);
begin

if Application.MainForm<>FPrinciGou then
  SetMainForm(FPrinciGou);

 Self.WindowState := TWindowState.wsMaximized;
//  Application.MainForm.BringToFront;
end;

procedure TFPrinciGou.FormAlignPosition(Sender: TWinControl; Control: TControl;
  var NewLeft, NewTop, NewWidth, NewHeight: Integer; var AlignRect: TRect;
  AlignInfo: TAlignInfo);
begin
showmessage('position');
end;

procedure TFPrinciGou.FormClick(Sender: TObject);
begin


  if Self.WindowState = TWindowState.wsMinimized  then
  begin
     Self.WindowState := TWindowState.wsMaximized;
     Application.MainForm.BringToFront;
  end;

end;

procedure TFPrinciGou.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
  CanClose := vpPodeFechar;

end;

procedure TFPrinciGou.FormCreate(Sender: TObject);
var
  vIpServer, vDbServer, vPortaBanco: String;

begin
  // cria um mutex usando um nome único
  CreateMutex(nil, False, 'Gourmet.OnlyOne');

  // verifica se houve erro na criação
//  if GetLastError = ERROR_ALREADY_EXISTS then
 // begin
 //   MessageBox(0, 'Este programa já está sendo executado', 'Aviso', MB_ICONSTOP);
  //  Halt(0); // cancela execução
  // end;

  if not FileExists(Extractfilepath(Application.ExeName) + 'relat\comprovante.fr3') then
  begin
    Showmessage('Atenção, não foi encontrado o relatório "Comprovante" na pasta abaixo: ' + #13 + Extractfilepath(Application.ExeName) +
      'relat\comprovante.fr3' + #13 + #13 + 'Não será possível abrir o sistema, verifique !');
    Application.Terminate;
    Application.ShowMainForm := False;
    Exit;
  end;

  if not FileExists(Extractfilepath(Application.ExeName) + 'relat\viaassinar.fr3') then
  begin
    Showmessage('Atenção, não foi encontrado o relatório "Via Assinar" na pasta abaixo: ' + #13 + Extractfilepath(Application.ExeName) +
      'relat\viaassinar.fr3' + #13 + #13 + 'Não será possível abrir o sistema, verifique !');
    Application.Terminate;
    Application.ShowMainForm := False;
    Exit;
  end;

  if not FileExists(Extractfilepath(Application.ExeName) + 'relat\resumomesa.fr3') then
  begin
    Showmessage('Atenção, não foi encontrado o relatório "Resumo da Mesa" na pasta abaixo: ' + #13 + Extractfilepath(Application.ExeName) +
      'relat\resumomesa.fr3' + #13 + #13 + 'Não será possível abrir o sistema, verifique !');
    Application.Terminate;
    Application.ShowMainForm := False;
    Exit;
  end;

  if not FileExists(Extractfilepath(Application.ExeName) + 'relat\recibo.fr3') then
  begin

    Showmessage('Atenção, não foi encontrado o relatório "Recibo de pagamento" na pasta abaixo: ' + #13 + Extractfilepath(Application.ExeName) +
      'relat\recibo.fr3' + #13 + #13 + 'Não será possível abrir o sistema, verifique !');
    Application.Terminate;
    Application.ShowMainForm := False;
    Exit;
  end;

  // Cria Dmdados
  dmdados := TDmDados.Create(Self);
  DmScripts := TDmScripts.Create(Self);

  // Carregando informações de configuração do servidor de banco de dados
  dmdados.vpConfigIni := TIniFile.Create(Extractfilepath(ParamSTR(0)) + 'gourmeterp.ini');
  vIpServer := dmdados.vpConfigIni.ReadString('posi', 'servidor', 'Não foi informado o IP SERVIDOR no arquivo de configuração');
  vDbServer := dmdados.vpConfigIni.ReadString('posi', 'nomebanco', 'Não foi informado o DB SERVIDOR no arquivo de configuração');
  vpTaxa := dmdados.vpConfigIni.ReadString('posi', 'Taxa', 'Não');
  vpImprimeResumo := dmdados.vpConfigIni.ReadString('posi', 'ImprimeResumo', 'Sim');
  vPortaBanco := dmdados.vpConfigIni.ReadString('posi', 'portabanco', '3306');

  dmdados.Usuario.trmcodigo := StrtoInt(dmdados.vpConfigIni.ReadString('posi', 'terminal',
    'Não foi informado o Terminal no arquivo de configuração'));
  dmdados.Balaca.Ativa := ifthen(UPPERCASE(dmdados.vpConfigIni.ReadString('gourmet', 'balanca',
    'Não foi informado o Tipo de Operador no arquivo de configuração')) = 'S', 1, 0);
  dmdados.Usuario.TipoFechamento := UPPERCASE(dmdados.vpConfigIni.ReadString('gourmet', 'tipofechamento',
    'Não foi informado o Tipo de Operador no arquivo de configuração'));
  dmdados.Usuario.VendaIndividual := UPPERCASE(dmdados.vpConfigIni.ReadString('gourmet', 'VendaIndividual', '0'));

  // try
  dmdados.conexao.Close;
  dmdados.conexao.Server := vIpServer;
  dmdados.conexao.Database := vDbServer;
  dmdados.conexao.Port := vPortaBanco.ToInteger;
  dmdados.conexao.Open;
  dmdados.ConsultaSQL('select current_date() dtatual, ctacodigo from ctr where trmcodigo = ''' + InttoStr(dmdados.Usuario.trmcodigo) + ''' limit 1');

  if dmdados.consulta.IsEmpty then
  begin
    Application.Terminate;
    Exit;
    Application.ShowMainForm := False;
  end;

  dmdados.Usuario.DtAtual := dmdados.consulta.fields[0].AsDateTime;
  dmdados.Usuario.CtaCodigo := dmdados.consulta.fields[1].AsInteger;
  dmdados.DtAtual := dmdados.consulta.fields[0].AsDateTime;
  dmdados.vpConsultouSefaz := False;

  if dmdados.ConsultaSQL('SELECT DISTINCT ' + '       mit.tipcodigo ' + '     , tci.tciporta ' + '  FROM trm ' +
    '  INNER JOIN ctr ON trm.trmcodigo = ctr.trmcodigo ' + ' INNER JOIN tci ON trm.trmcodigo = tci.trmcodigo ' +
    ' INNER JOIN mit ON tci.mitcodigo = mit.mitcodigo ' + ' WHERE trm.trmcodigo = ''' + InttoStr(dmdados.Usuario.trmcodigo) + '''' +
    '   AND mit.tipcodigo IN( 2,3,6)  AND  tci.tciporta not like ' + QuotedStr('%.%') + ' LIMIT 1') then
  begin
    dmdados.Usuario.MitTipCodigo := dmdados.consulta.fields[0].AsInteger;
    dmdados.Usuario.TciTciPorta := dmdados.consulta.fields[1].AsString;
  end;

  vpSQL := 'SELECT trmmesavendarapida from trm WHERE trm.trmcodigo = ''' + InttoStr(dmdados.Usuario.trmcodigo) + ''' ';
  if dmdados.ConsultaSQL(vpSQL) then
  begin
    dmdados.Usuario.MesaVendaRapida := dmdados.consulta.fields[0].AsString;
  end;

  // carregando dados da balança
  vpUsaBalanca := False;

  if dmdados.Balaca.Ativa = 1 then
  begin

    vpSQL := 'SELECT  trmbalamodelo ' + '     , trmbalaporta ' + '     , IFNULL(trmbalabaud,0) trmbalabaud ' + '     , trmbalahandshake ' +
      '     , trmbalaparity ' + '     , trmbalastop ' + '     , IFNULL(trmbaladata,0) trmbaladata ' + '  FROM trm ' + ' WHERE trm.trmcodigo = ''' +
      InttoStr(dmdados.Usuario.trmcodigo) + ''' ' + '   AND trm.trmbalamodelo IS NOT NULL';

    dmdados.consulta.Close;

    if dmdados.ConsultaSQL(vpSQL) then
    begin
      dmdados.Balaca.Modelo := dmdados.consulta.fields[0].AsString;
      dmdados.Balaca.Porta := dmdados.consulta.fields[1].AsString;
      dmdados.Balaca.Baud := dmdados.consulta.fields[2].AsInteger;
      dmdados.Balaca.HandShake := dmdados.consulta.fields[3].AsString;
      dmdados.Balaca.Parity := dmdados.consulta.fields[4].AsString;
      dmdados.Balaca.Stop := dmdados.consulta.fields[5].AsString;
      dmdados.Balaca.Data := dmdados.consulta.fields[6].AsInteger;

      vpUsaBalanca := True;

    end;
  end;

  Logarsistema;

  dmdados.cfgmcfg.Close;
  dmdados.cfgmcfg.ParamByName('flacodigo').AsInteger := AcessoRec.Filial;
  dmdados.cfgmcfg.Open;

  if dmdados.cfgmcfgcfgctacodigopix.AsInteger = 0 then
  begin
    dmdados.consulta.Close;
    dmdados.consulta.sql.Text := 'select ctacodigo from cta where tctcodigo=2 order by ctacodigo limit 1';
    dmdados.consulta.Open;
    if not dmdados.consulta.IsEmpty then
    begin
      dmdados.cfgmcfg.Edit;
      dmdados.cfgmcfgcfgctacodigopix.AsInteger := dmdados.consulta.FieldByName('ctacodigo').AsInteger;
      dmdados.cfgmcfg.Post;
    end;

    dmdados.cfgmcfg.Close;
    dmdados.cfgmcfg.ParamByName('flacodigo').AsInteger := AcessoRec.Filial;
    dmdados.cfgmcfg.Open;

  end;

  { if dmdados.ConsultaSQL('SELECT cfgusatelentre cfgusatelentre FROM cfg WHERE cfgusatelentre = 1 LIMIT 1') then
    begin
    if dmdados.cfgmcfgcfgmgoufinalizadelivery.AsInteger = 1 then
    begin
    SbFechaDelivery.Visible := False;
    end
    else
    begin
    SbFechaDelivery.Visible := True;
    end;
    end
    else
    begin
    SbFechaDelivery.Visible := False;
    end; }

  dmdados.cfgmcfgcfgmgouttulocomposicao.AsString;

  dmdados.Usuario.QtdMesa := dmdados.cfgmcfgcfgmgouqtdmesas.AsInteger;
  dmdados.Usuario.TituloOperador := dmdados.cfgmcfgcfgmgounomelocal.AsString;

  ActFechaMesa.Caption := '[F6] Fecha ' + dmdados.Usuario.TituloOperador;
  ActJuntarMesas.Caption := 'Juntar ' + dmdados.Usuario.TituloOperador;
  ActTranferirMesas.Caption := '[F4] Transferir ' + dmdados.Usuario.TituloOperador;
  ActReabirMesa.Caption := 'Reabrir ' + dmdados.Usuario.TituloOperador;

  LbOperador.Caption := '[F2] ' + dmdados.Usuario.TituloOperador;
  LbMesa.Caption := dmdados.Usuario.TituloOperador;

  if dmdados.cfgmcfgcfgmgoutaxaatendimento.AsFloat > 0 then
  begin
    LbCapReceberTaxa.Visible := True;
    LbReceberTaxa.Visible := True;
    // LbcapItemTotalTaxa.Visible := True;
    // LbItemTotalTaxa.Visible := True;
  end
  else
  begin
    LbCapReceberTaxa.Visible := False;
    LbReceberTaxa.Visible := False;
    // LbcapItemTotalTaxa.Visible := False;
    // LbItemTotalTaxa.Visible := False;
    //
  end;

  { except
    on E: Exception do
    begin
    Showmessage('Erro - Ao abrir Conexão verifique as configurações no arquivo Config.Ini' + #13 + '[' + E.ClassName + ']' + #13 + ' - mens - ' + E.Message + ']');
    end;
    end; }
  // Dimencionando painel das mesas
  PnLeft.Width := 340;
  CriaAcoesDeAcesso;
  AtribuiTagAcesso;

  AjustaCodigoCozinha;

  if FileExists(Extractfilepath(Application.ExeName) + 'modulos\mmoniimpnet.bpl') then
  begin

    if vpCznChave <> '0' then
      CarregaFrame('mmoniimpnet', plImp, dmdados.conexao);
  end;

  vpPackNFCe := 0;
  vpPackNFCe := LoadPackage('modulos\mnfepdv.bpl');



end;

procedure TFPrinciGou.FormDblClick(Sender: TObject);
begin
  WindowState := TWindowState.wsMaximized;
end;

function TFPrinciGou.CarregaFrame(pacote: string; destino: TPanel; conexao: tuniconnection): thandle;
var
  exec: TMoniImp;
  frame: TFrame;
  pack: Cardinal;
  retor: Cardinal;
begin
  pack := LoadPackage('modulos\' + pacote + '.bpl');
  if pack <> 0 then
  begin
    @exec := GetProcAddress(pack, PChar('MoniImp'));
    if Assigned(exec) then
    begin
      destino.Visible := True;

      if exec(Application, destino, conexao, vpCznChave) <> nil then
      begin
        retor := pack;
      end
      else
      begin
        retor := 0;
      end;

    end;
  end;
  result := retor;
end;

procedure TFPrinciGou.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  // Chamar Mesa
  if Key = vk_f4 then
    abort;

  if Key = VK_F2 then
    if (PCMesa.ActivePage = TabItens) and (dmdados.orc.Active) then
      EdtOperador.SetFocus;

  // Atualiza item da mesa
  if Key = VK_F5 then
    if (PCMesa.ActivePage = TabItens) and (dmdados.orc.Active) then
      MostraItens;

  // Atualiza item da mesa
  if Key = VK_F10 then
  begin
    if (PCMesa.ActivePage = TabItens) and (dmdados.orc.Active) then
      ActVendaRapida.Execute;

  end;

  if Key = VK_F8 then // Incluir itens na mesa
  begin
    if not vpVendaRapida then
    begin
      if (PCMesa.ActivePage = TabItens) and (dmdados.orc.Active) then
      begin
        IncluirItem;
      end
      else if (PCMesa.ActivePage = TabCardapio) and (dmdados.orc.Active) then
      begin
        EdtProduto.Clear;
        EdtProduto.SetFocus;
      end;
    end;
  end;

end;

procedure TFPrinciGou.FormMouseWheel(Sender: TObject; Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint; var Handled: Boolean);
var
  I: Integer;
  vScroll: TScrollBox;
begin
  vScroll := (PnMesas.Controls[0] as TScrollBox);
  Handled := PtInRect(vScroll.ClientRect, vScroll.ScreenToClient(MousePos));
  if Handled then
    for I := 1 to Mouse.WheelScrollLines do
      try
        if WheelDelta > 0 then
          vScroll.Perform(WM_VSCROLL, SB_PAGEUP, 0) // SB_LINEUP
        else
          vScroll.Perform(WM_VSCROLL, SB_PAGEDOWN, 0); // SB_LINEDOWN
      finally
        vScroll.Perform(WM_VSCROLL, SB_ENDSCROLL, 0);
      end;
end;

procedure TFPrinciGou.FormPaint(Sender: TObject);
begin
    //
end;

procedure TFPrinciGou.FormResize(Sender: TObject);
begin
  if Self.WindowState = wsminimized then
  begin
    Self.WindowState := wsnormal;
    Self.Width := 50;
    Self.height := 50;
    Self.Left := 0;
    Self.Top := screen.height - 100;
  end;
end;

procedure TFPrinciGou.FormShow(Sender: TObject);
type
  TAtivaPDVTEF=function(AOwner: TComponent;aZcone:tuniconnection; aAcesso:Tacesso; altePDTVTEF: TfltePDTVTEF):boolean;

var
  vlnomebpl: string;
  Arquini: TINIfile;

  i: Integer;
  vlAtivaPDVTEF:TAtivaPDVTEF;

begin
if Application.MainForm<>FPrinciGou then
  SetMainForm(FPrinciGou);

 // SetMainForm(FPrinciGou);
 // Self.WindowState := TWindowState.wsMaximized;
 // Application.MainForm.BringToFront;


  vpPodeFechar := False;
  screen.Cursors[crSQLWait] := screen.Cursors[crDefault];

  horario.Caption := timetostr(now());

  try
    // Carregando Paremetros dos Sistema;
    CarregaUsuario;

    // Verificando Versão do sistema

    vlnomebpl := Extractfilepath(Application.ExeName) + 'modulos\m' + extractfilename(Application.ExeName);
    vlnomebpl := Copy(vlnomebpl, 1, Pos('.', vlnomebpl) - 1);
    vlnomebpl := vlnomebpl + '.bpl';
    if FileExists(vlnomebpl) then
      LbVersao.Caption := GetAppVersionStr(vlnomebpl)
    else
      LbVersao.Caption := GetAppVersionStr(Application.ExeName);

    dmdados.Usuario.tsicodigo := 3;

    // Carregando Mesas
    CarregaMesa;

    // mostra TabItens
    MostraTab(TabItens);

    // verifica se a cozinha já esta aberta
    VerificaCozinha;
    // Verifica quais mesas estão sendo antendidas
    VerificaMesa;

    VerificaValidadeCertificado;

    ConsultaAtivaPDVTEF(self,dmdados.Conexao,AcessoRec);


    VerificaIntegracaoPagarme;




  finally
    EdtOperador.SetFocus;
  end;
end;

procedure  TFPrinciGou.VerificaIntegracaoPagarme;
begin

  dmdados.trmstone.Close;
  dmdados.trmstone.parambyname('trmcodigo').asinteger:=dmdados.Usuario.TrmCodigo;
  dmdados.trmstone.Open;


  if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
  begin

    plmesasemfechamento.Visible:=true;
    panel12.Height:=175;

  end
  else
  begin
    plmesasemfechamento.Visible:=False;
    panel12.Height:=120;

  end;

end;

procedure TFPrinciGou.GeraMesa(Panel: TPanel; QtdPanel, Pos: Integer);
var
  vBtn: TBitBtn;
  vQtdBtn: Integer;
  vPos: Integer;
  vLeft: Integer;
begin
  // verificando quantidades de mesas por painel
  vpEtdCodigo := 0;
  if Pos < QtdPanel then
    vQtdBtn := 5
  else
  begin
    // Virificando a quantidade de mesas do ultimo painel
    if (dmdados.Usuario.QtdMesa mod 5) = 0 then
      vQtdBtn := 5
    else
    begin
      // caso as mesas não são exatas gera
      // penas as mesas restantes
      if 5 > ((Pos * 5) - dmdados.Usuario.QtdMesa) then
        vQtdBtn := 5 - ((Pos * 5) - dmdados.Usuario.QtdMesa)
      else
        vQtdBtn := 5;
    end;
  end;

  // gerando as mesas no painel atual
  vLeft := 3;
  vPos := 1;
  while vPos <= vQtdBtn do
  begin
    vpMesaGer := vpMesaGer + 1;
    vBtn := TBitBtn.Create(Self);
    vBtn.Parent := Panel;
    vBtn.AlignWithMargins := True;
    vBtn.Name := 'BtnMesa' + InttoStr(vpMesaGer);
    // InttoStr(Pos)+ InttoStr(vPos);
    vBtn.Tag := vpMesaGer;
    vBtn.Left := vLeft;
    vBtn.Font.Size := 16;
    // vBtn.Font.Style       := [fsBold];
    vBtn.height := 40;
    vBtn.Width := 60;
    vBtn.Top := 1;
    vBtn.ParentFont := False;
    vBtn.Caption := InttoStr(vpMesaGer);
    vBtn.OnClick := EventoBtnClick;
    vBtn.Images := ListaImagemMesas;

    vPos := vPos + 1;
    vLeft := vLeft + 61;
  end;
end;

function TFPrinciGou.ImprimeRelatorio(varquivo: string): string;
type
  TImprimeRelat = function(AOwner: TComponent; conexao: tuniconnection; vtabela: TUniDataSource; DirRelatorio: String; Impressora: String = '';
    vUsuCodigo: string = ''): string;
var
  relat: TImprimeRelat;
  ch: string;
  pack: Cardinal;
begin
  pack := LoadPackage('modulos\mrfr.bpl');
  if pack <> 0 then
    try
      @relat := GetProcAddress(pack, PChar('mrfrImpressao'));
      if Assigned(relat) then
      begin
        ch := relat(Application, dmdados.conexao, dmdados.dorc, varquivo, '', dmdados.Usuario.clbcodigo.ToString);
        result := ch;
      end;
    finally
      // DoUnLoadPackage(Application, pack);
    end;
end;

procedure TFPrinciGou.ImprimirTicket(vOrchave: string; vTickets: string);
var
  vDirRelat: String;
begin
  // dmdados.ConsultaSQL('SELECT ' + InttoStr(dmdados.Usuario.ccxchave) + ' as ccxchave');

  vDirRelat := Extractfilepath(Application.ExeName) + 'relat\TicketCCX.fr3';

  { if NOT FileExists(vDirRelat) then
    Showmessage('Arquivo ' + vDirRelat + ' não localizado, contate o Suporte!!'); }

  dmdados.sqlticket.Close;
  dmdados.sqlticket.sql.Text := 'SELECT   pro.pronome,   pun.punprecoav,   ito.itochave,   ito.orcchave,   uni.unisimbolo ';
  dmdados.sqlticket.sql.Add('FROM gri INNER JOIN pro ON gri.grpcodigo = pro.grpcodigo ');
  dmdados.sqlticket.sql.Add('INNER JOIN ito ON ito.procodigo = pro.procodigo ');
  dmdados.sqlticket.sql.Add('INNER JOIN pun ON pun.procodigo = ito.procodigo  AND pun.unicodigo = ito.unicodigo ');
  dmdados.sqlticket.sql.Add('INNER JOIN uni ON pun.unicodigo=uni.unicodigo AND (uni.tuncodigo=9 OR uni.tuncodigo=1) ');
  dmdados.sqlticket.sql.Add('WHERE ito.orcchave=' + vOrchave + ' and ito.itochave= ');
  dmdados.sqlticket.sql.Add(vTickets + ' AND gri.griimprimeauto=1 ');

  if FileExists(vDirRelat) then
  begin
    mrfrImprimir(dmdados.dsSqlTicket, vDirRelat, tiImprimirDireto);
  end;
end;

Function DifHora(Inicio, Fim: String): String;
{ Retorna a diferença entre duas horas }
var
  FIni, FFim: TDateTime;
begin
  FIni := StrTotime(Inicio);
  FFim := StrTotime(Fim);
  If (Inicio > Fim) then
  begin
    result := timetostr((StrTotime('23:59:59') - FIni) + FFim)
  end
  else
  begin
    result := timetostr(FFim - FIni);
  end;
end;

procedure TFPrinciGou.AjustaCodigoCozinha;
var
  vldata: TDateTime;
  vldif: Integer;

begin
  vpCznChave := '0';
  vpCznDataAbertura := '';

  if dmdados.conexao.Connected = False then
  begin
    dmdados.conexao.Connected := True;
  end;

  dmdados.consulta.Close;
  dmdados.consulta.Connection := dmdados.conexao;
  dmdados.consulta.sql.Text := 'select cznchave, cznabertura from czn where cznfechamento IS null order by cznchave limit 1';
  dmdados.consulta.Open;
  if dmdados.consulta.IsEmpty then
  begin
    Showmessage('Atenção:' + ''#13'' + ''#13'' + 'A Cozinha não esta aberta, solicite a abertura da Cozinha!');
    Application.Terminate;
  end
  else
  begin
    vldata := dmdados.consulta.FieldByName('cznabertura').AsDateTime;

    vldif := SecondsBetween(now(), vldata) div 3600;

    { if vldif > 20 then
      begin
      Showmessage('Atenção:' + ''#13'' + ''#13'' + 'A Cozinha esta aberta a mais de 20 horas.' + #13 + #13 +
      'Por favor FECHE a cozinha e ABRA novamente a Cozinha!');
      Application.Terminate;

      end
      else
      begin }

    vpCznChave := dmdados.consulta.fields[0].AsString;
    vpCznDataAbertura := Copy(dmdados.consulta.fields[1].AsString, 1, 10);
    { end; }
  end;
end;

procedure TFPrinciGou.ImprimirComprovantesCCX(vTocCodigo: Integer);
var
  vDirRelat: String;
begin
  case vTocCodigo of
    tocAberturaCaixa:
      vDirRelat := Extractfilepath(Application.ExeName) + 'relat\AberturaCCX.fr3';
    tocSuprimentoCaixa:
      vDirRelat := Extractfilepath(Application.ExeName) + 'relat\SuprimentoCCX.fr3';
    tocSangriaCaixa:
      vDirRelat := Extractfilepath(Application.ExeName) + 'relat\SangriaCCX.fr3';
    tocFechamentoCaixa:
    begin
      vDirRelat := Extractfilepath(Application.ExeName) + 'relat\FechamentoCCX.fr3';
    end;
    tocFechamentoCaixaMultiplo:
      begin

          vDirRelat := Extractfilepath(Application.ExeName) + 'relat\FechamentoCCXMultiplo.fr3';
          if not FileExists(vDirRelat) then
          begin
            vDirRelat := Extractfilepath(Application.ExeName) + 'relat\FechamentoCCX.fr3';
          end;

      end;

  end;
  if dmdados.Usuario.ccxchave <> 0 then
  begin
    dmdados.caixas.Close;
    dmdados.caixas.sql.Text := 'SELECT ' + InttoStr(dmdados.Usuario.ccxchave) + ' as ccxchave';
    dmdados.caixas.Open;
    mrfrImprimir(dmdados.dsCaixas, vDirRelat, tiImprimirDireto);
  end;
end;

procedure TFPrinciGou.IncluirItem;
var
  vlOrchave:String;
begin
  if not VerificaCozinha then
    Exit;

  if dmdados.orcorcmesa.AsString<>'' then
  begin

    dmdados.consulta.Close;
    dmdados.consulta.sql.Text := 'select orcchave,unmmesa from unm where unmmesa=' + dmdados.orcorcmesa.AsString;
    dmdados.consulta.Open;

    if dmdados.consulta.FieldByName('orcchave').AsString <> '' then
    begin

      dmdados.consulta.Close;
      dmdados.consulta.sql.Text := 'select orcmesa, orrmesa from orc where stocodigo in (1,2) and orcchave=' + dmdados.orcorcchave.AsString;
      dmdados.consulta.Open;

      if dmdados.consulta.IsEmpty then
      begin
        vlOrchave:= dmdados.consulta.FieldByName('orcchave').AsString;
        dmdados.consulta.close;
        dmdados.consulta.sql.Text :='delete from unm where orcchave='+vlOrchave;
        dmdados.Consulta.ExecSQL;
      end
      else
      Showmessage('Esta mesa unida com a ' + dmdados.consulta.FieldByName('orcmesa').AsString + ', não pode receber produtos!');

      Exit;
    end;

  end;

  if dmdados.orcorcchave.AsInteger > 0 then
  begin

    MostraTab(TabCardapio);

  end
  else
    Exit;
end;

procedure TFPrinciGou.IncluirItemFracionado;
begin
  dmdados.brd.Close;
  dmdados.brd.Params[0].AsInteger := dmdados.grpgrpcodigo.AsInteger;
  dmdados.brd.Open;

  Application.CreateForm(tFrmIngredienteFracionado, FrmIngredienteFracionado);
  FrmIngredienteFracionado.LbItem.Caption := dmdados.grpgrpidentificacao.AsString;

  // mostrando tela de ingredientes fracionados
  FrmIngredienteFracionado.ShowModal;

  // destruindo tela de ingredientes fracionados
  FreeAndNil(FrmIngredienteFracionado);

  // carregando itens
  MostraItens;

  // mostrando tela de itens
  MostraTab(TabItens);
end;

procedure TFPrinciGou.lbtitversaoDblClick(Sender: TObject);
begin
  mrfrImprimir(dmdados.dorc, '', tiGerador);
end;

procedure TFPrinciGou.LbVersaoClick(Sender: TObject);
begin

  { Application.CreateForm(TFrmObjetoDados, FrmObjetoDados);
    FrmObjetoDados.ShowModal;
    FreeAndNil(FrmObjetoDados); }
end;

procedure TFPrinciGou.LimpaMesa;
begin
  dmdados.orc.Close;
  dmdados.ito.Close;
  MostraItens;
  LbMesa.Caption := dmdados.Usuario.TituloOperador;
  LbOrcChave.Caption := 'Nº: 000000';
end;

function TFPrinciGou.Logarsistema: Boolean;
var
  AcessoACS: function(pAOwner: TApplication; pConexao: tuniconnection; pTerminal: Integer): Integer;
  vlResult: Integer;
begin
  result := False;

  pack := LoadPackage('modulos\macs.bpl');
  if pack <> 0 then
    try
      @AcessoACS := GetProcAddress(pack, PChar('Acesso'));

      if Assigned(AcessoACS) then
      begin
        vlResult := AcessoACS(Application, dmdados.conexao, dmdados.Usuario.trmcodigo);
        if vlResult <> 0 then
        begin
          SetAcesso(vlResult);
          dmdados.Usuario.clbcodigo := AcessoRec.Usuario;
        end
        else
        begin
          if UPPERCASE(Copy(dmdados.Usuario.VendaIndividual, 1, 1)) = 'S' THEN
          begin
            Logarsistema;
          end
          else
          begin
            Application.Terminate;
          end;
        end;
      end;

    finally
      // DoUnLoadPackage(Application, pack);
    end;

  if vlResult > 0 then
  begin
    result := True;
    Self.Acesso := vlResult;
  end;
End;

{ function TFrmPrincipal.Logarsistema: Boolean;
  type
  Taces = Function(pAOwner: TApplication; pConexao: TUniConnection; pTerminal: Integer): Integer;

  procedure DoUnLoadPackage(AOwner: TComponent; Module: HModule);
  var
  i: Integer;
  m: TMemoryBasicInformation;
  begin
  for i := AOwner.ComponentCount - 1 downto 0 do
  begin
  VirtualQuery(GetClass(AOwner.Components[i].ClassName), m, SizeOf(m));
  if (Module = 0) or (HModule(m.AllocationBase) = Module) then
  AOwner.Components[i].Free;
  end;
  UnRegisterModuleClasses(Module);

  System.Classes.UnRegisterClass(Tdbmemo);
  System.Classes.UnRegisterClass(TCustomdbgrid);
  UnLoadPackage(Module);
  end;

  var
  Exec: Taces;
  vlUsrCodigo: String;
  vlPackacs: Cardinal;
  begin
  Result := True;

  vlPackacs := LoadPackage('modulos\macs.bpl');
  if vlPackacs <> 0 then
  try
  @Exec := GetProcAddress(vlPackacs, PChar('acesso'));

  If Assigned(Exec) then
  vlUsrCodigo := Exec(Application, DmDados.Conexao, DmDados.Usuario.TrmCodigo );

  finally
  DoUnLoadPackage(Application, vlPackacs);
  end;

  if vlUsrCodigo = '' then
  begin
  Result := False;
  Application.Terminate;
  Application.ShowMainForm := False;

  end else
  begin
  DmDados.Usuario.clbcodigo := StrToInt(vlUsrCodigo);
  end;
  end; }

procedure TFPrinciGou.MontaMenuRelatorios;
// função local
  function UpperNome(const sNome: string): string;
  const
    excecao: array [0 .. 5] of string = (' da ', ' de ', ' do ', ' das ', ' dos ', ' e ');
  var
    tamanho, j: Integer;
    I: byte;
  begin
    result := AnsiLowerCase(sNome);
    tamanho := Length(result);

    for j := 1 to tamanho do
      // Se é a primeira letra ou se o caracter anterior é um espaço
      if (j = 1) or ((j > 1) and (result[j - 1] = Chr(32))) then
        result[j] := AnsiUpperCase(result[j])[1];
    for I := 0 to Length(excecao) - 1 do
      result := StringReplace(result, excecao[I], excecao[I], [rfReplaceAll, rfIgnoreCase]);
  end;

var
  ItemRel: TMenuItem;
begin
  With dmdados do
  begin
    rel.Close;
    rel.Params[0].AsString := 'FPrinciGou'; // 'Gourmet';
    rel.Params[1].AsInteger := Usuario.clbcodigo;
    rel.Open;

    PUMenuRelatorios.Items.Clear;
    if not rel.IsEmpty then
    begin
      rel.First;
      while not rel.Eof do
      begin
        ItemRel := TMenuItem.Create(PUMenuRelatorios);
        ItemRel.Caption := UpperNome(relrelidentificacao.AsString);
        ItemRel.Hint := relrelcodigo.AsString;
        ItemRel.OnClick := ChamaRelatorio;
        PUMenuRelatorios.Items.Add(ItemRel);
        rel.Next;
      end;
    end;
  end;
end;

Function ajustadata(Dia: String): String;

Var
  d: String;
  di, me, an: String;
Begin
  d := Dia;
  di := Copy(d, 1, 2);
  me := Copy(d, 4, 2);
  an := Copy(d, 7, 4);
  d := an + '-' + me + '-' + di;
  result := d;
End;

procedure TFPrinciGou.MostraItens;
var
  vlProAtendimento: Integer;
  vlorcgeralav: string;
  vlorctotalav: string;
  vlorcdescontoav: string;
  vlRecTotal: Double;
  vlRecDesconto: Double;
  vlRecTotalTaxas: Double;
  vlItoatual:integer;

begin

  vpTotal := 0;
  LbItemQtde.Caption := 'Itens: 0';

  vpTotal := 0;
  vpDesconto := 0;


  if not dmdados.orc.IsEmpty then
  begin

    dmdados.ito.DisableControls;
    dmdados.ito.Close;
    dmdados.ito.Params[0].AsInteger := dmdados.orcorcchave.AsInteger;
    dmdados.ito.Open;
    dmdados.ito.EnableControls;

    dmdados.itodes.Close;
    dmdados.itodes.Params[0].AsInteger := dmdados.orcorcchave.AsInteger;
    dmdados.itodes.Open;

    if not dmdados.itodes.IsEmpty then
    begin

      dmdados.itodes.First;

      while not dmdados.itodes.Eof do
      begin
        if dmdados.itodes.fieldbyname('stocodigo').AsInteger = 1 then
        begin
          dmdados.itodes.Edit;
          dmdados.itodes.fieldbyname('stocodigo').AsInteger := 2;
          dmdados.itodes.Post;
        end;



        if (dmdados.itodes.fieldbyname('stocodigo').AsInteger = 2) and
           (dmdados.itodes.fieldbyname('procodigo').AsInteger <> dmdados.cfgmcfgcfgmgouproatendimento.AsInteger) then
          vpTotal := vpTotal + dmdados.itodes.fieldbyname('itototalav').AsCurrency;

        dmdados.itodes.Next;
      end;
      dmdados.itodes.First;

      LbItemQtde.Caption := 'Itens: ' + InttoStr(dmdados.itodes.RecordCount);

    end
    else
    begin

      if horario.Caption <> '00:00:00' then
      begin

        vpSQL := 'update orc set orchoraabert=' + QuotedStr(horario.Caption) + ', orcdataabert=' + QuotedStr(ajustadata(vpCznDataAbertura)) +
          ' where orcchave=' + vpOrcChave;

        dmdados.ExecutaSQL(vpSQL);
      end;

    end;

  end;

  CalculaRecebimentos(dmdados.orcorcchave.AsString);

  vpTotal := 0;
  vpTotalOutras:=0;
  vpDesconto := 0;
  vpTotalTaxas := 0;

  if not dmdados.orc.IsEmpty then
  begin

    dmdados.itodes.Close;
    dmdados.itodes.Params[0].AsInteger := dmdados.orcorcchave.AsInteger;
    dmdados.itodes.Open;

    if not dmdados.itodes.IsEmpty then
    begin

      dmdados.itodes.First;
      while not dmdados.itodes.Eof do
      begin

        if dmdados.itodes.FieldByName('itoquantidade').AsFloat = 0 then
        begin
          dmdados.Itodes.Delete;
        end
        else
        begin

          if (dmdados.itodes.fieldbyname('stocodigo').AsInteger = 2) and (dmdados.itodes.fieldbyname('procodigo').AsInteger <> dmdados.cfgmcfgcfgmgouproatendimento.AsInteger) and
            (dmdados.itodes.fieldbyname('procodigo').AsInteger <> dmdados.cfgmcfgcfgmgouproatendimentoparcial.AsInteger)   then
          begin
            vpTotal := vpTotal + dmdados.itodes.fieldbyname('itototalav').AsCurrency;
            vpDesconto := vpDesconto+ dmdados.itodes.fieldbyname('itodescontoav').AsCurrency;

             if dmdados.itogrpidentificacao.asstring='TAXAS ESPECIAIS' then
               vpTotalOutras:=vpTotalOutras+ dmdados.itodes.fieldbyname('itototalav').AsCurrency;


          end;

          if (dmdados.itodes.fieldbyname('stocodigo').AsInteger = 2) and ((dmdados.itodes.fieldbyname('procodigo').AsInteger = dmdados.cfgmcfgcfgmgouproatendimento.AsInteger) or
            (dmdados.itodes.fieldbyname('procodigo').AsInteger = dmdados.cfgmcfgcfgmgouproatendimentoparcial.AsInteger)) then
          begin
             if dmdados.itogrpidentificacao.asstring<>'TAXAS ESPECIAIS' then
               vpTotalTaxas := vpTotalTaxas + dmdados.itodes.fieldbyname('itototalav').AsCurrency;
          end;

          dmdados.itodes.Next;
        end;
      end;
      dmdados.itodes.First;

      LbItemQtde.Caption := 'Itens: ' + InttoStr(dmdados.itodes.RecordCount);


    end;
  end;




  CalculaRecebimentos(dmdados.orcorcchave.AsString);

  LbItemTotal.Caption := formatfloat('#,##0.00', vpTotal - vpDesconto);
  LbItemGeral.Caption := formatfloat('#,##0.00', (vpTotal));
  LbReceber.Caption := formatfloat('#,##0.00', (vpTotal - (vpRecebimentos + vpDesconto)));

  if dmdados.cfgmcfgcfgmgoutaxaatendimento.AsFloat > 0 then
  begin

    LbReceberTaxa.Visible := True;
    LbCapReceberTaxa.Visible := True;

    LbReceberTaxa.Caption := formatfloat('#,##0.00', (vpTotal - (vpRecebimentos + vpDesconto)) +
      (((vpTotal -vpTotalOutras)- (vpRecebimentos + vpDesconto)) * (dmdados.cfgmcfgcfgmgoutaxaatendimento.AsFloat / 100)));

  end
  else
  begin
    LbReceberTaxa.Visible := False;
    LbCapReceberTaxa.Visible := False;
  end;

  if (vpOrcChave <> '') and (vpOrcChave <> '0') then
  begin
    dmdados.itoresumo.Close;
    dmdados.itoresumo.ParamByName('orcchave').AsString := vpOrcChave;
    dmdados.itoresumo.Open;

  end;

  vlRecTotal := 0;
  if dmdados.Ditorec.DataSet.Active then
  begin
    dmdados.Ditorec.DataSet.First;
    while not dmdados.Ditorec.DataSet.Eof do
    begin

      vlRecTotal := vlRecTotal + dmdados.Ditorec.DataSet.FindField('itototalav').AsCurrency;

      dmdados.Ditorec.DataSet.Next;
    end;

    dmdados.Ditorec.DataSet.First;

  end;

  LbItensRecebido.Caption := formatfloat('#,##0.00', vlRecTotal);
  LbItemTotalGeral.Caption := formatfloat('#,##0.00', vlRecTotal + vpTotal - vpDesconto);

 { if dmdados.dIto.DataSet.Active then
  begin
    dmdados.dIto.DataSet.Last;
  end;}

  dmdados.ito.EnableControls;
  //TrimAppMemorySize;
end;

procedure TFPrinciGou.VerAtualizacao(pacote: string);
begin
end;

function TFPrinciGou.mostralista(pModulo, pUsuario: string; pFiltro: string): string;
type
  TExecFormu = function(AOwner: TComponent; conexao: tuniconnection; vusuario: string; vtipolista: Integer; vmodulo: string; vfiltro: string;
    vmodo: string): string;
var
  ExecFormu: function(CargaFrame: TCargaFrame): String;
  vlCargaFrame: TCargaFrame;
  vlRetorno: string;
  pack: Cardinal;
begin

  // VerAtualizacao(pModulo);

  pack := LoadPackage('modulos\' + pModulo + '.bpl');

  (* Abandona pois não localizou o módulo (Pode ser adicionada mensagem informando o usuário) *)
  if pack = 0 then
    Exit;

  try
    @ExecFormu := GetProcAddress(pack, PChar('formu'));
    if Assigned(ExecFormu) then
    begin
      FPrinciGou.AcessoRec.Usuario := dmdados.clbclbcodigo.AsInteger;
      vlCargaFrame := CargaFrameFormu(Application, pack, dmdados.conexao, FPrinciGou.AcessoRec, pFiltro, '');
      result := ExecFormu(vlCargaFrame);

    end;
  finally
    // DoUnLoadPackage(Application, pack);
  end;
end;

procedure TFPrinciGou.MostraTab(Tab: TTabSheet);
begin
  // desabilitando TabSheets
  TabCardapio.TabVisible := False;
  TabItens.TabVisible := False;

  if Tab = TabItens then
  begin
    PnMesas.Enabled := True;
    PnOperacoes.Enabled := True;

  end;

  // Abrindo Grupos do Cardapio
  if Tab = TabCardapio then
  begin
    PnMesas.Enabled := False;
    PnOperacoes.Enabled := False;
    with dmdados do
    begin
      tito.Close;
      tito.Open;

      pun.Close;
      proc.Close;

      grp.Close;
      grp.Open;
    end;
  end;
  Tab.TabVisible := True;
  PCMesa.ActivePage := Tab;
end;

function TFPrinciGou.RegistraOperacaoCaixa(vTocCodigo: Integer): string;
type
  TformuCaixa = function(AOwner: TComponent; conexao: tuniconnection; Acesso: TAcesso; vCtaCodigo: string; vTurno: string; vTrmCodigo: string;
    vOperacao: Integer; vCcxChave: string): string;

var
  RegistraCaixa: TformuCaixa;
  vlRetorno: string;
  vlPackccx: Cardinal;
begin
  if AcessoRec.Usuario = 0 then
    AcessoRec.Usuario := dmdados.Usuario.clbcodigo;

  if (vTocCodigo <> tocAberturaCaixa) or (AcessoRec.Usuario = 0) then
  begin

    dmdados.consulta.Close;
    dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
    dmdados.consulta.Open;

    AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;

  end;

  result := '';
  vlPackccx := LoadPackage('modulos\mccx.bpl');

  if vlPackccx <> 0 then
    try
      @RegistraCaixa := GetProcAddress(vlPackccx, PChar('formuCaixa'));

      if Assigned(RegistraCaixa) then
      begin

        vlRetorno := RegistraCaixa(Application, dmdados.conexao, AcessoRec, InttoStr(dmdados.Usuario.CtaCodigo), '1',
          InttoStr(dmdados.Usuario.trmcodigo), vTocCodigo, vpCcxChave);
        result := vlRetorno;
      end;
    finally
      // DoUnLoadPackage(Application, vlPackccx);
    end;
end;

procedure TFPrinciGou.SBPedidoClick(Sender: TObject);
var
  vSQL: string;
begin

  dmdados.consulta.Close;
  dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
  dmdados.consulta.Open;

  AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;
  if dmdados.ito.IsEmpty then
    Exit;

  vSQL := 'UPDATE imm' + ' INNER JOIN ito ON imm.itochave = ito.itochave' + ' INNER JOIN orc ON ito.orcchave = orc.orcchave' +
    '   SET immhoraimpresso = null' + ' WHERE orc.orcchave = ' + dmdados.orcorcchave.AsString + '   AND ito.itochave = ' +
    dmdados.itoitochave.AsString + '   and orc.stocodigo IN (1,2,5)';

  if MessageDlg('Reimpressão de pedido: ' + #13 + #13 + ' pedido nº ' + dmdados.itoimmnumepedido.AsString + #13 + ' Produto: ' +
    dmdados.itopronome.AsString + #13 + #13 + 'Confirma reimpressão ?', mtConfirmation, [mbYes, mbNo], 0, mbNo) = mrYes then
    dmdados.ExecutaSQL(vSQL);
  EdtOperador.SetFocus;
end;

procedure TFPrinciGou.SBProdutoClick(Sender: TObject);
var
  vlOrcChave: string;
  vlstocodigo:String;

begin




  try
  SBProduto.Enabled:=false;

  if sonumeros(LbMesa.caption)='' then
    begin
      Exit
    end;

    TmMesa.Enabled := False;

    dmdados.orc.Close;
    dmdados.orc.Parambyname('orcmesa').AsInteger :=vpMesaAtual;
    dmdados.orc.Open;


    if dmdados.orcorcmesa.AsString = '' then
    begin



    //  AbreMesa(vpMesaAtual);
    end;

    dmdados.tbrd.Close;
    dmdados.tbrd.Open;

    dmdados.tisi.Close;
    dmdados.tisi.Open;

    vlstocodigo:= dmdados.orcstocodigo.AsString;

    if dmdados.orcorcmesa.AsString = dmdados.Usuario.MesaVendaRapida then
    begin

    end
    else
    begin

      dmdados.consulta.Close;
      dmdados.consulta.sql.Text := 'select orcchave,unmmesa from unm where unmmesa=' + dmdados.orcorcmesa.AsString;
      dmdados.consulta.Open;

      if dmdados.consulta.FieldByName('orcchave').AsString <> '' then
      begin
        vlOrcChave := dmdados.consulta.FieldByName('orcchave').AsString;



        dmdados.consulta.Close;
        dmdados.consulta.sql.Text := 'select orcmesa from orc where stocodigo=2 and orcchave=' + vlOrcChave;
        dmdados.consulta.Open;


        if dmdados.consulta.isempty then
        begin
          dmdados.consulta.Close;
          dmdados.consulta.sql.Text := 'delete from unm where orcchave=' + vlOrcChave;
          dmdados.consulta.execsql;

        end
        else
        begin
          Showmessage('Esta mesa unida com a ' + dmdados.consulta.FieldByName('orcmesa').AsString + ', não pode receber produtos!');
        Exit;
        end;
      end;

      if ActAbreCaixa.Enabled then
      begin

        Showmessage('Caixa necessita esta aberto!');
        Exit;
      end;

      if dmdados.orc.Active then
      begin


        if dmdados.ExecutaSQL('UPDATE orc SET stocodigo = '+vlstocodigo + ', orcimpressao = 0 WHERE orcchave = ' + dmdados.orcorcchave.AsString) then
        begin

          if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
          begin
            if dmdados.adctef.FieldByName('adcchaveintegracao').asstring<>'' then
            begin
              CancelaRecebimentoStone;
            end;
          end;

          VerificaMesa;

        end;

        IncluirItem;



      {  if vlstocodigo='5' then
        begin
          dmdados.ExecutaSQL('UPDATE orc SET stocodigo = 5, orcimpressao = 0 WHERE orcchave = ' + dmdados.orcorcchave.AsString);
        end; }


      end;

    MostraItens;

    end;
  finally
    SBProduto.Enabled:=True;
    EdtOperador.SetFocus;
    TmMesa.Enabled := True;
  end;


end;

procedure TFPrinciGou.SBSairClick(Sender: TObject);
begin
  vpPodeFechar := True;
  Application.Terminate;
end;

procedure TFPrinciGou.SBImpComandaClick(Sender: TObject);
var
  I: Integer;
  vlValorTaxaServico: string;
begin
  if SoNumeros(LbMesa.Caption) = '' then
  begin
    Showmessage('É necessário uma mesa selecionda');
    Exit;
  end;

 // if MessageDlg('Confirma emissão do resumo de vendas da mesa ' + LbMesa.Caption + '?', mtConfirmation, [mbYes, mbNo], 0, mbNo) = IdYes then
 // begin

    dmdados.ccx.Close;
    dmdados.ccx.ParamByName('clbcodigo').AsInteger := dmdados.Usuario.clbcodigo;
    dmdados.ccx.Open;


    if (vpCcxChave = '0') or (vpCcxChave = '') then
    begin
      vpCcxChave := dmdados.ccxccxchave.AsString
    end;

    FCcxchave:=vpCcxChave.ToInteger;

    if (vpOrcChave = '') or (vpOrcChave = '0') then
    begin
      vpOrcChave := trim(Copy(LbOrcChave.Caption, 4, 5));
    end;

    if (vpOrcChave <> '') and (vpCcxChave <> '') then
    begin

      dmdados.consulta.Close;
      dmdados.consulta.sql.Text := 'update orc set ccxchave=' + vpCcxChave + ' where orcchave=' + vpOrcChave;
      dmdados.consulta.ExecSQL;

      dmdados.consulta.Close;
      dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
      dmdados.consulta.Open;

      AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;

      if not dmdados.orc.IsEmpty then
      begin
      {  Application.CreateForm(tFrmResumoPessoa, FrmResumoPessoa);
        vlValorTaxaServico := LbItemTotal.Caption;
        vlValorTaxaServico := StringReplace(LbItemTotal.Caption, '.', '', [rfReplaceAll, rfIgnoreCase]);

        dmdados.orc.Edit;
        FrmResumoPessoa.ShowModal;}

        ImprimeResumo(dmdados.orcorcchave.AsInteger);

      end;
  //  end;
  end;
  MostraItens;
  EdtOperador.SetFocus;

end;

procedure TFPrinciGou.ImprimeResumo(pOrcChave: Integer; pOrigem: Integer = 1);
var
  vlNomeArq: string;
  vlsql: string;
begin

  if dmdados.cfgmcfgcfgmgoutaxaatendimento.AsCurrency > 0 then
  begin
    vlNomeArq := Extractfilepath(Application.ExeName) + 'relat\resumomesataxa.fr3';
  end
  else
  begin
    vlNomeArq := Extractfilepath(Application.ExeName) + 'relat\resumomesa.fr3';
  end;

  if FileExists(vlNomeArq) then
  begin

    dmdados.ConsultaSQL('SELECT * from orc where orcchave=' + InttoStr(pOrcChave));

    if pOrigem = 1 then
    begin

      vlsql := 'update orc set orcimpressao = (IFNULL(orcimpressao,0) + 1) where orcchave = ' + InttoStr(pOrcChave);
      dmdados.ExecutaSQL(vlsql);

      if dmdados.cfgmcfgcfgprevisualizarimpressao.AsInteger = 1 then
        mrfrImprimir(dmdados.dorc, vlNomeArq, tiImprimir)
      else
        mrfrImprimir(dmdados.dorc, vlNomeArq, tiImprimirDireto)
    end
    else
    begin
      mrfrImprimir(dmdados.dmsaimprime, vlNomeArq, tiImprimirDireto);
      vlsql := 'update orc set orcimpressao = (IFNULL(orcimpressao,0) + 1) where orcchave = ' + InttoStr(pOrcChave);
      dmdados.ExecutaSQL(vlsql);

    end;
  end
  else
    Showmessage('Aquivo não encontrado' + #13 + vlNomeArq + #13 + 'Não é possível imprimir resumo de ' + dmdados.Usuario.TituloOperador +
      ', verifique !');
end;

procedure TFPrinciGou.Image1Click(Sender: TObject);
var
  vName: String;
begin
  vName := ServiceGetKeyName(pubNomeComputador, 'Spooler de Impressão');
  ServiceStop(pubNomeComputador, vName);
  ServiceStart(pubNomeComputador, vName);
end;

procedure TFPrinciGou.ImprimeEntrega(pOrcChave: Integer);
var
  vlNomeArq: string;
begin
  if dmdados.cfgmcfgcfgmgoutaxaatendimento.AsCurrency > 0 then
  begin
    vlNomeArq := Extractfilepath(Application.ExeName) + 'relat\resumomesataxa.fr3';
  end
  else
  begin
    vlNomeArq := Extractfilepath(Application.ExeName) + 'relat\resumomesa.fr3';
  end;

  if FileExists(vlNomeArq) then
  begin
    dmdados.ExecutaSQL('update orc set orcimpressao = (IFNULL(orcimpressao,0) + 1) where orcchave = ' + InttoStr(pOrcChave));
    dmdados.ConsultaSQL('SELECT ' + InttoStr(pOrcChave) + ' as orcchave');
    mrfrImprimir(dmdados.dConsulta, vlNomeArq, tiImprimirDireto);
  end
  else
    Showmessage('Aquivo não encontrado' + #13 + vlNomeArq + #13 + 'Não é possível imprimir resumo de ' + dmdados.Usuario.TituloOperador +
      ', verifique !');
end;

procedure TFPrinciGou.TabCardapioShow(Sender: TObject);
begin
  EdtProduto.Clear;
  EdtProduto.SetFocus;
end;

procedure TFPrinciGou.TabItensShow(Sender: TObject);
begin
  EdtOperador.Clear;
  EdtOperador.SetFocus;
end;

procedure TFPrinciGou.TmCozinhaTimer(Sender: TObject);
begin
  LbCozinha.Visible := (not LbCozinha.Visible);

end;

procedure TFPrinciGou.TmMesaTimer(Sender: TObject);
var
  myYear, myMonth, myDay, myHour, myMin, mySec, myMSec: Word;
  myDate: TDateTime;

  TotalCPUusagePercentage: Double;
  vlfstonenome : String;
  vlMesa: String;
begin

 if not dmdados.adctef.Active then
 dmdados.adctef.Open;

  if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
  begin

    try
    if dmdados.adctef.FieldByName('adcchaveintegracao').asstring<>'' then
    begin
        imStoneonLine.Visible:=True
    end;
    except
      imStoneonLine.Visible:=False;
    end;

  end;


  AjustaCodigoCozinha;

  verhorario.Close;
  verhorario.Connection := dmdados.conexao;
  verhorario.sql.Text := 'select now() horario';
  verhorario.Open;

  if not verhorario.IsEmpty then
  begin
    myDate := verhorario.FieldByName('horario').AsDateTime;

    DecodeDateTime(myDate, myYear, myMonth, myDay, myHour, myMin, mySec, myMSec);

  end;

  horario.Caption := formatfloat('00', myHour) + ':' + formatfloat('00', myMin) + ':' + formatfloat('00', mySec);

  dmdados.msaimprime.Close;
  dmdados.msaimprime.Open;

  if not dmdados.msaimprime.IsEmpty then
  begin

    if dmdados.msaimprimeorcimpressao.AsInteger = 0 then
    begin
      TmMesa.Enabled := False;

      if StrtoInt(trim(Copy(LbOrcChave.Caption, 4, 5))) <> dmdados.msaimprimeorcchave.AsInteger then
      begin

        if (lowercase(vpImprimeResumo) = 'sim') or (lowercase(vpImprimeResumo) = '1') then
        begin
          FPrinciGou.ImprimeResumo(dmdados.msaimprimeorcchave.AsInteger, 2);

          if not dmdados.adctef.Active then
            dmdados.adctef.open;

          if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
          begin

            if dmdados.adctef.FieldByName('adcchaveintegracao').asstring<>'' then
            begin

              CancelaRecebimentoStone;
              //  EnviaPagamentoHide(vpMesaAtual.ToString, dmdados.orcorcchave.AsInteger);



              MostraRecebimentoStone(dmdados.msaimprimeorcmesa.AsString ,dmdados.msaimprimeorcchave.AsInteger );
            end;

          end;

        end;


      end;
      TmMesa.Enabled := True;

    end;

  end;

  AtualizaMesas;
  EstadoMemoria;

end;

procedure TFPrinciGou.VerificaMesa;
var
  vPos: Integer;
  vPosPanel: Integer;
  vScroll: TScrollBox;
  vPanel: TPanel;

  vlorcdescontoav: string;
  vlorcgeralav: string;
  vlorctotalav: string;

  vlMesa:String;
  vlfstonenome:String;

begin
  try
    TmMesa.Enabled := False;

    dmdados.msaocupada.Close;
    dmdados.msaocupada.Open;

    vScroll := (PnMesas.Controls[0] as TScrollBox);
    for vPos := 0 to vScroll.ControlCount - 1 do
    begin
      vPanel := (vScroll.Controls[vPos] as TPanel);
      for vPosPanel := 0 to vPanel.ControlCount - 1 do
      begin
        if (vPanel.Controls[vPosPanel] is TBitBtn) then
        begin
          if dmdados.msaocupada.Locate('orcmesa', (vPanel.Controls[vPosPanel] as TBitBtn).Tag, []) then
          begin
            if dmdados.msaocupadastocodigo.AsInteger in [1, 2] then
            begin
              (vPanel.Controls[vPosPanel] as TBitBtn).Font.Color := $00FF0080;
              (vPanel.Controls[vPosPanel] as TBitBtn).Font.Style := [fsBold];

            end
            else if dmdados.msaocupadastocodigo.AsInteger in [5] then
            begin
              (vPanel.Controls[vPosPanel] as TBitBtn).Font.Color := clRed;
              (vPanel.Controls[vPosPanel] as TBitBtn).Font.Style := [fsBold];

              if not dmdados.adctef.Active then
                dmdados.adctef.open;

            end
            else if dmdados.msaocupadastocodigo.AsInteger in [99] then
            begin
              (vPanel.Controls[vPosPanel] as TBitBtn).Font.Color := clGreen;
              (vPanel.Controls[vPosPanel] as TBitBtn).Font.Style := [fsBold];
            end;
          end
          else
          begin
            if (vPanel.Controls[vPosPanel] as TBitBtn).Font.Color = clRed then
            begin

             if not dmdados.adctef.Active then
                dmdados.adctef.open;

              if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
              begin

                if dmdados.adctef.FieldByName('adcchaveintegracao').asstring<>'' then
                begin
                  MostraRecebimentoStone((vPanel.Controls[vPosPanel] as TBitBtn).Caption, dmdados.msaocupadaorcchave.AsInteger);
                end;

              end;

              Sleep((50));

            end;
            if (vPanel.Controls[vPosPanel] as TBitBtn).Font.Color = clRed then
            begin
             // (vPanel.Controls[vPosPanel] as TBitBtn)
              (vPanel.Controls[vPosPanel] as TBitBtn).Font.Style := [fsbold];

            end;

            (vPanel.Controls[vPosPanel] as TBitBtn).Font.Color := clBlack;
            (vPanel.Controls[vPosPanel] as TBitBtn).Font.Style := [];



          end;
        end;
      end;
    end;
  finally
    TmMesa.Enabled := True;
  end;
end;

function TFPrinciGou.VerificaCozinha: Boolean;
begin
  // verificando se existe abertura de cozinha em aberto
  if dmdados.ConsultaSQL('select cznchave from czn where cznfechamento IS null order by cznchave limit 1') then
  begin
    dmdados.Usuario.cznchave := dmdados.consulta.fields[0].AsInteger;
    PnCozinha.Visible := False;
    pnInfoTopo.Visible := True;
    TmCozinha.Enabled := False;
    vpCznChave := dmdados.Usuario.cznchave.ToString;
    result := True;
  end
  else
  begin
    dmdados.Usuario.cznchave := 0;
    PnCozinha.Visible := True;
    pnInfoTopo.Visible := False;
    TmCozinha.Enabled := True;
    vpCznChave := '0';
    result := False;
  end;
end;

function TFPrinciGou.VersaoExe(const FileNAme: String): String;
type
  TVersionInfo = packed record
    Dummy: array [0 .. 7] of byte;
    V2, V1, V4, V3: Word;
  end;
var
  Zero, Size: Cardinal;
  Data: Pointer;
  VersionInfo: ^TVersionInfo;
begin
  Size := GetFileVersionInfoSize(Pointer(FileNAme), Zero);
  if Size = 0 then
    result := ''
  else
  begin
    GetMem(Data, Size);
    try
      GetFileVersionInfo(Pointer(FileNAme), 0, Size, Data);
      VerQueryValue(Data, '\\\', Pointer(VersionInfo), Size);
      result := Format('%d.%d.%d.%d', [VersionInfo.V1, VersionInfo.V2, VersionInfo.V3, VersionInfo.V4]);
    finally
      FreeMem(Data);
    end;
  end;
end;

procedure TFPrinciGou.AcoesExecute(Action: TBasicAction; var Handled: Boolean);
begin
  if (Action.Name <> 'ActCancelaItem') and (Action.Name <> 'ActCancelaTodos')
  and (Action.Name <> 'ActDesconto') then
  begin
    if not Autorizado(Action as TAction, '') then
      Handled := True;
  end;

end;

function TFPrinciGou.Autorizado(pAction: TAction; pMotivo: String): Boolean;
type
  TAutorizacaoAten = function(AOwner: TComponent; conexao: tuniconnection; vusuario: string; vactcodigo: string; vMotivo: string; vorcchave: String;
    vTrmCodigo: String): string;

var
  Autoriza: TAutorizacaoAten;
  vlRetorno: string;
  vlActCodigo: Integer;
  vlPackLia: Cardinal;
  vlOrcChave: string;
begin
  try
    result := True;

    vlActCodigo := pAction.Tag;

    if AcessoRec.Usuario = 1 then
    begin
      result := True;
      Exit;
    end
    else
    begin

      if vlActCodigo > 0 then
      begin

        dmdados.dau.Close;
        dmdados.dau.ParamByName('mdlnome').AsString := Self.Name;
        dmdados.dau.ParamByName('clbcodigo').AsInteger := AcessoRec.Usuario;
        dmdados.dau.Open;

        if not dmdados.dau.Locate('actcodigo;dauativo', VarArrayOf([vlActCodigo, 1]), []) then
        begin
          result := False;

          vlPackLia := 0;
          vlPackLia := LoadPackage('modulos\mlia.bpl');
          if vlPackLia <> 0 then
            try
              @Autoriza := GetProcAddress(vlPackLia, PChar('liberacaoAten'));

              if Assigned(Autoriza) then
              begin
                vlOrcChave := dmdados.orcorcchave.AsString;
                if vlOrcChave = '' then
                  vlOrcChave := '0';

                vlRetorno := Autoriza(Application, dmdados.conexao, AcessoRec.Usuario.ToString, InttoStr(vlActCodigo), pMotivo, vlOrcChave,
                  AcessoRec.Terminal.ToString);

                if (vlRetorno <> '0') and (vlRetorno <> '') then
                  result := True;
              end;
            finally
              // DoUnLoadPackage(Application, vlPackLia);
            end;
        end;
      end;
    end;
  except

  end;
end;

procedure TFPrinciGou.btBuscaERPClick(Sender: TObject);
var
  vlProcodigo: String;
begin
  vlProcodigo := '';
  vlProcodigo := mostralista('mpro', AcessoRec.Usuario.ToString, '');
  if vlProcodigo <> '' then
  begin
    vpProcodigo := vlProcodigo;
    EdtProduto.Text := vlProcodigo;
    BuscaProduto(StrtoInt(EdtProduto.Text));
  end;
end;

procedure TFPrinciGou.AtribuiTagAcesso;
var
  I: Integer;
begin
  dmdados.act.Close;
  dmdados.act.sql.Clear;
  dmdados.act.sql.Add('SELECT act.actcodigo, act.actacao');
  dmdados.act.sql.Add('  FROM mdl');
  dmdados.act.sql.Add(' INNER JOIN act ON mdl.mdlcodigo = act.mdlcodigo');
  dmdados.act.sql.Add(' WHERE mdl.mdlnome = ''' + Self.Name + '''');
  dmdados.act.Open;

  for I := 0 to Self.Acoes.ActionCount - 1 do
    if dmdados.act.Locate('actacao', Self.Acoes[I].Name, []) then
      Self.Acoes[I].Tag := dmdados.actactcodigo.AsInteger;
end;

procedure TFPrinciGou.ActAbreCaixaExecute(Sender: TObject);
var
  vlValorOperacao: string;
  vSQL: String;
begin

  // por na abertura do sistema
  if not(dmdados.Usuario.CtaCodigo > 0) then
  begin
    Application.MessageBox(PChar('Não foi possível abrir o caixa.' + #13 + 'Este terminal não possui uma conta corrente vinculada.'), 'Atenção',
      MB_ICONWARNING + MB_OK);
    EdtOperador.SetFocus;
    Exit;
  end;

  AjustaCodigoCozinha;

  vSQL := 'SELECT ccx.ccxchave , ccx.ccxdataber , ccx.ccxhoraaber, clb.clbidentificacao ' + '  FROM ccx ' +
    ' INNER JOIN clb ON ccx.clbcodigo = clb.clbcodigo ' + ' WHERE ccx.ctacodigo = ' + InttoStr(dmdados.Usuario.CtaCodigo) +
    ' AND ccx.ccxdatafecha IS NULL';

  if not dmdados.ConsultaSQL(vSQL) then
  begin
    vlValorOperacao := RegistraOperacaoCaixa(tocAberturaCaixa);

    if (vlValorOperacao <> '') then
    begin
      if dmdados.ConsultaSQL(vSQL) then
        dmdados.Usuario.ccxchave := dmdados.consulta.fields[0].AsInteger;
      AjustaBotoes(True);

      if FileExists(Extractfilepath(Application.ExeName) + 'relat\AberturaCCX.fr3') then
        ImprimirComprovantesCCX(tocAberturaCaixa);

      CarregaUsuario;

      vSQL:='update orc set ccxchave='+vpCcxChave+' where stocodigo=2';
      dmdados.ConsultaSQL(vSQL);

    end;
    EdtOperador.SetFocus;
  end
  else
  begin
    Showmessage('Atenção: ' + #13 + #13 + 'Este terminal já possui um caixa aberto, não pode ser aberto outro caixa ao mesmo tempo!' + #13 + #13 +
      'Caixa Aberto de: ' + dmdados.consulta.fields[3].AsString + #13 + 'Data Abertura  : ' + dmdados.consulta.fields[1].AsString + #13 +
      'Hora Abertura  : ' + dmdados.consulta.fields[2].AsString);
    EdtOperador.SetFocus;

    Exit;
  end;
end;

function TFPrinciGou.RegistroAcessoOperacao(vactcodigo: string; vMotivo: string; vtabela: string = ''; vregistro: string = ''): Boolean;
var
  auto: TliberacaoRFI;
  vRetornoUsr: string;
  vLiberacao: Boolean;
  pack: Cardinal;
begin

  vLiberacao := True;

  pack := LoadPackage('modulos\mlia.bpl');
  if pack <> 0 then
    try
      @auto := GetProcAddress(pack, PChar('liberacao'));

      if Assigned(auto) then
      begin
        vRetornoUsr := auto(Application, dmdados.conexao, dmdados.Usuario.clbcodigo.ToString, vactcodigo, vMotivo, '', '', '', '', '', True, vtabela,
          vregistro);

        if (vRetornoUsr = '0') or (vRetornoUsr = '') then // retornou NÃO AUTORIZADO
          vLiberacao := False;
      end;
    finally
      // DoUnLoadPackage(Application, pack);
    end;

  result := vLiberacao;
end;

procedure TFPrinciGou.ActCancelaItemExecute(Sender: TObject);
var
  vRecno: Integer;
  vSQL: String;
  vSQLOrc: String;
  vFracionado: Integer;
  vCancQuantidade: Extended;
  vSalvQuantidade: Extended;
  vlItoChave: String;
  vlItoChaveOrigem: String;
  vlSbiChave: string;

  vlClbCodigo: String;

  vlQuantidade: String;
  vlAcao: string;
  vlitoatual: string;
  I: Integer;

  vlDirRelat: string;
  vlStoCodigo:String;

  vlOrcChave:String;
begin

  try

  ActCancelaItem.enabled:=false;

  if SoNumeros(LbMesa.Caption) = '' then
  begin
    Showmessage('É necessário uma mesa selecionda');
    Exit;
  end;


  if DmDados.dIto.dataset.recordcount=1 then
  begin
    vlOrcChave:=dmdados.orcorcchave.asstring;
    vpOrcChave:=vlOrcChave;

    if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
    begin
      if dmdados.adctef.FieldByName('adcchaveintegracao').asstring<>'' then
      begin
        sleep(4000);
        CancelaRecebimentoStone;
      end;
    end;

    SBCancelaPedido.click;
    dmdados.ExecutaSQL('UPDATE orc SET stocodigo = 88, orcimpressao = 0 WHERE orcchave = ' +vlOrcChave);
    dmdados.ExecutaSQL('UPDATE ito SET stocodigo = 88  WHERE orcchave = ' +vlOrcChave);

    exit;
  end;





  TmMesa.Enabled := False;

  vlStoCodigo:=dmdados.orcstocodigo.AsString;


    try


      vlAcao := InttoStr((Sender as TAction).Tag);
      if RegistroAcessoOperacao(vlAcao, 'Registro', 'ITO', dmdados.dIto.DataSet.FieldByName('itochave').AsString) then
      begin






        dmdados.consulta.Close;
        dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
        dmdados.consulta.Open;

        AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;

        if dmdados.ExecutaSQL('UPDATE orc SET stocodigo = 2, orcimpressao = 0 WHERE orcchave = ' + dmdados.orcorcchave.AsString) then
        begin

          VerificaMesa;
        end
        else
        begin
          Showmessage('Não foi possivel reabrir ' + dmdados.Usuario.TituloOperador + ', verifique !');
        end;

        vlitoatual := dmdados.dIto.DataSet.FieldByName('itochave').AsString;

        dmdados.consulta.Close;
        dmdados.consulta.sql.Text := 'update orc set ccxchave=' + vpCcxChave + ' where orcchave=' + vpOrcChave;
        dmdados.consulta.ExecSQL;

        dmdados.consulta.Close;
        dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
        dmdados.consulta.Open;

        AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;

        if dmdados.itostocodigo.AsInteger <> 2 then
          Exit;

        vSQLOrc := ' UPDATE orc ' + '  INNER JOIN (SELECT ito.orcchave ' + '                   , SUM(itovalorav * itoquantidade) totav ' +
          '                   , SUM(itodescontoav * itoquantidade) descav ' + '                   , SUM(itovalorav * itoquantidade) totap ' +
          '                   , SUM(itodescontoap * itoquantidade) descap ' + '                FROM ito ' + '               WHERE stocodigo != 88 ' +
          '               GROUP BY ito.orcchave ) tito ' + '         ON tito.orcchave = orc.orcchave ' + '    SET orc.orcgeralav    = tito.totav ' +
          '      , orc.orcdescontoav = tito.descav ' + '      , orc.orcpercdescav = 0 ' + '      , orc.orctotalav    = (tito.totav - tito.descav) ' +
          '      , orc.orcgeralap    = tito.totap ' + '      , orc.orcdescontoap = tito.descap ' + '      , orc.orcpercdescap = 0 ' +
          '      , orc.orctotalap    = (tito.totap - tito.descap) ' + '  WHERE orc.orcchave = ' + dmdados.orcorcchave.AsString;

        if not dmdados.ito.IsEmpty then
        begin



        { if ((dmdados.itoitototalav.AsCurrency / dmdados.itoitoquantidade.AsFloat) > (vpTotal - vpRecebimentos)) then
          begin
            Showmessage('Atenção valor do item maior que o saldo a receber. ' + #13 + 'Cancelamento não permitido ! ' + #13 +
              #13

              + 'Saldo a receber R$.......: ' + formatfloat('#,##0.00', (vpTotal - vpRecebimentos)) + #13 + #13

              + 'Valor do Produto R$....: ' + formatfloat('#,##0.00', dmdados.itoitovalorav.AsCurrency));
            EdtOperador.SetFocus;
            Exit;
          end;}

          dmdados.ConsultaSQL('SELECT IFNULL(sbrfracionado,0) ' + ' FROM sbr ' + ' INNER JOIN pro ON sbr.grpcodigo = pro.grpcodigo ' +
            ' INNER JOIN ito ON pro.procodigo = ito.procodigo ' + ' WHERE ito.itochave =  ' + dmdados.itoitochave.AsString + ' limit 1');

          vFracionado := dmdados.consulta.fields[0].AsInteger;

          // cancelando item individualmente
          if ((dmdados.itoitoquantidade.AsInteger = 1) or (vFracionado = 1)) or (lowercase(dmdados.itounisimbolo.AsString) = 'kg') then
          begin
            if dmdados.ExecutaSQL('UPDATE ito SET itoregistrocancela=now(), stocodigo = 88 WHERE itochave = ' + dmdados.itoitochave.AsString) then
            begin
              vRecno := dmdados.ito.RecNo;
              MostraItens;
              dmdados.ito.RecNo := vRecno;
              dmdados.ExecutaSQL(vSQLOrc);
              // ShowMessage('Item cancelado com sucesso !');

              vlDirRelat := Extractfilepath(Application.ExeName) + 'relat\comprovantecancela.fr3';

              if FileExists(vlDirRelat) then
              begin

                if FileExists(vlDirRelat) then
                begin

                  dmdados.sqlticket.Close;
                  dmdados.sqlticket.sql.Text := 'select itochave, orcchave from ito where itochave=' + dmdados.itoitochave.AsString;

                  mrfrImprimir(dmdados.dsSqlTicket, vlDirRelat, tiImprimirDireto);
                end;

              end;

            end
            else
              Showmessage('Não foi possivel cancelar o item verifique !');
          end
          else
          begin
            Application.CreateForm(TFrmCancelaItem, FrmCancelaItem);
            FrmCancelaItem.vpRecebimentos := vpRecebimentos;
            FrmCancelaItem.vpTotal := vpTotal;
            FrmCancelaItem.EdtQtde.Text := dmdados.itoitoquantidade.AsString;
            vlClbCodigo := dmdados.itoclbpediu.AsString;

            FrmCancelaItem.ShowModal;
            if FrmCancelaItem.vpConfirma then
            begin

              vCancQuantidade := FrmCancelaItem.vpQuantidade;
              vlQuantidade := FloattoStr(vCancQuantidade);

             // vlQuantidade := StringReplace(vlQuantidade, ',', '.', [rfReplaceAll, rfIgnoreCase]);

              if StrToFloat(vlQuantidade) = dmdados.itoitoquantidade.AsFloat then
              begin

                vSQL := 'update ito set itoregistrocancela=now(), stocodigo=88 where itochave=' + dmdados.itoitochave.AsString;
                if dmdados.ExecutaSQL(vSQL) then
                begin
                  vSQL := 'update aac set aacchaveregistro=' + dmdados.itoitochave.AsString + ' where aacnometabela=' + QuotedStr('ITO') +
                    ' and aacchaveregistro=' + vlitoatual;
                  dmdados.ExecutaSQL(vSQL);
                  MostraItens;
                end
                else
                begin
                  Showmessage('Não foi possivel cancelar o item verifique !');
                end;
              end
              else
              begin
                vlSbiChave := '';
                vSQL := 'select sbichave from sbi where itochave=' + dmdados.itoitochave.AsString;

                if dmdados.ConsultaSQL(vSQL) then
                begin
                  vlSbiChave := dmdados.consulta.FieldByName('sbichave').AsString;
                end;


                vlQuantidade := StringReplace(vlQuantidade, ',', '.', [rfReplaceAll, rfIgnoreCase]);


                vSQL := 'INSERT INTO ito ' + ' ( orcchave, procodigo, puncodigo, unicodigo, stocodigo, tdecodigo ' +
                  ' , itoquantidade, itovalorav, itodescontoav, itototalav, itosaldoav ' +
                  ' , itovalorap, itodescontoap, itototalap, itosaldoap, itocontendo ' +
                  ' , itoproservico, itoprocomple, itodataalter, itoitem, itogint ' +
                  ' , itopercdescap, itopercdescav, itoinfadprod, itoquanticondi, itoquantidevolcondi ' + ' , vrpcodigo, itoobs) ' +
                  ' (SELECT orcchave, procodigo, puncodigo, unicodigo, 88, tdecodigo, ' + vlQuantidade + ' /* itoquantidade */ ' +
                  ' , itovalorav, 0 /* itodescontoav */, (' +  vlQuantidade + ' * itovalorav) /* itototalav */ ' + ' , (' + vlQuantidade +
                  ' * itovalorav) /* itosaldoav */, itovalorav /* itovalorap */ , 0 /* itodescontoap */ ' + ' , (' + vlQuantidade +
                  ' * itovalorav) /* itototalap */, (' + vlQuantidade + ' * itovalorav) /* itosaldoap */ ' +
                  ' , itocontendo, itoproservico, itoprocomple, itodataalter ' + ' , (SELECT COUNT(*)+1 FROM ito WHERE orcchave = ' +
                  dmdados.orcorcchave.AsString + ' ) /* itoitem */ ' +
                  ' , itogint, itopercdescap, itopercdescav, itoinfadprod, itoquanticondi, itoquantidevolcondi ' + ' , vrpcodigo, itoobs ' +
                  ' FROM ito ' + ' WHERE itochave = ' + dmdados.itoitochave.AsString + ')';

                vlItoChaveOrigem := dmdados.itoitochave.AsString;
                if dmdados.ExecutaSQL(vSQL) then
                begin
                  vSalvQuantidade := (dmdados.itoitoquantidade.AsFloat - FrmCancelaItem.vpQuantidade);
                  vlQuantidade := FloattoStr(vSalvQuantidade);
                  vlQuantidade := StringReplace(vlQuantidade, ',', '.', [rfReplaceAll, rfIgnoreCase]);

                  vSQL := ' UPDATE ito SET itoquantidade = ' + vlQuantidade + '      , itototalav = (itoquantidade * itovalorav) ' +
                    '      , itosaldoav = (itoquantidade * itovalorav) ' + '      , itototalap = (itoquantidade * itovalorav) ' + '   WHERE itochave = '
                    + dmdados.itoitochave.AsString + '';

                  if dmdados.ExecutaSQL(vSQL) then
                  begin

                    dmdados.consulta.Close;
                    dmdados.consulta.sql.Text := 'SELECT  LAST_INSERT_ID()';
                    dmdados.consulta.Open;
                    vlItoChave := dmdados.itoitochave.AsString;
                    vlItoChave := dmdados.consulta.fields[0].AsString;

                    vRecno := dmdados.ito.RecNo;
                    MostraItens;

                    // dmdados.ito.Last;
                    // vlItoChave := dmdados.itoitochave.AsString;

                    vSQL := 'insert into imm  (SELECT   @immchave,  ' + vlItoChave +
                      ',  tcicodigo,  immimpresso,  immentregue,  immmodo,  ccxchave,  immhorapedido,  immhoraentrega,' +
                      'immrecebido,  dorchave,  immnumepedido,  trmcodigo,  immdestino,  immidentificacao,  immgarsom,  immtemporetardo,  immmodoimpressao,  cznchave,'
                      + 'etdcodigoent,  immpratos,  immcopos,  immnumepedidoint,  clbcodigo,  immhoraimpresso,  immhoraimprimir,  immhoranotificadopedido,  immhorasaidadopedido,'
                      + '  immhoraentregadopedido, pdscodigo, clbcodigoent, immhoraimpressoaux FROM imm where itochave=' + vlItoChaveOrigem + ')';

                    dmdados.ExecutaSQL(vSQL);

                    vSQL := 'update aac set aacchaveregistro=' + vlItoChave + ' where aacnometabela=' + QuotedStr('ITO') + ' and aacchaveregistro=' +
                      vlItoChaveOrigem;
                    dmdados.ExecutaSQL(vSQL);

                    vlDirRelat := Extractfilepath(Application.ExeName) + 'relat\comprovantecancela.fr3';

                    if FileExists(vlDirRelat) then
                    begin

                      if FileExists(vlDirRelat) then
                      begin

                        dmdados.sqlticket.Close;
                        dmdados.sqlticket.sql.Text := 'select itochave, orcchave from ito where itochave=' + vlItoChave;

                        mrfrImprimir(dmdados.dsSqlTicket, vlDirRelat, tiImprimirDireto);
                      end;

                    end;

                    MostraItens;

                    dmdados.ito.RecNo := vRecno;
                    dmdados.ExecutaSQL(vSQLOrc);
                    // ShowMessage('Item cancelado com sucesso !');
                  end
                  else
                    Showmessage('Não foi possivel cancelar o item verifique !');
                end
                else
                begin
                  Showmessage('Não foi possivel cancelar o item verifique !');
                end;

              end;

            end;



            FreeAndNil(FrmCancelaItem);

            EdtOperador.SetFocus;
          end;

          // end;

          

          if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
          begin

            if dmdados.adctef.FieldByName('adcchaveintegracao').asstring<>'' then
            begin
              CancelaRecebimentoStone;
              MostraRecebimentoStone(vpMesaAtual.tostring,StrToInt(vpOrcChave));
            end;

          end;

          if vlStoCodigo='5' then
            dmdados.ExecutaSQL('UPDATE orc SET stocodigo = 5, orcimpressao = 0 WHERE orcchave = ' + dmdados.orcorcchave.AsString);

        end;
      end;

      MostraItens;

      EdtOperador.SetFocus;

    finally
      TmMesa.Enabled := True;
    end;


  finally
    ActCancelaItem.enabled:=True;
  end;
end;

procedure TFPrinciGou.ActCancelaTodosExecute(Sender: TObject);
var
  vlAcao: string;
begin

  if SoNumeros(LbMesa.Caption) = '' then
  begin
    Showmessage('É necessário uma mesa selecionda');
    Exit;
  end;

  if (dmdados.itorec.RecordCount > 0) or (LbItensRecebido.Caption <> '0,00') or (LbRecebido.Caption <> '0,00') then
  begin
    Showmessage('Já existem recebimentos para essa mesas não foi possivel cancelar, verifique !');
    Exit;
  end;

  vlAcao := InttoStr((Sender as TAction).Tag);
  if RegistroAcessoOperacao(vlAcao, 'Registro', 'ORC', vpOrcChave) then
  begin

    dmdados.consulta.Close;
    dmdados.consulta.sql.Text := 'update orc set ccxchave=' + vpCcxChave + ' where orcchave=' + vpOrcChave;
    dmdados.consulta.ExecSQL;

    dmdados.consulta.Close;
    dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
    dmdados.consulta.Open;

    AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;

    vpRecebimentos := 0;
    if vpRecebimentos > 0 then
    begin
      Showmessage('Já existem recebimentos para essa mesas não foi possivel cancelar, verifique !');
      EdtOperador.SetFocus;
      Exit;
    end;

    if not dmdados.ito.IsEmpty then
    begin
      dmdados.ExecutaSQL('SET @orcchave = ' + dmdados.orcorcchave.AsString + '; ' + 'UPDATE orc SET stocodigo = 88 WHERE orcchave = @orcchave; ' +
        'UPDATE ito SET stocodigo = 88 WHERE orcchave = @orcchave; ');

      CancelaRecebimentoStone;

      LimpaMesa;

      Showmessage('Mesa cancelada com sucesso !');
    end;


  end;
  EdtOperador.SetFocus;

end;

procedure TFPrinciGou.ActDescontoExecute(Sender: TObject);
var
  frmDesconto:TfDesconto;
  vlValorTotal:Currency;
  vlValorDesconto:Currency;
  vlValorCentavos:Currency;
  vlPercentualDesconto:Double;
  vlPercentual:String;
  vlCentavos:String;

begin

  vlValorTotal:=0;
  vlValorDesconto:=0;
  vlPercentualDesconto:=0;
  vlValorCentavos:=0;

   if LbReceberTaxa.Visible then
    vlValorTotal:=StrToCurr(StringReplace(LbReceberTaxa.Caption,'.','',[]))
  else
    vlValorTotal:=StrToCurr(StringReplace(LbReceber.Caption,'.','',[]));

  if vlValorTotal=0 then
    exit;


  frmDesconto:=TfDesconto.Create(self);

  if frmDesconto.ShowModal = mrok then
  begin

    vlValorDesconto:=StrToCurr(StringReplace(frmDesconto.edValor.Text,'.','',[]));

    vlPercentualDesconto:=vlValorDesconto/vlValorTotal;

    if vlPercentualDesconto>0 then
    begin
      vlPercentual:=Floattostr(vlPercentualDesconto);
      vlPercentual:=StringReplace(vlPercentual,',','.',[]);

      dmdados.ExecutaSQL('UPDATE ito, pro '+
      'SET itodescontoav = ROUND(((itototalav + (itoacrescimoav*itoquantidade)+ itooutras) * '+vlPercentual+'), 2), '+
      '    itosaldoav = (ito.itosaldoav - itodescontoav), '+
      '    itodescontoap = ROUND((itototalap * '+vlPercentual+'), 2), '+
      '    itosaldoap = (ito.itosaldoav - itodescontoav), '+
      '    itopercdescap = ROUND('+vlPercentual+', 3), '+
      '    itopercdescav = ROUND('+vlPercentual+', 3) '+
      'WHERE ito.stocodigo <> 88 '+
      'AND ito.procodigo = pro.procodigo '+
      'AND pro.tpocodigo = 0 '+
      'AND ito.orcchave = '+vpOrcChave+';');


      dmdados.centavos.close;
      dmdados.centavos.sql.text:='SELECT SUM(itodescontoav) desconto '+
        'FROM ito, pro '+
        'WHERE ito.orcchave = '+vpOrcChave+' '+
        'AND ito.procodigo = pro.procodigo '+
        'AND pro.tpocodigo = 0';
      dmdados.centavos.open;

      vlValorCentavos:=0;

      if not dmdados.centavos.isempty then
      begin
        vlValorCentavos:= dmdados.centavos.fieldbyname('desconto').ascurrency-vlValorDesconto;
      end;

      if vlValorCentavos<>0 then
      begin
       vlCentavos:=CurrToStr(vlValorCentavos);
       vlCentavos:=StringReplace(vlCentavos,',','.',[]);

       dmdados.ExecutaSQL('UPDATE ito, pro '+
        'SET itodescontoav = itodescontoav + '+vlCentavos+',  '+
        '    itodescontoap = itodescontoap + '+vlCentavos+', '+
        '    itosaldoav = itosaldoav + '+vlCentavos+', '+
        '    itosaldoap = itosaldoav + '+vlCentavos+' '+
        'WHERE ito.stocodigo <> 88 '+
        'AND ito.procodigo = pro.procodigo '+
        'AND pro.tpocodigo = 0 '+
        'AND ito.orcchave = '+vpOrcChave+' ');
      end;
    end
    else
    begin
      dmdados.ExecutaSQL('UPDATE ito, pro '+
        'SET itodescontoav = 0, '+
        '    itototalav = (ito.itovalorav * itoquantidade) , '+
        '    itodescontoap = 0, '+
        '    itototalap = (ito.itovalorap * itoquantidade), '+
        '    itopercdescap = 0, '+
        '    itopercdescav = 0 '+
        'WHERE ito.stocodigo <> 88 '+
        'AND ito.procodigo = pro.procodigo '+
        'AND pro.tpocodigo = 0 '+
        'AND ito.orcchave = '+vpOrcChave+';');

    end;

    vpDesconto:= vlValorDesconto;

    AbreMesa(vpMesaAtual);

  end;
end;

procedure TFPrinciGou.ActExcluirJuncaoExecute(Sender: TObject);
begin

  if not dmdados.orc.Active then
    exit;

  if StrToInt(SoNumeros(LbOrcChave.Caption))=0 then
    exit;


  dmdados.consulta.Close;
  dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
  dmdados.consulta.Open;

  AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;
  dmdados.consulta.Close;
  dmdados.consulta.sql.Text := 'select orcchave from unm where unmmesa=' + dmdados.orcorcmesa.AsString;
  dmdados.consulta.Open;

  if dmdados.consulta.FieldByName('orcchave').AsString = '' then
  begin
    Showmessage('Esta mesa não esta unida!');
    Exit;
  end;

  if not dmdados.orc.IsEmpty then
  begin

    if dmdados.orcstocodigo.AsString = '2' then
    begin

      if MessageDlg('* * * * *  A T E N Ç Â O * * * * * ' + #13 + #13 + 'Num. Mesa: ' + LbMesa.Caption + #13 + #13 +
        'Tem certeza que deseja Desagrupar da Junção  ?' + #13 + #13, mtConfirmation, [mbYes, mbNo], 0, mbNo) = mrYes then
      begin
        if dmdados.ExecutaSQL('SET @orcchave = ' + dmdados.orcorcchave.AsString + '; ' + 'UPDATE orc SET stocodigo = 88 WHERE orcchave = @orcchave; '
          + 'UPDATE ito SET stocodigo = 88 WHERE orcchave = @orcchave; ') then
        begin
          dmdados.consulta.Close;
          dmdados.consulta.sql.Text := 'delete from unm where unmmesa=' + dmdados.orcorcmesa.AsString;
          dmdados.consulta.ExecSQL;

          LimpaMesa;
          Showmessage('Mesa cancelada com sucesso !');
        end
        else
          Showmessage('Não foi possivel cancelar ' + dmdados.Usuario.TituloOperador + ', verifique !');

      end;
    end;
  end;

end;

procedure TFPrinciGou.ActFechaCaixaExecute(Sender: TObject);
begin

  if RegistraOperacaoCaixa(tocFechamentoCaixa) <> '' then
  begin

    if (dmdados.Usuario.MesaVendaRapida <> '') and (dmdados.Usuario.MesaVendaRapida <> '0') then
    begin
      ImprimirComprovantesCCX(tocFechamentoCaixaMultiplo);
    end
    else
      ImprimirComprovantesCCX(tocFechamentoCaixa);

    AjustaBotoes(False);

    dmdados.Usuario.ccxchave := 0;
  end;
  EdtOperador.SetFocus;
end;

procedure TFPrinciGou.ActFechaMesaExecute(Sender: TObject);
var
  vSQL: String;
  vpTaxaServico: Double;
  vlStocodigoatual: Integer;
  I: Integer;
begin

  try

    TmMesa.Enabled := False;

    if (LbReceber.Caption = '0,00') and (dmdados.Ditorec.DataSet.RecordCount > 0) then
    begin

      if MessageDlg('Esta mesa não tem valor a receber, esta com Saldo R$ 0,00. Encerrar a mesa ? ' + LbMesa.Caption + '?', mtConfirmation,
        [mbYes, mbNo], 0, mbNo) = IdYes then
      begin

        dmdados.consulta.Close;
        dmdados.consulta.sql.Text := 'update orc set stocodigo=3, orcdataencerr=' + QuotedStr(ajustadata(datetimetostr(now()))) + ' where orcchave=' +
          dmdados.orcorcchave.AsString;
        dmdados.consulta.ExecSQL;

        LimpaMesa;
        vpEtdCodigo := 0;
        TmMesa.Enabled := True;
        ActFechaMesa.Enabled := True;
        VerificaMesa;
        Exit;
      end;

    end;






    vlStocodigoatual := dmdados.orcstocodigo.AsInteger;

    dmdados.ccx.Close;
    dmdados.ccx.ParamByName('clbcodigo').AsInteger := dmdados.Usuario.clbcodigo;
    dmdados.ccx.Open;

    FCcxchave:=dmdados.ccx.FieldByName('ccxchave').AsInteger;

    dmdados.consulta.Close;
    dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
    dmdados.consulta.Open;

    AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;

    ActFechaMesa.Enabled := False;


    dmdados.itodes.Close;
    dmdados.itodes.ParamByName('orcchave').AsInteger := dmdados.orcorcchave.AsInteger;
    dmdados.itodes.Open;
    dmdados.itodes.First;
    I := 1;
    vpdesconto:=0;
    while not dmdados.itodes.Eof do
    begin
      vpdesconto:=vpdesconto+dmdados.itodes.fieldbyname('itodescontoav').ascurrency;
      dmdados.consulta.Close;
      dmdados.consulta.sql.Text := 'update ito set itoitem=' + InttoStr(I) + ' where itochave=' + dmdados.itodes.fieldbyname('itochave').AsString;
      dmdados.consulta.ExecSQL;

      dmdados.itodes.Next;
      I := I + 1;
    end;

    MostraItens;

    if (PCMesa.ActivePage <> TabItens) then
      Exit;

    if not dmdados.orc.IsEmpty then
      MostraItens;

    if not dmdados.ito.IsEmpty then
    begin
      vSQL := 'SELECT orc.stocodigo, sto.stoidentificacao ' + '  FROM orc ' + ' INNER JOIN sto ON orc.stocodigo = sto.stocodigo ' +
        ' WHERE orc.orcchave = ' + dmdados.orcorcchave.AsString;
      dmdados.ConsultaSQL(vSQL);
      if not(dmdados.consulta.fields[0].AsInteger in [1, 2, 5]) then
      begin
        Showmessage('Atenção, ' + dmdados.Usuario.TituloOperador + ' atual teve sua situação alterada para ' + dmdados.consulta.fields[1].AsString +
          ', verifique ');
        LimpaMesa;
        EdtOperador.SetFocus;
        Exit;
      end;
      vpTaxaServico := 0;
      if dmdados.ito.Locate('procodigo', dmdados.cfgmcfgcfgmgouproatendimento.AsInteger, []) then
      begin
        if dmdados.itostocodigo.AsInteger <> 88 then
        begin

          vpTaxaServico := dmdados.itoitovalorav.AsCurrency;
        end;
      end;
      { try }
      dmdados.ito.EnableControls;

      Application.CreateForm(tFrmFinalizaMesa, FrmFinalizaMesa);

      FrmFinalizaMesa.vpOrcChave := dmdados.orcorcchave.AsString;
      FrmFinalizaMesa.vpMesaAtual := vpmesaatual.ToString;

      dmdados.itoresumo.Close;
      dmdados.itoresumo.ParamByName('orcchave').AsString := FrmFinalizaMesa.vpOrcChave;
      dmdados.itoresumo.Open;

      FrmFinalizaMesa.AtualizaLimiteTela(InttoStr(vpEtdCodigo));
      FrmFinalizaMesa.vpEtdCodigo := vpEtdCodigo;

      FrmFinalizaMesa.TabPedidos.Tag := 1;
      FrmFinalizaMesa.TabItens.Tag := 0;
      FrmFinalizaMesa.Caption := 'Fechamento Mesa';

      FrmFinalizaMesa.vpDesconto:=vpDesconto;

      FrmFinalizaMesa.vpTotalGeral := TBRound(((vpTotal + vpTaxaServico) - vpDesconto), 2);
      FrmFinalizaMesa.Caption := LbMesa.Caption;
      FrmFinalizaMesa.vpOrcChave := dmdados.orcorcchave.AsString;
      FrmFinalizaMesa.CalculaTaxaParcial;

      dmdados.consulta.Close;
      dmdados.consulta.sql.Text := 'update orc set stocodigo=5 where orcchave=' + dmdados.orcorcchave.AsString;
      dmdados.consulta.ExecSQL;

      FrmFinalizaMesa.DBGridItensCellClick(FrmFinalizaMesa.DBGridItens.Columns[0]);

      vpdesconto:=0;
      dmdados.ito.first;
      while not dmdados.ito.Eof do
      begin
        vpdesconto:=vpdesconto+dmdados.itoitodescontoav.ascurrency;
        dmdados.ito.Next;
      end;

      FrmFinalizaMesa.vpDesconto:=vpDesconto;
      FrmFinalizaMesa.vpTotalGeral := TBRound(((vpTotal + vpTaxaServico) + vpDesconto), 2);


      if FrmFinalizaMesa.ShowModal = mrok then
      begin

        // concluir o fechamdo do wifi
        if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
        begin

          if dmdados.adctef.FieldByName('adcchaveintegracao').asstring<>'' then
          begin

            ConfimaRecebimentoStone;
//            CancelaRecebimentoStone;

          {  dmdados.consulta.Close;
            dmdados.consulta.sql.Text := 'update orc set stocodigo=' + vlStocodigoatual.ToString + ' where orcchave=' + dmdados.orcorcchave.AsString;
            dmdados.consulta.ExecSQL;}

          //  MostraRecebimentoStone(vpMesaAtual.tostring,StrToInt(FrmFinalizaMesa.vpOrcChave));

          end;

        end;

        if FrmFinalizaMesa.vpFechada then
        begin
          LimpaMesa;
          vpEtdCodigo := 0;
        end
        else
        begin
          dmdados.consulta.Close;
          dmdados.consulta.sql.Text := 'update orc set stocodigo=' + stoEmAberto.ToString + ' where orcchave=' + dmdados.orcorcchave.AsString;
          dmdados.consulta.ExecSQL;

          MostraItens;
          FreeAndNil(FrmFinalizaMesa);
        end;
      end
      else
      begin

        dmdados.consulta.Close;
        dmdados.consulta.sql.Text := 'update orc set stocodigo=' + vlStocodigoatual.ToString + ' where orcchave=' + dmdados.orcorcchave.AsString;
        dmdados.consulta.ExecSQL;

      end;

    end;

    MostraItens;
    EdtOperador.SetFocus;

  finally

    if Self.FindComponent('BtnMesa' + InttoStr(vpMesaAtual)) <> nil then
    begin
      TBitBtn(Self.FindComponent('BtnMesa' + InttoStr(vpMesaAtual))).Click;
    end;

    TmMesa.Enabled := True;
    ActFechaMesa.Enabled := True;
    VerificaMesa;
  end;
end;

procedure TFPrinciGou.ActFechaRefeicaoExecute(Sender: TObject);
var
  vSQL: String;
  vpTaxaServico: Double;
  vlStocodigoatual: Integer;
  I: Integer;

  vlMeschave:String;
  vlOrcchave:String;
  vlMesa:Integer;

begin




    dmdados.ccx.Close;
    dmdados.ccx.ParamByName('clbcodigo').AsInteger := dmdados.Usuario.clbcodigo;
    dmdados.ccx.Open;

    if dmdados.ccxccxdatafecha.AsString <> '' then
    begin
      Showmessage('Caixa FECHADO, por favor abra o caixa para iniciar as vendas!');
      Exit;
    end;

    FCcxchave:=dmdados.ccx.FieldByName('ccxchave').AsInteger;

    dmdados.tbrd.Close;
    dmdados.tbrd.Open;

    dmdados.tisi.Close;
    dmdados.tisi.Open;

    dmdados.trfi.Close;
    dmdados.trfi.Open;

    dmdados.trdc.Close;
    dmdados.trdc.Open;

    vpVendaRapida := True;
    vpEtdCodigo := 0;
    dmdados.consulta.Close;
    dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
    dmdados.consulta.Open;

    AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;

    if (dmdados.Usuario.MesaVendaRapida <> '') and (dmdados.Usuario.MesaVendaRapida <> '0') then
      vlMesa := StrtoInt(dmdados.Usuario.MesaVendaRapida)
    else
      vlMesa := dmdados.Usuario.QtdMesa;

    if Self.FindComponent('BtnMesa' + InttoStr(vlMesa)) <> nil then
    begin
      TBitBtn(Self.FindComponent('BtnMesa' + InttoStr(vlMesa))).Click;

      vpOrcChave := dmdados.orcorcchave.AsString;

    end;


  TmMesa.Enabled := False;

  vlStocodigoatual := dmdados.orcstocodigo.AsInteger;

  dmdados.ccx.Close;
  dmdados.ccx.ParamByName('clbcodigo').AsInteger := dmdados.Usuario.clbcodigo;
  dmdados.ccx.Open;

  FCcxchave:=dmdados.ccx.FieldByName('ccxchave').AsInteger;

  dmdados.consulta.Close;
  dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
  dmdados.consulta.Open;

  AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;

  ActFechaRefeicao.Enabled := False;

  fRefeicao:=TfRefeicao.Create(self);

  if (vpMesaAtual<>0) and (SoNUmeros(LbOrcChave.caption)<>'') then
  begin
    fRefeicao.vpOrcmesa:=vpMesaAtual.tostring;
    fRefeicao.vpOrcchave:=StrToInt(SoNUmeros(LbOrcChave.caption));

  end;

  if fRefeicao.showModal=MrOK then
  begin

      with dmdados do
      begin
        tito.Close;
        tito.Open;

        pun.Close;
        proc.Close;

        grp.Close;
        grp.Open;
      end;


     BuscaProdutoVendaRapida(dmdados.cfgmcfgcfgmgouprorefeicao.asInteger);

    // IncluirItemRefeicao;


    vpTotal := fRefeicao.vpValorRefeicao;
    vpDesconto := 0;
    try

      { try }


      dmdados.itoref.Close;
      dmdados.itoref.ParamByName('orcchave').AsString:=dmdados.orcorcchave.AsString;
      dmdados.itoref.Open;

      dmdados.itoref.edit;
      dmdados.itoref.fieldbyname('itovalorav').AsCurrency:= vpTotal;
      dmdados.itoref.fieldbyname('itototalav').AsCurrency:= vpTotal;
      dmdados.itoref.fieldbyname('itosaldoav').AsCurrency:= vpTotal;
      dmdados.itoref.fieldbyname('itoquantidade').AsInteger:=1;
      dmdados.itoref.Post;

      dmdados.ito.DisableControls;
      dmdados.ito.Close;
      dmdados.ito.Params[0].AsInteger := dmdados.orcorcchave.AsInteger;
      dmdados.ito.Open;
      dmdados.ito.EnableControls;

      dmdados.consulta.Close;
      dmdados.consulta.SQL.Text:='select orcchave, orctotalav, orcgeralav from orc where orcchave='+dmdados.orcorcchave.AsString;
      dmdados.consulta.Open;

      dmdados.consulta.Edit;
      dmdados.consulta.FieldByName('orctotalav').AsCurrency:=vpTotal;
      dmdados.consulta.FieldByName('orcgeralav').AsCurrency:=vpTotal;
      dmdados.consulta.Post;

      Application.CreateForm(tFrmFinalizaMesa, FrmFinalizaMesa);

      FrmFinalizaMesa.vpOrcChave := dmdados.orcorcchave.AsString;
      FrmFinalizaMesa.vpMesaAtual := vpmesaatual.ToString;

      dmdados.itoresumo.Close;
      dmdados.itoresumo.ParamByName('orcchave').AsString := FrmFinalizaMesa.vpOrcChave;
      dmdados.itoresumo.Open;

      FrmFinalizaMesa.AtualizaLimiteTela(InttoStr(vpEtdCodigo));
      FrmFinalizaMesa.vpEtdCodigo := vpEtdCodigo;

      FrmFinalizaMesa.TabPedidos.Tag := 1;
      FrmFinalizaMesa.TabItens.Tag := 0;
      FrmFinalizaMesa.Caption := 'Fechamento Mesa';

      FrmFinalizaMesa.vpDesconto:=vpDesconto;


      FrmFinalizaMesa.vpTotalGeral :=vpTotal;
      FrmFinalizaMesa.Caption := LbMesa.Caption;
      FrmFinalizaMesa.vpOrcChave := dmdados.orcorcchave.AsString;
     // FrmFinalizaMesa.CalculaTaxaParcial;

      dmdados.consulta.Close;
      dmdados.consulta.sql.Text := 'update orc set stocodigo=5 where orcchave=' + dmdados.orcorcchave.AsString;
      dmdados.consulta.ExecSQL;

    //  FrmFinalizaMesa.DBGridItensCellClick(FrmFinalizaMesa.DBGridItens.Columns[0]);

      FrmFinalizaMesa.vpTotalGeral := vpTotal;

    {  dmdados.RegistraRefeicao.ParamByName('pFlaCodigo').AsInteger:=1;
      dmdados.RegistraRefeicao.ParamByName('pTipoChave').AsInteger:=1;
      dmdados.RegistraRefeicao.ParamByName('pChave').AsInteger:=1;
      dmdados.RegistraRefeicao.ParamByName('pClbCodigo').AsInteger:=dmdados.Usuario.ClbCodigo;
      dmdados.RegistraRefeicao.ParamByName('pValor').AsCurrency:=fRefeicao.vpValorRefeicao;
      dmdados.RegistraRefeicao.ParamByName('pLteChave').AsInteger:=FrmFinalizaMesa.vpLtechave;
      dmdados.RegistraRefeicao.ParamByName('pChamada').AsInteger:=1;
      dmdados.RegistraRefeicao.ExecSQL;

      vlMeschave:=dmdados.RegistraRefeicao.ParamByName('pMesChave').asstring;}

      FrmFinalizaMesa.Caption := 'Fechamento Rápido';

      if FrmFinalizaMesa.ShowModal = mrok then
      begin


        if FrmFinalizaMesa.vpFechada then
        begin
          LimpaMesa;
          vpEtdCodigo := 0;
        end;
      end;

      MostraItens;
      EdtOperador.SetFocus;

    finally

      TmMesa.Enabled := True;
      ActFechaRefeicao.Enabled := True;
      VerificaMesa;
    end;

  end
  else
  begin
    TmMesa.Enabled := True;
    ActFechaRefeicao.Enabled := True;
    VerificaMesa;
  end;
end;

procedure TFPrinciGou.ActGavetaExecute(Sender: TObject);
begin

  dmdados.consulta.Close;
  dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
  dmdados.consulta.Open;

  AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;
  // ComunicarECF('abregaveta', AcessoRec.Terminal.ToString, '');

  AbreGavetaNF;
end;

procedure TFPrinciGou.ActiCancelarDeliveryExecute(Sender: TObject);
begin
  Showmessage('Cancelamento de pedido via delivery realizado com sucesso!');
end;

function TFPrinciGou.ComunicarECF(vfuncao: string; vTrmCodigo: string; vmeschave: string): Boolean;
var
  ComunicaECF: TComunicaECF;
  vlRetorno: Boolean;
  // vlPackECF:cardinal;
begin
  result := False;

  if vlPackECF <> 0 then
    @ComunicaECF := GetProcAddress(vlPackECF, PChar('ComunicaECF'));

  if Assigned(ComunicaECF) then
  begin
    vlRetorno := ComunicaECF(Application, dmdados.conexao, vTrmCodigo, vmeschave, vfuncao);
    result := vlRetorno;
  end;
  // DoUnLoadPackage(Application, vlPackECF);
End;

procedure TFPrinciGou.ActImprimeCaixaExecute(Sender: TObject);
var
  FrmListaCaixas: TFrmListaCaixas;
  vDirRelat: String;
  vlUsuarioAtual: Integer;
begin

  vlUsuarioAtual := 0;
  vlUsuarioAtual := AcessoRec.Usuario;

  if vpCcxChave <> '' then
  begin

    dmdados.consulta.Close;
    dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
    dmdados.consulta.Open;

    AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;

  end;

  if (dmdados.Usuario.MesaVendaRapida <> '') and (dmdados.Usuario.MesaVendaRapida <> '0') then
  begin
    vDirRelat := Extractfilepath(Application.ExeName) + 'relat\FechamentoCCXMultiplo.fr3';
    if not FileExists(vDirRelat) then
    begin
      vDirRelat := Extractfilepath(Application.ExeName) + 'relat\FechamentoCCX.fr3';
    end;

  end
  else
    vDirRelat := Extractfilepath(Application.ExeName) + 'relat\FechamentoCCX.fr3';

  dmdados.ccx.Close;
  dmdados.ccx.ParamByName('clbcodigo').AsInteger := dmdados.Usuario.clbcodigo;
  // dmdados.ccx.ParamByName('ctacodigo').AsInteger := dmdados.Usuario.CtaCodigo;
  dmdados.ccx.Open;

  FCcxchave:=dmdados.ccx.FieldByName('ccxchave').AsInteger;

  Application.CreateForm(TFrmListaCaixas, FrmListaCaixas);

  if FrmListaCaixas.ShowModal = mrok then
  begin
    vpReimprimeCcxChave := dmdados.ccxccxchave.AsString;
    dmdados.ccxs.Close;
    dmdados.ccxs.sql.Text := 'SELECT * from ccx where ccxchave=' + vpReimprimeCcxChave;
    dmdados.ccxs.Open;

    mrfrImprimir(dmdados.DSccxs, vDirRelat, tiImprimir);

    if not ActImprimeCaixa.Enabled then
      Exit;

    { if dmdados.Usuario.ccxchave > 0 then
      ImprimirComprovantesCCX(tocFechamentoCaixa); }

  end;

  AcessoRec.Usuario := vlUsuarioAtual;

  EdtCodprod.SetFocus;

end;

procedure TFPrinciGou.ActIniciaFechamentoExecute(Sender: TObject);
begin



  if (dmdados.orc.IsEmpty) { or (dmDados.orcstocodigo.AsInteger = 5) } then
    Exit;

  if MessageDlg('Deseja iniciar Fechamento de ' + dmdados.Usuario.TituloOperador + ' ?', mtConfirmation, [mbYes, mbNo], 0, mbNo) = IdYes then
  begin

    dmdados.consulta.Close;
    dmdados.consulta.sql.Text := 'update orc set clbencerrou=' + dmdados.Usuario.ClbCodigo.ToString +',  ccxchave=' + vpCcxChave + ' where orcchave=' + vpOrcChave;
    dmdados.consulta.ExecSQL;

    dmdados.ExecutaSQL('update orc set stocodigo  = 5, orcimpressao = (IFNULL(orcimpressao,0) + 1), orc.clbvendedor = ' +
      InttoStr(dmdados.Usuario.clbcodigo) + ' where orcchave = ' + dmdados.orcorcchave.AsString);

    ImprimeResumo(dmdados.orcorcchave.AsInteger);

    dmdados.adctef.Close;
    dmdados.adctef.Open;

    if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
    begin

      if dmdados.adctef.FieldByName('adcchaveintegracao').asstring<>'' then
      begin

      //  CancelaRecebimentoStone;
      //  EnviaPagamentoHide(vpMesaAtual.ToString, dmdados.orcorcchave.AsInteger);

      end;
    end;

    dmdados.ExecutaSQL('update orc set stocodigo  = 5, orcimpressao = (IFNULL(orcimpressao,0) + 1), orc.clbvendedor = ' +
      InttoStr(dmdados.Usuario.clbcodigo) + ' where orcchave = ' + dmdados.orcorcchave.AsString);

  end;

  EdtOperador.SetFocus;

  AtualizaMesas;
  MostraItens;
  EstadoMemoria;

end;

procedure TFPrinciGou.RegistraTaxaServico(vValorConta: Double);
var
  vSQL: String;
  vlPunCodigo: String;
  vlUniCodigo: string;
  vlPercentual: Double;
  vlValor: String;
  vlItoChave: string;
  vlCznchave: string;
  I: Integer;
  vlTaxaParcial: Currency;
begin

  vlTaxaParcial := 0;

  if not dmdados.orc.Active then
    Exit;

  if dmdados.orc.IsEmpty then
    Exit;
  if (dmdados.cfgmcfgcfgmgouproatendimento.AsString = '0') or (dmdados.cfgmcfgcfgmgouproatendimento.AsString = '') then
    Exit;

  vSQL := 'delete from ito where procodigo=' + dmdados.cfgmcfgcfgmgouproatendimento.AsString + ' and stocodigo<>88 and orcchave=' +
    dmdados.orcorcchave.AsString;

  dmdados.ExecutaSQL(vSQL);

  dmdados.ito.Close;
  dmdados.ito.ParamByName('orcchave').AsInteger := dmdados.orcorcchave.AsInteger;
  dmdados.ito.Open;
  dmdados.ito.First;

  vlPercentual := 0;

  vlPercentual := dmdados.cfgmcfgcfgmgoutaxaatendimento.AsFloat;

  dmdados.consulta.Close;
  dmdados.consulta.sql.Text := 'select puncodigo, unicodigo from pun where procodigo=' + dmdados.cfgmcfgcfgmgouproatendimento.AsString;
  dmdados.consulta.Open;

  vlPunCodigo := dmdados.consulta.FieldByName('puncodigo').AsString;
  vlUniCodigo := dmdados.consulta.FieldByName('unicodigo').AsString;

  vlValor := FloattoStr((vValorConta * (vlPercentual / 100)) - vlTaxaParcial);
  if Pos(',', vlValor) > 0 then
    vlValor := StringReplace(vlValor, ',', '.', [rfReplaceAll, rfIgnoreCase]);

  if vlValor = '0' then
    Exit;

  vSQL := 'INSERT INTO ito ' + ' values (@chave, ' + dmdados.orcorcchave.AsString + ', ' + dmdados.cfgmcfgcfgmgouproatendimento.AsString + ', ' +
    vlPunCodigo + ',' + vlUniCodigo + ', 2, 1 ' + ' , 1, ' + vlValor + ', 0,' + vlValor + ', ' + vlValor + ' ' + ' , ' + vlValor + ', 0, ' + vlValor +
    ', ' + vlValor + ', 1 ' + ' , ' + QuotedStr('') + ', ' + QuotedStr('') + ', curdate(), 999, ' + QuotedStr('') + ' , 0, 0,' + QuotedStr('') +
    ', 0, 0 ' + ' , null, ' + QuotedStr('') + ',1,' + QuotedStr('00') + ',0,0,0) ';

  try

    dmdados.consulta.Close;
    dmdados.consulta.sql.Text := 'select puncodigo, unicodigo from pun where procodigo=' + dmdados.cfgmcfgcfgmgouproatendimento.AsString;
    dmdados.consulta.Open;

    if not dmdados.consulta.IsEmpty then
    begin

      dmdados.consulta.Close;
      dmdados.consulta.sql.Text := 'select itochave from ito where stocodigo=88  and orcchave=' + dmdados.orcorcchave.AsString + ' and procodigo=' +
        dmdados.cfgmcfgcfgmgouproatendimento.AsString;
      dmdados.consulta.Open;

      if dmdados.consulta.IsEmpty then
      begin

        dmdados.ExecutaSQL(vSQL);

        dmdados.consulta.Close;
        dmdados.consulta.sql.Text := 'select itochave from ito where stocodigo<>88  and orcchave=' + dmdados.orcorcchave.AsString + ' and procodigo='
          + dmdados.cfgmcfgcfgmgouproatendimento.AsString;
        dmdados.consulta.Open;

        if not dmdados.consulta.IsEmpty then
        begin
          vlItoChave := dmdados.consulta.FieldByName('itochave').AsString;

          vSQL := ' insert into imm (immchave, itochave, immmodo, immhorapedido, cznchave, clbcodigo,tcicodigo ) values (@chave,  ' + vlItoChave +
            ',9,now(),' + dmdados.Usuario.cznchave.ToString + ',' + AcessoRec.Usuario.ToString + ',1)';

          dmdados.ExecutaSQL(vSQL);
        end;
      end;

    end;

    dmdados.ito.Close;
    dmdados.ito.ParamByName('orcchave').AsInteger := dmdados.orcorcchave.AsInteger;
    dmdados.ito.Open;

  except

  end;

end;

procedure TFPrinciGou.ActJuntarMesasExecute(Sender: TObject);
begin

  if SoNumeros(LbMesa.Caption) = '' then
  begin
    Showmessage('É necessário uma mesa selecionda');
    Exit;
  end;

  if dmdados.Usuario.MesaVendaRapida.ToInteger = vpMesaAtual then
  begin
    Showmessage('Não é permitido fazer junções com a mesa de venda rápida!');
    Exit;

  end;

  dmdados.consulta.Close;
  dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
  dmdados.consulta.Open;

  AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;

  if dmdados.orc.IsEmpty then
    Exit;

  if MessageDlg('Deseja realizar Junção de ' + dmdados.Usuario.TituloOperador + '?', mtConfirmation, [mbYes, mbNo], 0, mbNo) = mrYes then
  begin
    Application.CreateForm(TFrmJuncaoMesa, FrmJuncaoMesa);
    FrmJuncaoMesa.LbMesa.Caption := LbMesa.Caption;
    FrmJuncaoMesa.vpOrcChave := dmdados.orcorcchave.AsInteger;
    FrmJuncaoMesa.ShowModal;
    MostraItens;
    FreeAndNil(FrmJuncaoMesa);
  end;
  EdtOperador.SetFocus;
end;

procedure TFPrinciGou.ActReabirMesaExecute(Sender: TObject);
begin
  dmdados.consulta.Close;
  dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
  dmdados.consulta.Open;

  AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;
  if dmdados.orc.IsEmpty then
    Exit;

  if MessageDlg('Deseja Cancelar solicitação de encerramento de ' + dmdados.Usuario.TituloOperador + ' ?', mtConfirmation, [mbYes, mbNo], 0, mbNo) = mrYes
  then
  begin
    if dmdados.ExecutaSQL('UPDATE orc SET stocodigo = 2, orcimpressao = 0 WHERE orcchave = ' + dmdados.orcorcchave.AsString) then
    begin

      if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
      begin
        if dmdados.adctef.FieldByName('adcchaveintegracao').asstring<>'' then
        begin
          CancelaRecebimentoStone;
        end;
      end;

      Showmessage('Mesa reaberta com sucesso !');
      VerificaMesa;
    end
    else
    begin
      Showmessage('Não foi possivel reabrir ' + dmdados.Usuario.TituloOperador + ', verifique !');
    end;
  end;

  EdtOperador.SetFocus;

end;

procedure TFPrinciGou.MostraRecebimentoStone(aMesa:string;aorcchave:Integer);
begin

  if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
  begin
    try
      if (aMesa<>'') and  (aMesa<>'0') then
      begin
        EnviaPagamentoHide(aMesa,aorcchave);
      end;
    except
    end;
  end;
end;


procedure TFPrinciGou.ConfimaRecebimentoStone;
var
  vlfstonenome:String;
  vlStoneHide: Tfstonehide;

begin

  if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
  begin

    vlfstonenome:='fstonehide'+vpMesaAtual.ToString;

   if plmesasemfechamento.FindChildControl(vlfstonenome) <> nil then
   begin
    vlStoneHide:=(plmesasemfechamento.FindChildControl(vlfstonenome) as Tfstonehide);
    if vlStoneHide<>nil then
    begin
      vlStoneHide.ConfirmaRecebimento(vlStoneHide.lblidPagamento.Caption);
    end;
    vlStoneHide.Free;
   end;
  end;

end;


procedure TFPrinciGou.CancelaRecebimentoStone;
var
  vlfstonenome:String;
  vlStoneHide: Tfstonehide;

begin

  if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
  begin
    vlfstonenome:='fstonehide'+vpMesaAtual.ToString;

    if plmesasemfechamento.FindChildControl(vlfstonenome) <> nil then
    begin
     vlStoneHide:=(plmesasemfechamento.FindChildControl(vlfstonenome) as Tfstonehide);
     if vlStoneHide<>nil then
     begin
       vlStoneHide.ExecutaCancelamentoStone ;
     end;
     vlStoneHide.Free;
   end;
  end;

end;



procedure TFPrinciGou.ActReceberConvenioExecute(Sender: TObject);
type
  // TRecebCaixa = function(AOwner: TComponent;       Conexao: tuniconnection; pUsuario: string; pCtaCodigo: Integer; pEtdCodigo: String): string;
  TRecebCaixa = function(pCargaFrame: TCargaFrame; conexao: tuniconnection; Acesso: TAcesso; pCtaCodigo: Integer; pEtdCodigo: String;
    pCcxchave: Integer = 0): string;

var
  RecebCaixa: TRecebCaixa;
  vlPack: HMODULE;
  vlRetorno: String;
  vlEtdCodigo: string;
  ExecFormu: function(CargaFrame: TCargaFrame): String;
  vlCargaFrame: TCargaFrame;

begin

  dmdados.ccx.Close;
  dmdados.ccx.ParamByName('clbcodigo').AsInteger := dmdados.Usuario.clbcodigo;
  dmdados.ccx.Open;


  if (vpCcxChave = '0') or (vpCcxChave = '') then
  begin
    vpCcxChave := dmdados.ccxccxchave.AsString
  end;

  FCcxchave:=dmdados.ccx.FieldByName('ccxchave').AsInteger;

  dmdados.consulta.Close;
  dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
  dmdados.consulta.Open;

  AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;

  vlEtdCodigo := '';
  vlPack := LoadPackage('modulos\mbrr.bpl');
  if vlPack <> 0 Then
    try
      @RecebCaixa := GetProcAddress(vlPack, PChar('RecebCaixa'));
      vpCcxChave := dmdados.ccxccxchave.AsString;

      if Assigned(RecebCaixa) then
      begin
        FPrinciGou.AcessoRec.Usuario := AcessoRec.Usuario;
        vlCargaFrame := CargaFrameFormu(Application, pack, dmdados.conexao, FPrinciGou.AcessoRec, 'etdcodigo<>0', '');
        vlRetorno := RecebCaixa(vlCargaFrame, dmdados.conexao, FPrinciGou.AcessoRec, dmdados.Usuario.CtaCodigo, vlEtdCodigo, vpCcxChave.ToInteger());
      end;
    finally
      // DoUnLoadPackage(Application, vlPack);
    end;
  EdtOperador.SetFocus;

end;

procedure TFPrinciGou.ActReceberDeliveryExecute(Sender: TObject);
var
  vSQL: String;
begin
  dmdados.consulta.Close;
  dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
  dmdados.consulta.Open;

  AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;

  dmdados.consulta.Close;
  dmdados.consulta.sql.Text := 'select cznchave from czn where cznfechamento IS null order by cznchave limit 1';
  dmdados.consulta.Open;

  FPrinciGou.vpCznChave := dmdados.consulta.fields[0].AsString;

  dmdados.dorcdlv.DataSet.Close;
  dmdados.orcdlv.ParamByName('cznchave').AsString := FPrinciGou.vpCznChave;
  dmdados.dorcdlv.DataSet.Open;

  dmdados.orcdlv.Close;
  dmdados.orcdlv.Open;
  if not dmdados.orcdlv.IsEmpty then
  begin
    Application.CreateForm(tFrmFinalizaMesa, FrmFinalizaMesa);
    FrmFinalizaMesa.TabPedidos.Tag := 0;
    FrmFinalizaMesa.TabItens.Tag := 1;
    FrmFinalizaMesa.vpTotalGeral := 0;
    FrmFinalizaMesa.Caption := 'Recebimento Delivery'; // LbMesa.Caption;
    FrmFinalizaMesa.ShowModal;
    FreeAndNil(FrmFinalizaMesa);
  end;
  EdtOperador.SetFocus;
end;

procedure TFPrinciGou.ActReemissaoFechamentoExecute(Sender: TObject);
begin

    dmdados.ccx.Close;
    dmdados.ccx.ParamByName('clbcodigo').AsInteger := dmdados.Usuario.clbcodigo;
    dmdados.ccx.Open;

    FCcxchave:=dmdados.ccx.FieldByName('ccxchave').AsInteger;
    dmdados.ccx.First;

    dmdados.msapgto.Close;
    dmdados.msapgto.ParamByName('Titutlo').AsString := dmdados.Usuario.TituloOperador;
    dmdados.msapgto.Open;

    Application.CreateForm(tFrmReemissaoFechamento, FrmReemissaoFechamento);
    FrmReemissaoFechamento.ShowModal;
    FreeAndNil(FrmReemissaoFechamento);
    dmdados.msapgto.Close;

  EdtOperador.SetFocus;
end;

procedure TFPrinciGou.ActReimprimeNFCeExecute(Sender: TObject);
begin

  mostralista('mrdo', AcessoRec.Usuario.ToString, 'tdfcodigo=' + QuotedStr('65') + ' and clbcodigo=' + AcessoRec.Usuario.ToString);

end;

procedure TFPrinciGou.ActReimprimirComprovantesExecute(Sender: TObject);
begin
  dmdados.consulta.Close;
  dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
  dmdados.consulta.Open;

  AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;
  ListaComprovantes;
end;

procedure TFPrinciGou.ActSangriaExecute(Sender: TObject);
var
  vlValorOperacao: string;
begin

  vlValorOperacao := '0';

  vlValorOperacao := RegistraOperacaoCaixa(tocSangriaCaixa);

  if (vlValorOperacao <> '0') and (vlValorOperacao <> '') then
    if FileExists(Extractfilepath(Application.ExeName) + 'relat\SangriaCCX.fr3') then
      ImprimirComprovantesCCX(tocSangriaCaixa);
  EdtOperador.SetFocus;
end;

procedure TFPrinciGou.ActSuprimentoExecute(Sender: TObject);
var
  vlValorOperacao: string;
begin
  vlValorOperacao := '0';

  vlValorOperacao := RegistraOperacaoCaixa(tocSuprimentoCaixa);

  if (vlValorOperacao <> '0') and (vlValorOperacao <> '') then
    if FileExists(Extractfilepath(Application.ExeName) + 'relat\SuprimentoCCX.fr3') then
      ImprimirComprovantesCCX(tocSuprimentoCaixa);
  EdtOperador.SetFocus;
end;

procedure TFPrinciGou.ActTranferirMesasExecute(Sender: TObject);
var
  I: Integer;
  vlUsuarioAtual: Integer;
begin

  if LbMesa.Caption = '' then
  begin
    Showmessage('É necessário uma mesa selecionda');
    Exit;
  end;

  vlUsuarioAtual := AcessoRec.Usuario;

  dmdados.consulta.Close;
  dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
  dmdados.consulta.Open;

  AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;
  try
    TmMesa.Enabled := False;
    if dmdados.orc.IsEmpty then
      Exit;

    Application.CreateForm(TFrmTranfereMesa, FrmTranfereMesa);
    with FrmTranfereMesa do
    begin
      LbMesa.Caption := FPrinciGou.LbMesa.Caption;
      vpOrcChave := dmdados.orcorcchave.AsInteger;
      dmdados.trfmesa.Close;
      dmdados.trfmesa.Params[0].AsInteger := vpOrcChave;
      dmdados.trfmesa.Params[1].AsString := dmdados.Usuario.TituloOperador;
      dmdados.trfmesa.Open;

      // aplicando filtro para mostrar apenas mesas que ainda não foram incluidas
      dmdados.trfmesa.Filter := 'sel = 0';
      dmdados.trfmesa.Filtered := True;
    end;
    I := 1;

    if FrmTranfereMesa.ShowModal = mrok then
    begin
      MostraItens;

      dmdados.ito.First;
      while not dmdados.ito.Eof do
      begin
        dmdados.ajustaitoitem.Close;
        dmdados.ajustaitoitem.sql.Text := 'update ito set itoitem=' + InttoStr(I) + ' where itochave=' + dmdados.itoitochave.AsString;
        dmdados.ajustaitoitem.ExecSQL;

        dmdados.ito.Next;
        I := I + 1;
      end;

      dmdados.ito.Refresh;
      dmdados.ito.First;

      if dmdados.itorec.Active then
      begin

        dmdados.itorec.First;
        while not dmdados.itorec.Eof do
        begin
          dmdados.ajustaitoitem.Close;
          dmdados.ajustaitoitem.sql.Text := 'update ito set itoitem=' + InttoStr(I) + ' where itochave=' + dmdados.itorecitochave.AsString;
          dmdados.ajustaitoitem.ExecSQL;

          dmdados.itorec.Next;
          I := I + 1;
        end;

        dmdados.itorec.Refresh;
        dmdados.itorec.First;

      end;

    end;
    AtualizaMesas;
    MostraItens;

  finally
    FreeAndNil(FrmTranfereMesa);

    if Self.FindComponent('BtnMesa' + InttoStr(vpMesaAtual)) <> nil then
    begin
      TBitBtn(Self.FindComponent('BtnMesa' + InttoStr(vpMesaAtual))).Click;
    end;

    AcessoRec.Usuario := vlUsuarioAtual;
    EdtOperador.SetFocus;
    TmMesa.Enabled := True;
  end;

end;

procedure TFPrinciGou.ActVendaRapidaExecute(Sender: TObject);
var
  vlMesa: Integer;
  vSQL: String;
  vpTaxaServico: Double;
begin

  try

    dmdados.ccx.Close;
    dmdados.ccx.ParamByName('clbcodigo').AsInteger := dmdados.Usuario.clbcodigo;
    dmdados.ccx.Open;

    if dmdados.ccxccxdatafecha.AsString <> '' then
    begin
      Showmessage('Caixa FECHADO, por favor abra o caixa para iniciar as vendas!');
      Exit;
    end;

    FCcxchave:=dmdados.ccx.FieldByName('ccxchave').AsInteger;

    dmdados.tbrd.Close;
    dmdados.tbrd.Open;

    dmdados.tisi.Close;
    dmdados.tisi.Open;

    dmdados.trfi.Close;
    dmdados.trfi.Open;

    dmdados.trdc.Close;
    dmdados.trdc.Open;

    vpVendaRapida := True;
    vpEtdCodigo := 0;
    dmdados.consulta.Close;
    dmdados.consulta.sql.Text := 'select clbcodigo from ccx where ccxchave=' + vpCcxChave;
    dmdados.consulta.Open;

    AcessoRec.Usuario := dmdados.consulta.FieldByName('clbcodigo').AsInteger;

    if (dmdados.Usuario.MesaVendaRapida <> '') and (dmdados.Usuario.MesaVendaRapida <> '0') then
      vlMesa := StrtoInt(dmdados.Usuario.MesaVendaRapida)
    else
      vlMesa := dmdados.Usuario.QtdMesa;

    if Self.FindComponent('BtnMesa' + InttoStr(vlMesa)) <> nil then
    begin
      TBitBtn(Self.FindComponent('BtnMesa' + InttoStr(vlMesa))).Click;

      vpOrcChave := dmdados.orcorcchave.AsString;
      Application.CreateForm(tFrmVendaRapida, FrmVendaRapida);
      FrmVendaRapida.zcone := dmdados.conexao;
      FrmVendaRapida.registro.ParamByName('orcmesa').AsInteger := vlMesa;
      FrmVendaRapida.vpEtdCodigo := 0;

      if FrmVendaRapida.ShowModal = mrok then
      begin

        try
          TmMesa.Enabled := False;

          if (PCMesa.ActivePage <> TabItens) then
            Exit;

          if not dmdados.orc.IsEmpty then
            MostraItens;

          if not dmdados.ito.IsEmpty then
          begin
            vSQL := 'SELECT orc.stocodigo, sto.stoidentificacao ' + '  FROM orc ' + ' INNER JOIN sto ON orc.stocodigo = sto.stocodigo ' +
              ' WHERE orc.orcchave = ' + dmdados.orcorcchave.AsString;
            dmdados.ConsultaSQL(vSQL);
            if not(dmdados.consulta.fields[0].AsInteger in [1, 2, 5]) then
            begin
              Showmessage('Atenção, ' + dmdados.Usuario.TituloOperador + ' atual teve sua situação alterada para ' + dmdados.consulta.fields[1]
                .AsString + ', verifique ');
              LimpaMesa;
              EdtOperador.SetFocus;
              Exit;
            end;
            vpTaxaServico := 0;
            if dmdados.ito.Locate('procodigo', dmdados.cfgmcfgcfgmgouproatendimento.AsInteger, []) then
            begin
              if dmdados.itostocodigo.AsInteger <> 88 then
              begin

                vpTaxaServico := dmdados.itoitovalorav.AsCurrency;
              end;
            end;

            Application.CreateForm(tFrmFinalizaMesa, FrmFinalizaMesa);
            FrmFinalizaMesa.vpOrcChave := vpOrcChave;
            FrmFinalizaMesa.cbDescontarTaxa.ItemIndex := 2;
            FrmFinalizaMesa.EdtVlrPago.ReadOnly := True;
            FrmFinalizaMesa.EdtVlrPago.Enabled := False;

            FrmFinalizaMesa.EdtNomeCliente.ReadOnly := True;
            FrmFinalizaMesa.EdtNomeCliente.Enabled := False;

            FrmFinalizaMesa.AtualizaLimiteTela(InttoStr(vpEtdCodigo));
            FrmFinalizaMesa.vpEtdCodigo := vpEtdCodigo;
            FrmFinalizaMesa.PCFechamento.ActivePage := FrmFinalizaMesa.TabRecebimento;

            FrmFinalizaMesa.TabPedidos.Tag := 1;
            FrmFinalizaMesa.TabItens.Tag := 0;
            // FrmFinalizaMesa.LbMesa.Caption := 'Fechamento Rápida';
            FrmFinalizaMesa.vpTotalGeral := TBRound(((vpTotal + vpTaxaServico) - vpDesconto), 2);
            FrmFinalizaMesa.Caption := LbMesa.Caption;
            FrmFinalizaMesa.Caption := 'Fechamento Rápido';
            FrmFinalizaMesa.ShowModal;
            if FrmFinalizaMesa.vpFechada then
            begin
              LimpaMesa;
              vpEtdCodigo := 0;
            end
            else
            begin
              if vpVendaRapida then
              begin
                ActVendaRapida.Execute;
              end
              else
              begin
                MostraItens;
              end;
            end;

            FreeAndNil(FrmFinalizaMesa);
          end;
          EdtOperador.SetFocus;
        finally
          TmMesa.Enabled := True;
        end;

      end
      else
      begin

        dmdados.ExecutaSQL('SET @orcchave = ' + dmdados.orcorcchave.AsString + '; ' + 'UPDATE orc SET stocodigo = 88 WHERE orcchave = @orcchave; ' +
          'UPDATE ito SET stocodigo = 88 WHERE orcchave = @orcchave; ');
        LimpaMesa;

      end;

    end
    else
    begin
      Showmessage('Mesa de venda rápida nao localizada: ' + 'BtnMesa' + InttoStr(vlMesa));
    end;
  finally
    vpVendaRapida := False;
  end;
end;

procedure TFPrinciGou.AjustaBotoes(pEnabled: Boolean);
begin
  ActAbreCaixa.Enabled := Not(pEnabled);
  ActFechaCaixa.Enabled := pEnabled;
  ActSangria.Enabled := pEnabled;
  ActSuprimento.Enabled := pEnabled;
  ActFechaMesa.Enabled := pEnabled;
  ActReceberDelivery.Enabled := pEnabled;

  if ActAbreCaixa.Enabled then
  begin

    ActVendaRapida.Enabled := False;
    ActTranferirMesas.Enabled := False;
    ActReabirMesa.Enabled := False;
    ActJuntarMesas.Enabled := False;
    ActExcluirJuncao.Enabled := False;

    ActCancelaItem.Enabled := False;
    ActCancelaTodos.Enabled := False;
    ActReceberConvenio.Enabled := False;
    ActIniciaFechamento.Enabled := False;
    ActReemissaoFechamento.Enabled := False;

    SBImpComanda.Enabled := False;
    SBProduto.Enabled := False;
    ActGaveta.Enabled := False;
    SBPedido.Enabled := False;

  end
  else
  begin

    ActVendaRapida.Enabled := True;
    ActTranferirMesas.Enabled := True;
    ActReabirMesa.Enabled := True;
    ActJuntarMesas.Enabled := True;
    ActExcluirJuncao.Enabled := True;

    ActCancelaItem.Enabled := True;
    ActCancelaTodos.Enabled := True;
    ActReceberConvenio.Enabled := True;
    ActIniciaFechamento.Enabled := True;
    ActReemissaoFechamento.Enabled := True;

    SBImpComanda.Enabled := True;
    SBProduto.Enabled := True;
    ActGaveta.Enabled := True;
    SBPedido.Enabled := True;
  end;

end;

procedure TFPrinciGou.AlteraFonte(pObjeto: TRichEdit; pTamanho: Integer; pTipo: TFontStyle; pCor: TColor);
begin
  pObjeto.SelAttributes.Color := pCor;
  pObjeto.SelAttributes.Size := pTamanho;
  pObjeto.SelAttributes.Name := 'Tahoma';
  pObjeto.SelAttributes.Style := [pTipo];
end;

procedure TFPrinciGou.ApplicationEvents1Activate(Sender: TObject);
begin
  if ((Self.WindowState = wsnormal) or (Self.WindowState = wsminimized)) and (Self.height = 50) then
  begin
    Self.WindowState := wsMaximized;
  end;

end;

procedure TFPrinciGou.ApplicationEvents1Message(var Msg: tagMSG; var Handled: Boolean);
begin
  {
    case Msg.message of
    WM_RBUTTONDOWN, WM_RBUTTONDBLCLK, WM_LBUTTONDOWN, WM_LBUTTONDBLCLK, WM_KEYDOWN:
    LastTick := GetTickCount;
    end;
  }

end;

procedure TFPrinciGou.ApresentaItem(pOrcChave, pItoChave: Integer);
var
  vSQL: String;
begin
  vSQL := 'SELECT COUNT(*) fsncount ' + '  FROM sfn ' + ' INNER JOIN pro ON sfn.procodigo = pro.procodigo ' +
    ' INNER JOIN ito on pro.procodigo = ito.procodigo  ' + ' WHERE ito.itochave = ' + InttoStr(pItoChave);
  dmdados.ConsultaSQL(vSQL);

  Application.CreateForm(tFrmVisualizaItem, FrmVisualizaItem);
  FrmVisualizaItem.MemPro.Clear;

  dmdados.Item.Close;
  dmdados.Item.Params[0].AsInteger := pOrcChave; // orcchave
  dmdados.Item.Params[1].AsInteger := pItoChave; // itochave
  dmdados.Item.Open;
  if not dmdados.Item.IsEmpty then
  begin
    // Escrevendo nome do produto
    AlteraFonte(FrmVisualizaItem.MemPro, 20, fsBold, clBlack);
    FrmVisualizaItem.MemPro.Lines.Add(' ' + dmdados.Itemitoquantidade.AsString + ' X ' + dmdados.Itempronome.AsString);

    // caso produto seja fracionado
    if dmdados.consulta.fields[0].AsInteger > 0 then
    begin
      // Escrevendo bordas do produto quando existir
      dmdados.itemBorda.Close;
      dmdados.itemBorda.Params[0].AsInteger := pOrcChave; // orcchave
      dmdados.itemBorda.Params[1].AsInteger := pItoChave; // itochave
      dmdados.itemBorda.Open;
      if not dmdados.itemBorda.IsEmpty then
      begin
        FrmVisualizaItem.MemPro.Lines.Add('');
        AlteraFonte(FrmVisualizaItem.MemPro, 16, fsBold, clBlue);
        FrmVisualizaItem.MemPro.Lines.Add('*** ' + trim(dmdados.cfgmcfgcfgmgouttulocomposicao.AsString) + ' ***');
        dmdados.itemBorda.First;
        while not dmdados.itemBorda.Eof do
        begin
          AlteraFonte(FrmVisualizaItem.MemPro, 12, fsBold, clBlack);
          FrmVisualizaItem.MemPro.Lines.Add('   ' + dmdados.ItemBordabrdidentificacao.AsString);
          dmdados.itemBorda.Next;
        end;
      end;

      // Escrevendo sabores do produto quando existir
      dmdados.itemSabor.Close;
      dmdados.itemSabor.Params[0].AsInteger := pOrcChave; // orcchave
      dmdados.itemSabor.Params[1].AsInteger := pItoChave; // itochave
      dmdados.itemSabor.Open;

      if not dmdados.itemSabor.IsEmpty then
      begin
        FrmVisualizaItem.MemPro.Lines.Add('');
        AlteraFonte(FrmVisualizaItem.MemPro, 16, fsBold, clGreen);
        FrmVisualizaItem.MemPro.Lines.Add('*** SABORES ***');
        dmdados.itemSabor.First;
        while not dmdados.itemSabor.Eof do
        begin
          AlteraFonte(FrmVisualizaItem.MemPro, 14, fsBold, clBlack);
          FrmVisualizaItem.MemPro.Lines.Add('   ' + dmdados.ItemSaborsbridentificacao.AsString);
          // Escrevendo sabores do produto quando existir
          dmdados.ItemIngredientefra.Close;
          dmdados.ItemIngredientefra.Params[0].AsInteger := pOrcChave;
          // orcchave
          dmdados.ItemIngredientefra.Params[1].AsInteger := pItoChave;
          // itochave
          dmdados.ItemIngredientefra.Params[2].AsInteger := dmdados.ItemSaborsbichave.AsInteger; // sbichave
          dmdados.ItemIngredientefra.Open;
          if not dmdados.ItemIngredientefra.IsEmpty then
          begin
            dmdados.ItemIngredientefra.First;
            while not dmdados.ItemIngredientefra.Eof do
            begin
              if dmdados.ItemIngredienteFraisitipo.AsInteger = 0 then
              begin
                AlteraFonte(FrmVisualizaItem.MemPro, 11, fsBold, clBlack);
                if Pos('            ' + dmdados.ItemIngredienteFratsiidentificacao.AsString + ' ' + dmdados.ItemIngredienteFraingnome.AsString,
                  FrmVisualizaItem.MemPro.Lines.Text) = 0 then
                begin
                  FrmVisualizaItem.MemPro.Lines.Add('            ' + dmdados.ItemIngredienteFratsiidentificacao.AsString + ' ' +
                    dmdados.ItemIngredienteFraingnome.AsString)
                end;
              end
              else
              begin
                AlteraFonte(FrmVisualizaItem.MemPro, 11, fsBold, clMaroon);
                if Pos('            ' + 'ADICIONAR ' + dmdados.ItemIngredienteFraingnome.AsString + ' (' +
                  dmdados.ItemIngredienteFratsiidentificacao.AsString + ')', FrmVisualizaItem.MemPro.Lines.Text) = 0 then
                begin
                  FrmVisualizaItem.MemPro.Lines.Add('            ' + 'ADICIONAR :' + dmdados.ItemIngredienteFraingnome.AsString + ' ' +
                    formatfloat('##0', dmdados.ItemIngredienteFraisiquantidade.AsInteger * dmdados.itoitoquantidade.AsFloat) + ' X ' +
                    formatfloat('#,##0.00', dmdados.ItemIngredienteFrapunprecoav.AsCurrency) + ' = ' + formatfloat('#,##0.00',
                    dmdados.ItemIngredienteFrapunprecoav.AsCurrency * dmdados.itoitoquantidade.AsFloat *
                    dmdados.ItemIngredienteFraisiquantidade.AsInteger));
                end;
              end;
              dmdados.ItemIngredientefra.Next;
            end;
          end;

          dmdados.itemSabor.Next;
        end;
      end;
    end
    else
    // caso o item seja comum
    begin
      // Escrevendo sabores do produto quando existir
      dmdados.ItemIngredienteNormal.Close;
      dmdados.ItemIngredienteNormal.Params[0].AsInteger := pOrcChave;
      // orcchave
      dmdados.ItemIngredienteNormal.Params[1].AsInteger := pItoChave;
      // itochave
      dmdados.ItemIngredienteNormal.Open;
      if not dmdados.ItemIngredienteNormal.IsEmpty then
      begin
        dmdados.ItemIngredienteNormal.First;
        while not dmdados.ItemIngredienteNormal.Eof do
        begin
          if dmdados.ItemIngredienteNormalisitipo.AsInteger = 0 then
          begin
            AlteraFonte(FrmVisualizaItem.MemPro, 11, fsBold, clBlack);
            if Pos('            ' + dmdados.ItemIngredienteNormaltsiidentificacao.AsString + ' ' + dmdados.ItemIngredienteNormalingnome.AsString,
              FrmVisualizaItem.MemPro.Lines.Text) = 0 then

              FrmVisualizaItem.MemPro.Lines.Add('            ' + dmdados.ItemIngredienteNormaltsiidentificacao.AsString + ' ' +
                dmdados.ItemIngredienteNormalingnome.AsString)
          end
          else
          begin
            AlteraFonte(FrmVisualizaItem.MemPro, 11, fsBold, clMaroon);
            if Pos('            ' + 'ADICIONAR ' + dmdados.ItemIngredienteNormalingnome.AsString + ' (' +
              dmdados.ItemIngredienteNormaltsiidentificacao.AsString + ')', FrmVisualizaItem.MemPro.Lines.Text) = 0 then
            begin
              FrmVisualizaItem.MemPro.Lines.Add('            ' + 'ADICIONAR :' + dmdados.ItemIngredienteNormalingnome.AsString + ' ' +
                formatfloat('##0', dmdados.ItemIngredienteNormalisiquantidade.AsInteger * dmdados.itoitoquantidade.AsFloat) + ' x ' +
                formatfloat('#,##0.00', dmdados.ItemIngredienteNormalpunprecoav.AsCurrency) + ' = ' + formatfloat('#,##0.00',
                dmdados.ItemIngredienteNormalpunprecoav.AsCurrency * dmdados.ItemIngredienteNormalisiquantidade.AsInteger *
                dmdados.itoitoquantidade.AsFloat));
            end;
          end;
          dmdados.ItemIngredienteNormal.Next;
        end;
      end;
    end;
  end;
  FrmVisualizaItem.ShowModal;
  FreeAndNil(FrmVisualizaItem);

end;

procedure TFPrinciGou.BtnTesteClick(Sender: TObject);
begin
  // imgPaintCanvas(Sender.Canvas, 'Escreva um texto aqui' , 10, 6, 4);
end;

procedure TFPrinciGou.BtnCardRetornarClick(Sender: TObject);
begin
  MostraTab(TabItens);
end;

procedure TFPrinciGou.BuscaOpcoes;
begin
  if not dmdados.grp.IsEmpty then
  begin
    // verifica se o produto é facionado
    dmdados.sfn.Close;
    dmdados.sfn.Params[0].AsInteger := dmdados.grpgrpcodigo.AsInteger;
    dmdados.sfn.Open;
    // caso o produto não seja facionado abre aba de opções do grupo
    if dmdados.sfn.IsEmpty then
    begin
      dmdados.proc.Close;
      dmdados.proc.Params[0].AsInteger := dmdados.grpgrpcodigo.AsInteger;
      dmdados.proc.filtersql := '';
      dmdados.proc.Open;
      if dmdados.proc.IsEmpty then
      begin
        Showmessage('Opções de Cardapio não Disponível, verifica se existe impressora definida para esse Grupo !');
        Exit;
      end
      else
      begin
        LbOpcoes.Caption := dmdados.grpgrpidentificacao.AsString;
        // MostraTab(TabCardOpcao);
      end;
    end
    else
    // caso o produto seja fracionado abre formulario de produtos facionados
    begin
      // chama produto fracionado
      dmdados.proc.Close;
      dmdados.proc.Params[0].AsInteger := 0;
      dmdados.proc.Open;

      // abrindo a tabela de preços
      dmdados.pun.Close;
      dmdados.pun.Params[0].AsInteger := 0;
      dmdados.pun.Open;
      LbOpcoes.Caption := 'Duplo click para abrir - ' + dmdados.grpgrpidentificacao.AsString;
      // IncluirItemFracionado; }

    end;
  end;
end;

function TFPrinciGou.CalculaRecebimentosStone(vorcchave: string):Currency;
var
// vlorcOrigem: string;
  vlRecebimentos :Currency;
  vlDesconto :Currency;

begin
  result:=0;
  vlRecebimentos := 0;
  vlDesconto := 0;
  // buscando dados de pagamentos

  dmdados.tropar.Close;
  dmdados.tropar.sql.Text := ' SELECT tro.trochave , tro.orcchaveorigem  , tro.orcchavedestino ';
  dmdados.tropar.sql.Add('FROM tro where tro.orcchavedestino=' + vpOrcChave);
  dmdados.tropar.Open;


//  vlorcOrigem := dmdados.tropar.FieldByName('orcchaveorigem').AsString;

  dmdados.olt.Close;
  dmdados.olt.Params[0].AsString := vorcchave;
  dmdados.olt.Open;

  // calculando valores recebidos
  if not dmdados.olt.IsEmpty then
  begin
    dmdados.olt.First;
    while not dmdados.olt.Eof do
    begin
      if (dmdados.olttipobaixa.AsInteger = 0) and (lowercase(dmdados.oltltesituacao.AsString) = 'normal') then
      begin
        vlDesconto := vlDesconto + dmdados.oltltedesconto.AsCurrency;
        vlRecebimentos := vlRecebimentos + dmdados.oltltetotal.AsCurrency;
      end;
      dmdados.olt.Next;
    end;

  end;
  result:=vlRecebimentos;

end;


procedure TFPrinciGou.CalculaRecebimentos(vorcchave: string);
var
  vlorcOrigem: string;

begin
  vpRecebimentos := 0;
  vpDesconto := 0;
  // buscando dados de pagamentos

  dmdados.tropar.Close;
  dmdados.tropar.sql.Text := ' SELECT tro.trochave , tro.orcchaveorigem  , tro.orcchavedestino ';
  dmdados.tropar.sql.Add('FROM tro where tro.orcchavedestino=' + vpOrcChave);
  dmdados.tropar.Open;
  vlorcOrigem := dmdados.tropar.FieldByName('orcchaveorigem').AsString;

  dmdados.olt.Close;
  dmdados.olt.Params[0].AsString := vorcchave;
  dmdados.olt.Open;

  // calculando valores recebidos
  if not dmdados.olt.IsEmpty then
  begin
    dmdados.olt.First;
    while not dmdados.olt.Eof do
    begin
      if (dmdados.olttipobaixa.AsInteger = 0) and (lowercase(dmdados.oltltesituacao.AsString) = 'normal') then
      begin
        vpDesconto := vpDesconto + dmdados.oltltedesconto.AsCurrency;
        vpRecebimentos := vpRecebimentos + dmdados.oltltetotal.AsCurrency;
      end;
      dmdados.olt.Next;
    end;

  end;

  if vpMesaAtual<>0 then
  begin
    LbRecebido.Caption := formatfloat('#,##0.00', vpRecebimentos);
    LbItemDesconto.Caption := formatfloat('#,##0.00', vpDesconto);
  end;

end;

procedure TFPrinciGou.CarregaMesa;
var

  vPos: Integer;
  vQtdPanel: Integer;
  vPanel: TPanel;
  vTop: Integer;
begin


  // criando scrollbox onde ficara as mesas
  // FreeAndNil(vScrollBox);

  // if (self.FindComponent('SBMesa') = nil) then
  // FreeAndNil(vScrollBox);

  // self.FindComponent('teste').Name
  vScrollBox := TScrollBox.Create(Self);
  vScrollBox.Name := 'SBMesa';
  vScrollBox.Parent := PnMesas;
  vScrollBox.ParentColor := False;
  vScrollBox.ParentFont := False;
  vScrollBox.Ctl3D := False;
  vScrollBox.BevelInner := bvNone;
  vScrollBox.BevelOuter := bvNone;
  vScrollBox.Align := alClient;

  // Calculando quantidade de paineis para disposição das mesa
  vQtdPanel := (dmdados.Usuario.QtdMesa div 5);

  if (dmdados.Usuario.QtdMesa mod 5) > 0 then
    vQtdPanel := vQtdPanel + 1;

  vTop := 0;
  vPos := 1;
  vpMesaGer := 0;
  while vPos <= vQtdPanel do
  begin
    // Criando Paineis para mesas
    vPanel := TPanel.Create(vScrollBox);
    vPanel.height := 43;
    vPanel.Parent := vScrollBox;

    vPanel.Name := 'Linha' + InttoStr(vPos);
    vPanel.Caption := '';
    vPanel.BevelInner := bvNone;
    vPanel.BevelKind := bkNone;
    vPanel.BevelOuter := bvNone;
    vPanel.ParentFont := False;
    vPanel.ParentColor := False;
    vPanel.Top := vTop;
    vPanel.Width := 320;

    // Criadno Botões que repesentam as mesas
    GeraMesa(vPanel, vQtdPanel, vPos);

    vTop := vTop + 43;
    vPos := vPos + 1;
  end;
end;

procedure TFPrinciGou.CarregaUsuario;
var
  vSQL: String;
  i:integer;

begin
  if dmdados.Usuario.clbcodigo > 0 then
  begin

    vSQL := 'SELECT ccx.ccxchave ' + '  FROM ccx,ctr ' + '  WHERE ctr.ctacodigo=ccx.ctacodigo and ctr.trmcodigo=' + dmdados.Usuario.trmcodigo.ToString
      + ' and ccx.clbcodigo = ' + InttoStr(dmdados.Usuario.clbcodigo) + ' AND ccx.ctacodigo = ' + InttoStr(dmdados.Usuario.CtaCodigo) +
      ' AND ccx.ccxdatafecha IS null ' + ' ORDER BY ccx.ccxchave DESC LIMIT 1';

    with dmdados do
    begin
      clb.Close;
      clb.Params[0].AsInteger := Usuario.clbcodigo;
      clb.Open;
      if not clb.IsEmpty then
      begin
        LbDescMaximo.Caption := formatfloat('#,##0.00', clbclbdescmaximo.AsCurrency);
        Usuario.PercDesc := clbclbdescmaximo.AsCurrency;
        LbColaborador.Caption := clbclbidentificacao.AsString;
        LbTerminal.Caption := InttoStr(dmdados.Usuario.trmcodigo);


        cfgmcfg.Close;
        cfgmcfg.ParamByName('flacodigo').AsInteger := AcessoRec.Filial;
        cfgmcfg.Open;

        if ConsultaSQL(vSQL) then
        begin
          Usuario.ccxchave := consulta.fields[0].AsInteger;
          vpCcxChave := consulta.fields[0].AsString;
          ActAbreCaixa.Enabled := False;

        end
        else
        begin
          Usuario.ccxchave := 0;
          vpCcxChave := '0';
          AjustaBotoes(False);
        end;

        if not cfgmcfg.IsEmpty then
        begin
          LbEmpresa.Caption := cfgmcfgetdapelido.AsString;
          lbFilial.Caption := 'Fla: ' + cfgmcfgflacodigo.AsString;
          LbModoNFe.Caption := cfgmcfgmodonfe.AsString;
          lbCaixa.Caption := 'Ccx: ' + vpCcxChave;
          LbDados.Caption := conexao.Database;
          LbHost.Caption := conexao.Server;
          LbData.Caption := FormatDateTime('', cfgmcfgDtAtual.AsDateTime);


          VerificaIntegracaoPagarme;


          if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
          begin
            dmdados.rpwemaberto.close;
            dmdados.rpwemaberto.open;
            i:=0;

            while not dmdados.rpwemaberto.eof do
            begin
              if dmdados.rpwemabertorpwmesa.AsString<>'' then
              begin

                dmdados.orctef.close;
                dmdados.orctef.parambyname('orcchave').asInteger:=dmdados.rpwemabertoorcchave.AsInteger;
                dmdados.orctef.Open;

                if not dmdados.orctef.IsEmpty then
                begin
               //   MostraPainelRecebimentoStone(dmdados.rpwemabertorpwmesa.AsString,
               //                                dmdados.rpwemabertoorcchave.AsString,
               //                                0,nil, dmdados.rpwemabertorpwtoken.asstring);
                end;

              end;
              dmdados.rpwemaberto.next;
              i:=i+1;
              if i>10 then
              begin
                break;
              end;

            end;
          end;

        end;

      end;
    end;
  end;
end;

procedure TFPrinciGou.ChamaRelatorio(Sender: TObject);
var
  vlRelCodigo: String;
  vlNomeArq: string;
  BlobField: TBlobField;
begin
  if Sender is TMenuItem then
  begin
    vlRelCodigo := (Sender as TMenuItem).Hint;
    if dmdados.rel.Locate('relcodigo', vlRelCodigo, []) then
    begin
      vlNomeArq := Extractfilepath(Application.ExeName) + 'relat\rel' + vlRelCodigo + '.fr3';
      BlobField := dmdados.rel.FieldByName('relarquivo') as TBlobField;
      BlobField.SaveToFile(vlNomeArq);
      if FileExists(vlNomeArq) then
        ImprimeRelatorio(vlNomeArq);
    end;
  end;
end;

procedure TFPrinciGou.ConsultaMesa;
var
  vNumMesa: Integer;
begin
  // buscando pedido da mesa
  with dmdados do
  begin
    vNumMesa := orcorcchave.AsInteger;
    // verifica se existe pedido aberto para mesa


    dmdados.orc.Close;
    dmdados.orc.Parambyname('orcmesa').AsInteger := vNumMesa;
 //  dmdados.orc.Parambyname('ccxchave').AsInteger := FCcxchave;
    dmdados.orc.Open;



    if orcstocodigo.AsInteger = 1 then
    begin
      Showmessage('Messa esta sendo usada por outra terminal, verifique !');
      Exit;
    end;

    // caso não existe abre orcamento
    if not orc.IsEmpty then
    begin
      // Abrindo Itens da mesa
      MostraItens;
    end;
  end;
end;

procedure TFPrinciGou.DBGrid1CellClick(Column: TColumn);
begin
  EdtCodprod.SetFocus;

end;

procedure TFPrinciGou.DBGrid1DblClick(Sender: TObject);
begin
  if not dmdados.ito.IsEmpty then
    ApresentaItem(dmdados.orcorcchave.AsInteger, dmdados.itoitochave.AsInteger);
end;

procedure TFPrinciGou.DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
var
  fixRect: TRect;
begin

  if dmdados.itoimmmodo.AsInteger = 9 then
  begin
    TDBGrid(Sender).Canvas.Font.Color := clgray;
    TDBGrid(Sender).Canvas.FillRect(Rect);
    TDBGrid(Sender).DefaultDrawDataCell(Rect, TDBGrid(Sender).Columns[DataCol].Field, State);
  end;

  if dmdados.itostocodigo.AsInteger <> 2 then
  begin
    TDBGrid(Sender).Canvas.Font.Color := clRed;
    TDBGrid(Sender).Canvas.FillRect(Rect);
    TDBGrid(Sender).DefaultDrawDataCell(Rect, TDBGrid(Sender).Columns[DataCol].Field, State);
  end;

  if gdSelected in State then
    with (Sender as TDBGrid).Canvas do
    begin
      if dmdados.itostocodigo.AsInteger <> 2 then
        Brush.Color := clSilver
      else
        Brush.Color := clBlack;

      FillRect(fixRect);
      // Font.Color := CLWHITE;
      Font.Style := [fsBold];
    end;

  with TFriendly(DBGrid1) do

    if TDataLink(DataLink).ActiveRecord = Row - 1 then
      with Canvas do
      begin
        // Brush.Color := clBlack; { set grids canvas to win highlight colour }
        DefaultDrawColumnCell(fixRect, DataCol, Column, State);
        { now redraw the cell, but highlighted }
      end;

  TDBGrid(Sender).DefaultDrawDataCell(fixRect, TDBGrid(Sender).Columns[DataCol].Field, State);

end;

procedure TFPrinciGou.DBGrid1KeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  If (((Shift = [ssCtrl]) And (Key = 46))) or ((ssCtrl in Shift) and (Key = VK_DELETE)) Then
    abort;

end;

procedure TFPrinciGou.DBGrid1TitleClick(Column: TColumn);
begin
  dmdados.ito.IndexFieldNames := Column.FieldName;
end;

procedure TFPrinciGou.DBGrid2DblClick(Sender: TObject);
begin
  if not dmdados.grp.IsEmpty then
  begin
    dmdados.proc.filtersql := '';
    ItemFracionado(dmdados.grpgrpcodigo.AsInteger);
  end;
end;

procedure TFPrinciGou.DBGrid2Enter(Sender: TObject);
begin
  DBGrid2.Color := clwhite;

end;

procedure TFPrinciGou.DBGrid2Exit(Sender: TObject);
begin
  DBGrid2.Color := clwhite;
end;

procedure TFPrinciGou.ItemFracionado(pGrupo: Integer);
begin
  if not dmdados.grp.IsEmpty then
  begin
    // verifica se o produto é facionado
    dmdados.sfn.Close;
    dmdados.sfn.Params[0].AsInteger := pGrupo;
    dmdados.sfn.Open;
    // caso o produto não seja facionado abre aba de opções do grupo
    if not dmdados.sfn.IsEmpty then
      IncluirItemFracionado;
  end;
end;

procedure TFPrinciGou.DBGrid2KeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  If (((Shift = [ssCtrl]) And (Key = 46))) or ((ssCtrl in Shift) and (Key = VK_DELETE)) Then
    abort;

end;

procedure TFPrinciGou.DBGrid2KeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then
  begin
    Key := #0;
    if not dmdados.grp.IsEmpty then
    begin
      // verifica se o produto é facionado
      dmdados.sfn.Close;
      dmdados.sfn.Params[0].AsInteger := dmdados.grpgrpcodigo.AsInteger;
      dmdados.sfn.Open;
      // caso o produto não seja facionado abre aba de opções do grupo
      if not dmdados.sfn.IsEmpty then
        IncluirItemFracionado;
    end;
  end;
end;

procedure TFPrinciGou.DBGrid2KeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin

  if Key = 39 then
  begin
    Key := 0;
    if not DBGrid2.DataSource.DataSet.Eof then
      DBGrid2.DataSource.DataSet.Prior;

    DBGrid3.SetFocus;
  end;

end;

procedure TFPrinciGou.DBGrid3DblClick(Sender: TObject);
begin
  Incluir;
  // IncluirItemComum;
end;

procedure TFPrinciGou.DBGrid3Enter(Sender: TObject);
begin
  DBGrid3.Color := clwhite;

end;

procedure TFPrinciGou.DBGrid3Exit(Sender: TObject);
begin
  DBGrid3.Color := clwhite;

end;

procedure TFPrinciGou.Incluir(vBarra: String = ''; vQuantidade: Double = 1);
var
  vlgrpcodigo: string;
  vlValorCombo: Double;
  vlValorBruto: Double;
  vlPercentualDescontoCombo: Double;
  vlValorDescontoComboItem: Double;
  vlValorTotalav: Double;
  vlValorTotal: Double;
  vlValorDiferenca: Double;

  vlCodigoCombo: Integer;
  vlListaItos: TStringList;
  vlrec: Integer;
begin
  MemIngredientes.Text := '';

  dmdados.pco.Close;
  dmdados.pco.ParamByName('procodigo').AsInteger := dmdados.procprocodigo.AsInteger;
  dmdados.pco.Open;

  if not dmdados.pco.IsEmpty then
  begin
    vlListaItos := TStringList.Create;

    vlrec := dmdados.ito.RecNo;

    dmdados.ito.First;
    while not dmdados.ito.Eof do
    begin

      if Pos(dmdados.itoitochave.AsString + ';', vlListaItos.Text) = 0 then
      begin
        vlListaItos.Add(dmdados.itoitochave.AsString + ';');
      end;
      dmdados.ito.Next;
    end;

    dmdados.ito.RecNo := vlrec;
    dmdados.ito.EnableControls;

    vlCodigoCombo := dmdados.procprocodigo.AsInteger;
    dmdados.consulta.Close;
    dmdados.consulta.sql.Text := 'select punprecoav from pun where procodigo=' + vlCodigoCombo.ToString;
    dmdados.consulta.Open;

    vlValorCombo := 0;
    vlValorBruto := 0;
    vlPercentualDescontoCombo := 0;

    vlValorCombo := dmdados.consulta.FieldByName('punprecoav').AsCurrency;

    dmdados.pco.First;
    while not dmdados.pco.Eof do
    begin
      dmdados.consulta.Close;
      dmdados.consulta.sql.Text := 'select grpcodigo from pro where procodigo=' + dmdados.pcopcosubproduto.AsString;
      dmdados.consulta.Open;
      vlgrpcodigo := dmdados.consulta.FieldByName('grpcodigo').AsString;

      if dmdados.grp.Locate('grpcodigo', vlgrpcodigo, []) then
      begin

        dmdados.proc.Close;
        dmdados.proc.ParamByName('grpcodigo').AsString := vlgrpcodigo;
        dmdados.proc.Open;

        if dmdados.proc.Locate('procodigo', dmdados.pcopcosubproduto.AsInteger, []) then
        begin
          if not dmdados.proc.IsEmpty then
          begin
            IncluirItemComum('', dmdados.pcopcoquantidade.AsFloat);

          end;
        end
        else
        begin

          if not dmdados.grp.IsEmpty then
          begin

            dmdados.consulta.Close;
            dmdados.consulta.sql.Text := 'select grpcodigo from pro where procodigo=' + dmdados.pcopcosubproduto.AsString;
            dmdados.consulta.Open;
            vlgrpcodigo := dmdados.consulta.FieldByName('grpcodigo').AsString;

            dmdados.proc.Close;
            dmdados.proc.ParamByName('grpcodigo').AsString := vlgrpcodigo;
            dmdados.proc.Open;

            dmdados.sfn.filtersql := 'pro.unicodigo=' + dmdados.pcounicodigo.AsString;
            ItemFracionado(dmdados.grpgrpcodigo.AsInteger);

          end;

        end;

      end;

      dmdados.pco.Next;
    end;

    MostraItens;

    vlrec := dmdados.ito.RecNo;

    dmdados.ito.First;
    while not dmdados.ito.Eof do
    begin
      if Pos(dmdados.itoitochave.AsString + ';', vlListaItos.Text) = 0 then
      begin
        dmdados.consulta.Close;
        dmdados.consulta.sql.Text := 'update ito set  pcocodigo=' + vlCodigoCombo.ToString + ' where itochave=' + dmdados.itoitochave.AsString;
        dmdados.consulta.ExecSQL;
        vlValorBruto := vlValorBruto + dmdados.itoitototalav.AsCurrency - (dmdados.itoitoacrescimoav.AsCurrency * dmdados.itoitoquantidade.AsFloat);
      end;
      dmdados.ito.Next;
    end;

    if vlValorBruto <> 0 then
    begin

      vlPercentualDescontoCombo := vlValorCombo / vlValorBruto;
    end
    else
    begin
      vlPercentualDescontoCombo := 0;
    end;

    dmdados.ito.First;
    while not dmdados.ito.Eof do
    begin
      vlValorDescontoComboItem :=
        roundto((dmdados.itoitototalav.AsCurrency - (dmdados.itoitoacrescimoav.AsCurrency * dmdados.itoitoquantidade.AsFloat)) -
        ((dmdados.itoitototalav.AsCurrency - (dmdados.itoitoacrescimoav.AsCurrency * dmdados.itoitoquantidade.AsFloat)) *
        vlPercentualDescontoCombo), -2);

      vlValorTotalav := roundto(((((dmdados.itoitototalav.AsCurrency - (dmdados.itoitoacrescimoav.AsCurrency * dmdados.itoitoquantidade.AsFloat))) -
        vlValorDescontoComboItem) + dmdados.itoitoacrescimoav.AsCurrency), -2);

      dmdados.consulta.Close;
      dmdados.consulta.sql.Text := 'update ito set  itototalav=' + StringReplace(vlValorTotalav.ToString, ',', '.', []) + ',itodescontoav= ' +
        StringReplace(vlValorDescontoComboItem.ToString, ',', '.', []) + ' where itochave=' + dmdados.itoitochave.AsString + ' and  pcocodigo=' +
        vlCodigoCombo.ToString;
      dmdados.consulta.ExecSQL;

      vlValorTotal := vlValorTotal + vlValorTotalav;

      dmdados.ito.Next;
    end;

    vlValorDiferenca := 0;
    vlValorDiferenca := vlValorCombo - vlValorTotal;

    if vlValorDiferenca <> 0 then
    begin

      dmdados.consulta.Close;
      // dmdados.consulta.sql.Text := 'update ito set  itototalav=' + StringReplace(vlValorTotalav.ToString, ',', '.', []) + ',itodescontoav= ' +
      // StringReplace(vlValorDescontoComboItem.ToString, ',', '.', []) + ' where itochave=' + dmdados.itoitochave.AsString + ' and  pcocodigo=' +
      // vlCodigoCombo.ToString;
      dmdados.consulta.ExecSQL;

    end;

    dmdados.ito.RecNo := vlrec;
    dmdados.ito.EnableControls;

    MostraItens;

  end
  else
  begin
    IncluirItemComum(vBarra, vQuantidade);
  end;

end;

procedure TFPrinciGou.IncluirItemComum(vBarra: String = ''; vQuantidade: Double = 1);
begin
  MemIngredientes.Text := '';

  if not dmdados.proc.IsEmpty then
  begin
    // preparando dados do item
    dmdados.tito.Close;
    dmdados.tito.Open;

    dmdados.tito.Append;
    dmdados.titoclbcodigo.AsInteger := dmdados.Usuario.clbcodigo;
    dmdados.titoobs.AsString := '';
    dmdados.titopessoas.AsInteger := 0;
    dmdados.titoprocodigo.AsInteger := dmdados.procprocodigo.AsInteger;
    dmdados.titopronome.AsString := dmdados.procpronomereduzido.AsString;
    dmdados.titopuncodigo.AsInteger := dmdados.punpuncodigo.AsInteger;
    dmdados.titoqtde.AsFloat := vQuantidade;
    dmdados.titosfncodigo.AsInteger := dmdados.sfnsfncodigo.AsInteger;
    dmdados.titosfnid.AsInteger := dmdados.ito.RecordCount + 1;
    dmdados.titocopos.AsInteger := 0;
    dmdados.titopratos.AsInteger := 0;

    dmdados.sbrfra.Close;
    dmdados.sbrfra.Connection := dmdados.conexao;
    dmdados.sbrfra.sql.Text := 'SELECT sbrfracionado FROM sbr WHERE sbr.grpcodigo = ' + dmdados.grpgrpcodigo.AsString + ' LIMIT 1';
    dmdados.sbrfra.Open;

    if dmdados.sbrfra.fields[0].AsInteger = 1 then
    begin
      vBarra := '';
    end;

    if vBarra <> '' then
    begin

      with dmdados do
      begin
        if tito.State in [DsInsert, DsEdit] then
        begin
          tito.Post;
          tito.ApplyUpdates;

          if not sbr.IsEmpty then
          begin
            if not tisi.Active then
              tisi.Open;

            // gravando saberes e ingredients
            sbr.DisableControls;

            sbr.First;
            while not sbr.Eof do
            begin
              if (sbrtsicodigo.AsInteger <> Usuario.tsicodigo) then
              begin
                tisi.Append;
                tisisbrcodigo.AsInteger := sbrsbrcodigo.AsInteger;
                tisiprocodigo.AsInteger := sbrprocodigo.AsInteger;
                tisitsicodigo.AsInteger := sbrtsicodigo.AsInteger;
                tisiisitipo.AsInteger := sbrtipo.AsInteger;
                tisisfnid.AsInteger := titosfnid.AsInteger;
                tisiisiquantidade.AsInteger := 1;

                tisisfncodigo.AsInteger := 0;
                if Length(titoobs.AsString) > 0 then
                  tisiobs.AsString := titoobs.AsString;

                tisiisiquantidade.AsInteger := 1;
                tisiisiitem.AsInteger := titosfnid.AsInteger;
                tisi.Post;
              end;
              sbr.Next;
            end;
            sbr.EnableControls;
            sbr.Close;

            vtsbradc.DisableControls;
            if not vtsbradc.IsEmpty then
            begin
              vtsbradc.First;
              while not vtsbradc.Eof do
              begin
                tisi.Append;
                tisisbrcodigo.AsInteger := vpSbrCodigo;
                // vtsbradcsbrcodigo.AsInteger;
                tisiprocodigo.AsInteger := vtsbradcprocodigo.AsInteger;
                tisitsicodigo.AsInteger := vtsbradctsicodigo.AsInteger;
                tisiisitipo.AsInteger := 1;
                tisisfnid.AsInteger := titosfnid.AsInteger;
                tisisfncodigo.AsInteger := 0;
                if Length(titoobs.AsString) > 0 then
                  tisiobs.AsString := titoobs.AsString;

                tisiisiitem.AsInteger := titosfnid.AsInteger;
                tisiisiquantidade.AsInteger := 1;
                tisi.Post;
                vtsbradc.Next;
              end;
            end;
            vtsbradc.EnableControls;
          end;

          if tisi.Active then
            tisi.ApplyUpdates;

          // borda produtos fracionados
          if tbrd.Active then
            tbrd.ApplyUpdates;

          MobGravaItens.Close;
          MobGravaItens.Params[0].AsInteger := orcorcchave.AsInteger;
          MobGravaItens.Params[1].AsInteger := Usuario.clbcodigo;
          MobGravaItens.Params[2].AsInteger := dmdados.cfgmcfgflacodigo.AsInteger;
          MobGravaItens.ExecProc;
          MobGravaItens.ParamByName('pconfirma').AsInteger;

       // Showmessage(MobGravaItens.fields[1].AsString);

          if MobGravaItens.fields[0].AsInteger = 0 then
          BEGIN
            if dmdados.vtItens.Active then
            begin
              vtItens.EmptyDataSet;
            end;
          END
          else
            Showmessage(MobGravaItens.fields[1].AsString);
        end;
        // PreparaInclusao;
        // vpConfirma := True;

      end;

    end
    else
    begin

      // itens com ingredientes
      if not dmdados.sbr.IsEmpty then
      begin

        Application.CreateForm(TFrmIngredienteComum, FrmIngredienteComum);
        FrmIngredienteComum.vpSbrCodigo := dmdados.sbrsbrcodigo.AsInteger;
        FrmIngredienteComum.EdtQtde.Field.AsFloat := vQuantidade;

        FrmIngredienteComum.ShowModal;
        if FrmIngredienteComum.vpConfirma = True then
        begin
          MostraItens;
          MostraTab(TabItens);
        end
        else
        begin
          if dmdados.tito.State <> dsbrowse then
            dmdados.tito.Cancel;

        end;
        FreeAndNil(FrmIngredienteComum);
      end
      else
      // itens sem ingredientes
      begin
        dmdados.sbrfra.Close;
        dmdados.sbrfra.Connection := dmdados.conexao;
        dmdados.sbrfra.sql.Text := 'SELECT sbrfracionado FROM sbr WHERE sbr.grpcodigo = ' + dmdados.grpgrpcodigo.AsString + ' LIMIT 1';
        dmdados.sbrfra.Open;

        if not dmdados.sbrfra.IsEmpty then
        begin

          if dmdados.sbrfra.fields[0].AsInteger = 1 then
          begin
            Application.CreateForm(TFrmIngredientePesado, FrmIngredientePesado);
            FrmIngredientePesado.vpSbrCodigo := 0;
            FrmIngredientePesado.vpSetor := 1;
            FrmIngredientePesado.ShowModal;
            dmdados.ConsultaSQL('SELECT cpbsetor FROM cpb WHERE cpb.procodigo = ' + dmdados.procprocodigo.AsString);

            if not dmdados.consulta.IsEmpty then
              FrmIngredientePesado.vpSetor := dmdados.consulta.fields[0].AsInteger;

            if FrmIngredientePesado.vpConfirma = True then
            begin
              MostraItens;
              MostraTab(TabItens);
            end
            else
            begin
              if dmdados.tito.State <> dsbrowse then
                dmdados.tito.Cancel;
            end;

            FreeAndNil(FrmIngredientePesado);
          end;
        end
        else
        begin

          Application.CreateForm(TFrmIngredienteIndividual, FrmIngredienteIndividual);
          FrmIngredienteIndividual.vpSbrCodigo := 0;
          FrmIngredienteIndividual.EdtQtde.Field.AsFloat := vQuantidade;

          FrmIngredienteIndividual.ShowModal;
          if FrmIngredienteIndividual.vpConfirma = True then
          begin
            MostraItens;
            MostraTab(TabItens);
          end
          else
            dmdados.tito.Cancel;
          FreeAndNil(FrmIngredienteIndividual);
        end;
      end;
    end;
  end;

end;

procedure TFPrinciGou.DBGrid3KeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  If (((Shift = [ssCtrl]) And (Key = 46))) or ((ssCtrl in Shift) and (Key = VK_DELETE)) Then
    abort;

end;

procedure TFPrinciGou.DBGrid3KeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then
  begin
    Key := #0;
    IncluirItemComum;
  end;
end;

procedure TFPrinciGou.DBGrid3KeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if Key = 37 then
  begin
    Key := 0;
    DBGrid2.SetFocus;
  end;
end;

procedure TFPrinciGou.DBGrid4KeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  If (((Shift = [ssCtrl]) And (Key = 46))) or ((ssCtrl in Shift) and (Key = VK_DELETE)) Then
    abort;

end;

procedure TFPrinciGou.DBGridItoRecKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  If (((Shift = [ssCtrl]) And (Key = 46))) or ((ssCtrl in Shift) and (Key = VK_DELETE)) Then
    abort;
end;

procedure TFPrinciGou.DBGridResumoitensKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  If (((Shift = [ssCtrl]) And (Key = 46))) or ((ssCtrl in Shift) and (Key = VK_DELETE)) Then
    abort;

end;

procedure TFPrinciGou.dGrpDataChange(Sender: TObject; Field: TField);
begin
  BuscaOpcoes;
end;

procedure TFPrinciGou.dprocDataChange(Sender: TObject; Field: TField);
var
  vSabores: String;
begin
  MemIngredientes.Text := '';
  with dmdados do
  begin
    if not proc.IsEmpty then
    begin
      // abrindo a tabela de preços
      pun.Close;
      pun.Params[0].AsInteger := procprocodigo.AsInteger;
      pun.Open;

      // ingredientes do produto
      sbr.Close;
      sbr.Params[0].AsInteger := Usuario.tsicodigo;
      sbr.Params[1].AsInteger := procprocodigo.AsInteger;
      sbr.Open;

      if not sbr.IsEmpty then
      begin
        vSabores := '';
        sbr.DisableControls;
        sbr.First;
        while not sbr.Eof do
        begin
          if sbr.Bof then
            vSabores := sbrpronome.AsString
          else
            vSabores := vSabores + ',  ' + sbrpronome.AsString;
          sbr.Next;
        end;
        sbr.EnableControls;
        MemIngredientes.Text := vSabores;
      end;

    end;

  end;
end;

procedure TFPrinciGou.SetAcesso(const Value: Integer);
begin
  FAcesso := Value;

  dmdados.consulta.Close;
  dmdados.consulta.sql.Text := 'SELECT acs.acschave, acs.clbcodigo, acs.flacodigo, acs.trmcodigo FROM acs WHERE acs.acschave = ' + Acesso.ToString;
  dmdados.consulta.Open;

  AcessoRec.IdAcesso := dmdados.consulta.fields[0].AsInteger;
  AcessoRec.Usuario := dmdados.consulta.fields[1].AsInteger;
  AcessoRec.Filial := dmdados.consulta.fields[2].AsInteger;
  // AcessoRec.Terminal := dmdados.consulta.fields[3].AsInteger;
  AcessoRec.Terminal := dmdados.Usuario.trmcodigo;

  dmdados.dau.Params[0].AsString := Self.Name;
  dmdados.dau.Params[1].AsInteger := AcessoRec.Usuario;
  dmdados.dau.Open;

end;

function TFPrinciGou.AbreGavetaNF: Boolean;

var
  vRetorno: String;
  vDirRelatorio: String;
  vImprimeDireto: Boolean;
begin
  vDirRelatorio := Extractfilepath(Application.ExeName) + 'relat\GavetaCCX.fr3';
  vImprimeDireto := dmdados.Usuario.MitTipCodigo = tipTermica48Col;
  mrfrImprimir(dmdados.dConsulta, vDirRelatorio, ifthen(vImprimeDireto, tiImprimirDireto, tiImprimir));

  result := True;
end;

procedure TFPrinciGou.CriaAcoesDeAcesso;
var
  I: Integer;
  uqMdl: TUniQuery;
  uqAct: TUniQuery;
  vlMdlCodigo: Integer;
begin
  (*
    *
    * Atualização dos Módulos e Ações do Sistema
    *
  *)
  uqMdl := TUniQuery.Create(Application);
  uqAct := TUniQuery.Create(Application);
  try
    uqMdl.Connection := dmdados.conexao;
    uqMdl.sql.Clear;
    uqMdl.sql.Add('SELECT mdl.mdlcodigo, mdl.mdlidentificacao, mdl.mdlnome, mdl.mdlsubgrupo');
    uqMdl.sql.Add('  FROM mdl');
    uqMdl.sql.Add(' WHERE mdl.mdlnome = :mdlnome');

    uqAct.Connection := dmdados.conexao;
    uqAct.sql.Clear;
    uqAct.sql.Add('SELECT act.actcodigo, act.mdlcodigo, act.actidentificacao, act.actformulario, act.actacao, act.actativa');
    uqAct.sql.Add('  FROM act');
    uqAct.sql.Add(' INNER JOIN mdl ON act.mdlcodigo = mdl.mdlcodigo');
    uqAct.sql.Add(' WHERE mdl.mdlnome = :mdlnome');

    uqMdl.Params[0].AsString := Self.Name;
    uqMdl.Open;

    uqAct.Params[0].AsString := Self.Name;
    uqAct.Open;

    for I := 0 to Self.Acoes.ActionCount - 1 do
      if (Self.Acoes[I].Enabled) and (Self.Acoes[I].Tag > -1) then
      begin

        if not uqMdl.Locate('mdlsubgrupo', Self.Acoes[I].Category, []) then
        begin
          uqMdl.Append;
          uqMdl.FieldByName('mdlidentificacao').AsString := Application.Title;
          uqMdl.FieldByName('mdlsubgrupo').AsString := Self.Acoes[I].Category;
          uqMdl.FieldByName('mdlnome').AsString := Self.Name;
          uqMdl.Post;

          vlMdlCodigo := uqMdl.fields[0].AsInteger;

          uqMdl.Refresh;
          uqMdl.Locate('mdlcodigo', vlMdlCodigo, []);
        end
        else
          vlMdlCodigo := uqMdl.fields[0].AsInteger;

        if uqAct.Locate('actacao', Self.Acoes[I].Name, []) then
          uqAct.Edit
        else
          uqAct.Append;

        uqAct.FieldByName('mdlcodigo').AsInteger := vlMdlCodigo;
        uqAct.FieldByName('actidentificacao').AsString := '000 ' + Self.Acoes[I].Caption;
        uqAct.FieldByName('actformulario').AsString := Self.Name;
        uqAct.FieldByName('actacao').AsString := Self.Acoes[I].Name;
        uqAct.FieldByName('actativa').AsInteger := 1;

        uqAct.Post;
      end;

  finally
    uqMdl.Close;
    uqAct.Close;
    FreeAndNil(uqMdl);
    FreeAndNil(uqAct);
  end;
end;

function TFPrinciGou.ListaComprovantes: Boolean;
begin
  mostralista('mrdo', dmdados.Usuario.clbcodigo.ToString, '(tdfcodigo=' + QuotedStr('00') + ' or mesrefeicao=1 ) and clbcodigo=' +
    dmdados.Usuario.clbcodigo.ToString);
end;

function TFPrinciGou.ListaNFCE: Boolean;
begin
  mostralista('mrdo', dmdados.Usuario.clbcodigo.ToString, 'tdfcodigo=' + QuotedStr('65') + ' and clbcodigo=' + dmdados.Usuario.clbcodigo.ToString);
end;

procedure TFPrinciGou.AtualizaMesas;
var
  vPos: Integer;
  vPosPanel: Integer;
  vScroll: TScrollBox;
  vPanel: TPanel;

  vlorcdescontoav: string;
  vlorcgeralav: string;
  vlorctotalav: string;
begin

  dmdados.msaocupada.Close;
  dmdados.msaocupada.Open;

  vScroll := (FPrinciGou.PnMesas.Controls[0] as TScrollBox);

  for vPos := 0 to vScroll.ControlCount - 1 do
  begin
    vPanel := (vScroll.Controls[vPos] as TPanel);
    for vPosPanel := 0 to vPanel.ControlCount - 1 do
    begin
      if (vPanel.Controls[vPosPanel] is TBitBtn) then
      begin
        if dmdados.msaocupada.Locate('orcmesa', (vPanel.Controls[vPosPanel] as TBitBtn).Tag, []) then
        begin
          if dmdados.msaocupadastocodigo.AsInteger in [1, 2] then
          begin
            (vPanel.Controls[vPosPanel] as TBitBtn).Enabled := True;
            (vPanel.Controls[vPosPanel] as TBitBtn).Font.Color := $00FF0080;
            (vPanel.Controls[vPosPanel] as TBitBtn).Font.Style := [fsBold];

          end
          else if dmdados.msaocupadastocodigo.AsInteger in [5] then
          begin
            (vPanel.Controls[vPosPanel] as TBitBtn).Font.Color := clRed;
            (vPanel.Controls[vPosPanel] as TBitBtn).Font.Style := [fsBold];

            if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
            begin

              if dmdados.adctef.FieldByName('adcchaveintegracao').asstring<>'' then
              begin
                MostraRecebimentoStone(dmdados.msaocupadaorcmesa.AsString,dmdados.msaocupadaorcchave.AsInteger);
              end;
            end;

            Sleep((50));
          end
          else if dmdados.msaocupadastocodigo.AsInteger in [99] then
          begin
            (vPanel.Controls[vPosPanel] as TBitBtn).Font.Color := clGreen;
            (vPanel.Controls[vPosPanel] as TBitBtn).Font.Style := [fsBold];
          end;
        end
        else
        begin
          if (vPanel.Controls[vPosPanel] as TBitBtn).Font.Color = clRed then
          begin
            (vPanel.Controls[vPosPanel] as TBitBtn).Font.Style := [fsbold];

           TBitBtn(vPanel.Controls[vPosPanel] as TBitBtn).Click;

          end;

          (vPanel.Controls[vPosPanel] as TBitBtn).Enabled := True;
          (vPanel.Controls[vPosPanel] as TBitBtn).Font.Color := clBlack;
          (vPanel.Controls[vPosPanel] as TBitBtn).Font.Style := [];

        end;
      end;
    end;
  end;


end;

Procedure TFPrinciGou.EstadoMemoria;
var
  MemoryStatus: TMemoryStatus;
begin
  MemoryStatus.dwLength := SizeOf(MemoryStatus);
  GlobalMemoryStatus(MemoryStatus);
  lbmemoria.Caption := 'RAM Livre: ' + FloattoStr(100 - MemoryStatus.dwMemoryLoad) + '%';
 end;

function TFPrinciGou.LerConfiguracao: Boolean;
Var
  IniFile: String;
  ini: TIniFile;
  ok: Boolean;
  StreamMemo: TMemoryStream;
Begin
  result := True;

  dmdados.cfgmcfg.Close;
  dmdados.cfgmcfg.ParamByName('flacodigo').AsInteger := AcessoRec.Filial;
  dmdados.cfgmcfg.Open;

  if dmdados.cfgmcfgcfgctacodigopix.AsInteger = 0 then
  begin
    dmdados.consulta.Close;
    dmdados.consulta.sql.Text := 'select ctacodigo from cta where tctcodigo=2 order by ctacodigo limit 1';
    dmdados.consulta.Open;
    if not dmdados.consulta.IsEmpty then
    begin
      dmdados.cfgmcfg.Edit;
      dmdados.cfgmcfgcfgctacodigopix.AsInteger := dmdados.consulta.FieldByName('ctacodigo').AsInteger;
      dmdados.cfgmcfg.Post;
    end;

    dmdados.cfgmcfg.Close;
    dmdados.cfgmcfg.ParamByName('flacodigo').AsInteger := AcessoRec.Filial;
    dmdados.cfgmcfg.Open;

  end;

  { if impcertificado = '0' then
    begin
    ShowMessage('Por favor, verifique o Cartão de Certificado Digital');
    Result := False;
    Exit;
    end; }

  ini := TIniFile.Create(Extractfilepath(Application.ExeName) + 'gourmeterp.ini');

  // Try

  ACBrNFeNotas.Configuracoes.Geral.VersaoDF := ve400;

  ACBrNFeNotas.Configuracoes.Geral.SSLHttpLib := httpWinINet;
  ACBrNFeNotas.Configuracoes.Geral.SSLLib := libWinCrypt;
  ACBrNFeNotas.Configuracoes.Geral.SSLCryptLib := cryWinCrypt;

  ACBrNFeNotas.Configuracoes.Certificados.VerificarValidade := False;

  ACBrNFeNotas.Configuracoes.WebServices.ResourceName := 'ACBrNFeServicos';
  ACBrNFeNotas.Configuracoes.Arquivos.PathSchemas := Extractfilepath(Application.ExeName) + 'schemas';
  ACBrNFeNotas.Configuracoes.Arquivos.IniServicos := Extractfilepath(Application.ExeName) + 'schemas\ACBrNFeServicos.ini';

  ACBrNFeNotas.Configuracoes.Certificados.NumeroSerie := dmdados.cfgmcfgcfgnumecertif.AsString;

  if Length(dmdados.cfgmcfgcfgsenhacertificadoa1.AsString) > 0 then
    ACBrNFeNotas.Configuracoes.Certificados.Senha := dmdados.cfgmcfgcfgsenhacertificadoa1.AsString;

  ACBrNFeNotas.Configuracoes.WebServices.ProxyHost := ini.ReadString('Proxy', 'Host', '');
  ACBrNFeNotas.Configuracoes.WebServices.ProxyPort := ini.ReadString('Proxy', 'Porta', '');
  ACBrNFeNotas.Configuracoes.WebServices.ProxyUser := ini.ReadString('Proxy', 'User', '');
  ACBrNFeNotas.Configuracoes.WebServices.ProxyPass := ini.ReadString('Proxy', 'Pass', '');

end;

procedure TFPrinciGou.VerificaValidadeCertificado;
var
  vldia: TDateTime;
  vlVcnto: TDateTime;
begin

  try
    LerConfiguracao;
    vldia := ACBrNFeNotas.SSL.CertDataVenc;

    vlVcnto := IncDay(now(), 15);

    if vldia <= vlVcnto then
    begin

      Showmessage('A T E N Ç Ã O!' + #13 + #13 + 'FAVOR RENOVAR CERTIFICADO DIGITAL.' + #13 + #13 + #13 + 'DATA DE VENCIMENTO: ' +
        datetimetostr(vldia));
    end;

  except
    on e: Exception do
    begin
      // Application.MessageBox(PChar('Falha de verficacação de validade do certifiacdo.'), 'FALHA', MB_OK + MB_ICONERROR);
    end;
  end;

end;


///////////////////////////////////
///
///  carga de dados de inicialização
///
///////////////////////////////////


procedure TFPrinciGou.DadosConfiguracao;
var
  vlcfg:TUniquery;
  vltrm:TUniquery;
  vladc:TUniquery;
  vlclb:TUniquery;

begin

  vlcfg:=TUniquery.Create(nil);

  vlcfg.Close;
  vlcfg.Connection := dmdados.Conexao;
  vlcfg.SQL.Text:='SELECT cfgusacre, cfgcontrolalimite, cfgctacodigopix,  cfgusaadc, '+
                  'etddoc1, etdidentificacao,cfgdatapadrao '+
                  'FROM cfg, etd, cfgmsai, cfgmcre, cfgmcfg '+
                  'WHERE cfg.cfgcodigo=cfgmsai.cfgcodigo '+
                  'AND cfg.cfgcodigo=cfgmcfg.cfgcodigo '+
                  'AND cfg.cfgcodigo=cfgmcre.cfgcodigo '+
                  'AND cfgmcfg.cfgetdempresa=etd.etdcodigo  limit 1';
  vlcfg.Open;

  estabelecimentocnpj:=SoNumeros(vlcfg.FieldByName('etddoc1').AsString);
  estabelecimentorazaosocial:=trim(uppercase(vlcfg.FieldByName('etdidentificacao').AsString));
  DataAtual:=vlcfg.FieldByName('cfgdatapadrao').AsDateTime;

  ContaPIX:=vlcfg.FieldByName('cfgctacodigopix').AsInteger;
  UsaCre:=vlcfg.FieldByName('cfgusacre').AsInteger;
  UsaAdc:=vlcfg.FieldByName('cfgusaadc').AsInteger;
  ControlaLimite:=vlcfg.FieldByName('cfgcontrolalimite').AsInteger;

  vlcfg.close;
  vlcfg.Free;

  vltrm:=TUniquery.Create(nil);
  vltrm.Connection:=dmdados.Conexao;
  vltrm.sql.Text:='SELECT trmcodigo, trmestabelecimentotipotef, trmterminalcodempresa,'+
                  'trmterminalcodfilial, trmterminalcodterminal,  trmterminalenderecoservidor,'+
                  'trmterminalportapinpad FROM trm  where trmcodigo=:trmcodigo';
  vltrm.ParamByName('trmcodigo').AsInteger:=AcessoRec.Terminal;
  vltrm.open;

  estabelecimentotipotef:=vltrm.FieldByName('trmestabelecimentotipotef').AsString;

  terminalcodempresa:=vltrm.FieldByName('trmterminalcodempresa').AsString;
  terminalcodfilial:=vltrm.FieldByName('trmterminalcodfilial').AsString;
  terminalcodterminal:=vltrm.FieldByName('trmterminalcodterminal').AsString;
  terminalenderecoservidor:=vltrm.FieldByName('trmterminalenderecoservidor').AsString;
  terminalportapinpad:=vltrm.FieldByName('trmterminalportapinpad').AsString;

  vltrm.close;
  vltrm.Free;

  vladc:=TUniquery.Create(nil);

  vladc.Close;
  vladc.Connection := dmdados.Conexao;
  vladc.SQL.Text:='SELECT adccodigo, adcidentificacao, etdcodigo, adcpropria, '+
                  'bdccodigo, ctacodigo FROM adc  where ctacodigo<>0 and  adcencerramento is null  order by adccodigo desc limit 1';
  vladc.Open;

  CodigoADC:=vladc.FieldByName('adccodigo').AsInteger;
  AdquirenteADC:=vladc.FieldByName('adcidentificacao').AsString;
  EntidadeADC:=vladc.FieldByName('etdcodigo').AsInteger;
  ContaAdc:=vladc.FieldByName('ctacodigo').AsInteger;

  vladc.close;

  vlclb:=TUniquery.Create(nil);
  vlclb.Close;
  vlclb.Connection:=dmdados.Conexao;
  vlclb.sql.Text :='SELECT clbcodigo, clbidentificacao from clb where clbcodigo=:clbcodigo ';
  vlclb.ParamByName('clbcodigo').AsInteger:=AcessoRec.usuario;
  vlclb.Open;

  if not vlclb.IsEmpty then
    Operador :=vlclb.FieldByName('clbidentificacao').AsString
  else
    Operador := 'Operado';
  vlclb.close;

end;



procedure TFPrinciGou.CarregaDadosConfiguracaoTEF;
begin

  DadosConfiguracao;

  fConfiguracaoTEF.EstabelecimentoTipoTEF := fltePDTVTEF.estabelecimentotipotef;
  fConfiguracaoTEF.EstabelecimentoCNPJ := fltePDTVTEF.EstabelecimentoCNPJ;
  fConfiguracaoTEF.EstabelecimentoRazaoSocial := fltePDTVTEF.EstabelecimentoRazaoSocial;
  fConfiguracaoTEF.terminalcodempresa := fltePDTVTEF.terminalcodempresa;
  fConfiguracaoTEF.terminalcodfilial := fltePDTVTEF.terminalcodfilial;
  fConfiguracaoTEF.terminalcodterminal := fltePDTVTEF.terminalcodterminal;
  fConfiguracaoTEF.terminalenderecoservidor := fltePDTVTEF.terminalenderecoservidor;
  fConfiguracaoTEF.terminalportapinpad := fltePDTVTEF.terminalportapinpad;
  fConfiguracaoTEF.TerminalOperador := fltePDTVTEF.Operador;

end;



function TFPrinciGou.LoteAtivaTEF:boolean;
begin

  ftransacaoTEF:=TftransacaoTEFAPI.Create(self);

  ftransacaoTEF.ZCone:=dmdados.conexao;

  CarregaDadosConfiguracaoTEF;

  try
    fTEFAtivo:=ftransacaoTEF.AtivaTEF(fConfiguracaoTEF);
    Result := True;
  except
    Result := False;
  end;

end;


function TFPrinciGou.GetHoraAtual: TTime;
var
  qHora: tuniquery;
begin
  qHora := tuniquery.Create(application);
  try
    qHora.Connection := dmdados.Conexao;
    qHora.SQL.Text := 'SELECT CURRENT_TIME();';
    qHora.Open;

    Result := qHora.Fields[0].AsDateTime;
  finally
    qHora.Free;
  end;
end;



function TFPrinciGou.ConsultaAtivaPDVTEF(AOwner: TComponent;aZcone:tuniconnection; aAcesso: TAcesso): Boolean;
begin


  fltePDTVTEF := TfltePDTVTEF.create(AOwner);
  fltePDTVTEF.AtribuiEventosQuery;


  fltePDTVTEF.ZCone:=aZcone;
  fltePDTVTEF.fAcesso:=aAcesso;
  fltePDTVTEF.DadosConfiguracao;

  fltePDTVTEF.CarregaDadosConfiguracaoTEF;

  if PingHost('google.com')>0 then
    fltePDTVTEF.WebOnLine :=true
  else
    fltePDTVTEF.WebOnLine :=False;


  Result:=LoteAtivaTEF;

end;




Function TFPrinciGou.EnviaPagamentoHide(aOrcMesa:String; pOrcChave: Integer):Boolean;
Var
//  vlBuscaPagamento: Tfstonehide;
  vlPackBcd: Cardinal;
  vlAdcCodigo:String;
  vlValor:Currency;
  vlMesa:String;
  vlBotao:TBitBtn;
  vlfstonenome: String;

  vlItoatual:Integer;

  vlRecebimentos:Currency;
  vlDesconto:Currency;
Begin
  if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
  begin

    Result := False;

    vlfstonenome:='fstonehide'+aOrcMesa;

    if (plmesasemfechamento.FindChildControl(vlfstonenome) <> nil) then
    begin

      dmdados.itodes.close;
      dmdados.itodes.parambyname('orcchave').asInteger:=pOrcChave;
      dmdados.itodes.open;

      vldesconto:=0;
      vlRecebimentos:=0;

      while not dmdados.itodes.Eof do
      begin
        vldesconto:=vldesconto+dmdados.itodes.fieldbyname('itodescontoav').ascurrency;
        dmdados.itodes.next;
      end;

      dmdados.Adctef.close;
      dmdados.Adctef.Open;

      dmdados.orctef.close;
      dmdados.orctef.parambyname('orcchave').asInteger:=pOrcChave;
      dmdados.orctef.Open;

      vlMesa:='';
      vlMesa:=dmdados.orctef.FieldByName('orcmesa').AsString;

      vpOrcChave:=pOrcChave.ToString;

      vpTotal:=dmdados.orctef.FieldByName('orcgeralav').AsCurrency-vldesconto;

      vlRecebimentos:=CalculaRecebimentosStone(pOrcChave.ToString);

      vlValor:=0;
      vlValor:=(vpTotal - (vlRecebimentos+vldesconto));

      if vlValor=0 then
        vlValor:=dmdados.orctef.FieldByName('orcgeralav').AsCurrency-vldesconto;

      AtualizaPainelRecebimentoStone((plmesasemfechamento.FindChildControl(vlfstonenome) as Tfstonehide),
                                      aOrcMesa,vlValor);

    end
    else
    begin

      vlfstonenome:='fstonehide'+aOrcMesa;
      try

      if (plmesasemfechamento.FindChildControl(vlfstonenome) = nil)  and
         (self.FindComponent(vlfstonenome) = nil) then
      begin


        dmdados.itodes.close;
        dmdados.itodes.parambyname('orcchave').asInteger:=pOrcChave;
        dmdados.itodes.open;

        vldesconto:=0;
        vlRecebimentos:=0;

        while not dmdados.itodes.Eof do
        begin
          vldesconto:=vldesconto+dmdados.itodes.fieldbyname('itodescontoav').ascurrency;
          dmdados.itodes.next;
        end;


        dmdados.Adctef.close;
        dmdados.Adctef.Open;

        vlAdcCodigo:='';
        vlAdcCodigo:= dmdados.Adctef.FieldByName('adccodigo').AsString;

        dmdados.orctef.close;
        dmdados.orctef.parambyname('orcchave').asInteger:=pOrcChave;
        dmdados.orctef.Open;

        vlMesa:='';
        vlMesa:=dmdados.orctef.FieldByName('orcmesa').AsString;
        vpOrcChave:=pOrcChave.ToString;
        vpTotal:=dmdados.orctef.FieldByName('orcgeralav').AsCurrency-vldesconto;

        vlRecebimentos:=CalculaRecebimentosStone(pOrcChave.ToString);

        vlValor:=0;
        vlValor:=(vpTotal - (vlRecebimentos+vldesconto));

        if vlValor=0 then
          vlValor:=dmdados.orctef.FieldByName('orcgeralav').AsCurrency-vldesconto;

        regAcesso.usuario:=dmdados.Usuario.ClbCodigo;
        regacesso.Filial:=dmdados.cfgmcfgflacodigo.AsInteger;
        regacesso.Terminal:=dmdados.Usuario.TrmCodigo;


        if Self.FindComponent('BtnMesa' + aOrcMesa) <> nil then
        begin
          vlBotao:=Self.FindComponent('BtnMesa' + aOrcMesa) as TBitBtn;
        end;

        if vlBotao<>nil then
        begin
          if vlBotao.Font.Color=clred then
          begin

           dmdados.rpw.close;
           dmdados.rpw.parambyname('orcchave').asstring:=pOrcChave.ToString;
           dmdados.rpw.open;

           MostraPainelRecebimentoStone(aOrcMesa, pOrcChave.ToString, vlValor, vlBotao,dmdados.rpwrpwtoken.asstring);

          end;
        end;

      end;
      except

      end;
    end;
  end;
End;



function  TFPrinciGou.MostraPainelRecebimentoStone(aMesa:String; aPedido:String; aValor:Currency; aBotao:TBitBtn; aToken:String):Boolean;
var
  vlValor:Currency;
begin
  if dmdados.trmstonetrmintegrapagarme.AsInteger=1 then
  begin

    if FPrinciGou.plmesasemfechamento.FindChildControl('fstonehide'+aMesa) = nil then
    begin

      ffrmstonehide := Tfstonehide.Create(application);
      ffrmstonehide.Name:='fstonehide'+aMesa;

      ffrmstonehide.Parent := plmesasemfechamento;

      ffrmstonehide.ZCone:= dmdados.Conexao;
      ffrmstonehide.SetZCone(dmdados.Conexao);
      ffrmstonehide.ConfiguraAmbiente;
      ffrmstonehide.vpValor:=aValor;
      ffrmstonehide.vpCznChave:=vpCznChave.ToInteger;
      ffrmstonehide.lblidPagamento.caption:= aToken;

      ffrmstonehide.fusuario:=dmdados.Usuario.ClbCodigo;
      ffrmstonehide.ffilial:=dmdados.cfgmcfgflacodigo.AsInteger;
      ffrmstonehide.fterminal:=dmdados.Usuario.trmcodigo;

      ffrmstonehide.fAcesso.usuario:=dmdados.Usuario.ClbCodigo;
      ffrmstonehide.fAcesso.Filial:=dmdados.cfgmcfgflacodigo.AsInteger;
      ffrmstonehide.fAcesso.Terminal:=dmdados.Usuario.trmcodigo;
      ffrmstonehide.ContaCaixa:=dmdados.Usuario.CtaCodigo;

      if aValor=0 then
      begin
        ffrmstonehide.rctolt.close;
        ffrmstonehide.rctolt.Connection:=dmdados.Conexao;
        ffrmstonehide.rctolt.ParamByName('orcchave').AsString:=aPedido;
        ffrmstonehide.rctolt.Open;
        while not ffrmstonehide.rctolt.eof do
        begin
          vlValor:=vlValor+ffrmstonehide.rctoltrctvalor.ascurrency;
          ffrmstonehide.rctolt.next;
        end;
      end
      else
        vlValor:=aValor;

      ffrmstonehide.lblMesa.Caption:='M:'+aMesa+ '   '+formatfloat('#0.00',vlValor);

      ffrmstonehide.vpMesa:=aMesa;
      ffrmstonehide.Align:=TAlign.alRight;
      ffrmstonehide.Width:=95;
      ffrmstonehide.Pedido:=aPedido;

      ffrmstonehide.mmLogos.Lines.Clear;
      ffrmstonehide.fEtdCodigoConvenio:=0;
      ffrmstonehide.vpBotaoMesa:=aBotao;
      ffrmstonehide.lbcolaborador.caption:=dmdados.orctef.fieldbyname('clbidentificacao').asstring;



      if aToken='' then
      begin
       ffrmstonehide.lblidPagamento.caption:= ffrmstonehide.RecebimentoDireto(aMesa,vpCznChave.ToInteger);
      end;


      ffrmstonehide.Align:=TAlign.alLeft;
      ffrmstonehide.TimerPagamento.Enabled:=true;

    end;
  end;
end;


function  TFPrinciGou.AtualizaPainelRecebimentoStone(affrmstonehide:Tfstonehide;  aMesa:String;  aValor:Currency):Boolean;
begin
  affrmstonehide.lblMesa.Caption:='M:'+aMesa+ '   '+formatfloat('#0.00',aValor);
  affrmstonehide.lbcolaborador.caption:=dmdados.orctef.fieldbyname('clbidentificacao').asstring;
end;


procedure TFPrinciGou.IncluirItemRefeicao;
begin
  with dmdados do
  begin
    if not proc.IsEmpty then
    begin
      // preparando dados do item
      tito.Append;
      titoclbcodigo.AsInteger := Usuario.clbcodigo;
      titoobs.AsString := '';
      titopessoas.AsInteger := 0;
      titoprocodigo.AsInteger := procprocodigo.AsInteger;
      titopronome.AsString := procpronomereduzido.AsString;
      titopuncodigo.AsInteger := punpuncodigo.AsInteger;
      titoqtde.AsFloat := 1;
      titosfncodigo.AsInteger := sfnsfncodigo.AsInteger;
      titosfnid.AsInteger := ito.RecordCount + 1;
      titocopos.AsInteger := 0;
      titopratos.AsInteger := 0;

        with dmdados do
        begin
          if tito.State in [DsInsert, DsEdit] then
          begin

            tito.Post;
            tito.ApplyUpdates;

            MobGravaItens.Close;
            MobGravaItens.Params[0].AsInteger := orcorcchave.AsInteger;
            MobGravaItens.Params[1].AsInteger := Usuario.clbcodigo;
            MobGravaItens.Params[2].AsInteger := dmdados.cfgmcfgflacodigo.AsInteger;
            MobGravaItens.ExecProc;
            if MobGravaItens.fields[0].AsInteger = 0 then
              vtItens.EmptyDataSet
            else
              Showmessage(MobGravaItens.fields[1].AsString);
          end;
        end;
    end;
  end;
end;



end.
