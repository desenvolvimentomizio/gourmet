unit GourmetServer.Model.Entity.UNI;

interface

uses
  System.Json,
  System.SysUtils,
  System.Variants,
  SimpleAttributes;

type
  [Tabela('uni')]
  Tuni = class
  private
    FCOUNT: Integer;
    Funicodigo :Integer;
    Funisimbolo :String;
    Funinome :String;
    Ftuncodigo :Integer;
    Fstgcodigo :Integer;
    Fsipcodigo :Integer;

    procedure Setunicodigo (const Value :Integer);
    function Getunicodigo :Integer;
    procedure Setunisimbolo (const Value :String);
    function Getunisimbolo :String;
    procedure Setuninome (const Value :String);
    function Getuninome :String;
    procedure Settuncodigo (const Value :Integer);
    function Gettuncodigo :Integer;
    procedure Setstgcodigo (const Value :Integer);
    function Getstgcodigo :Integer;
    procedure Setsipcodigo (const Value :Integer);
    function Getsipcodigo :Integer;

    procedure SetCOUNT(const Value: Integer);
  public
    constructor Create;
    destructor Destroy; override;
    procedure Limpar;
    function ToJson(pFields : String = '*') : TJSonObject;
    function JsonToClass(obj : TJSonObject) : Tuni;
    [Campo('unicodigo'), PK]
    property unicodigo :Integer read Getunicodigo write Setunicodigo;
    [Campo('unisimbolo')]
    property unisimbolo :String read Getunisimbolo write Setunisimbolo;
    [Campo('uninome')]
    property uninome :String read Getuninome write Setuninome;
    [Campo('tuncodigo')]
    property tuncodigo :Integer read Gettuncodigo write Settuncodigo;
    [Campo('stgcodigo')]
    property stgcodigo :Integer read Getstgcodigo write Setstgcodigo;
    [Campo('sipcodigo')]
    /// <summary>
    ///  1 - ativo 2-inativo
    /// </summary>
    property sipcodigo :Integer read Getsipcodigo write Setsipcodigo;

    [Campo('COUNT'), Ignore]
    property COUNT : Integer read FCOUNT write SetCOUNT;
end;

implementation

constructor Tuni.Create;
begin
  Limpar;
end;

destructor Tuni.Destroy;
begin

  inherited;
end;

procedure Tuni.Setunicodigo (const Value :Integer);
begin
  Funicodigo := Value;
end;

function Tuni.Getunicodigo :Integer;
begin
  Result := Funicodigo;
end;

procedure Tuni.Setunisimbolo (const Value :String);
begin
  Funisimbolo := Value;
end;

function Tuni.Getunisimbolo :String;
begin
  Result := Funisimbolo;
end;

procedure Tuni.Setuninome (const Value :String);
begin
  Funinome := Value;
end;

function Tuni.Getuninome :String;
begin
  Result := Funinome;
end;

procedure Tuni.Settuncodigo (const Value :Integer);
begin
  Ftuncodigo := Value;
end;

function Tuni.Gettuncodigo :Integer;
begin
  Result := Ftuncodigo;
end;

procedure Tuni.Setstgcodigo (const Value :Integer);
begin
  Fstgcodigo := Value;
end;

function Tuni.Getstgcodigo :Integer;
begin
  Result := Fstgcodigo;
end;

procedure Tuni.Setsipcodigo (const Value :Integer);
begin
  Fsipcodigo := Value;
end;

function Tuni.Getsipcodigo :Integer;
begin
  Result := Fsipcodigo;
end;


procedure Tuni.Limpar;
begin
  Self.unicodigo := 0;
  Self.unisimbolo := '';
  Self.uninome := '';
  Self.tuncodigo := 0;
  Self.stgcodigo := 0;
  Self.sipcodigo := 0;

end;

procedure Tuni.SetCOUNT(const Value: Integer);
begin
  FCOUNT := Value;
end;
function Tuni.ToJson(pFields : String = '*') : TJSonObject;
begin
  pFields := ' '+ StringReplace(pFields, ',', ' ', [rfReplaceAll]);
  result := TJSonObject.Create;
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' unicodigo ')) then
    result.addPair('unicodigo', IntToStr(Self.unicodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' unisimbolo ')) then
    result.addPair('unisimbolo', Self.unisimbolo);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' uninome ')) then
    result.addPair('uninome', Self.uninome);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' tuncodigo ')) then
    result.addPair('tuncodigo', IntToStr(Self.tuncodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' stgcodigo ')) then
    result.addPair('stgcodigo', IntToStr(Self.stgcodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' sipcodigo ')) then
    result.addPair('sipcodigo', IntToStr(Self.sipcodigo));

end;
function Tuni.JsonToClass(obj : TJSonObject) : Tuni;
begin
  result := Tuni.Create;
  if (assigned(obj)) then
  begin
    Try
      Try result.unicodigo := StrToInt(obj.get('unicodigo').JsonValue.Value); Except End;
      Try result.unisimbolo := obj.get('unisimbolo').JsonValue.Value; Except End;
      Try result.uninome := obj.get('uninome').JsonValue.Value; Except End;
      Try result.tuncodigo := StrToInt(obj.get('tuncodigo').JsonValue.Value); Except End;
      Try result.stgcodigo := StrToInt(obj.get('stgcodigo').JsonValue.Value); Except End;
      Try result.sipcodigo := StrToInt(obj.get('sipcodigo').JsonValue.Value); Except End;

    Except
      on E : Exception do
      begin
        result.Free;
        raise Exception.Create(E.Message);
      end;
    End;
  end;
end;

end.

