unit GourmetServer.Model.Entity.PRO;

interface

uses
  System.Json, System.SysUtils, System.Variants, SimpleAttributes;

type

  [Tabela('pro')]
  Tprocod = class
  private
    Fprocodigo: Integer;
    procedure Setprocodigo(const Value: Integer);
    function Getprocodigo: Integer;

  public
    constructor Create;
    destructor Destroy; override;

    property procodigo: Integer read Getprocodigo write Setprocodigo;

  end;

  [Tabela('pro')]
  Tpro = class
  private
    FCOUNT: Integer;
    Fprocodigo: Integer;
    Fpronome: String;
    Fpronomereduzido: String;
    Fmarcodigo: Integer;
    Fgrpcodigo: Integer;
    Ftrbcodigo: Integer;
    Ficmcodigo: String;
    Ftpocodigo: Integer;
    Funicodigo: Integer;
    Fsipcodigo: Integer;
    Fprominimo: Currency;
    Fproproprio: String;
    Fpronumserie: String;
    Fproncm: String;
    Fprocomposto: String;
    Fprosaldo: Currency;
    Fprobalanca: Currency;
    Fprotecla: String;
    Fprovalidade: Integer;
    Fprocarga: Integer;
    Fproreferencia: String;
    Fproestoque: String;
    Fprosped: String;
    Fproobs: String;
    Fprounitrib: Integer;
    Fproqtdtrib: Currency;
    Fprosaldodisp: Currency;
    Fproanpcodigo: Integer;
    Fenpcodigo: Integer;
    Fpropedecomple: Integer;
    Fpropededescrserv: Integer;
    Fpropedetecnicoserv: Integer;
    Fdprcodigo: Integer;
    Fcstcodigo: String;
    Fproconsolidado: Integer;
    Fcsicodigo: String;
    Fcspcodigo: String;
    Fcsfcodigo: String;
    Fprocontabiliza: Integer;
    Fprousagrade: Integer;
    Fpropercreducaobaseicm: Currency;
    Fpropisaliquota: Currency;
    Fprocofinsaliquota: Currency;
    Fimgcodigo: Integer;
    Fproalterarqtd: Integer;

    Fproremoto: Integer;
    Fstgcodigo: Integer;
    Fprocest: String;
    Fproproducao: Integer;
    Frcspontuacao: Integer;
    Fpadcodigo: Integer;
    Fcfocfop: String;
    Fpromva: String;
    Fpropercfcp: String;
    Fproabc: String;
    Fpromargemcontrib: Currency;
    Fimuid: Integer;
    Fpronatrecisenta: Integer;
    Ficmcodigofora: String;
    Fproipialiquota: Currency;
    Fcfocfopfora: String;

    procedure Setprocodigo(const Value: Integer);
    function Getprocodigo: Integer;
    procedure Setpronome(const Value: String);
    function Getpronome: String;
    procedure Setpronomereduzido(const Value: String);
    function Getpronomereduzido: String;
    procedure Setmarcodigo(const Value: Integer);
    function Getmarcodigo: Integer;
    procedure Setgrpcodigo(const Value: Integer);
    function Getgrpcodigo: Integer;
    procedure Settrbcodigo(const Value: Integer);
    function Gettrbcodigo: Integer;
    procedure Seticmcodigo(const Value: String);
    function Geticmcodigo: String;
    procedure Settpocodigo(const Value: Integer);
    function Gettpocodigo: Integer;
    procedure Setunicodigo(const Value: Integer);
    function Getunicodigo: Integer;
    procedure Setsipcodigo(const Value: Integer);
    function Getsipcodigo: Integer;
    procedure Setprominimo(const Value: Currency);
    function Getprominimo: Currency;
    procedure Setproproprio(const Value: String);
    function Getproproprio: String;
    procedure Setpronumserie(const Value: String);
    function Getpronumserie: String;
    procedure Setproncm(const Value: String);
    function Getproncm: String;
    procedure Setprocomposto(const Value: String);
    function Getprocomposto: String;
    procedure Setprosaldo(const Value: Currency);
    function Getprosaldo: Currency;
    procedure Setprobalanca(const Value: Currency);
    function Getprobalanca: Currency;
    procedure Setprotecla(const Value: String);
    function Getprotecla: String;
    procedure Setprovalidade(const Value: Integer);
    function Getprovalidade: Integer;
    procedure Setprocarga(const Value: Integer);
    function Getprocarga: Integer;
    procedure Setproreferencia(const Value: String);
    function Getproreferencia: String;
    procedure Setproestoque(const Value: String);
    function Getproestoque: String;
    procedure Setprosped(const Value: String);
    function Getprosped: String;
    procedure Setproobs(const Value: String);
    function Getproobs: String;
    procedure Setprounitrib(const Value: Integer);
    function Getprounitrib: Integer;
    procedure Setproqtdtrib(const Value: Currency);
    function Getproqtdtrib: Currency;
    procedure Setprosaldodisp(const Value: Currency);
    function Getprosaldodisp: Currency;
    procedure Setproanpcodigo(const Value: Integer);
    function Getproanpcodigo: Integer;
    procedure Setenpcodigo(const Value: Integer);
    function Getenpcodigo: Integer;
    procedure Setpropedecomple(const Value: Integer);
    function Getpropedecomple: Integer;
    procedure Setpropededescrserv(const Value: Integer);
    function Getpropededescrserv: Integer;
    procedure Setpropedetecnicoserv(const Value: Integer);
    function Getpropedetecnicoserv: Integer;
    procedure Setdprcodigo(const Value: Integer);
    function Getdprcodigo: Integer;
    procedure Setcstcodigo(const Value: String);
    function Getcstcodigo: String;
    procedure Setproconsolidado(const Value: Integer);
    function Getproconsolidado: Integer;
    procedure Setcsicodigo(const Value: String);
    function Getcsicodigo: String;
    procedure Setcspcodigo(const Value: String);
    function Getcspcodigo: String;
    procedure Setcsfcodigo(const Value: String);
    function Getcsfcodigo: String;
    procedure Setprocontabiliza(const Value: Integer);
    function Getprocontabiliza: Integer;
    procedure Setprousagrade(const Value: Integer);
    function Getprousagrade: Integer;
    procedure Setpropercreducaobaseicm(const Value: Currency);
    function Getpropercreducaobaseicm: Currency;
    procedure Setpropisaliquota(const Value: Currency);
    function Getpropisaliquota: Currency;
    procedure Setprocofinsaliquota(const Value: Currency);
    function Getprocofinsaliquota: Currency;
    procedure Setimgcodigo(const Value: Integer);
    function Getimgcodigo: Integer;
    procedure Setproalterarqtd(const Value: Integer);
    function Getproalterarqtd: Integer;
    procedure Setproremoto(const Value: Integer);
    function Getproremoto: Integer;
    procedure Setstgcodigo(const Value: Integer);
    function Getstgcodigo: Integer;
    procedure Setprocest(const Value: String);
    function Getprocest: String;
    procedure Setproproducao(const Value: Integer);
    function Getproproducao: Integer;
    procedure Setrcspontuacao(const Value: Integer);
    function Getrcspontuacao: Integer;
    procedure Setpadcodigo(const Value: Integer);
    function Getpadcodigo: Integer;
    procedure Setcfocfop(const Value: String);
    function Getcfocfop: String;
    procedure Setpromva(const Value: String);
    function Getpromva: String;
    procedure Setpropercfcp(const Value: String);
    function Getpropercfcp: String;
    procedure Setproabc(const Value: String);
    function Getproabc: String;
    procedure Setpromargemcontrib(const Value: Currency);
    function Getpromargemcontrib: Currency;
    procedure Setimuid(const Value: Integer);
    function Getimuid: Integer;
    procedure Setpronatrecisenta(const Value: Integer);
    function Getpronatrecisenta: Integer;
    procedure Seticmcodigofora(const Value: String);
    function Geticmcodigofora: String;
    procedure Setproipialiquota(const Value: Currency);
    function Getproipialiquota: Currency;
    procedure Setcfocfopfora(const Value: String);
    function Getcfocfopfora: String;

    procedure SetCOUNT(const Value: Integer);
  public
    constructor Create;
    destructor Destroy; override;
    procedure Limpar;
    function ToJson(pFields: String = '*'): TJSonObject;
    function JsonToClass(obj: TJSonObject): Tpro;
    [Campo('procodigo'), PK]
    property procodigo: Integer read Getprocodigo write Setprocodigo;
    [Campo('pronome')]
    /// <summary>
    /// Identificação do produto
    /// </summary>
    property pronome: String read Getpronome write Setpronome;
    [Campo('pronomereduzido')]
    /// <summary>
    /// Nome resuzido para emissão de cupom fiscal
    /// </summary>
    property pronomereduzido: String read Getpronomereduzido write Setpronomereduzido;
    [Campo('marcodigo')]
    property marcodigo: Integer read Getmarcodigo write Setmarcodigo;
    [Campo('grpcodigo')]
    property grpcodigo: Integer read Getgrpcodigo write Setgrpcodigo;
    [Campo('trbcodigo')]
    property trbcodigo: Integer read Gettrbcodigo write Settrbcodigo;
    [Campo('icmcodigo')]
    property icmcodigo: String read Geticmcodigo write Seticmcodigo;
    [Campo('tpocodigo')]
    property tpocodigo: Integer read Gettpocodigo write Settpocodigo;
    [Campo('unicodigo')]
    /// <summary>
    /// Unidade base do item
    /// </summary>
    property unicodigo: Integer read Getunicodigo write Setunicodigo;
    [Campo('sipcodigo')]
    /// <summary>
    /// Situação do produto
    /// </summary>
    property sipcodigo: Integer read Getsipcodigo write Setsipcodigo;
    [Campo('prominimo')]
    /// <summary>
    /// Estoque mínimo
    /// </summary>
    property prominimo: Currency read Getprominimo write Setprominimo;
    [Campo('proproprio')]
    /// <summary>
    /// Código proprio, ou referencia do item
    /// </summary>
    property proproprio: String read Getproproprio write Setproproprio;
    [Campo('pronumserie')]
    /// <summary>
    /// Se deve pedir numero de série na venda
    /// </summary>
    property pronumserie: String read Getpronumserie write Setpronumserie;
    [Campo('proncm')]
    /// <summary>
    /// NCM
    /// </summary>
    property proncm: String read Getproncm write Setproncm;
    [Campo('procomposto')]
    /// <summary>
    /// Produto composto por outros produtos
    /// </summary>
    property procomposto: String read Getprocomposto write Setprocomposto;
    [Campo('prosaldo')]
    property prosaldo: Currency read Getprosaldo write Setprosaldo;
    [Campo('probalanca')]
    /// <summary>
    /// Enviar para Balança
    /// </summary>
    property probalanca: Currency read Getprobalanca write Setprobalanca;
    [Campo('protecla')]
    /// <summary>
    /// Tecla de Atalho na Balança
    /// </summary>
    property protecla: String read Getprotecla write Setprotecla;
    [Campo('provalidade')]
    /// <summary>
    /// Dias de Validade
    /// </summary>
    property provalidade: Integer read Getprovalidade write Setprovalidade;
    [Campo('procarga')]
    /// <summary>
    /// Marca para enviar carga para os terminais
    /// </summary>
    property procarga: Integer read Getprocarga write Setprocarga;
    [Campo('proreferencia')]
    /// <summary>
    /// Referencia do Produto
    /// </summary>
    property proreferencia: String read Getproreferencia write Setproreferencia;
    [Campo('proestoque')]
    /// <summary>
    /// Controle estoque 0 Não 1 Sim
    /// </summary>
    property proestoque: String read Getproestoque write Setproestoque;
    [Campo('prosped')]
    /// <summary>
    /// 0 não vai para o SPED e 1 - não vai para o SPED
    /// </summary>
    property prosped: String read Getprosped write Setprosped;
    [Campo('proobs')]
    /// <summary>
    /// Observações sobre o produto
    /// </summary>
    property proobs: String read Getproobs write Setproobs;
    [Campo('prounitrib')]
    /// <summary>
    /// Unidade tributária
    /// </summary>
    property prounitrib: Integer read Getprounitrib write Setprounitrib;
    [Campo('proqtdtrib')]
    /// <summary>
    /// Quantidade Tributária
    /// </summary>
    property proqtdtrib: Currency read Getproqtdtrib write Setproqtdtrib;
    [Campo('prosaldodisp')]
    property prosaldodisp: Currency read Getprosaldodisp write Setprosaldodisp;
    [Campo('proanpcodigo')]
    /// <summary>
    /// Código da ANP para produtos derivados de petróleo.
    /// </summary>
    property proanpcodigo: Integer read Getproanpcodigo write Setproanpcodigo;
    [Campo('enpcodigo')]
    /// <summary>
    /// Código de Endereçamento do Produto
    /// </summary>
    property enpcodigo: Integer read Getenpcodigo write Setenpcodigo;
    [Campo('propedecomple')]
    /// <summary>
    /// Pede complemento do produto
    /// </summary>
    property propedecomple: Integer read Getpropedecomple write Setpropedecomple;
    [Campo('propededescrserv')]
    /// <summary>
    /// Identifica se solicita descrição detalhada do serviço - Default 1 mantém padrão atual que todo serviço pede Descrição.
    /// </summary>
    property propededescrserv: Integer read Getpropededescrserv write Setpropededescrserv;
    [Campo('propedetecnicoserv')]
    /// <summary>
    /// Identifica se solicita o técnico da OS.
    /// </summary>
    property propedetecnicoserv: Integer read Getpropedetecnicoserv write Setpropedetecnicoserv;
    [Campo('dprcodigo')]
    /// <summary>
    /// Divisão de Produtos
    /// </summary>
    property dprcodigo: Integer read Getdprcodigo write Setdprcodigo;
    [Campo('cstcodigo')]
    /// <summary>
    /// CÃ³digo de CST para o produto
    /// </summary>
    property cstcodigo: String read Getcstcodigo write Setcstcodigo;
    [Campo('proconsolidado')]
    /// <summary>
    /// Define se produto esta com saldo disponivel consolidado
    /// </summary>
    property proconsolidado: Integer read Getproconsolidado write Setproconsolidado;
    [Campo('csicodigo')]
    /// <summary>
    /// CÃ³digo de CST IPI para o produto
    /// </summary>
    property csicodigo: String read Getcsicodigo write Setcsicodigo;
    [Campo('cspcodigo')]
    /// <summary>
    /// CÃ³digo de CST PIS para o produto
    /// </summary>
    property cspcodigo: String read Getcspcodigo write Setcspcodigo;
    [Campo('csfcodigo')]
    /// <summary>
    /// CÃ³digo de CST COFINS para o produto
    /// </summary>
    property csfcodigo: String read Getcsfcodigo write Setcsfcodigo;
    [Campo('procontabiliza')]
    property procontabiliza: Integer read Getprocontabiliza write Setprocontabiliza;
    [Campo('prousagrade')]
    property prousagrade: Integer read Getprousagrade write Setprousagrade;
    [Campo('propercreducaobaseicm')]
    /// <summary>
    /// Percentual de reduÃ§Ã£o na base de calculo para icms
    /// </summary>
    property propercreducaobaseicm: Currency read Getpropercreducaobaseicm write Setpropercreducaobaseicm;
    [Campo('propisaliquota')]
    property propisaliquota: Currency read Getpropisaliquota write Setpropisaliquota;
    [Campo('procofinsaliquota')]
    property procofinsaliquota: Currency read Getprocofinsaliquota write Setprocofinsaliquota;
    [Campo('imgcodigo')]
    property imgcodigo: Integer read Getimgcodigo write Setimgcodigo;
    [Campo('proalterarqtd')]
    property proalterarqtd: Integer read Getproalterarqtd write Setproalterarqtd;
    [Campo('proremoto')]
    property proremoto: Integer read Getproremoto write Setproremoto;
    [Campo('stgcodigo')]
    property stgcodigo: Integer read Getstgcodigo write Setstgcodigo;
    [Campo('procest')]
    property procest: String read Getprocest write Setprocest;
    [Campo('proproducao')]
    property proproducao: Integer read Getproproducao write Setproproducao;
    [Campo('rcspontuacao')]
    property rcspontuacao: Integer read Getrcspontuacao write Setrcspontuacao;
    [Campo('padcodigo')]
    property padcodigo: Integer read Getpadcodigo write Setpadcodigo;
    [Campo('cfocfop')]
    property cfocfop: String read Getcfocfop write Setcfocfop;
    [Campo('promva')]
    property promva: String read Getpromva write Setpromva;
    [Campo('propercfcp')]
    property propercfcp: String read Getpropercfcp write Setpropercfcp;
    [Campo('proabc')]
    property proabc: String read Getproabc write Setproabc;
    [Campo('promargemcontrib')]
    property promargemcontrib: Currency read Getpromargemcontrib write Setpromargemcontrib;
    [Campo('imuid')]
    property imuid: Integer read Getimuid write Setimuid;
    [Campo('pronatrecisenta')]
    property pronatrecisenta: Integer read Getpronatrecisenta write Setpronatrecisenta;
    [Campo('icmcodigofora')]
    property icmcodigofora: String read Geticmcodigofora write Seticmcodigofora;
    [Campo('proipialiquota')]
    property proipialiquota: Currency read Getproipialiquota write Setproipialiquota;
    [Campo('cfocfopfora')]
    property cfocfopfora: String read Getcfocfopfora write Setcfocfopfora;

    [Campo('COUNT'), Ignore]
    property COUNT: Integer read FCOUNT write SetCOUNT;
  end;

implementation

constructor Tpro.Create;
begin
  Limpar;
end;

destructor Tpro.Destroy;
begin

  inherited;
end;

procedure Tpro.Setprocodigo(const Value: Integer);
begin
  Fprocodigo := Value;
end;

function Tpro.Getprocodigo: Integer;
begin
  Result := Fprocodigo;
end;

procedure Tpro.Setpronome(const Value: String);
begin
  Fpronome := Value;
end;

function Tpro.Getpronome: String;
begin
  Result := Fpronome;
end;

procedure Tpro.Setpronomereduzido(const Value: String);
begin
  Fpronomereduzido := Value;
end;

function Tpro.Getpronomereduzido: String;
begin
  Result := Fpronomereduzido;
end;

procedure Tpro.Setmarcodigo(const Value: Integer);
begin
  Fmarcodigo := Value;
end;

function Tpro.Getmarcodigo: Integer;
begin
  Result := Fmarcodigo;
end;

procedure Tpro.Setgrpcodigo(const Value: Integer);
begin
  Fgrpcodigo := Value;
end;

function Tpro.Getgrpcodigo: Integer;
begin
  Result := Fgrpcodigo;
end;

procedure Tpro.Settrbcodigo(const Value: Integer);
begin
  Ftrbcodigo := Value;
end;

function Tpro.Gettrbcodigo: Integer;
begin
  Result := Ftrbcodigo;
end;

procedure Tpro.Seticmcodigo(const Value: String);
begin
  Ficmcodigo := Value;
end;

function Tpro.Geticmcodigo: String;
begin
  Result := Ficmcodigo;
end;

procedure Tpro.Settpocodigo(const Value: Integer);
begin
  Ftpocodigo := Value;
end;

function Tpro.Gettpocodigo: Integer;
begin
  Result := Ftpocodigo;
end;

procedure Tpro.Setunicodigo(const Value: Integer);
begin
  Funicodigo := Value;
end;

function Tpro.Getunicodigo: Integer;
begin
  Result := Funicodigo;
end;

procedure Tpro.Setsipcodigo(const Value: Integer);
begin
  Fsipcodigo := Value;
end;

function Tpro.Getsipcodigo: Integer;
begin
  Result := Fsipcodigo;
end;

procedure Tpro.Setprominimo(const Value: Currency);
begin
  Fprominimo := Value;
end;

function Tpro.Getprominimo: Currency;
begin
  Result := Fprominimo;
end;

procedure Tpro.Setproproprio(const Value: String);
begin
  Fproproprio := Value;
end;

function Tpro.Getproproprio: String;
begin
  Result := Fproproprio;
end;

procedure Tpro.Setpronumserie(const Value: String);
begin
  Fpronumserie := Value;
end;

function Tpro.Getpronumserie: String;
begin
  Result := Fpronumserie;
end;

procedure Tpro.Setproncm(const Value: String);
begin
  Fproncm := Value;
end;

function Tpro.Getproncm: String;
begin
  Result := Fproncm;
end;

procedure Tpro.Setprocomposto(const Value: String);
begin
  Fprocomposto := Value;
end;

function Tpro.Getprocomposto: String;
begin
  Result := Fprocomposto;
end;

procedure Tpro.Setprosaldo(const Value: Currency);
begin
  Fprosaldo := Value;
end;

function Tpro.Getprosaldo: Currency;
begin
  Result := Fprosaldo;
end;

procedure Tpro.Setprobalanca(const Value: Currency);
begin
  Fprobalanca := Value;
end;

function Tpro.Getprobalanca: Currency;
begin
  Result := Fprobalanca;
end;

procedure Tpro.Setprotecla(const Value: String);
begin
  Fprotecla := Value;
end;

function Tpro.Getprotecla: String;
begin
  Result := Fprotecla;
end;

procedure Tpro.Setprovalidade(const Value: Integer);
begin
  Fprovalidade := Value;
end;

function Tpro.Getprovalidade: Integer;
begin
  Result := Fprovalidade;
end;

procedure Tpro.Setprocarga(const Value: Integer);
begin
  Fprocarga := Value;
end;

function Tpro.Getprocarga: Integer;
begin
  Result := Fprocarga;
end;

procedure Tpro.Setproreferencia(const Value: String);
begin
  Fproreferencia := Value;
end;

function Tpro.Getproreferencia: String;
begin
  Result := Fproreferencia;
end;

procedure Tpro.Setproestoque(const Value: String);
begin
  Fproestoque := Value;
end;

function Tpro.Getproestoque: String;
begin
  Result := Fproestoque;
end;

procedure Tpro.Setprosped(const Value: String);
begin
  Fprosped := Value;
end;

function Tpro.Getprosped: String;
begin
  Result := Fprosped;
end;

procedure Tpro.Setproobs(const Value: String);
begin
  Fproobs := Value;
end;

function Tpro.Getproobs: String;
begin
  Result := Fproobs;
end;

procedure Tpro.Setprounitrib(const Value: Integer);
begin
  Fprounitrib := Value;
end;

function Tpro.Getprounitrib: Integer;
begin
  Result := Fprounitrib;
end;

procedure Tpro.Setproqtdtrib(const Value: Currency);
begin
  Fproqtdtrib := Value;
end;

function Tpro.Getproqtdtrib: Currency;
begin
  Result := Fproqtdtrib;
end;

procedure Tpro.Setprosaldodisp(const Value: Currency);
begin
  Fprosaldodisp := Value;
end;

function Tpro.Getprosaldodisp: Currency;
begin
  Result := Fprosaldodisp;
end;

procedure Tpro.Setproanpcodigo(const Value: Integer);
begin
  Fproanpcodigo := Value;
end;

function Tpro.Getproanpcodigo: Integer;
begin
  Result := Fproanpcodigo;
end;

procedure Tpro.Setenpcodigo(const Value: Integer);
begin
  Fenpcodigo := Value;
end;

function Tpro.Getenpcodigo: Integer;
begin
  Result := Fenpcodigo;
end;

procedure Tpro.Setpropedecomple(const Value: Integer);
begin
  Fpropedecomple := Value;
end;

function Tpro.Getpropedecomple: Integer;
begin
  Result := Fpropedecomple;
end;

procedure Tpro.Setpropededescrserv(const Value: Integer);
begin
  Fpropededescrserv := Value;
end;

function Tpro.Getpropededescrserv: Integer;
begin
  Result := Fpropededescrserv;
end;

procedure Tpro.Setpropedetecnicoserv(const Value: Integer);
begin
  Fpropedetecnicoserv := Value;
end;

function Tpro.Getpropedetecnicoserv: Integer;
begin
  Result := Fpropedetecnicoserv;
end;

procedure Tpro.Setdprcodigo(const Value: Integer);
begin
  Fdprcodigo := Value;
end;

function Tpro.Getdprcodigo: Integer;
begin
  Result := Fdprcodigo;
end;

procedure Tpro.Setcstcodigo(const Value: String);
begin
  Fcstcodigo := Value;
end;

function Tpro.Getcstcodigo: String;
begin
  Result := Fcstcodigo;
end;

procedure Tpro.Setproconsolidado(const Value: Integer);
begin
  Fproconsolidado := Value;
end;

function Tpro.Getproconsolidado: Integer;
begin
  Result := Fproconsolidado;
end;

procedure Tpro.Setcsicodigo(const Value: String);
begin
  Fcsicodigo := Value;
end;

function Tpro.Getcsicodigo: String;
begin
  Result := Fcsicodigo;
end;

procedure Tpro.Setcspcodigo(const Value: String);
begin
  Fcspcodigo := Value;
end;

function Tpro.Getcspcodigo: String;
begin
  Result := Fcspcodigo;
end;

procedure Tpro.Setcsfcodigo(const Value: String);
begin
  Fcsfcodigo := Value;
end;

function Tpro.Getcsfcodigo: String;
begin
  Result := Fcsfcodigo;
end;

procedure Tpro.Setprocontabiliza(const Value: Integer);
begin
  Fprocontabiliza := Value;
end;

function Tpro.Getprocontabiliza: Integer;
begin
  Result := Fprocontabiliza;
end;

procedure Tpro.Setprousagrade(const Value: Integer);
begin
  Fprousagrade := Value;
end;

function Tpro.Getprousagrade: Integer;
begin
  Result := Fprousagrade;
end;

procedure Tpro.Setpropercreducaobaseicm(const Value: Currency);
begin
  Fpropercreducaobaseicm := Value;
end;

function Tpro.Getpropercreducaobaseicm: Currency;
begin
  Result := Fpropercreducaobaseicm;
end;

procedure Tpro.Setpropisaliquota(const Value: Currency);
begin
  Fpropisaliquota := Value;
end;

function Tpro.Getpropisaliquota: Currency;
begin
  Result := Fpropisaliquota;
end;

procedure Tpro.Setprocofinsaliquota(const Value: Currency);
begin
  Fprocofinsaliquota := Value;
end;

function Tpro.Getprocofinsaliquota: Currency;
begin
  Result := Fprocofinsaliquota;
end;

procedure Tpro.Setimgcodigo(const Value: Integer);
begin
  Fimgcodigo := Value;
end;

function Tpro.Getimgcodigo: Integer;
begin
  Result := Fimgcodigo;
end;

procedure Tpro.Setproalterarqtd(const Value: Integer);
begin
  Fproalterarqtd := Value;
end;

function Tpro.Getproalterarqtd: Integer;
begin
  Result := Fproalterarqtd;
end;

procedure Tpro.Setproremoto(const Value: Integer);
begin
  Fproremoto := Value;
end;

function Tpro.Getproremoto: Integer;
begin
  Result := Fproremoto;
end;

procedure Tpro.Setstgcodigo(const Value: Integer);
begin
  Fstgcodigo := Value;
end;

function Tpro.Getstgcodigo: Integer;
begin
  Result := Fstgcodigo;
end;

procedure Tpro.Setprocest(const Value: String);
begin
  Fprocest := Value;
end;

function Tpro.Getprocest: String;
begin
  Result := Fprocest;
end;

procedure Tpro.Setproproducao(const Value: Integer);
begin
  Fproproducao := Value;
end;

function Tpro.Getproproducao: Integer;
begin
  Result := Fproproducao;
end;

procedure Tpro.Setrcspontuacao(const Value: Integer);
begin
  Frcspontuacao := Value;
end;

function Tpro.Getrcspontuacao: Integer;
begin
  Result := Frcspontuacao;
end;

procedure Tpro.Setpadcodigo(const Value: Integer);
begin
  Fpadcodigo := Value;
end;

function Tpro.Getpadcodigo: Integer;
begin
  Result := Fpadcodigo;
end;

procedure Tpro.Setcfocfop(const Value: String);
begin
  Fcfocfop := Value;
end;

function Tpro.Getcfocfop: String;
begin
  Result := Fcfocfop;
end;

procedure Tpro.Setpromva(const Value: String);
begin
  Fpromva := Value;
end;

function Tpro.Getpromva: String;
begin
  Result := Fpromva;
end;

procedure Tpro.Setpropercfcp(const Value: String);
begin
  Fpropercfcp := Value;
end;

function Tpro.Getpropercfcp: String;
begin
  Result := Fpropercfcp;
end;

procedure Tpro.Setproabc(const Value: String);
begin
  Fproabc := Value;
end;

function Tpro.Getproabc: String;
begin
  Result := Fproabc;
end;

procedure Tpro.Setpromargemcontrib(const Value: Currency);
begin
  Fpromargemcontrib := Value;
end;

function Tpro.Getpromargemcontrib: Currency;
begin
  Result := Fpromargemcontrib;
end;

procedure Tpro.Setimuid(const Value: Integer);
begin
  Fimuid := Value;
end;

function Tpro.Getimuid: Integer;
begin
  Result := Fimuid;
end;

procedure Tpro.Setpronatrecisenta(const Value: Integer);
begin
  Fpronatrecisenta := Value;
end;

function Tpro.Getpronatrecisenta: Integer;
begin
  Result := Fpronatrecisenta;
end;

procedure Tpro.Seticmcodigofora(const Value: String);
begin
  Ficmcodigofora := Value;
end;

function Tpro.Geticmcodigofora: String;
begin
  Result := Ficmcodigofora;
end;

procedure Tpro.Setproipialiquota(const Value: Currency);
begin
  Fproipialiquota := Value;
end;

function Tpro.Getproipialiquota: Currency;
begin
  Result := Fproipialiquota;
end;

procedure Tpro.Setcfocfopfora(const Value: String);
begin
  Fcfocfopfora := Value;
end;

function Tpro.Getcfocfopfora: String;
begin
  Result := Fcfocfopfora;
end;

procedure Tpro.Limpar;
begin
  Self.procodigo := 0;
  Self.pronome := '';
  Self.pronomereduzido := '';
  Self.marcodigo := 0;
  Self.grpcodigo := 0;
  Self.trbcodigo := 0;
  Self.icmcodigo := '';
  Self.tpocodigo := 0;
  Self.unicodigo := 0;
  Self.sipcodigo := 0;
  Self.prominimo := 0;
  Self.proproprio := '';
  Self.proncm := '';
  Self.prosaldo := 0;
  Self.protecla := '';
  Self.provalidade := 0;
  Self.procarga := 0;
  Self.proreferencia := '';
  Self.proobs := '';
  Self.prounitrib := 0;
  Self.proqtdtrib := 0;
  Self.prosaldodisp := 0;
  Self.proanpcodigo := 0;
  Self.enpcodigo := 0;
  Self.propedecomple := 0;
  Self.propededescrserv := 0;
  Self.propedetecnicoserv := 0;
  Self.dprcodigo := 0;
  Self.cstcodigo := '';
  Self.proconsolidado := 0;
  Self.csicodigo := '';
  Self.cspcodigo := '';
  Self.csfcodigo := '';
  Self.procontabiliza := 0;
  Self.prousagrade := 0;
  Self.propercreducaobaseicm := 0;
  Self.propisaliquota := 0;
  Self.procofinsaliquota := 0;
  Self.imgcodigo := 0;
  Self.proalterarqtd := 0;
  Self.proremoto := 0;
  Self.stgcodigo := 0;
  Self.procest := '';
  Self.proproducao := 0;
  Self.rcspontuacao := 0;
  Self.padcodigo := 0;
  Self.cfocfop := '';
  Self.promva := '';
  Self.propercfcp := '';
  Self.proabc := '';
  Self.promargemcontrib := 0;
  Self.imuid := 0;
  Self.pronatrecisenta := 0;
  Self.icmcodigofora := '';
  Self.proipialiquota := 0;
  Self.cfocfopfora := '';

end;

procedure Tpro.SetCOUNT(const Value: Integer);
begin
  FCOUNT := Value;
end;

function Tpro.ToJson(pFields: String = '*'): TJSonObject;
begin
  pFields := ' ' + StringReplace(pFields, ',', ' ', [rfReplaceAll]);
  Result := TJSonObject.Create;
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' procodigo ')) then
    Result.addPair('procodigo', IntToStr(Self.procodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' pronome ')) then
    Result.addPair('pronome', Self.pronome);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' pronomereduzido ')) then
    Result.addPair('pronomereduzido', Self.pronomereduzido);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' marcodigo ')) then
    Result.addPair('marcodigo', IntToStr(Self.marcodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' grpcodigo ')) then
    Result.addPair('grpcodigo', IntToStr(Self.grpcodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' trbcodigo ')) then
    Result.addPair('trbcodigo', IntToStr(Self.trbcodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' icmcodigo ')) then
    Result.addPair('icmcodigo', Self.icmcodigo);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' tpocodigo ')) then
    Result.addPair('tpocodigo', IntToStr(Self.tpocodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' unicodigo ')) then
    Result.addPair('unicodigo', IntToStr(Self.unicodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' sipcodigo ')) then
    Result.addPair('sipcodigo', IntToStr(Self.sipcodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' prominimo ')) then
    Result.addPair('prominimo', FloatToStr(Self.prominimo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' proproprio ')) then
    Result.addPair('proproprio', Self.proproprio);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' proncm ')) then
    Result.addPair('proncm', Self.proncm);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' prosaldo ')) then
    Result.addPair('prosaldo', FloatToStr(Self.prosaldo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' protecla ')) then
    Result.addPair('protecla', Self.protecla);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' provalidade ')) then
    Result.addPair('provalidade', IntToStr(Self.provalidade));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' procarga ')) then
    Result.addPair('procarga', IntToStr(Self.procarga));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' proreferencia ')) then
    Result.addPair('proreferencia', Self.proreferencia);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' proobs ')) then
    Result.addPair('proobs', Self.proobs);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' prounitrib ')) then
    Result.addPair('prounitrib', IntToStr(Self.prounitrib));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' proqtdtrib ')) then
    Result.addPair('proqtdtrib', FloatToStr(Self.proqtdtrib));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' prosaldodisp ')) then
    Result.addPair('prosaldodisp', FloatToStr(Self.prosaldodisp));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' proanpcodigo ')) then
    Result.addPair('proanpcodigo', IntToStr(Self.proanpcodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' enpcodigo ')) then
    Result.addPair('enpcodigo', IntToStr(Self.enpcodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' propedecomple ')) then
    Result.addPair('propedecomple', IntToStr(Self.propedecomple));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' propededescrserv ')) then
    Result.addPair('propededescrserv', IntToStr(Self.propededescrserv));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' propedetecnicoserv ')) then
    Result.addPair('propedetecnicoserv', IntToStr(Self.propedetecnicoserv));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' dprcodigo ')) then
    Result.addPair('dprcodigo', IntToStr(Self.dprcodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' cstcodigo ')) then
    Result.addPair('cstcodigo', Self.cstcodigo);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' proconsolidado ')) then
    Result.addPair('proconsolidado', IntToStr(Self.proconsolidado));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' csicodigo ')) then
    Result.addPair('csicodigo', Self.csicodigo);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' cspcodigo ')) then
    Result.addPair('cspcodigo', Self.cspcodigo);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' csfcodigo ')) then
    Result.addPair('csfcodigo', Self.csfcodigo);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' procontabiliza ')) then
    Result.addPair('procontabiliza', IntToStr(Self.procontabiliza));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' prousagrade ')) then
    Result.addPair('prousagrade', IntToStr(Self.prousagrade));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' propercreducaobaseicm ')) then
    Result.addPair('propercreducaobaseicm', FloatToStr(Self.propercreducaobaseicm));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' propisaliquota ')) then
    Result.addPair('propisaliquota', FloatToStr(Self.propisaliquota));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' procofinsaliquota ')) then
    Result.addPair('procofinsaliquota', FloatToStr(Self.procofinsaliquota));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' imgcodigo ')) then
    Result.addPair('imgcodigo', IntToStr(Self.imgcodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' proalterarqtd ')) then
    Result.addPair('proalterarqtd', IntToStr(Self.proalterarqtd));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' proremoto ')) then
    Result.addPair('proremoto', IntToStr(Self.proremoto));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' stgcodigo ')) then
    Result.addPair('stgcodigo', IntToStr(Self.stgcodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' procest ')) then
    Result.addPair('procest', Self.procest);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' proproducao ')) then
    Result.addPair('proproducao', IntToStr(Self.proproducao));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' rcspontuacao ')) then
    Result.addPair('rcspontuacao', IntToStr(Self.rcspontuacao));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' padcodigo ')) then
    Result.addPair('padcodigo', IntToStr(Self.padcodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' cfocfop ')) then
    Result.addPair('cfocfop', Self.cfocfop);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' promva ')) then
    Result.addPair('promva', Self.promva);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' propercfcp ')) then
    Result.addPair('propercfcp', Self.propercfcp);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' proabc ')) then
    Result.addPair('proabc', Self.proabc);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' promargemcontrib ')) then
    Result.addPair('promargemcontrib', FloatToStr(Self.promargemcontrib));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' imuid ')) then
    Result.addPair('imuid', IntToStr(Self.imuid));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' pronatrecisenta ')) then
    Result.addPair('pronatrecisenta', IntToStr(Self.pronatrecisenta));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' icmcodigofora ')) then
    Result.addPair('icmcodigofora', Self.icmcodigofora);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' proipialiquota ')) then
    Result.addPair('proipialiquota', FloatToStr(Self.proipialiquota));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' cfocfopfora ')) then
    Result.addPair('cfocfopfora', Self.cfocfopfora);

end;

function Tpro.JsonToClass(obj: TJSonObject): Tpro;
begin
  Result := Tpro.Create;
  if (assigned(obj)) then
  begin
    Try
      Try
        Result.procodigo := StrToInt(obj.get('procodigo').JsonValue.Value);
      Except
      End;
      Try
        Result.pronome := obj.get('pronome').JsonValue.Value;
      Except
      End;
      Try
        Result.pronomereduzido := obj.get('pronomereduzido').JsonValue.Value;
      Except
      End;
      Try
        Result.marcodigo := StrToInt(obj.get('marcodigo').JsonValue.Value);
      Except
      End;
      Try
        Result.grpcodigo := StrToInt(obj.get('grpcodigo').JsonValue.Value);
      Except
      End;
      Try
        Result.trbcodigo := StrToInt(obj.get('trbcodigo').JsonValue.Value);
      Except
      End;
      Try
        Result.icmcodigo := obj.get('icmcodigo').JsonValue.Value;
      Except
      End;
      Try
        Result.tpocodigo := StrToInt(obj.get('tpocodigo').JsonValue.Value);
      Except
      End;
      Try
        Result.unicodigo := StrToInt(obj.get('unicodigo').JsonValue.Value);
      Except
      End;
      Try
        Result.sipcodigo := StrToInt(obj.get('sipcodigo').JsonValue.Value);
      Except
      End;
      Try
        Result.prominimo := StrToFloat(obj.get('prominimo').JsonValue.Value);
      Except
      End;
      Try
        Result.proproprio := obj.get('proproprio').JsonValue.Value;
      Except
      End;
      Try
        Result.proncm := obj.get('proncm').JsonValue.Value;
      Except
      End;
      Try
        Result.prosaldo := StrToFloat(obj.get('prosaldo').JsonValue.Value);
      Except
      End;
      Try
        Result.protecla := obj.get('protecla').JsonValue.Value;
      Except
      End;
      Try
        Result.provalidade := StrToInt(obj.get('provalidade').JsonValue.Value);
      Except
      End;
      Try
        Result.procarga := StrToInt(obj.get('procarga').JsonValue.Value);
      Except
      End;
      Try
        Result.proreferencia := obj.get('proreferencia').JsonValue.Value;
      Except
      End;
      Try
        Result.proobs := obj.get('proobs').JsonValue.Value;
      Except
      End;
      Try
        Result.prounitrib := StrToInt(obj.get('prounitrib').JsonValue.Value);
      Except
      End;
      Try
        Result.proqtdtrib := StrToFloat(obj.get('proqtdtrib').JsonValue.Value);
      Except
      End;
      Try
        Result.prosaldodisp := StrToFloat(obj.get('prosaldodisp').JsonValue.Value);
      Except
      End;
      Try
        Result.proanpcodigo := StrToInt(obj.get('proanpcodigo').JsonValue.Value);
      Except
      End;
      Try
        Result.enpcodigo := StrToInt(obj.get('enpcodigo').JsonValue.Value);
      Except
      End;
      Try
        Result.propedecomple := StrToInt(obj.get('propedecomple').JsonValue.Value);
      Except
      End;
      Try
        Result.propededescrserv := StrToInt(obj.get('propededescrserv').JsonValue.Value);
      Except
      End;
      Try
        Result.propedetecnicoserv := StrToInt(obj.get('propedetecnicoserv').JsonValue.Value);
      Except
      End;
      Try
        Result.dprcodigo := StrToInt(obj.get('dprcodigo').JsonValue.Value);
      Except
      End;
      Try
        Result.cstcodigo := obj.get('cstcodigo').JsonValue.Value;
      Except
      End;
      Try
        Result.proconsolidado := StrToInt(obj.get('proconsolidado').JsonValue.Value);
      Except
      End;
      Try
        Result.csicodigo := obj.get('csicodigo').JsonValue.Value;
      Except
      End;
      Try
        Result.cspcodigo := obj.get('cspcodigo').JsonValue.Value;
      Except
      End;
      Try
        Result.csfcodigo := obj.get('csfcodigo').JsonValue.Value;
      Except
      End;
      Try
        Result.procontabiliza := StrToInt(obj.get('procontabiliza').JsonValue.Value);
      Except
      End;
      Try
        Result.prousagrade := StrToInt(obj.get('prousagrade').JsonValue.Value);
      Except
      End;
      Try
        Result.propercreducaobaseicm := StrToFloat(obj.get('propercreducaobaseicm').JsonValue.Value);
      Except
      End;
      Try
        Result.propisaliquota := StrToFloat(obj.get('propisaliquota').JsonValue.Value);
      Except
      End;
      Try
        Result.procofinsaliquota := StrToFloat(obj.get('procofinsaliquota').JsonValue.Value);
      Except
      End;
      Try
        Result.imgcodigo := StrToInt(obj.get('imgcodigo').JsonValue.Value);
      Except
      End;
      Try
        Result.proalterarqtd := StrToInt(obj.get('proalterarqtd').JsonValue.Value);
      Except
      End;
      Try
        Result.proremoto := StrToInt(obj.get('proremoto').JsonValue.Value);
      Except
      End;
      Try
        Result.stgcodigo := StrToInt(obj.get('stgcodigo').JsonValue.Value);
      Except
      End;
      Try
        Result.procest := obj.get('procest').JsonValue.Value;
      Except
      End;
      Try
        Result.proproducao := StrToInt(obj.get('proproducao').JsonValue.Value);
      Except
      End;
      Try
        Result.rcspontuacao := StrToInt(obj.get('rcspontuacao').JsonValue.Value);
      Except
      End;
      Try
        Result.padcodigo := StrToInt(obj.get('padcodigo').JsonValue.Value);
      Except
      End;
      Try
        Result.cfocfop := obj.get('cfocfop').JsonValue.Value;
      Except
      End;
      Try
        Result.promva := obj.get('promva').JsonValue.Value;
      Except
      End;
      Try
        Result.propercfcp := obj.get('propercfcp').JsonValue.Value;
      Except
      End;
      Try
        Result.proabc := obj.get('proabc').JsonValue.Value;
      Except
      End;
      Try
        Result.promargemcontrib := StrToFloat(obj.get('promargemcontrib').JsonValue.Value);
      Except
      End;
      Try
        Result.imuid := StrToInt(obj.get('imuid').JsonValue.Value);
      Except
      End;
      Try
        Result.pronatrecisenta := StrToInt(obj.get('pronatrecisenta').JsonValue.Value);
      Except
      End;
      Try
        Result.icmcodigofora := obj.get('icmcodigofora').JsonValue.Value;
      Except
      End;
      Try
        Result.proipialiquota := StrToFloat(obj.get('proipialiquota').JsonValue.Value);
      Except
      End;
      Try
        Result.cfocfopfora := obj.get('cfocfopfora').JsonValue.Value;
      Except
      End;

    Except
      on E: Exception do
      begin
        Result.Free;
        raise Exception.Create(E.Message);
      end;
    End;
  end;
end;

{ Tprocod }

constructor Tprocod.Create;
begin

end;

destructor Tprocod.Destroy;
begin

  inherited;
end;

function Tprocod.Getprocodigo: Integer;
begin
  Result := Fprocodigo;
end;

procedure Tprocod.Setprocodigo(const Value: Integer);
begin
  Fprocodigo := Value;
end;

end.
