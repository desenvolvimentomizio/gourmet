unit GourmetServer.Model.Entity.GRP;

interface

uses
System.Json, System.SysUtils, System.Variants, SimpleAttributes;

type
  [Tabela('grp')]
  Tgrp = class
  private
    FCOUNT: Integer;
    Fgrpcodigo :Integer;
    Fgrpidentificacao :String;
    Ftgrcodigo :Integer;
    Fcgrcodigo :Integer;
    Fgrpordem :Integer;
    Fimgcodigo :Integer;
    Fgrpremoto :Integer;
    Fsipcodigo :Integer;

    procedure Setgrpcodigo (const Value :Integer);
    function Getgrpcodigo :Integer;
    procedure Setgrpidentificacao (const Value :String);
    function Getgrpidentificacao :String;
    procedure Settgrcodigo (const Value :Integer);
    function Gettgrcodigo :Integer;
    procedure Setcgrcodigo (const Value :Integer);
    function Getcgrcodigo :Integer;
    procedure Setgrpordem (const Value :Integer);
    function Getgrpordem :Integer;
    procedure Setimgcodigo (const Value :Integer);
    function Getimgcodigo :Integer;
    procedure Setgrpremoto (const Value :Integer);
    function Getgrpremoto :Integer;
    procedure Setsipcodigo (const Value :Integer);
    function Getsipcodigo :Integer;

    procedure SetCOUNT(const Value: Integer);
  public
    constructor Create;
    destructor Destroy; override;
    procedure Limpar;
    function ToJson(pFields : String = '*') : TJSonObject;
    function JsonToClass(obj : TJSonObject) : Tgrp;
    [Campo('grpcodigo'), PK]
    property grpcodigo :Integer read Getgrpcodigo write Setgrpcodigo;
    [Campo('grpidentificacao')]
    property grpidentificacao :String read Getgrpidentificacao write Setgrpidentificacao;
    [Campo('tgrcodigo')]
    /// <summary>
    ///  Tipo de Grupos
    /// </summary>
    property tgrcodigo :Integer read Gettgrcodigo write Settgrcodigo;
    [Campo('cgrcodigo')]
    /// <summary>
    ///  Classe de Grupo
    /// </summary>
    property cgrcodigo :Integer read Getcgrcodigo write Setcgrcodigo;
    [Campo('grpordem')]
    /// <summary>
    ///  ordem do grupo no cardapio
    /// </summary>
    property grpordem :Integer read Getgrpordem write Setgrpordem;
    [Campo('imgcodigo')]
    property imgcodigo :Integer read Getimgcodigo write Setimgcodigo;
    [Campo('grpremoto')]
    property grpremoto :Integer read Getgrpremoto write Setgrpremoto;
    [Campo('sipcodigo')]
    /// <summary>
    ///  1 - ativo 2-inativo
    /// </summary>
    property sipcodigo :Integer read Getsipcodigo write Setsipcodigo;

    [Campo('COUNT'), Ignore]
    property COUNT : Integer read FCOUNT write SetCOUNT;
end;

implementation

constructor Tgrp.Create;
begin
  Limpar;
end;

destructor Tgrp.Destroy;
begin

  inherited;
end;

procedure Tgrp.Setgrpcodigo (const Value :Integer);
begin
  Fgrpcodigo := Value;
end;

function Tgrp.Getgrpcodigo :Integer;
begin
  Result := Fgrpcodigo;
end;

procedure Tgrp.Setgrpidentificacao (const Value :String);
begin
  Fgrpidentificacao := Value;
end;

function Tgrp.Getgrpidentificacao :String;
begin
  Result := Fgrpidentificacao;
end;

procedure Tgrp.Settgrcodigo (const Value :Integer);
begin
  Ftgrcodigo := Value;
end;

function Tgrp.Gettgrcodigo :Integer;
begin
  Result := Ftgrcodigo;
end;

procedure Tgrp.Setcgrcodigo (const Value :Integer);
begin
  Fcgrcodigo := Value;
end;

function Tgrp.Getcgrcodigo :Integer;
begin
  Result := Fcgrcodigo;
end;

procedure Tgrp.Setgrpordem (const Value :Integer);
begin
  Fgrpordem := Value;
end;

function Tgrp.Getgrpordem :Integer;
begin
  Result := Fgrpordem;
end;

procedure Tgrp.Setimgcodigo (const Value :Integer);
begin
  Fimgcodigo := Value;
end;

function Tgrp.Getimgcodigo :Integer;
begin
  Result := Fimgcodigo;
end;

procedure Tgrp.Setgrpremoto (const Value :Integer);
begin
  Fgrpremoto := Value;
end;

function Tgrp.Getgrpremoto :Integer;
begin
  Result := Fgrpremoto;
end;


procedure Tgrp.Setsipcodigo (const Value :Integer);
begin
  Fsipcodigo := Value;
end;

function Tgrp.Getsipcodigo :Integer;
begin
  Result := Fsipcodigo;
end;


procedure Tgrp.Limpar;
begin
  Self.grpcodigo := 0;
  Self.grpidentificacao := '';
  Self.tgrcodigo := 0;
  Self.cgrcodigo := 0;
  Self.grpordem := 0;
  Self.imgcodigo := 0;
  Self.grpremoto := 0;
  Self.sipcodigo := 0;

end;

procedure Tgrp.SetCOUNT(const Value: Integer);
begin
  FCOUNT := Value;
end;
function Tgrp.ToJson(pFields : String = '*') : TJSonObject;
begin
  pFields := ' '+ StringReplace(pFields, ',', ' ', [rfReplaceAll]);
  result := TJSonObject.Create;
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' grpcodigo ')) then
    result.addPair('grpcodigo', IntToStr(Self.grpcodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' grpidentificacao ')) then
    result.addPair('grpidentificacao', Self.grpidentificacao);
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' tgrcodigo ')) then
    result.addPair('tgrcodigo', IntToStr(Self.tgrcodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' cgrcodigo ')) then
    result.addPair('cgrcodigo', IntToStr(Self.cgrcodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' grpordem ')) then
    result.addPair('grpordem', IntToStr(Self.grpordem));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' imgcodigo ')) then
    result.addPair('imgcodigo', IntToStr(Self.imgcodigo));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' grpremoto ')) then
    result.addPair('grpremoto', IntToStr(Self.grpremoto));
  if (pFields.Contains('*') or AnsiLowerCase(pFields).Contains(' sipcodigo ')) then
    result.addPair('sipcodigo', IntToStr(Self.sipcodigo));

end;
function Tgrp.JsonToClass(obj : TJSonObject) : Tgrp;
begin
  result := Tgrp.Create;
  if (assigned(obj)) then
  begin
    Try
      Try result.grpcodigo := StrToInt(obj.get('grpcodigo').JsonValue.Value); Except End;
      Try result.grpidentificacao := obj.get('grpidentificacao').JsonValue.Value; Except End;
      Try result.tgrcodigo := StrToInt(obj.get('tgrcodigo').JsonValue.Value); Except End;
      Try result.cgrcodigo := StrToInt(obj.get('cgrcodigo').JsonValue.Value); Except End;
      Try result.grpordem := StrToInt(obj.get('grpordem').JsonValue.Value); Except End;
      Try result.imgcodigo := StrToInt(obj.get('imgcodigo').JsonValue.Value); Except End;
      Try result.grpremoto := StrToInt(obj.get('grpremoto').JsonValue.Value); Except End;
      Try result.sipcodigo := StrToInt(obj.get('sipcodigo').JsonValue.Value); Except End;

    Except
      on E : Exception do
      begin
        result.Free;
        raise Exception.Create(E.Message);
      end;
    End;
  end;
end;

end.

