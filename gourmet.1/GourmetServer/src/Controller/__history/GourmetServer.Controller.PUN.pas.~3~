unit GourmetServer.Controller.PUN;

interface

Uses
  System.Json,
  System.SysUtils,
  idHashMessageDigest,
  GourmetServer.Model.DAOGeneric,
  GourmetServer.Model.Entity.PUN,
  GourmetServer.Service.Funcoes,
  GourmetServer.Controller.UNI;

type
  TAPIError = class
  private
    Ferror: string;
  public
    property error: string read Ferror write Ferror;
  end;

Function ManutencaoPUN(vItem: TJsonObject): Integer;
Function ManutencaoPUNAplicativo(vProCodigo: Integer; vunicodigo: Integer; vValor: String): Integer;

function BuscaCodigoPROpunCodigo(vCodigo: String): Integer;
function BuscaCodigoUNIpunCodigo(vCodigo: String): Integer;
function BuscaCodigoPROProCodigo(vCodigo: Integer): Integer;
function BuscaCodigoPUNCodigo(vProCodigo: Integer; vunicodigo: Integer): Integer;

implementation

function BuscaCodigoPUNCodigo(vProCodigo: Integer; vunicodigo: Integer): Integer;
var
  FDAO: iDAOGeneric<TPUN>;
  vlPunCodigo: Integer;
begin

  vlPunCodigo := 0;

  FDAO := TDAOGeneric<TPUN>.New;

  FDAO.DAO.SQL.where('procodigo=' + vProCodigo.ToString + ' and unicodigo=' + vunicodigo.ToString + ' order by puncodigo limit 1').&End.Find;

  vlPunCodigo := FDAO.DataSet.FieldByName('puncodigo').asInteger;
  result := vlPunCodigo;

end;

Function ManutencaoPUNAplicativo(vProCodigo: Integer; vunicodigo: Integer; vValor: String): Integer;
var
  vlPunCodigo: Integer;
  vlPun: TJsonObject;
begin
  vlPunCodigo := BuscaCodigoPUNCodigo(vProCodigo, vunicodigo);
  if vlPunCodigo = 0 then
  begin
    vlPun := TJsonObject.Create;
    vlPun.AddPair('puncodigo', vlPunCodigo.ToString);
    vlPun.AddPair('procodigo', vProCodigo.ToString);
    vlPun.AddPair('unicodigo', vunicodigo.ToString);
    vlPun.AddPair('unicodigobase', vunicodigo.ToString);

    vlPun.AddPair('punbarra', GeraProdutoBarra(vProCodigo, vunicodigo));

    vlPun.AddPair('dgrcodigo', '1');
    vlPun.AddPair('punidentificacao', '1x' + BuscaSimboloUNICodigo(vunicodigo));

    vlPun.AddPair('punmultiplicador', '1');
    vlPun.AddPair('punquantidade', '1');
    vlPun.AddPair('punprecoav', vValor);
    vlPun.AddPair('punprecoap', vValor);
    vlPun.AddPair('puncusto', '0');
    vlPun.AddPair('punmargem', '0');
    vlPun.AddPair('punpesobruto', '0');
    vlPun.AddPair('punpesoliq', '0');

    vlPun.AddPair('tuncodigo', '1');

    vlPun.AddPair('pununitrib', '1');
    vlPun.AddPair('punqtdtrib', '1');

    vlPun.AddPair('punbarrasistema', '1');
    vlPun.AddPair('punmargemap', '0');
    vlPun.AddPair('punpercacresavap', '0');

    vlPun.AddPair('punbase', '0');
    vlPun.AddPair('stgcodigo', '0');

    vlPun.AddPair('pcoprocodigo', '0');
    vlPun.AddPair('sipcodigo', '1');

    vlPunCodigo := ManutencaoPUN(vlPun);

  end;
  result := vlPunCodigo;
end;

function BuscaCodigoPROProCodigo(vCodigo: Integer): Integer;
var
  FDAO: iDAOGeneric<TPUN>;
  vlPunCodigo: Integer;
begin

  vlPunCodigo := 0;

  FDAO := TDAOGeneric<TPUN>.New;

  FDAO.DAO.SQL.where('procodigo=' + vCodigo.ToString + ' order by puncodigo limit 1').&End.Find;

  vlPunCodigo := FDAO.DataSet.FieldByName('puncodigo').asInteger;
  result := vlPunCodigo;

end;

function BuscaCodigoPROpunCodigo(vCodigo: String): Integer;
var
  FDAO: iDAOGeneric<TPUN>;
  vlprocodigo: Integer;
begin

  vlprocodigo := 0;

  FDAO := TDAOGeneric<TPUN>.New;

  FDAO.DAO.SQL.where('puncodigo=' + vCodigo).&End.Find;

  vlprocodigo := FDAO.DataSet.FieldByName('procodigo').asInteger;
  result := vlprocodigo;

end;

function BuscaCodigoUNIpunCodigo(vCodigo: String): Integer;
var
  FDAO: iDAOGeneric<TPUN>;
  vlunicodigo: Integer;
begin
  vlunicodigo := 0;

  FDAO := TDAOGeneric<TPUN>.New;

  FDAO.DAO.SQL.where('puncodigo=' + vCodigo).&End.Find;

  vlunicodigo := FDAO.DataSet.FieldByName('unicodigo').asInteger;
  result := vlunicodigo;

end;

Function ManutencaoPUN(vItem: TJsonObject): Integer;
var
  FDAO: GourmetServer.Model.DAOGeneric.iDAOGeneric<TPUN>;
  Fpun: TPUN;
  vlPunCodigo: Integer;

begin
  FDAO := TDAOGeneric<TPUN>.New;

  vlPunCodigo := vItem.getvalue('puncodigo', '').ToInteger;

  Fpun := TPUN.Create;
  Fpun.punCodigo := vlPunCodigo;

  Fpun.procodigo := vItem.getvalue('procodigo', '').ToInteger;
  Fpun.unicodigo := vItem.getvalue('unicodigo', '').ToInteger;
  Fpun.dgrcodigo := vItem.getvalue('dgrcodigo', '').ToInteger;
  Fpun.punidentificacao := vItem.getvalue('punidentificacao', '');
  Fpun.unicodigobase := vItem.getvalue('unicodigobase', '').ToInteger;
  Fpun.punmultiplicador := strtofloat(vItem.getvalue('punmultiplicador', ''));
  Fpun.punquantidade := strtofloat(vItem.getvalue('punquantidade', ''));
  Fpun.punprecoav := StrToCurr(vItem.getvalue('punprecoav', ''));
  Fpun.punprecoap := StrToCurr(vItem.getvalue('punprecoap', ''));
  Fpun.puncusto := strtofloat(vItem.getvalue('puncusto', ''));
  Fpun.punmargem := strtofloat(vItem.getvalue('punmargem', ''));
  Fpun.punpesobruto := strtofloat(vItem.getvalue('punpesobruto', ''));
  Fpun.punpesoliq := strtofloat(vItem.getvalue('punpesoliq', ''));
  Fpun.punbarra := vItem.getvalue('punbarra', '');
  Fpun.tuncodigo := vItem.getvalue('tuncodigo', '').ToInteger;
  Fpun.pununitrib := vItem.getvalue('pununitrib', '').ToInteger;
  Fpun.punqtdtrib := strtofloat(vItem.getvalue('punqtdtrib', ''));
  Fpun.punbarrasistema := vItem.getvalue('punbarrasistema', '').ToInteger;
  Fpun.punmargemap := strtofloat(vItem.getvalue('punmargemap', ''));
  Fpun.punpercacresavap := strtofloat(vItem.getvalue('punpercacresavap', ''));
  Fpun.punbarraposi := vItem.getvalue('punbarraposi', '');
  Fpun.punbase := strtofloat(vItem.getvalue('punbase', ''));
  Fpun.stgcodigo := vItem.getvalue('stgcodigo', '').ToInteger;
  Fpun.sipcodigo := vItem.getvalue('sipcodigo', '').ToInteger;
  Fpun.pcoprocodigo := vItem.getvalue('pcoprocodigo', '').ToInteger;

  if vlPunCodigo = 0 then
  // incluir novo
  begin
    Fpun.punCodigo := 0;
    FDAO.DAO.Insert(Fpun);
    FDAO.DAO.LastID;
    vlPunCodigo := FDAO.DataSet.FieldByName('puncodigo').asInteger;
  end
  else
  // alterar se ja existe
  begin
    Fpun.punCodigo := vlPunCodigo;
    FDAO.DAO.Update(Fpun);
  end;
  result := vlPunCodigo;
end;

end.
