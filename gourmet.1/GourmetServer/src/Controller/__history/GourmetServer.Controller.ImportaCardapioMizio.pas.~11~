unit GourmetServer.Controller.ImportaCardapioMizio;

interface

Uses
  math,
  Horse,
  System.Json,
  Horse.GBSwagger,
  idHashMessageDigest,
  GourmetServer.Service.Funcoes,
  GourmetServer.Controller.CFGMGOU,
  GourmetServer.Controller.SBR,
  GourmetServer.Controller.BRG,
  GourmetServer.Controller.PRO,
  GourmetServer.Controller.GRI,
  GourmetServer.Controller.PUN,
  GourmetServer.Controller.GRP,
  GourmetServer.Controller.UNI,
  GourmetServer.Controller.BRD,
  GourmetServer.Controller.SFN,
  GourmetServer.Controller.ISA,
  GourmetServer.Controller.V_IGA,
  GourmetServer.Model.DAOGeneric;

procedure Registry(App: THorse);
procedure V1Insert(Req: THorseRequest; Res: THorseResponse; Next: TProc);

type
  TAPIError = class
  private
    Ferror: string;
  public
    property error: string read Ferror write Ferror;
  end;

const
  vOrigem: Integer = 0;

implementation

uses
  System.SysUtils, GourmetServer.Controller.BPR;

procedure Registry(App: THorse);
begin
  App.Post('/v1/cardapioMizio', V1Insert);
end;

procedure ImportaCardapioMizio(vCardapio: TJsonObject);
var

  vlCardapio: TJsonObject;

  vlItemSabor: TJsonObject;
  vlItemSabores: TJsonObject;
  vlItemBordas: TJsonObject;
  vlItemAdicionais: TJsonObject;
  vlItemVariacoes: TJsonObject;

  vlItemAdicionaisObrigatorios: TJsonObject;


  vlSkuTamanho: string;
  vlSkuSabor: string;
  vlSkuBorda: string;

  vlSkuAdicional: string;

  vlProCodigo: Integer;
  vlGrpCodigo: Integer;
  vlBrdCodigo: Integer;

  a: string;

  vlProCodigoItemAdicional: Integer;

  // auto cadastramento
  vlGrpIdentificacao: string;
  vlUniIdentificacao: string;
  vlSbrIdentificacao: string;
  vlIsaIdentificacao: string;
  vlIsaValor: string;

  vlpronome: string;
  vlIngredientes: string;
  vlunicodigo: Integer;
  vlBrdIdentificacao: string;
  vlSbrCodigo: Integer;
  vlSfnCodigo: Integer;
  vlSbrIdentificaca: string;

  // auto cadastro de variação

  vlProCodigoVariacao: Integer;
  vlPunCodigoVariacao: Integer;
  vlPronomeVariacao: string;
  vlGrpCodigoVariacao: Integer;
  vlGrpIdentificacaoVariacao: String;
  vlUnicodigoVariacao: Integer;
  vlPunvalorVariacao: String;

  vlCOdigoBordaVariacao: Integer;

  vlbprchave: Integer;

  vlTamanho: String;

  vlListaIngredientes: TJsonarray;

  vlListaGrupos: TJsonarray;
  vlListaProdutos: TJsonarray;

  ig: Integer;
  vlQtdGrupos: Integer;

  ip: Integer;
  vlQtdProdutos: Integer;

  vlUnidade1: string;
  vlUnidade2: string;
  vlPreco1: string;
  vlPreco2: string;
begin

  vlListaGrupos := vCardapio.getvalue<TJsonarray>('Grupos');

  vlQtdGrupos := vlListaGrupos.Count;

  for ig := 0 to vlQtdGrupos - 1 do
  begin
    vlGrpIdentificacao := '';
    vlGrpCodigo := 0;

    vlGrpIdentificacao := trim(uppercase(vlListaGrupos[ig].getvalue('NomeGrupo', '')));
    vlGrpCodigo := manutencaoGRPIdentificacao(vlGrpIdentificacao, vOrigem);

    vlListaProdutos := vlListaGrupos[ig].getvalue<TJsonarray>('Produtos');
    vlQtdProdutos:=vlListaProdutos.Count;

    for ip := 0 to vlQtdProdutos - 1 do
    begin

      vlUnidade1 := '';
      vlUnidade2 := '';
      vlPreco1 := '';
      vlPreco2 := '';
      vlpronome := '';
      vlIngredientes := '';

      vlUnidade1 := trim(uppercase(vlListaProdutos[ip].getvalue('Unidade1', '')));
      vlUnidade2 := trim(uppercase(vlListaProdutos[ip].getvalue('Unidade2', '')));
      vlPreco1 := trim(uppercase(vlListaProdutos[ip].getvalue('Preco1', '')));
      vlPreco2 := trim(uppercase(vlListaProdutos[ip].getvalue('Preco2', '')));
      vlpronome := uppercase(vlListaProdutos[ip].getvalue('Produto', ''));
      vlIngredientes := uppercase(vlListaProdutos[ip].getvalue('Ingredientes', ''));
    end;
  end;

  a := vlListaGrupos.ToString;

  {
    vlItem := TJsonObject.Create;

    vlItem.AddPair('itochave', '0');
    vlItem.AddPair('orcchave', vlorcchave.ToString);





    vlItem.AddPair('itoquantidade', vlitoquantidade);
    vlItem.AddPair('clbcodigo', BuscaCodigoCLBclbNome('CARDAPIO'));


    vlItem.AddPair('immnumepedido', vlPedido.getvalue('immnumepedido', ''));

    vlunicodigo := BuscaUNINome(vlTamanho, vOrigem);


    vlitovalor := vlListaItens[ii].getvalue('unit_value', '');
    vlitovalor := StringReplace(vlitovalor, '.', ',', []);

    vlGrpIdentificacao := uppercase(vlListaItens[ii].getvalue('category_name', ''));

    if pos('PIZZA', vlGrpIdentificacao) > 0 then
    begin
    vlGrpIdentificacao := 'PIZZAS';
    end;

    vlGrpIdentificacao := trim(StringReplace(vlGrpIdentificacao, '??', '', []));
    vlGrpIdentificacao := trim(StringReplace(vlGrpIdentificacao, '?', '', []));

    vlUniIdentificacao := uppercase(vlListaItens[ii].getvalue('size', ''));

    vlUniIdentificacao := trim(StringReplace(vlUniIdentificacao, '??', '', []));
    vlUniIdentificacao := trim(StringReplace(vlUniIdentificacao, '?', '', []));

    vlpronome := uppercase(vlListaItens[ii].getvalue('name', ''));

    vlpronome := trim(StringReplace(vlpronome, '|', '', []));

    vlIngredientes := uppercase(vlListaItens[ii].getvalue('description', ''));

    if vlSkuTamanho = '' then
    begin
    vlGrpCodigo := manutencaoGRPIdentificacao(vlGrpIdentificacao, vOrigem);
    vlunicodigo := ManutencaoUNINome(vlUniIdentificacao, vOrigem);

    vlProCodigo := BuscaCodigoPROProNome(vlGrpIdentificacao);

    if vlProCodigo <> 0 then
    begin
    vlSfnCodigo := 0;
    vlSfnCodigo := BuscaCodigoSFNProCodigo(vlProCodigo);

    if vlSfnCodigo <> 0 then
    begin

    if pos(' + ', vlpronome) = 0 then
    begin
    vlSbrCodigo := ManutencaoSBRIdentificacao(vlpronome, vlProCodigo.ToString, vlGrpCodigo.ToString);
    end
    else
    begin
    if vlSkuTamanho = '' then
    begin
    vlSkuTamanho := ManutencaoPUNAplicativo(vlProCodigo, vlunicodigo, vlitovalor).ToString;
    end;

    vlSbrCodigo := 0;
    end;

    end
    else
    begin
    vlProCodigo := ManutencaoPROAplicativo(vlGrpIdentificacao, vlGrpCodigo, vlunicodigo, 0, vlIngredientes);
    end;

    end
    else
    begin
    vlProCodigo := ManutencaoPROAplicativo(vlpronome, vlGrpCodigo, vlunicodigo, 0, vlIngredientes);

    end;
    if vlSkuTamanho = '' then
    begin
    vlSkuTamanho := ManutencaoPUNAplicativo(vlProCodigo, vlunicodigo, vlitovalor).ToString;
    end;

    end
    else
    begin

    vlProCodigo := BuscaCodigoPROProNome(vlpronome);

    if vlProCodigo = 0 then
    begin

    vlProCodigo := BuscaCodigoPROProNome(vlGrpIdentificacao);

    if vlProCodigo <> 0 then
    begin
    vlSfnCodigo := 0;
    vlSfnCodigo := BuscaCodigoSFNProCodigo(vlProCodigo);

    if vlSfnCodigo = 0 then
    begin
    vlProCodigo := BuscaCodigoPROProNome(vlpronome);
    if vlProCodigo = 0 then
    begin
    vlProCodigo := ManutencaoPROAplicativo(vlpronome, vlGrpCodigo, vlunicodigo, 0, vlIngredientes);
    end;

    end;
    end;

    end;

    if pos(' + ', vlpronome) = 0 then
    begin
    if vlIngredientes <> '' then
    begin
    vlSbrCodigo := BuscaCodigoSBRGrpCodigoIdentificacao(vlpronome, vlGrpCodigo);
    if vlSbrCodigo = 0 then
    begin

    vlSbrCodigo := ManutencaoSBRIdentificacao(vlpronome, vlProCodigo.ToString, vlGrpCodigo.ToString);
    end;
    end;
    end;
    end;

    vlitovalorpromo := vlListaItens[ii].getvalue('promotional_value', '0');
    vlitovalorpromo := StringReplace(vlitovalorpromo, '.', ',', [rfReplaceAll, rfIgnoreCase]);

    if vlitovalorpromo <> '0' then
    begin
    vlItem.AddPair('itovalorav', vlitovalorpromo);
    vlitototal := floattostr(strtofloat(vlitovalorpromo) * strtofloat(vlitoquantidade));
    end
    else
    begin
    vlItem.AddPair('itovalorav', vlitovalor);
    vlitototal := floattostr(strtofloat(vlitovalor) * strtofloat(vlitoquantidade));
    end;
    a := vlListaItens[ii].getvalue('unit_value', '');
    vlPercentualItem := ((strtofloat(StringReplace(vlListaItens[ii].getvalue('unit_value', ''), '.', ',', []))) * strtofloat(vlitoquantidade)) /
    strtofloat(StringReplace(vlpayment_method.getvalue('subtotal', ''), '.', ',', [])) * 100;

    vlItem.AddPair('itopercentual', floattostr(vlPercentualItem));
    vlitopercdescav := vlitopercdescav;

    if vlitopercdescav = '' then
    vlitopercdescav := '0';

    vlItem.AddPair('itopercdescav', vlitopercdescav);

    vlitototal := StringReplace(vlitototal, '.', ',', [rfReplaceAll, rfIgnoreCase]);

    vlItem.AddPair('itototalav', vlitototal);



    vlVlrDescontoItem := RoundTo(strtofloat(vlitototal) -
    (strtofloat(vlitototal) - ((strtofloat(vlitototal) * (strtofloat(vlitopercdescav) / 100)))), -2);

    vlitototal := floattostr(strtofloat(vlitototal) - (strtofloat(vlitototal) * (strtofloat(vlitopercdescav) / 100)));

    vlitosubtotal := StringReplace(vlitototal, '.', ',', [rfReplaceAll, rfIgnoreCase]);

    vlVlrSaldoItem := strtofloat(vlitosubtotal);

    vlItem.AddPair('itodescontoav', floattostr(vlVlrDescontoItem));

    // vlVlrSaldoItem := vlVlrSaldoItem - vlVlrDescontoItem;

    vlItem.AddPair('itosaldoav', floattostr(vlVlrSaldoItem));
    vlItem.AddPair('clbatendente', BuscaCodigoCLBclbNome('CARDAPIO'));
    vlItem.AddPair('puncodigo', vlSkuTamanho);
    vlProCodigo := BuscaCodigoPROpunCodigo(vlSkuTamanho);
    vlItem.AddPair('procodigo', vlProCodigo.ToString);

    // definir impressora de destino do item
    vlGrpCodigo := BuscaCodigoGRPProCodigo(BuscaCodigoPROpunCodigo(vlSkuTamanho));
    vlTciCodigo := BuscaCodigoGRIGrpCodigo(vlGrpCodigo);
    vlItem.AddPair('tcicodigo', vlTciCodigo.ToString);

    vlItem.AddPair('itoinclusao', vlDataAbert + ' ' + vlHoraAbert);

    vlItem.AddPair('unicodigo', BuscaCodigoUNIpunCodigo(vlSkuTamanho).ToString);
    vlitoitem := BuscaItemITOorcchave(vlorcchave.ToString).ToString;
    vlItem.AddPair('itoitem', vlitoitem);
    a := vlListaItens[ii].getvalue('observations', '');
    vlItem.AddPair('itoobs', vlListaItens[ii].getvalue('observations', ''));
    vlItem.AddPair('itopercdescap', '0');
    vlItem.AddPair('itoproservico', '0');
    vlItem.AddPair('itoinfadprod', '');
    vlItem.AddPair('itoprocomple', '');
    vlItem.AddPair('vrpcodigo', '0');
    vlItem.AddPair('tdfcodigo', '00');
    vlItem.AddPair('pmpchave', '0');
    vlItem.AddPair('flacodigo', '1');
    vlItem.AddPair('itounidades', '0');
    vlItem.AddPair('oricodigo', '8');
    vlItem.AddPair('itocontendo', '1');
    vlItem.AddPair('tdecodigo', '00');
    vlItem.AddPair('stocodigo', '2');
    vlItem.AddPair('itovalorap', '0');
    vlItem.AddPair('pdscodigo', '1');
    vlItem.AddPair('itototalap', '0');
    vlItem.AddPair('itodescontoap', '0');
    vlItem.AddPair('itosaldoap', '0');
    vlItem.AddPair('itoacrescimoav', '0');

    a := vlItem.ToString;

    vlItoChave := ManutencaoITO(vlItem);
    if (vlorder_item_subitems = nil) or (vlSbrCodigo <> 0) then
    begin

    vlItemSabor := TJsonObject.Create;
    vlItemSabor.AddPair('sbichave', '0');
    vlItemSabor.AddPair('sbrcodigo', vlSbrCodigo.ToString);
    vlItemSabor.AddPair('itochave', vlItoChave.ToString);
    vlitoitem := BuscaItemITOorcchave(vlorcchave.ToString).ToString;
    vlItemSabor.AddPair('sbiitem', vlitoitem);

    vlSbiChave := ManutencaoSBI(vlItemSabor);
    vlItemSabor.Free;

    end
    else
    begin
    vlSbiChave := 0;
    end;

    vlItem.AddPair('itochave', vlItoChave.ToString);

    vlorder_mandatory_items := vlListaItens[ii].getvalue<TJsonarray>('order_mandatory_items');

    a := vlorder_mandatory_items.ToString;
    vlQtdorder_mandatory_items := vlorder_mandatory_items.Count;


    vlorder_additional_items := vlListaItens[ii].getvalue<TJsonarray>('order_additional_items');
    a := vlorder_additional_items.ToString;
    vlQtdorder_additional_items := vlorder_additional_items.Count;
    vladicionalborda := 0;

    vlBrdCodigo := BuscaCodigoBRGGrpCodigo(vlGrpCodigo);

    if (vlSbiChave = 0) and (vlBrdCodigo = 0) and ((vlQtdorder_additional_items > 0) or (vlQtdorder_mandatory_items > 0)) then
    begin

    vlSbicodigo := Inttostr(BuscaCodigoSBRProCodigo(vlProCodigo));

    if (vlSbicodigo = '') or (vlSbicodigo = '0') then
    begin
    vlSbicodigo := ManutencaoSBRIdentificacao(vlpronome, vlProCodigo.ToString, '').ToString;

    vlIngredientes := vlListaItens[ii].getvalue('description', '');

    while vlIngredientes <> '' do
    begin
    if pos(',', vlIngredientes) > 0 then
    begin
    vlIsaIdentificacao := trim(copy(vlIngredientes, 1, pos(',', vlIngredientes) - 1));
    vlIngredientes := trim(copy(vlIngredientes, pos(',', vlIngredientes) + 1, length(vlIngredientes)));

    end
    else if pos(' e ', vlIngredientes) > 0 then
    begin
    vlIsaIdentificacao := trim(copy(vlIngredientes, 1, pos(' e ', vlIngredientes) - 1));
    vlIngredientes := trim(copy(vlIngredientes, pos(' e ', vlIngredientes) + 1, length(vlIngredientes)));

    end
    else
    begin
    if vlIngredientes <> '' then
    begin
    vlIsaIdentificacao := trim(vlIngredientes);
    vlIngredientes := '';
    end;
    end;

    if vlIsaIdentificacao <> '' then
    begin
    ManutencaoISAAplicativo(vlGrpCodigo, vlSbicodigo.ToInteger, vlIsaIdentificacao, '0', 8);
    end;

    end;

    end;

    vlItemSabores := TJsonObject.Create;
    vlSkuSabor := vlSbicodigo;

    if vlSkuSabor = '' then
    vlSkuSabor := '0';

    vlItemSabores.AddPair('sbichave', '0');
    vlItemSabores.AddPair('sbrcodigo', vlSkuSabor);
    vlItemSabores.AddPair('itochave', vlItoChave.ToString);
    vlItemSabores.AddPair('sbiitem', vlitoitem);

    vlSbiChave := ManutencaoSBI(vlItemSabores);

    vlListaIngredientes := TJsonarray.Create;

    vlListaIngredientes := BuscaListaIngredientes(vlSkuSabor.ToInteger);
    if vlListaIngredientes <> nil then
    begin
    a := vlListaIngredientes.ToString;

    for iz := 0 to vlListaIngredientes.Count - 1 do
    begin

    vlItemAdicionais := TJsonObject.Create;
    vlItemAdicionais.AddPair('isichave', '0');
    vlItemAdicionais.AddPair('sbichave', vlSbiChave.ToString);
    vlItemAdicionais.AddPair('tsicodigo', '3');

    vlItemAdicionais.AddPair('procodigo', vlListaIngredientes[iz].getvalue('procodigo', ''));
    vlItemAdicionais.AddPair('isitipo', '0');
    vlItemAdicionais.AddPair('itochave', vlItoChave.ToString);
    vlItemAdicionais.AddPair('isiitem', vlitoitem); // BuscaItemISIItochave(vlItoChave.ToString).ToString);
    vlItemAdicionais.AddPair('isiquantidade', '1');
    vlItemAdicionais.AddPair('isiacrescimo', '0');
    ManutencaoISI(vlItemAdicionais);

    end;

    end;
    end;

    for im := 0 to vlQtdorder_mandatory_items - 1 do
    begin

    vlSbicodigo := vlorder_mandatory_items[im].getvalue('sku', '');

    if vlSbicodigo = '' then
    begin

    vlGrpIdentificacao := vlorder_mandatory_items[im].getvalue('group', '');
    vlIsaIdentificacao := vlorder_mandatory_items[im].getvalue('name', '');

    vlPronomeVariacao := vlorder_mandatory_items[im].getvalue('name', '');
    vlGrpIdentificacaoVariacao := vlorder_mandatory_items[im].getvalue('group', '');
    vlPunvalorVariacao := vlorder_mandatory_items[im].getvalue('value', '');

    vlPunvalorVariacao := StringReplace(vlPunvalorVariacao, '.', ',', []);

    vlIsaValor := vlorder_mandatory_items[im].getvalue('value', '');
    vlIsaValor := StringReplace(vlIsaValor, '.', ',', []);

    vlGrpCodigo := manutencaoGRPIdentificacao(vlGrpIdentificacao, vOrigem);

    vlSbicodigo := ManutencaoISAAplicativo(vlGrpCodigo, vlSbrCodigo, vlIsaIdentificacao, vlIsaValor, vOrigem).ToString;

    end;




    // itens obrigatorios

    vlProCodigoItemAdicional := BuscaCodigoPROIsaIdentificacao(vlIsaIdentificacao);
    vlItemAdicionaisObrigatorios := TJsonObject.Create;
    vlItemAdicionaisObrigatorios.AddPair('isichave', vlSbiChave.ToString);
    vlItemAdicionaisObrigatorios.AddPair('sbichave', vlSbicodigo);
    vlItemAdicionaisObrigatorios.AddPair('tsicodigo', '0');
    vlItemAdicionaisObrigatorios.AddPair('procodigo', vlProCodigoItemAdicional.ToString);
    vlItemAdicionaisObrigatorios.AddPair('isitipo', '0');
    vlItemAdicionaisObrigatorios.AddPair('itochave', vlItoChave.ToString);
    vlItemAdicionaisObrigatorios.AddPair('isiitem', '0');
    vlItemAdicionaisObrigatorios.AddPair('isiquantidade', '1');
    vlItemAdicionaisObrigatorios.AddPair('isiacrescimo', vlIsaValor);

    ManutencaoISI(vlItemAdicionaisObrigatorios);

    // buscar variacao ??
    vlUnicodigoVariacao := BuscaUNINome('UNIDADE', vOrigem);
    if vlUnicodigoVariacao = 0 then
    begin
    vlUnicodigoVariacao := ManutencaoUNINome('UNIDADE', vOrigem);
    end;

    vlProCodigoVariacao := BuscaCodigoPROProNome(vlPronomeVariacao);
    if vlProCodigoVariacao = 0 then
    begin
    vlProCodigoVariacao := ManutencaoPROAplicativo(vlPronomeVariacao, vlGrpCodigoVariacao, vlUnicodigoVariacao, 0, '');
    end;

    vlGrpCodigoVariacao := BuscaGRPNome(vlGrpIdentificacaoVariacao, vOrigem);
    if vlGrpCodigoVariacao = 0 then
    begin
    vlGrpCodigoVariacao := manutencaoGRPIdentificacao(vlGrpIdentificacaoVariacao, vOrigem);
    end;

    vlPunCodigoVariacao := BuscaCodigoPUNCodigo(vlProCodigoVariacao, vlUnicodigoVariacao);
    if vlPunCodigoVariacao = 0 then
    begin
    vlPunCodigoVariacao := ManutencaoPUNAplicativo(vlProCodigoVariacao, vlUnicodigoVariacao, vlPunvalorVariacao);
    end;

    vlbprchave := BuscaCodigoBRPNomeGrupoValor(vlProCodigo, vlPunCodigoVariacao, vlProCodigoVariacao);
    if vlbprchave = 0 then
    begin
    vlItemVariacoes := TJsonObject.Create;
    vlItemVariacoes.AddPair('bprchave', vlbprchave.ToString);
    vlItemVariacoes.AddPair('procodigo', vlProCodigo.ToString);
    vlItemVariacoes.AddPair('puncodigo', vlPunCodigoVariacao.ToString);
    vlItemVariacoes.AddPair('procodigoborda', vlProCodigoVariacao.ToString);
    vlItemVariacoes.AddPair('unicodigo', vlUnicodigoVariacao.ToString);

    ManutencaoBPR(vlItemVariacoes);

    end;

    vlCOdigoBordaVariacao := BuscaCodigoBRDIdentificacao(vlPronomeVariacao);

    if vlCOdigoBordaVariacao = 0 then
    begin
    vlCOdigoBordaVariacao := ManutencaoBRDAplicativo(vlPronomeVariacao, vlIsaValor, vOrigem);
    end;

    vlItemBordas := TJsonObject.Create;
    vlItemBordas.AddPair('brichave', '0');
    vlItemBordas.AddPair('brdcodigo', vlCOdigoBordaVariacao.ToString);
    vlItemBordas.AddPair('itochave', vlItoChave.ToString);

    vladicionalborda := vladicionalborda + StrToCurr(vlIsaValor);

    ManutencaoBRI(vlItemBordas);

    end;

    for ia := 0 to vlQtdorder_additional_items - 1 do
    begin

    if vlBrdCodigo = 0 then
    begin
    a := vlorder_additional_items.ToString;

    vlItemAdicionais := TJsonObject.Create;
    vlItemAdicionais.AddPair('isichave', '0');
    vlItemAdicionais.AddPair('sbichave', vlSbiChave.ToString);
    vlItemAdicionais.AddPair('tsicodigo', '3');
    a := vlorder_additional_items[ia].ToString;

    if vlorder_additional_items[ia].getvalue('sku', '') <> '' then
    begin
    vlItemAdicionais.AddPair('procodigo', vlorder_additional_items[ia].getvalue('sku', ''));
    end
    else
    begin
    vlSbrIdentificaca := vlorder_additional_items[ia].getvalue('name', '');

    vlSkuSabor := BuscaCodigoIngrediente(vlSbrIdentificaca, vlGrpCodigo).ToString;

    vlItemAdicionais.AddPair('procodigo', vlSkuSabor);
    end;
    vlItemAdicionais.AddPair('isitipo', '1');
    vlItemAdicionais.AddPair('itochave', vlItoChave.ToString);
    vlItemAdicionais.AddPair('isiitem', BuscaItemISIItochave(vlItoChave.ToString).ToString);
    vlItemAdicionais.AddPair('isiquantidade', '1');
    vlItemAdicionais.AddPair('isiacrescimo', StringReplace(vlorder_additional_items[ia].getvalue('value', ''), '.', ',', []));
    vlTotalAdicionais := vlTotalAdicionais + strtofloat(StringReplace(vlorder_additional_items[ia].getvalue('value', ''), '.', ',', []));
    ManutencaoISI(vlItemAdicionais);

    end
    else if vlBrdCodigo <> 0 then
    begin
    // bordas e adicionais

    vlItemBordas := TJsonObject.Create;
    a := vlorder_additional_items[ia].ToString;
    vlSkuBorda := vlorder_additional_items[ia].getvalue('sku', '');
    vlBrdIdentificacao := uppercase(vlorder_additional_items[ia].getvalue('name', ''));

    if vlSkuBorda = '' then
    begin
    vlSkuBorda := ManutencaoBRDAplicativo(vlBrdIdentificacao, CurrToStr(vladicionalborda), vOrigem).ToString;
    end;

    if pos('_', vlSkuBorda) > 0 then
    vlSkuBorda := copy(vlSkuBorda, pos('_', vlSkuBorda) + 1);

    vlItemBordas.AddPair('brichave', '0');
    vlItemBordas.AddPair('brdcodigo', vlSkuBorda);
    vlItemBordas.AddPair('itochave', vlItoChave.ToString);
    vlValorborda := vlorder_additional_items[ia].getvalue('value', '');

    vladicionalborda := vladicionalborda + StrToCurr(vlValorborda);

    ManutencaoBRI(vlItemBordas);

    end;
    end;

    vlItem.RemovePair('itochave');
    vlItem.AddPair('itochave', vlItoChave.ToString);
    vlItem.RemovePair('itoacrescimoav');

    vlItem.AddPair('itoacrescimoav', CurrToStr(vladicionalborda + (strtofloat(vlitoquantidade) * vlTotalAdicionais)));

    vlItoChave := ManutencaoITO(vlItem);



    vlorder_item_subitems := vlListaItens[ii].getvalue<TJsonarray>('order_item_subitems');
    a := vlorder_item_subitems.ToString;

    vlQtdorder_item_subitems := vlorder_item_subitems.Count;

    for ia := 0 to vlQtdorder_item_subitems - 1 do
    begin

    // sabores

    vlItemSabores := TJsonObject.Create;
    vlItemSabores.AddPair('sbichave', '0');
    vlSkuSabor := vlorder_item_subitems[ia].getvalue('sku', '');
    if vlSkuSabor = '' then
    vlSkuSabor := '0';

    if pos('_', vlSkuSabor) > 0 then
    vlSkuSabor := copy(vlSkuSabor, pos('_', vlSkuSabor) + 1);

    if (vlSkuSabor = '0') or (vlSkuSabor = '') then
    begin

    vlSbrIdentificaca := vlorder_item_subitems[ia].getvalue('name', '');

    vlSkuSabor := BuscaSBRIdentificacao(vlSbrIdentificaca, '', vlGrpCodigo.ToString).ToString;

    end;

    if (vlSkuSabor = '0') or (vlSkuSabor = '') then
    begin

    if vlSfnCodigo = 0 then
    begin
    vlSkuSabor := ManutencaoSBRIdentificacao(uppercase(vlSbrIdentificaca), vlProCodigo.ToString, '').ToString;

    end
    else
    begin
    vlSkuSabor := ManutencaoSBRIdentificacao(uppercase(vlSbrIdentificaca), '', vlGrpCodigo.ToString).ToString;

    vlIngredientes := vlorder_item_subitems[ia].getvalue('description', '');

    while vlIngredientes <> '' do
    begin
    if pos(',', vlIngredientes) > 0 then
    begin
    vlIsaIdentificacao := trim(copy(vlIngredientes, 1, pos(',', vlIngredientes) - 1));
    vlIngredientes := trim(copy(vlIngredientes, pos(',', vlIngredientes) + 1, length(vlIngredientes)));

    end
    else if pos(' e ', vlIngredientes) > 0 then
    begin
    vlIsaIdentificacao := trim(copy(vlIngredientes, 1, pos(' e ', vlIngredientes) - 1));
    vlIngredientes := trim(copy(vlIngredientes, pos(' e ', vlIngredientes) + 1, length(vlIngredientes)));

    end
    else
    begin
    if vlIngredientes <> '' then
    begin
    vlIsaIdentificacao := trim(vlIngredientes);
    vlIngredientes := '';
    end;
    end;

    if vlIsaIdentificacao <> '' then
    begin
    ManutencaoISAAplicativo(vlGrpCodigo, vlSkuSabor.ToInteger, vlIsaIdentificacao, '0', 8);
    end;

    end;

    end;

    end;

    vlItemSabores.AddPair('sbrcodigo', vlSkuSabor);

    vlItemSabores.AddPair('itochave', vlItoChave.ToString);
    vlItemSabores.AddPair('sbiitem', Inttostr(BuscaItemSBIitochave(vlItoChave.ToString)));

    vlSbiChave := ManutencaoSBI(vlItemSabores);

    vlListaIngredientes := TJsonarray.Create;

    vlListaIngredientes := BuscaListaIngredientes(vlSkuSabor.ToInteger);
    a := vlListaIngredientes.ToString;

    for iz := 0 to vlListaIngredientes.Count - 1 do
    begin

    vlItemAdicionais := TJsonObject.Create;
    vlItemAdicionais.AddPair('isichave', '0');
    vlItemAdicionais.AddPair('sbichave', vlSbiChave.ToString);
    vlItemAdicionais.AddPair('tsicodigo', '3');

    vlItemAdicionais.AddPair('procodigo', vlListaIngredientes[iz].getvalue('procodigo', ''));
    vlItemAdicionais.AddPair('isitipo', '0');
    vlItemAdicionais.AddPair('itochave', vlItoChave.ToString);
    vlItemAdicionais.AddPair('isiitem', BuscaItemISIItochave(vlItoChave.ToString).ToString);
    vlItemAdicionais.AddPair('isiquantidade', '1');
    vlItemAdicionais.AddPair('isiacrescimo', '0');
    ManutencaoISI(vlItemAdicionais);

    end;

    end;

    vlItens.Add(vlItem);

    end;
  }

end;

procedure V1Insert(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  // FDAO: iDAOGeneric<TPEDIDOAIQ>;
  vJSonCardapio: TJsonObject;
  vJSONObject: TJsonObject;

  vJSONGrupos: TJsonarray;
  vlJsonCardapio: string;
  vlJsonChave: string;

begin
  // FDAO := TDAOGeneric<TPEDIDOAIQ>.New;

  vJSONObject := TJsonObject.ParseJSONValue(TEncoding.ASCII.GetBytes(Req.Body), 0) as TJsonObject;
  vJSonCardapio := vJSONObject.getvalue<TJsonObject>('data');

  vJSONGrupos := vJSonCardapio.getvalue<TJsonarray>('Grupos');

  vlJsonCardapio := vJSONGrupos.ToString;

  if vlJsonCardapio <> '' then
  begin
    ImportaCardapioMizio(vJSonCardapio);
  end;

end;

end.
