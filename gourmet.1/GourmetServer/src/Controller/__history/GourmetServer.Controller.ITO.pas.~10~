unit GourmetServer.Controller.ITO;

interface

Uses
  Horse,

  FireDAC.Phys.MySQLDef,
  FireDAC.Phys.MySQL,
  FireDAC.Phys.Intf,
  FireDAC.Phys,
  FireDAC.UI.Intf,
  FireDAC.ConsoleUI.Wait,
  Data.DB,
  FireDAC.Comp.Client,
  FireDAC.Comp.DataSet,
  Service.Connection,

  DataSetConverter4D,
  DataSetConverter4D.Impl,


  System.Json,
  System.SysUtils,
  idHashMessageDigest,
  GourmetServer.Model.DAOGeneric,
  GourmetServer.Model.Entity.ITO;

Function v1ManutencaoITO(vItem: TJsonObject): Integer;
Function v1BuscaItemITOorcchave(vOrcChave: String): Integer;

type
  TAPIError = class
  private
    Ferror: string;
  public
    property error: string read Ferror write Ferror;
  end;

implementation

Function v1BuscaItemITOorcchave(vOrcChave: String): Integer;
var
  conexao:TFDconnection;
  ito:TFDQuery;

  vlitoitem:integer;

begin

  vlitoitem:=0;
  conexao:=TFDconnection.Create(nil);
  if AtivaConexao(conexao)<>nil then
  begin

    ito:=TFDQuery.Create(nil);
    ito.Connection:=Conexao;
    ito.sql.Text:='select itoitem '+
                  'from ito '+
                  'where orcchave=' + vOrcChave + ' order by itoitem desc limit 1';
    ito.open;

    vlitoitem:=ito.FieldByName('itoitem').asInteger+1;

    ito.close;

    if ito<>nil then
      ito.DisposeOf;

  end;

  if conexao<>nil then
    conexao.DisposeOf;

  result :=vlitoitem;

end;

Function v1ManutencaoITO(vItem: TJsonObject): Integer;
var
  conexao:TFDconnection;
  ito:TFDQuery;

  vlitoitem:integer;

begin

  vlitoitem:=0;
  conexao:=TFDconnection.Create(nil);
  if AtivaConexao(conexao)<>nil then
  begin

    ito:=TFDQuery.Create(nil);
    ito.Connection:=Conexao;
    ito.sql.Text:='select '+
                  'itochave, orcchave, flacodigo, procodigo, itoquantidade, itovalorav, '+
                  'itototalav, itodescontoav, itosaldoav, itovalorap, itototalap, itodescontoap, '+
                  'itooutras, itosaldoap, unicodigo, puncodigo, itocontendo, tdecodigo, stocodigo, '+
                  'itoitem, itopercdescav, itopercdescap, itoproservico, itoinfadprod, itoprocomple, '+
                  'tdfcodigo, flacodigo, pmpchave, itoobs, itounidades, itoacrescimoav, clbatendente, '+
                  'oricodigo '+
                  'from ito limit 0';

    ito.Open;

    TConverter.New.JSON(vItem).ToRecord(ito);

    vlitoitem:=ito.FieldByName('itochave').AsInteger;

    ito.close;

    if ito<>nil then
      ito.DisposeOf;

  end;

  if conexao<>nil then
    conexao.DisposeOf;

  result := vlitoitem;

end;

end.
