unit GourmetServer.Controller.ISA;

interface

Uses
  System.Json,
  System.SysUtils,
  GourmetServer.Model.DAOGeneric,
  GourmetServer.Controller.UNI,
  GourmetServer.Controller.PRO,
  GourmetServer.Controller.PUN,
  GourmetServer.Model.Entity.ISA;

Function ManutencaoISAAplicativo(vGrpCodigo: Integer; vSbrCodigo: Integer; vIsaIdentificacao: String; vValor: string): Integer;

Function ManutencaoISA(vIngrediente: TJsonObject): Integer;

function BuscaChaveISA(vSbrCodigo: Integer; vProCodigo: Integer): Integer;

type
  TAPIError = class
  private
    Ferror: string;
  public
    property error: string read Ferror write Ferror;
  end;

implementation

function BuscaChaveISA(vSbrCodigo: Integer; vProCodigo: Integer): Integer;
var
  FDAO: iDAOGeneric<TISA>;
  vlIsaChave: Integer;
begin

  vlIsaChave := 0;

  FDAO := TDAOGeneric<TISA>.New;

  FDAO.DAO.SQL.where('sbrcodigo=' + vSbrCodigo.ToString + ' and procodigo=' + vProCodigo.ToString).&End.Find;

  vlIsaChave := FDAO.DataSet.FieldByName('isachave').asInteger;

  result := vlIsaChave;
end;

Function ManutencaoISAAplicativo(vGrpCodigo: Integer; vSbrCodigo: Integer; vIsaIdentificacao: String; vValor: string): Integer;
var
  vlIsaChave: Integer;
  vlIsa: TJsonObject;
  vlProCodigo: Integer;
  vLUniCodigo: Integer;
begin
  vlProCodigo := BuscaCodigoPROIsaIdentificacao(vIsaIdentificacao);

  vlIsaChave := BuscaChaveISA(vSbrCodigo, vlProCodigo);

  if vlIsaChave = 0 then
  begin

    if vlProCodigo = 0 then
    begin
      vLUniCodigo := BuscaUNINome('UNIDADE');

      vlProCodigo := ManutencaoPROAplicativo(vIsaIdentificacao, vGrpCodigo, vLUniCodigo, 1, '');

      ManutencaoPUNAplicativo(vlProCodigo, vLUniCodigo, vValor);

    end;

    vlIsa := TJsonObject.create;
    vlIsa.AddPair('isachave', '0');
    vlIsa.AddPair('sbrcodigo', vSbrCodigo.ToString);
    vlIsa.AddPair('procodigo', vlProCodigo.ToString);
    vlIsa.AddPair('isaquantidade', '0');
    vlIsa.AddPair('senadicionavel', '0');
    vlIsa.AddPair('isaprincipal', '0');
    vlIsa.AddPair('stgcodigo', '1');
    vlIsa.AddPair('sipcodigo', '1');

    vlIsaChave := ManutencaoISA(vlIsa);

  end;
  result := vlIsaChave;

end;

Function ManutencaoISA(vIngrediente: TJsonObject): Integer;
var
  FDAO: GourmetServer.Model.DAOGeneric.iDAOGeneric<TISA>;
  FISA: TISA;
  vlIsaChave: Integer;
begin
  FDAO := TDAOGeneric<TISA>.New;
  vlIsaChave := 0;

  FISA := TISA.create;

  FISA.isachave := vIngrediente.getvalue('isachave', '').ToInteger;
  FISA.sbrcodigo := vIngrediente.getvalue('sbrcodigo', '').ToInteger;
  FISA.procodigo := vIngrediente.getvalue('procodigo', '').ToInteger;
  FISA.isaquantidade := StrtoCurr(vIngrediente.getvalue('isaquantidade', ''));
  FISA.senadicionavel := vIngrediente.getvalue('senadicionavel', '').ToInteger;
  FISA.isaprincipal := vIngrediente.getvalue('isaprincipal', '').ToInteger;
  FISA.stgcodigo := vIngrediente.getvalue('stgcodigo', '').ToInteger;
  FISA.sipcodigo := vIngrediente.getvalue('sipcodigo', '').ToInteger;

  if vlIsaChave = 0 then
  // incluir novo
  begin
    FISA.isachave := 0;
    FDAO.DAO.Insert(FISA);
    FDAO.DAO.LastID;
    vlIsaChave := FDAO.DataSet.FieldByName('isachave').asInteger;
  end
  else
  // alterar se ja existe
  begin
    FISA.isachave := vlIsaChave;
    FDAO.DAO.Update(FISA);
  end;
  result := vlIsaChave;

end;

end.
