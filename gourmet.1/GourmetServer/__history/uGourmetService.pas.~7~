unit uGourmetService;

interface

uses
  NTServiceThread,
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.SvcMgr,
  registry,
  Vcl.Dialogs;

type
  TGourmetIntetrationService = class(TService)
    procedure ServiceAfterInstall(Sender: TService);
    procedure ServiceContinue(Sender: TService; var Continued: Boolean);
    procedure ServiceExecute(Sender: TService);
    procedure ServicePause(Sender: TService; var Paused: Boolean);
    procedure ServiceShutdown(Sender: TService);
    procedure ServiceStart(Sender: TService; var Started: Boolean);
  private
    { Private declarations }
    fServicePri: Integer;
    fThreadPri: Integer;

    { Internal Start & Stop methods }
    function _StartThread(ThreadPri: Integer): Boolean;
    function _StopThread: Boolean;

  public
    { Public declarations }
    NTServiceThread: TNTServiceThread;
    function GetServiceController: TServiceController; override;
  end;

var
  GourmetIntetrationService: TGourmetIntetrationService;

implementation

{$R *.dfm}

procedure ServiceController(CtrlCode: DWord); stdcall;
begin
  GourmetIntetrationService.Controller(CtrlCode);
end;

function TGourmetIntetrationService.GetServiceController: TServiceController;
begin
  Result := ServiceController;
end;

procedure TGourmetIntetrationService.ServiceAfterInstall(Sender: TService);
var
  Reg: TRegistry;
begin
  Reg := TRegistry.Create(KEY_READ or KEY_WRITE);

  try
    Reg.RootKey := HKEY_LOCAL_MACHINE;
    if Reg.OpenKey('\SYSTEM\CurrentControlSet\Services\' + Name, false) then
    begin
      Reg.WriteString('Description', 'Gourmet - Servidor de integrações.');
      Reg.CloseKey;
    end;
  finally
    Reg.Free;
  end;

end;

procedure TGourmetIntetrationService.ServiceContinue(Sender: TService; var Continued: Boolean);
begin
  { Attempt to RESUME the thread }
  if Assigned(NTServiceThread) and (NTServiceThread.Suspended) then
  begin
    { Suspend the thread }
    if NTServiceThread.Suspended then
      NTServiceThread.Resume;
    { Return results }
    Continued := (NTServiceThread.Suspended = false);
  end
  else
    Continued := false;

end;

procedure TGourmetIntetrationService.ServiceExecute(Sender: TService);
begin
  { Loop while service is active in SCM }
  while not Terminated do
  begin
    { Process Service Requests }
    ServiceThread.ProcessRequests(false);
    { Allow system some time }
    Sleep(1);
  end;
end;

procedure TGourmetIntetrationService.ServicePause(Sender: TService; var Paused: Boolean);
begin
  { Attempt to PAUSE the thread }
  if Assigned(NTServiceThread) and (not NTServiceThread.Suspended) then
  begin
    { Suspend the thread }
    NTServiceThread.Suspend;
    { Return results }
    Paused := (NTServiceThread.Suspended = True);
  end
  else
    Paused := false;

end;

procedure TGourmetIntetrationService.ServiceShutdown(Sender: TService);
begin
  { Attempt to STOP (Terminate) the thread }
  _StopThread;

end;

procedure TGourmetIntetrationService.ServiceStart(Sender: TService; var Started: Boolean);
begin
  { Default Values }
  Started := false;
  fServicePri := NORMAL_PRIORITY_CLASS;
  fThreadPri := Integer(tpLower);

  { Set the Service Priority }
  case fServicePri of
    0:
      SetPriorityClass(GetCurrentProcess, IDLE_PRIORITY_CLASS);
    1:
      SetPriorityClass(GetCurrentProcess, NORMAL_PRIORITY_CLASS);
    2:
      SetPriorityClass(GetCurrentProcess, HIGH_PRIORITY_CLASS);
    3:
      SetPriorityClass(GetCurrentProcess, REALTIME_PRIORITY_CLASS);
  end;

  if _StartThread(fThreadPri) then
  begin
    Started := True;
  end
  else
  begin
    Started := false;
    _StopThread;
  end;

end;

function TGourmetIntetrationService._StartThread(ThreadPri: Integer): Boolean;
begin
  { Default result }
  Result := false;
  { Create Thread and Set Default Values }
  if not Assigned(NTServiceThread) then
    try
      { Create the Thread object }
      NTServiceThread := TNTServiceThread.Create(True);
      { Set the Thread Priority }
      case ThreadPri of
        0:
          NTServiceThread.Priority := tpIdle;
        1:
          NTServiceThread.Priority := tpLowest;
        2:
          NTServiceThread.Priority := tpLower;
        3:
          NTServiceThread.Priority := tpNormal;
        4:
          NTServiceThread.Priority := tpHigher;
        5:
          NTServiceThread.Priority := tpHighest;
      end;
      { Set the Execution Interval of the Thread }
      NTServiceThread.Interval := 2;

      { Start the Thread }
      NTServiceThread.Resume;
      { Return success }
      if not NTServiceThread.Suspended then
        Result := True;
    except
      on E: Exception do; // TODO: Exception Logging
    end;
end;

function TGourmetIntetrationService._StopThread: Boolean;
begin
  { Default result }
  Result := false;
  { Stop and Free Thread }
  if Assigned(NTServiceThread) then
    try
      { Terminate thread }
      NTServiceThread.Terminate;
      { If it is suspended - Restart it }
      if NTServiceThread.Suspended then
        NTServiceThread.Resume;
      { Wait for it to finish }
      NTServiceThread.WaitFor;
      { Free & NIL it }
      NTServiceThread.Free;
      NTServiceThread := nil;
      { Return results }
      Result := True;
    except
      on E: Exception do; // TODO: Exception Logging
    end
  else
  begin
    { Return success - Nothing was ever started ! }
    Result := True;
  end;
end;

end.
