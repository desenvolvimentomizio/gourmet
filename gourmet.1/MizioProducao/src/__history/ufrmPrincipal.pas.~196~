unit ufrmPrincipal;

interface

uses
  inifiles,
  System.SysUtils,
  System.Types,
  System.UITypes,
  System.Classes,
  System.Variants,
  System.JSON,
  FMX.DialogService,
  FMX.Types,
  FMX.Controls,
  FMX.Forms,
  FMX.Graphics,
  FMX.Dialogs,
  FMX.TabControl,
  FMX.StdCtrls,
  FMX.Controls.Presentation,
  FMX.Objects,
  FMX.Layouts,
  FMX.ListView.Types,
  FMX.ListView.Appearances,
  FMX.ListView.Adapters.Base,
  FMX.ListView, FMX.Ani;

type
  TFrmPrincipal = class(TForm)
    LytGeral: TLayout;
    LytListas: TLayout;
    LyTopo: TLayout;
    RctFundoTopo: TRectangle;
    LyTitulo: TLayout;
    ImLogo: TImage;
    LyRelagio: TLayout;
    lbRelogio: TLabel;
    btConfiguracao: TButton;
    LySelecionarSetor: TLayout;
    lbSelecionarSetor: TLabel;
    SpeedButton1: TSpeedButton;
    sbSelecionarSetor: TSpeedButton;
    RcMensagem: TRectangle;
    lbSelecionarPedidos: TLabel;
    TbListas: TTabControl;
    TIPedidos: TTabItem;
    TIColaboradores: TTabItem;
    TISetores: TTabItem;
    LyColaboradores: TLayout;
    Rectangle8: TRectangle;
    LyListaColaboradores: TLayout;
    LvClb: TListView;
    RctTituloColaboradores: TRectangle;
    lbTituloColaboradores: TLabel;
    LyBotoesColaboradores: TLayout;
    RcBotoesColaboradores: TRectangle;
    RctConfirmaColaboradores: TRectangle;
    LbConfirmaColaboradores: TLabel;
    sbConfirmaColaboradores: TSpeedButton;
    RcCancelaColaboradores: TRectangle;
    SBCancelaColaboradores: TSpeedButton;
    LbCancelaColaboradores: TLabel;
    LyPedidos: TLayout;
    LyListaPedidos: TLayout;
    LvPedidos: TListView;
    LytRodaPe: TLayout;
    LytSelecionarColaborador: TLayout;
    RctSelecionarColaborador: TRectangle;
    LbSelecionarColaborador: TLabel;
    sbSelecionarColaborador: TSpeedButton;
    LytResumo: TLayout;
    LytResumoColaboradores: TLayout;
    LvPosicao: TListView;
    RcTituloColunas: TRectangle;
    LbTituloColunaColaborador: TLabel;
    LbTituloColunaProducao: TLabel;
    LytResumoTempos: TLayout;
    RctQuantidadeProduzida: TRectangle;
    LblQuantidadeProduzida: TLabel;
    RctMenorTempo: TRectangle;
    LblMenorTempo: TLabel;
    RctMaiorTempo: TRectangle;
    LblMaiorTempo: TLabel;
    RctTempoMedio: TRectangle;
    LblRctTempoMedio: TLabel;
    img_check: TImage;
    img_uncheck: TImage;
    LyListaSetores: TLayout;
    VSSetores: TVertScrollBox;
    RctTituloSetores: TRectangle;
    lbTituloSetores: TLabel;
    LvSep: TListView;
    LyBotoesSetores: TLayout;
    RcBotoesSetores: TRectangle;
    RcCobfirmaSetores: TRectangle;
    sbConfirmaSetor: TSpeedButton;
    LbConfirmaSetor: TLabel;
    RcCancelaSetores: TRectangle;
    spCancelarSetores: TSpeedButton;
    lbCancelaSetores: TLabel;
    TimerCarregaListaPedidos: TTimer;
    blVersao: TLabel;

    procedure sbSelecionarSetorClick(Sender: TObject);
    procedure TbListasChange(Sender: TObject);
    procedure TimerCarregaListaPedidosTimer(Sender: TObject);
    procedure spCancelarSetoresClick(Sender: TObject);
    procedure sbConfirmaSetorClick(Sender: TObject);
    procedure SBCancelaColaboradoresClick(Sender: TObject);
    procedure sbConfirmaColaboradoresClick(Sender: TObject);
    procedure sbSelecionarColaboradorClick(Sender: TObject);
    procedure btConfiguracaoClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure LvSepItemClick(const Sender: TObject; const AItem: TListViewItem);
    procedure LvClbItemClick(const Sender: TObject; const AItem: TListViewItem);
    procedure LvPedidosItemClick(const Sender: TObject;  const AItem: TListViewItem);
  private
    { Private declarations }


    FDialogoipServidorREST:Boolean;

    FContaVerificar: integer;
    FQtdMarcados: integer;
    FImpressora: integer;


    FLarguraLista: integer;
    FSegundos: integer;
    FTotalSegundos: integer;


    FSetorSelecionado: integer;
    procedure AtualizaEstatisticas;
    procedure AddPosicaoProdutividade(aCodigo, aNomeProdutor, aQuantidadeProduzida, aPontuacao: string);
    procedure AoCriarFormularioPrincipal;
    procedure AjustaIPServidorREST;
    procedure LoadStyle;

    procedure CarregaListaSetores;
    procedure CarregaListaColaboradores;
    procedure CarregaListaPedidos;
    procedure CarregaProdutividade;
    procedure CarregaProdutores;
    procedure CarregaListaProdutores;

    function AjustaMaiorTempo(aTempo: string): String;
    function AjustaMenorTempo(aTempo: string): String;
    function AjustaTempoMedio(aTempo: string; aQuantidade: Integer): String;
    function registraProducao:TJsonArray;



  public
    { Public declarations }
    FIPServidorREST: string;


    vpQuantidade:Integer;
    vpMaiorTempo:String;
    vpMenorTempo:String;
    vpTempoMedio:String;

    vpCodigoSetor:String;
    vpNomeSetor:String;
    vpMaximoColaboradores:String;

  end;

var
  FrmPrincipal: TFrmPrincipal;

implementation

uses
  MizioUP.Services.conexao,
  MizioUP.Services.estilo,
  MizioUP.Views.uListviewsetor,
  MizioUP.Views.uListviewcolaborador,
  MizioUP.Views.uListviewpedido,
  MizioUP.Views.uListviewprodutor,
  MizioUP.Views.notificacao,
  MizioUP.Controllers.statusconexao,
  MizioUP.Controllers.setor,
  MizioUP.Controllers.colaborador,
  MizioUP.Controllers.pedido,
  MizioUP.Controllers.produtividade,
  MizioUP.Controllers.produtor,
  MizioUP.Controllers.producao;

{$R *.fmx}

function TFrmPrincipal.registraProducao:TJsonArray;
var
  i:integer;
  vlPessoas:Integer;
  vlNumero:String;
  vlNumeroPedido:Integer;
  vlNumeroItem:Integer;

  vlColaboradores: TJsonArray;

  vlProducao: TJsonArray;

  vlClbCodigo:String;
  vlColaborador: TJSONValue;
begin
  try

    try

      vlPessoas:=TListviewColaborador.SelectedCount(LvClb);

      vlNumero:=TListviewPedido.SelectedItem(LvPedidos);
      vlNumeroPedido:=StrToInt(trim(copy(vlNumero,1,pos('_',vlNumero)-1)));

      vlNumeroItem:=StrToInt(Trim(copy(vlNumero,pos('_',vlNumero)+1,200)));

      vlColaboradores:= TJsonArray.Create;
      vlColaboradores:=TListviewColaborador.selectedItens(LvClb,vlColaboradores);

      vlProducao:= TJsonArray.Create;

      for I := 0 to vlColaboradores.Count-1 do
      begin

        vlColaborador := vlColaboradores.Items[i].GetValue('clbcodigo', vlColaborador);
        vlClbCodigo:=vlColaborador.Value;

        vlProducao.Add(TJSONObject.Create
                                    .AddPair('chave','' )
                                    .AddPair('codigo',vlClbCodigo )
                                    .AddPair('item',vlNumeroPedido.ToString )
                                    .AddPair('chaveimm',vlNumeroItem.ToString )
                                    .AddPair('pessoas',vlColaboradores.Count.ToString ));
      end;

      Result := vlProducao;

    except
    on E: Exception do
        ShowMessage('Erro: ' + E.Message );
    end;

  finally

    if vlColaboradores<>nil then
      vlColaboradores.Free;

  end;

end;

procedure TFrmPrincipal.CarregaListaProdutores;
var
 JAProdutores:TJsonArray;
 JAProdutor:TJSonValue;
 i:Integer;
begin

  if StatusConexao(FIPServidorREST)<>200 then
  begin
    TLoading
        .ToastMessage(FrmPrincipal,'Falha de conexão com servidor em '+FIPServidorREST,
        TAlignLayout.top,
        TAlphaColors.Red,
        TAlphaColors.Yellow,
        3);
    exit;
  end;


  try

    for i := LvPosicao.ItemCount - 1 downto 0 do
    begin

      try
        LvPosicao.Items.Delete(i);
      except
      end;
    end;

    try

      JAProdutores:=CarregarProdutor(FIPServidorREST, vpCodigoSetor);

      if JAProdutores<>nil then
      begin

        for I := 0 to JAProdutores.Count-1 do
        begin
           JAProdutor:=JAProdutores.Items[i];

           TListviewProdutor.AddItem(LvPosicao,
                                    JAProdutor.GetValue('codigo',0),
                                    JAProdutor.GetValue('quantidade',''),
                                    JAProdutor.GetValue('pontos',''),
                                    JAProdutor.GetValue('produtor','')
                                    );
        end;

      end;

    except
    on E: Exception do
        ShowMessage('Erro: ' + E.Message );
    end;

  finally
   if JAProdutores<>NIL then
     JAProdutores.Free;
  end;

end;



procedure TFrmPrincipal.CarregaListaColaboradores;
var
 JAColaboradores:TJsonArray;
 JAColaborador:TJSonValue;
 i:Integer;
begin

  if StatusConexao(FIPServidorREST)<>200 then
  begin
    TLoading
        .ToastMessage(FrmPrincipal,'Falha de conexão com servidor em '+FIPServidorREST,
        TAlignLayout.Bottom,
        TAlphaColors.Red,
        TAlphaColors.Yellow,
        3);
    exit;

  end;


  try

    for i := LvClb.ItemCount - 1 downto 0 do
    begin

      try
        LvClb.Items.Delete(i);
      except
      end;
    end;

    try

      JAColaboradores:=CarregarColaboradores(FIPServidorREST);

      if JAColaboradores<>nil then
      begin

        for I := 0 to JAColaboradores.Count-1 do
        begin
           JAColaborador:=JAColaboradores.Items[i];

           TListviewColaborador.AddItem(LvClb,
                                  JAColaborador.GetValue('clbcodigo',''),
                                  JAColaborador.GetValue('clbidentificacao',''),
                                  img_uncheck.Bitmap);
        end;

      end;
    except
            on E: Exception do
              ShowMessage('Erro: ' + E.Message );
    end;

  finally
   if JAColaboradores<>NIL then
     JAColaboradores.Free;
  end;

end;




procedure TFrmPrincipal.CarregaListaPedidos;
var
 JAPedidos:TJsonArray;
 JAPedido:TJSonValue;
 i:Integer;
 aChave:String;
 aItem:String;

begin

  if StatusConexao(FIPServidorREST)<>200 then
  begin
    TLoading
        .ToastMessage(FrmPrincipal,'Falha de conexão com servidor em '+FIPServidorREST,
        TAlignLayout.Bottom,
        TAlphaColors.Red,
        TAlphaColors.Yellow,
        3);
    exit;
  end;


  try

    for i := LvPedidos.ItemCount - 1 downto 0 do
    begin

      try
        LvPedidos.Items.Delete(i);
      except
      end;
    end;

    if vpCodigoSetor='' then
      vpCodigoSetor:='0';

    try

      JAPedidos:=CarregarPedidos(FIPServidorREST, vpCodigoSetor);

      if JAPedidos<>nil then
      begin

        for I := 0 to JAPedidos.Count-1 do
        begin

          JAPedido:=JAPedidos.Items[i];

          aChave:=JAPedido.GetValue('chave','');
          aChave:=StringReplace(aChave,'"','',[rfReplaceAll, rfIgnoreCase]);

          aItem:=JAPedido.GetValue('item','');
          aItem:=StringReplace(aItem,'"','',[rfReplaceAll, rfIgnoreCase]);


          TListviewPedido.AddItem(LvPedidos,
                                  aChave,
                                  JAPedido.GetValue('identificacao',''),
                                  JAPedido.GetValue('pedido',''),
                                  JAPedido.GetValue('tempo',''),
                                  aItem,
                                  JAPedido.GetValue('destino',''),
                                  img_uncheck.Bitmap,
                                  JAPedido.GetValue('maximo',''));

        end;

      end;

    except
      on E: Exception do
        ShowMessage('Erro: ' + E.Message );
    end;

  finally
   if JAPedidos<>NIL then
     JAPedidos.Free;
  end;


end;

procedure TFrmPrincipal.CarregaListaSetores;
var
 JASetores:TJsonArray;
 JASetor:TJSonValue;
 i:Integer;
begin

  if StatusConexao(FIPServidorREST)<>200 then
  begin
    TLoading
        .ToastMessage(FrmPrincipal,'Falha de conexão com servidor em '+FIPServidorREST,
        TAlignLayout.Bottom,
        TAlphaColors.Red,
        TAlphaColors.Yellow,
        3);
    exit;
  end;

  try

    for i := LvSep.ItemCount - 1 downto 0 do
    begin

      try
        LvSep.Items.Delete(i);
      except
      end;

    end;

    try

      JASetores:=CarregarSetores(FIPServidorREST);

      if JASetores<>nil then
      begin

        TListviewSetor.AddItem(LvSep,'0','TODOS SETORES',img_uncheck.Bitmap);

        for I := 0 to JASetores.Count-1 do
        begin
           JASetor:=JASetores.Items[i];

           TListviewSetor.AddItem(LvSep,
                                  JASetor.GetValue('sepcodigo',''),
                                  JASetor.GetValue('sepidentificacao',''),
                                  img_uncheck.Bitmap);
        end;

      end;

    except
      on E: Exception do
        ShowMessage('Erro: ' + E.Message );
    end;
  finally
   if JASetores<>NIL then
     JASetores.Free;
  end;

end;


function TFrmPrincipal.AjustaMenorTempo(aTempo:string):String;
begin
  if vpMenorTempo<>'' then
  begin
    try
      if StrToTime('0'+aTempo+':00')<
         StrToTime('0'+vpMenorTempo+':00') then
      begin
        vpMenorTempo:='0'+aTempo;
      end;
    except
        vpMenorTempo:='0'+aTempo;
      end;
  end
  else
    vpMenorTempo:='0'+aTempo;

  Result:=vpMenorTempo;
end;


function TFrmPrincipal.AjustaMaiorTempo(aTempo:string):String;
begin
  if vpMaiorTempo<>'' then
  begin
    try
      if StrToTime('0'+aTempo+':00')>
         StrToTime('0'+vpMaiorTempo+':00') then
      begin
        vpMaiorTempo:='0'+aTempo;
      end;
    except
        vpMaiorTempo:='0'+aTempo;
      end;
  end
  else
    vpMaiorTempo:='0'+aTempo;

  Result:=vpMaiorTempo;

end;

function TFrmPrincipal.AjustaTempoMedio(aTempo:string; aQuantidade:Integer):String;
begin
  if vpTempoMedio<>'' then
  begin
    try
      if StrToTime(aTempo+':00')>
         StrToTime(vpMaiorTempo+':00') then
      begin
        vpMaiorTempo:=aTempo;
      end;
    except
        vpMaiorTempo:=aTempo;
      end;
  end
  else
    vpMaiorTempo:=aTempo;

end;

procedure TFrmPrincipal.CarregaProdutividade;
var
 JAProdutividades:TJsonArray;
 JAProdutividade:TJSonValue;
 i:Integer;
 vlTempoMedio:TDateTime;
 vlTempo:String;
 vlHora:TDateTime;

begin

  if StatusConexao(FIPServidorREST)<>200 then
  begin
    TLoading
        .ToastMessage(FrmPrincipal,'Falha de conexão com servidor em '+FIPServidorREST,
        TAlignLayout.Bottom,
        TAlphaColors.Red,
        TAlphaColors.Yellow,
        3);
    exit;
  end;


  try
    try
    JAProdutividades:=CarregarProdutividade(FIPServidorREST, vpCodigoSetor);
    vpQuantidade:=0;

    if JAProdutividades<>nil then
    begin

      for I := 0 to JAProdutividades.Count-1 do
      begin
        JAProdutividade:=JAProdutividades.Items[i];

        vpQuantidade:=vpQuantidade+JAProdutividade.GetValue('quantidade',0);

        vpMaiorTempo:=JAProdutividade.GetValue('maiortempo','00:00');
        vpMenorTempo:=JAProdutividade.GetValue('menortempo','00:00');

        if TryStrToTime(vpMaiorTempo,vlHora) then
          vpMaiorTempo:=AjustaMaiorTempo(vpMaiorTempo)
        else
          vpMaiorTempo:='00:02:00';

        if TryStrToTime(vpMenorTempo,vlHora) then
          vpMenorTempo:=AjustaMenorTempo(vpMaiorTempo)
        else
          vpMenorTempo:='00:00:00';


        vlTempo:=JAProdutividade.GetValue('mediatempo','00:00');

        if TryStrToTime(vlTempo,vlHora) then
          vlTempoMedio:=vlTempoMedio+StrToTime(vlTempo+':00');

      end;
      vpTempoMedio:=AjustaTempoMedio(Timetostr(vlTempoMedio),vpQuantidade);

    end;
    except
    on E: Exception do
        ShowMessage('Erro: ' + E.Message );
    end;
  finally
    if JAProdutividades<>NIL then
      JAProdutividades.Free;
  end;

end;


procedure TFrmPrincipal.CarregaProdutores;
var
 JAProdutividades:TJsonArray;
 JAProdutividade:TJSonValue;
 i:Integer;
 vlTempoMedio:TDateTime;

begin

  if StatusConexao(FIPServidorREST)<>200 then
  begin
    TLoading
        .ToastMessage(FrmPrincipal,'Falha de conexão com servidor em '+FIPServidorREST,
        TAlignLayout.Bottom,
        TAlphaColors.Red,
        TAlphaColors.Yellow,
        3);
    exit;
  end;

  try

    JAProdutividades:=CarregarProdutividade(FIPServidorREST, vpCodigoSetor);
    vpQuantidade:=0;

    if JAProdutividades<>nil then
    begin

      for I := 0 to JAProdutividades.Count-1 do
      begin
        JAProdutividade:=JAProdutividades.Items[i];

        vpQuantidade:=vpQuantidade+JAProdutividade.GetValue('quantidade',0);
        vpMaiorTempo:=AjustaMaiorTempo(JAProdutividade.GetValue('maiortempo','00:00'));
        vpMenorTempo:=AjustaMenorTempo(JAProdutividade.GetValue('menortempo','00:00'));

        vlTempoMedio:=vlTempoMedio+StrToTime(JAProdutividade.GetValue('mediatempo','00:00')+':00');

      end;
      vpTempoMedio:=AjustaTempoMedio(Timetostr(vlTempoMedio),vpQuantidade);

    end;

  finally
    if JAProdutividades<>NIL then
      JAProdutividades.Free;
  end;

end;



procedure TFrmPrincipal.AjustaIPServidorREST;
var
  LPrompt: string;
  LDefaultValue: string;
  TaskName: string;
begin

  try

    FDialogoipServidorREST:=true;

    TimerCarregaListaPedidos.Enabled:=false;

    LPrompt := 'IP do servidor';
    LDefaultValue := LerIPServidorREST;
    TDialogService.InputQuery('Informe o IP do SERVIDOR', [LPrompt], [LDefaultValue],
      procedure(const AResult: TModalResult; const AValues: array of string)
      begin
        if AResult = mrOk then
        begin
          TaskName := AValues[0];
          GravarIPServidorREST(TaskName);
          FIPServidorREST := TaskName;
          FDialogoipServidorREST := False;
          TimerCarregaListaPedidos.Enabled := true;
        end
        else
        begin
          TaskName := '';
          FDialogoipServidorREST := False;
          TimerCarregaListaPedidos.Enabled := true;
        end;

      end);
  except
    on E: Exception do
    begin
      TimerCarregaListaPedidos.Enabled := true;
    end;
  end;
end;




procedure TFrmPrincipal.AoCriarFormularioPrincipal;
var
  loIniFIle: TInifile;
  LDefaultValue: string;
begin

  FImpressora := 0;
  FQtdMarcados := 0;

  img_check.Visible := False;
  img_uncheck.Visible := False;

  LDefaultValue := '';
  LDefaultValue := trim(LerIPServidorREST);

  if LDefaultValue = '' then
  begin

    AjustaIPServidorREST;

  end
  else
  begin
    FIPServidorREST := LDefaultValue;
    TimerCarregaListaPedidos.Enabled := true;
  end;


  FQtdMarcados := 0;
  FContaVerificar := 6;

end;



procedure TFrmPrincipal.TbListasChange(Sender: TObject);
var
  vlRegistro:TJSONArray;
  vlRetorno:Integer;

begin
  try
    TimerCarregaListaPedidos.Enabled:=False;

    if TbListas.ActiveTab=TIPedidos then
    begin

      if TListviewPedido.SelectedCount(LvPedidos)>0 then
      begin

          vlRegistro := registraProducao;

          vlRetorno := GravaProducao(FIPServidorREST, vlRegistro);

          if (vlRetorno=200) or (vlRetorno=201) then
          begin
            TLoading
              .ToastMessage(FrmPrincipal,'Registro salvo com sucesso!',
              TAlignLayout.top,
              TAlphaColors.Green,
              TAlphaColors.White,
              2);
          end
          else
          begin
            TLoading
              .ToastMessage(FrmPrincipal,'Falha ao salvar produção! Codigo: '+vlRetorno.ToString,
              TAlignLayout.top,
              TAlphaColors.Green,
              TAlphaColors.White,
              2);
          end;

          vlRegistro.Free;

          CarregaListaPedidos;

         // AtualizaEstatisticas;
      end
      else
      begin

        CarregaListaPedidos;

       // AtualizaEstatisticas;

      end;
    end
    else
      TimerCarregaListaPedidos.Enabled := False;

    if TbListas.ActiveTab=TISetores then
    begin

      RcCobfirmaSetores.Visible := True;
      RcCancelaSetores.Visible := True;

      application.ProcessMessages;

      CarregaListaSetores;

    end;

    if TbListas.ActiveTab=TIColaboradores then
    begin

      RctConfirmaColaboradores.Visible := True;
      RcCancelaColaboradores.Visible := True;

      application.ProcessMessages;

      CarregaListaColaboradores;

    end;

  finally
    TimerCarregaListaPedidos.Enabled := true
  end;

end;

procedure TFrmPrincipal.TimerCarregaListaPedidosTimer(Sender: TObject);
begin

  try
    TimerCarregaListaPedidos.Enabled:=false;

    lbRelogio.Text := timetostr(time);

    if FContaVerificar > 2 then
    begin

      FContaVerificar := 0;

      if TbListas.ActiveTab=TIPedidos then
      begin

        if TListviewPedido.SelectedCount(LvPedidos)=0 then
        begin

          CarregaListaPedidos;

         // AtualizaEstatisticas;

        end;

      end;

    end
    else
      FContaVerificar := FContaVerificar+1;


  finally
    TimerCarregaListaPedidos.Enabled:=True;
  end;

end;




procedure TFrmPrincipal.AddPosicaoProdutividade(aCodigo, aNomeProdutor, aQuantidadeProduzida, aPontuacao: string);
var
  vLargura: Single;
  vItem: TListViewItem;

begin

  vLargura := LvPosicao.Width;
  vItem := LvPosicao.Items.Add;

  with vItem do
  begin

    Height := 30;

    TagString := aCodigo;
    Tag := aCodigo.ToInteger;

    TListItemText(Objects.FindDrawable('TxtQuantidadeProduzida')).Text := aQuantidadeProduzida;
    TListItemText(Objects.FindDrawable('TxtQuantidadeProduzida')).Width := 60;

    TListItemText(Objects.FindDrawable('TxtPontuacao')).Text := aPontuacao;
    TListItemText(Objects.FindDrawable('TxtPontuacao')).Width := 60;

    TListItemText(Objects.FindDrawable('TxtPontuacao')).PlaceOffset.X:=vLargura-250;
    TListItemText(Objects.FindDrawable('TxtPontuacao')).PlaceOffset.Y:=1;

    TListItemText(Objects.FindDrawable('TxtNomeProdutor')).Text := aNomeProdutor;
    TListItemText(Objects.FindDrawable('TxtNomeProdutor')).Width :=vLargura-250;

    TListItemText(Objects.FindDrawable('TxtNomeProdutor')).PlaceOffset.X:=0;
    TListItemText(Objects.FindDrawable('TxtNomeProdutor')).PlaceOffset.Y:=1;


  end;
  LvPosicao.Adapter.ResetView(vItem);

end;




procedure TFrmPrincipal.AtualizaEstatisticas;
var
  x: integer;

begin

  try

    // requisita resumo dados ao servidor
   {
    CarregaProdutividade;

    LblQuantidadeProduzida.Text := 'Itens Produzidos: '+vpQuantidade.ToString;

    if vpMaiorTempo<>'' then
      LblMaiorTempo.Text := 'Maior Tempo: '+vpMaiorTempo;

    if vpMenorTempo<>'' then
      LblRctTempoMedio.Text := 'Tempo Médio: '+vpMenorTempo;

    if vpTempoMedio<>'' then
      LblMenorTempo.Text := 'Menor Tempo: '+vpTempoMedio;
    }

    CarregaListaProdutores;

  finally

  end;



end;

procedure TFrmPrincipal.btConfiguracaoClick(Sender: TObject);
begin
  TimerCarregaListaPedidos.Enabled:=false;

  AjustaIPServidorREST;

  TimerCarregaListaPedidos.Enabled:= True;

end;



procedure TFrmPrincipal.FormCreate(Sender: TObject);
var
  LDefaultValue: string;
begin

  FImpressora := 0;
  FQtdMarcados := 0;
  img_check.Visible := False;
  img_uncheck.Visible := False;

//  FListaPedidos := TstringList.Create;
//  FListaImm := TstringList.Create;
//  FListaColaboradores := TstringList.Create;
//  FListaSetores := TstringList.Create;

  LoadStyle;


  LDefaultValue := '';
  LDefaultValue := trim(LerIPServidorREST);
  if LDefaultValue = '' then
  begin

    AjustaIPServidorREST;

  end
  else
  begin
    FIPServidorREST := LDefaultValue;
    TimerCarregaListaPedidos.Enabled := true;
  end;

  vpCodigoSetor:='0';
  vpNomeSetor:='TODOS SETORES';
  TbListas.ActiveTab:=TIPedidos;

  FQtdMarcados := 0;
  FContaVerificar := 6;

end;

procedure TFrmPrincipal.LoadStyle;
begin
  lbSelecionarPedidos.FontColor := FONTCOLOR_H;
  lbRelogio.TextSettings.FontColor := FONTCOLOR_H;
  lbSelecionarSetor.TextSettings.FontColor := FONTCOLOR_H;
  LbSelecionarColaborador.FontColor := FONTCOLOR_H;
  blVersao.FontColor := FONTCOLOR_H2;
//  RctSelecionarColaborador.Fill.Color := BACKGROUND_BOTAOINATIVO;
  LytSelecionarColaborador.Visible := False;


  lbSelecionarPedidos.Font.Size := FONT_SIZE_H6;
  lbRelogio.Font.Size := FONT_SIZE_H6;
  lbSelecionarSetor.Font.Size := FONT_SIZE_H7;
  LbSelecionarColaborador.Font.Size := FONT_SIZE_H6;
  blVersao.Font.Size := FONT_SIZE_H8;

  LblQuantidadeProduzida.Font.Size := FONT_SIZE_H7;
  LblMaiorTempo.Font.Size := FONT_SIZE_H8;
  LblRctTempoMedio.Font.Size := FONT_SIZE_H8;
  LblMenorTempo.Font.Size := FONT_SIZE_H8;

end;


procedure TFrmPrincipal.LvClbItemClick(const Sender: TObject; const AItem: TListViewItem);
begin

   if LvClb.ItemCount<=0 then
     exit;


 if TListviewColaborador
        .SelecionarItem(LvClb, AItem, img_uncheck.Bitmap,
                        img_check.Bitmap, vpMaximoColaboradores.ToInteger)=0 then
                        begin
                          TLoading
                              .ToastMessage(FrmPrincipal,'Máximo de colaboradores selecionados!',
                              TAlignLayout.top,
                              TAlphaColors.Red,
                              TAlphaColors.Yellow,
                              3);
                        end;

  if TListviewColaborador.SelectedCount(LvClb)>0 then
  begin
  //  RcCancelaColaboradores.Visible:=False;
  //  RctConfirmaColaboradores.Visible:=true;
  end
  else
  begin
  //  RcCancelaColaboradores.Visible:=true;
  //  RctConfirmaColaboradores.Visible:=False;
  end;

end;

procedure TFrmPrincipal.LvPedidosItemClick(const Sender: TObject;
  const AItem: TListViewItem);
begin
  if LvPedidos.ItemCount<=0 then
    exit;

  if vpCodigoSetor='0' then
    exit;

  TListviewPedido.SelecionarItem(LvPedidos, AItem, img_uncheck.Bitmap, img_check.Bitmap);

  if TListviewPedido.SelectedCount(LvPedidos)>0 then
  begin
   // LytSelecionarColaborador.Visible:=True;
    vpMaximoColaboradores:=IntToStr(TListviewPedido.MaximoColaborador(LvPedidos));
    lbTituloColaboradores.Text:='Colaboradores - Máximo '+vpMaximoColaboradores;
    sbSelecionarColaboradorClick(sbSelecionarColaborador);
  end
  else
  begin
    LytSelecionarColaborador.Visible:=False;
  end;

end;

procedure TFrmPrincipal.LvSepItemClick(const Sender: TObject;  const AItem: TListViewItem);
var
 vlsetor:String;
 vlCodigo:String;
begin

   if LvSep.ItemCount<=0 then
     exit;

  vlsetor:=TListItemText(AItem.Objects.FindDrawable('TxtSetor')).Text;

  TListviewSetor.SelecionarItem(LvSep, AItem, img_uncheck.Bitmap, img_check.Bitmap);

  if  TListviewSetor.SelectedCount(LvSep)>0 then
  begin
   vpNomeSetor:=vlsetor;
   vpCodigoSetor:=AItem.TagString;
   lbSelecionarSetor.Text:=vlsetor;
   sbConfirmaSetorclick(sbConfirmaSetor);
  end
  else
  begin
    vpNomeSetor:='TODOS SETORES';
    vpCodigoSetor:='0';
    lbSelecionarSetor.Text:=vpNomeSetor;
  end;

end;

procedure TFrmPrincipal.SBCancelaColaboradoresClick(Sender: TObject);
begin

  RctConfirmaColaboradores.Visible := False;
  RcCancelaColaboradores.Visible := False;

  application.ProcessMessages;

  TbListas.ActiveTab:=TIPedidos;
end;

procedure TFrmPrincipal.sbConfirmaColaboradoresClick(Sender: TObject);
begin
  RctConfirmaColaboradores.Visible := False;
  RcCancelaColaboradores.Visible := False;

  application.ProcessMessages;

  TbListas.ActiveTab:=TIPedidos;

end;

procedure TFrmPrincipal.sbConfirmaSetorClick(Sender: TObject);
begin

  RcCobfirmaSetores.Visible := False;
  RcCancelaSetores.Visible := False;

  application.ProcessMessages;





  TbListas.ActiveTab:=TIPedidos;




end;

procedure TFrmPrincipal.sbSelecionarColaboradorClick(Sender: TObject);
begin
  TbListas.ActiveTab:=TIColaboradores;
end;

procedure TFrmPrincipal.sbSelecionarSetorClick(Sender: TObject);
begin

  CarregaListaSetores;
  TbListas.ActiveTab:=TISetores;

end;

procedure TFrmPrincipal.spCancelarSetoresClick(Sender: TObject);
begin

 vpNomeSetor:='TODOS SETORES';
 vpCodigoSetor:='0';
 lbSelecionarSetor.Text:=vpNomeSetor;

 TbListas.ActiveTab:=TIPedidos;

end;




end.
