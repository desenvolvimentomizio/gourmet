unit MizioUP.Controllers.setor;

interface

uses
  System.SysUtils,
  Service.Constant,
  RESTRequest4D,
  REST.Types,
  System.JSON;

function CarregarSetores(Const AIpServer:String;Const AToken:String):TJsonArray;
function BuscarNomeSetores(Const AIpServer:String;Const AToken:String; ASTO_ID:String):TJSONObject;

Procedure SalvarSetor(Const AIpServer:String;Const AToken:String; ASETOR:TJsonObject);
function CarregarSetor(Const AIpServer:String;Const AToken:String; ASetor_id:String):TJSONObject;
function AjustarSituacaoSetor(Const AIpServer:String;Const AToken:String; ASetor:string; ASituacao:String='1'):boolean;

function ConsultarNomeExiste(Const AIpServer:String;Const AToken:String;ASTO_ID:String ; ASTO_NOME:string):Integer;

implementation

function ConsultarNomeExiste(Const AIpServer:String;Const AToken:String;ASTO_ID:String ; ASTO_NOME:string):Integer;
var
  resposta: IResponse;
begin

  resposta := TRequest.New.BaseURL(URL_BASE + AIpServer + ':' + PORT_SERV + URL_PATH)
            .Resource('setores/nome')
            .AddBody(TJSONObject
                      .Create
                        .AddPair('STO_ID', ASTO_ID)
                        .AddPair('STO_NOME', ASTO_NOME)
                     )
            .Token(aToken)
            .Accept('application/json')
            .get;

    Result := resposta.StatusCode;

end;


function AjustarSituacaoSetor(Const AIpServer:String;Const AToken:String; ASetor:string; ASituacao:String='1'):boolean;
var
  resposta: IResponse;
begin

  resposta := TRequest.New.BaseURL(URL_BASE + AIpServer + ':' + PORT_SERV + URL_PATH)
            .Resource('setores/situacao')
            .AddBody(TJSONObject
                      .Create
                        .AddPair('STO_ID', ASetor)
                        .AddPair('SIT_ID', ASituacao)
                     )
            .Token(aToken)
            .Accept('application/json')
            .post;

  if (resposta.StatusCode <> 202)  then
  begin
    Result := False;
    raise Exception.Create(resposta.Content);
  end
  else
  begin
    Result := True;
  end;

end;



Procedure SalvarSetor(Const AIpServer:String;Const AToken:String; ASETOR:TJsonObject);
var
  resposta: IResponse;
begin


  resposta := TRequest.New.BaseURL(URL_BASE + AIpServer + ':' + PORT_SERV + URL_PATH)
            .Resource('setores')
            .AddBody(ASETOR)
            .Token(aToken)
            .Accept('application/json')
            .post;
  if (resposta.StatusCode <> 201) and (resposta.StatusCode <> 204) then
    raise Exception.Create(resposta.Content);


end;
function CarregarSetor(Const AIpServer:String;Const AToken:String; ASetor_id:String):TJSONObject;
var
  resposta: IResponse;
begin

  resposta := TRequest.New.BaseURL(URL_BASE + AIpServer + ':' + PORT_SERV + URL_PATH)
            .Resource('setores/'+ASetor_id)
            .Token(aToken)
            .Accept('application/json')
            .Get;
  if (resposta.StatusCode <> 200) and (resposta.StatusCode <> 204) then
    raise Exception.Create(resposta.Content);



  if resposta.StatusCode = 204 then
    result := NIl
  else
    result:=  TJSONObject.ParseJSONValue(TEncoding.ASCII.GetBytes(resposta.Content), 0) as TJSONObject;


end;




function CarregarSetores(Const AIpServer:String;Const AToken:String):TJsonArray;
var
  resposta: IResponse;
begin

  resposta := TRequest.New.BaseURL(URL_BASE + AIpServer + ':' + PORT_SERV + URL_PATH)
            .Resource('setores')
            .Token(aToken)
            .Get;


  if (resposta.StatusCode <> 200)  then
    raise Exception.Create(resposta.Content);

  result := TJSONObject.ParseJSONValue(TEncoding.ASCII.GetBytes(resposta.Content), 0) as TJSONArray;

end;

function BuscarNomeSetores(Const AIpServer:String;Const AToken:String; ASTO_ID:String):TJSONObject;
var
  resposta    : IResponse;
begin
  try
    resposta := TRequest.New.BaseURL(URL_BASE + AIpServer + ':' + PORT_SERV + URL_PATH)
              .Resource('setores/'+ASTO_ID)
              .Token(aToken)
              .Get;

    if (resposta.StatusCode <> 200)  then
      raise Exception.Create(resposta.Content);

    result := TJSONObject.ParseJSONValue(TEncoding.ASCII.GetBytes(resposta.Content), 0) as TJSONObject;

  finally
  end;
end;

end.
