unit ProducaoUPServer.controller.IMM;

interface

Uses
  Horse,
  System.Json,
  Horse.GBSwagger,
  idHashMessageDigest,
  DataSet.Serialize,
  ProducaoUPServer.Model.DAOGeneric,
  ProducaoUPServer.Model.entity.IMM;

procedure Registry(App: THorse);
procedure V1GetID(Req: THorseRequest; Res: THorseResponse; Next: TProc);
// function V1GetImm(aValue:string):TJSONObject;


type
  TAPIError = class
  private
    Ferror: string;
  public
    property error: string read Ferror write Ferror;
  end;

implementation



procedure Registry(App: THorse);
begin
  App.Get('/v1/imm/:id', V1GetID);
   Swagger
      .BasePath('v1')
      .Path('imm')
        .Tag('imm')

        .GET('List All', 'List All Imms')
          .AddResponse(200, 'successful operation')
            .Schema(TIMM)
            .IsArray(True)
          .&End
          .AddResponse(400, 'Bad Request')
            .Schema(TAPIError)
          .&End
          .AddResponse(500, 'Internal Server Error')
            .Schema(TAPIError)
          .&End
        .&End
      .&End
    .&End;
end;






 {
function V1GetImm(aValue:string):TJSONObject;
var
  FDAO: IDAOGeneric<TIMM>;

begin
 FDAO := TDaogeneric<TIMM>.New;
 FDAO
    .DAO
    .SQL
      .Fields('chave, identificacao, pedido, tempo, item, destino, impressora, setor, produto, quantidade, unidade, inicio, situacao')
      .Where('item='+aValue)
      .OrderBy('situacao desc, chave')
    .&End
   .Find;
    if not FDAO.DataSet.IsEmpty then
    begin
      result :=FDAO.DataSetAsJsonObject;
    end
    else
    begin
      res.Status(204);
    end;
end;
 }
procedure V1GetID(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  FDAO: IDAOGeneric<TIMM>;
begin
  FDAO := TDaogeneric<TIMM>.New;
  FDAO
    .DAO
    .SQL
      .Fields('chave, identificacao, pedido, tempo, item, destino, impressora, setor, produto, quantidade, unidade, inicio, situacao')
      .Where('if('+Req.Params.Items['id']+'=0, setor<>0, setor='+Req.Params.Items['id']+')'  )
      .OrderBy('situacao desc, chave')
    .&End
   .Find;

    if not FDAO.DataSet.IsEmpty then
    begin
      Res.Send<TJsonarray>(FDAO.DataSetAsJsonArray);
    end
    else
    begin
      res.Status(204);
    end;
end;


end.
