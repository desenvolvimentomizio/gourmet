unit  ProducaoUPServer.controller.MIT;

interface

Uses
  System.AnsiStrings,
  Horse,
  DataSetConverter4D,
  DataSetConverter4D.Impl,
  System.Json,
  Uni,
  UniProvider,
  MySQLUniProvider,
  ProducaoUP.Services.Connection ;



procedure Registry(App: THorse);

procedure V1Get(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure V1GetID(Req: THorseRequest; Res: THorseResponse; Next: TProc);


type
 TAPIError = class
  private
    Ferror: string;
  public
    property error: string read Ferror write Ferror;
  end;


implementation


procedure Registry(App: THorse);
begin
   App.Get('/v1/mit', V1Get);
   App.Get('/v1/mit/:id', V1GetID);
end;

procedure V1Get(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  conexao:TUniConnection;
  MIT:TUniQuery;
begin

  try

    conexao:=TUniConnection.Create(nil);

    if AtivaConexao(conexao) then
    begin

      MIT:=TUniQuery.Create(nil);
      MIT.Connection:=conexao;
      MIT.sql.Text:='select mit.mitcodigo,  mit.mitidentificacao ' +
                    'inner join tci on mit.mitcodigo = tci.mitcodigo '+
                    'inner join gri on tci.tcicodigo = gri.tcicodigo '+
                    'from mit '+
                    'Where gri.gricontrolaproducao = 1 '+
                    'Order By mit.mitidentificacao '+
                    'Group By mit.mitidentificacao,mit.mitcodigo';

      MIT.Open;
    end;

    if not MIT.IsEmpty then
    begin
       Res.Send<TJsonarray>(TConverter.New.DataSet(MIT).AsJSONArray);
       MIT.close;
    end
    else
    begin
       res.Status(204);
    end;

  finally

    if conexao.Connected then
    conexao.Connected:=false;


    if MIT<>nil then
      MIT.DisposeOf;

    if conexao<>nil then
      conexao.DisposeOf;

  end;

end;




procedure V1GetID(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  conexao:TUniConnection;
  MIT:TUniQuery;
begin

  try

    conexao:=TUniConnection.Create(nil);

    if AtivaConexao(conexao) then
    begin

      MIT:=TUniQuery.Create(nil);
      MIT.Connection:=conexao;
      MIT.sql.Text:='select mit.mitcodigo,  mit.mitidentificacao,  mit.ecfcodigo,  mit.tipcodigo '+
                    'from mit '+
                    'where mit.mitcodigo='+Req.Params.Items['id'];
      MIT.Open;
    end;

    if not MIT.IsEmpty then
    begin
       Res.Send<TJsonarray>(TConverter.New.DataSet(MIT).AsJSONArray);
       MIT.close;
    end
    else
    begin
       res.Status(204);
    end;

  finally

    if conexao.Connected then
    conexao.Connected:=false;

    if MIT<>nil then
      MIT.DisposeOf;

    if conexao<>nil then
      conexao.DisposeOf;

  end;

end;





end.

