unit  ProducaoUPServer.controller.SEP;

interface

Uses
  System.AnsiStrings,
  Horse,
  DataSetConverter4D,
  DataSetConverter4D.Impl,
  System.Json,
  Uni,
  UniProvider,
  MySQLUniProvider,
  ProducaoUP.Services.Connection ;

procedure Registry(App: THorse);
procedure V1Get(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure V1GetID(Req: THorseRequest; Res: THorseResponse; Next: TProc);


type
 TAPIError = class
  private
    Ferror: string;
  public
    property error: string read Ferror write Ferror;
  end;


implementation


procedure Registry(App: THorse);
begin
   App.Get('/v1/sep', V1Get);
   App.Get('/v1/sep/:id', V1GetID);

end;


procedure V1Get(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  conexao:TUniConnection;
  SEP:TUniQuery;

begin

  try

    conexao:=TUniConnection.Create(nil);

    if AtivaConexao(conexao) then
    begin

      SEP:=TUniQuery.Create(nil);
      SEP.Connection:=conexao;
      SEP.sql.Text:='select sep.sepcodigo,  sep.sepidentificacao '+
                    'from sep '+
                    'inner join tci on mit.mitcodigo = tci.mitcodigo '+
                    'inner join gri on tci.tcicodigo = gri.tcicodigo '+
                    'inner join sep on gri.sepcodigo = sep.sepcodigo '+
                    'Where gri.gricontrolaproducao = 1 '+
                    'Order By sep.sepidentificacao '+
                    'Group By sep.sepidentificacao,sep.sepcodigo';

      SEP.Open;
    end;

    if not SEP.IsEmpty then
    begin
       Res.Send<TJsonarray>(TConverter.New.DataSet(SEP).AsJSONArray);
       SEP.close;
    end
    else
    begin
       res.Status(204);
    end;

  finally

    if conexao.Connected then
    conexao.Connected:=false;


    if SEP<>nil then
      SEP.DisposeOf;

    if conexao<>nil then
      conexao.DisposeOf;

  end;


end;



procedure V1GetID(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  conexao:TUniConnection;
  SEP:TUniQuery;
begin

  try

    SEP:=TUniQuery.Create(nil);
    SEP.Connection:=conexao;
    SEP.sql.Text:='select   sepcodigo, sepidentificacao '+
                  'from sep '+
                  'Where sepcodigo='+Req.Params.Items['id'];
    SEP.Open;

    if not SEP.IsEmpty then
    begin
       Res.Send<TJSONObject>(TConverter.New.DataSet(SEP).TJSONObject);
       SEP.close;

    end
    else
    begin
      res.Status(204);
    end;

  finally

    if conexao.Connected then
    conexao.Connected:=false;


    if SEP<>nil then
      SEP.DisposeOf;

    if conexao<>nil then
      conexao.DisposeOf;

  end;

end;





end.

