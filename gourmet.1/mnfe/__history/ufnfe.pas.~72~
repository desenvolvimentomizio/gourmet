Unit ufnfe;

Interface

Uses
  Winapi.Windows, Vcl.Forms, IdComponent,
  IdMessage, IdIOHandler, IdIOHandlerSocket, IdIOHandlerStack,
  IdSSL, IdSSLOpenSSL, IdBaseComponent, IdTCPConnection, IdTCPClient, miDASLIB,
  ACBrValidador, Data.DB, MemDS, DBAccess, Uni, ACBrBase, ACBrDFe, ACBrNFe,
  Vcl.StdCtrls, Vcl.Buttons, Vcl.Imaging.jpeg, Vcl.Imaging.pngimage,
  Vcl.ExtCtrls, Vcl.Controls, Vcl.ComCtrls, Vcl.Dialogs, System.Classes,
  System.SysUtils, System.StrUtils, System.Math, UniScript, IniFiles,
  pcnConversao, pcnConversaoNFe, ACBrUtil, Winapi.ShellAPI,
  uFuncoes, dateutils, MAPI, ACBrNFeDANFEFRDM, ACBrNFe.Classes,
  ACBrNFeDANFEClass, ACBrNFeDANFEFR, ACBrDFeUtil, upegabase,ACBrDFe.Conversao,
  ACBrDFeSSL, IdEMailAddress, blcksock, IdAttachmentFile,
  IdExplicitTLSClientServerBase, IdMessageClient, IdSMTPBase, IdSMTP;

Type
  Tfnfe = Class(TForm)
    ACBrNFeNotas: TACBrNFe;
    paginas: TPageControl;
    emissao: TTabSheet;
    CheckBox1: TCheckBox;
    CheckBox2: TCheckBox;
    CheckBox3: TCheckBox;
    CheckBox4: TCheckBox;
    CheckBox5: TCheckBox;
    CheckBox6: TCheckBox;
    CheckBox7: TCheckBox;
    consultasefaz: TTabSheet;
    consultanfe: TTabSheet;
    cancelanfe: TTabSheet;
    emailnfe: TTabSheet;
    inutilizanumero: TTabSheet;
    gerarpdf: TTabSheet;
    reimprimirnfe: TTabSheet;
    PlLogos: TPanel;
    Image1: TImage;
    Image2: TImage;
    pbotoes: TPanel;
    bconfirma: TBitBtn;
    bcancela: TBitBtn;
    etd: TUniQuery;
    etdetddoc1: TStringField;
    etdedrcep: TStringField;
    etdedrrua: TStringField;
    etdedrnumero: TStringField;
    etdedrbairro: TStringField;
    etdcddcodigo: TStringField;
    etdcddnome: TStringField;
    etdufssigla: TStringField;
    etdetftelefone: TStringField;
    etdtpecodigo: TIntegerField;
    etdetdidentificacao: TStringField;
    toe: TUniQuery;
    mes: TUniQuery;
    mesmeschave: TIntegerField;
    mestoecodigo: TIntegerField;
    dtm: TUniQuery;
    toetoeidentificacao: TStringField;
    itm: TUniQuery;
    dtmdtmchave: TIntegerField;
    dtmdtmplaca: TStringField;
    dtmdtmvolumes: TFloatField;
    dtmdtmpesobruto: TFloatField;
    dtmdtmpesoliq: TFloatField;
    dtmmeschave: TIntegerField;
    dtmetdcodigo: TIntegerField;
    dtmufscodigo: TStringField;
    dtmedrrua: TStringField;
    dtmcddnome: TStringField;
    dtmufssigla: TStringField;
    dtmedrinscest: TStringField;
    dtmetddoc1: TStringField;
    dtmetdidentificacao: TStringField;
    dtmdtmespecie: TStringField;
    dtmdtmmarcas: TStringField;
    mesetdcodigo: TIntegerField;
    itmcfocfop: TStringField;
    itmprocodigo: TIntegerField;
    itmproncm: TStringField;
    itmitmdesccomple: TStringField;
    itmpronomereduzido: TStringField;
    itmpronome: TStringField;
    itmitmquantidade: TFloatField;
    itmunisimbolo: TStringField;
    itmitmvalor: TFloatField;
    itmitmdesconto: TFloatField;
    itmitmchave: TIntegerField;
    itmcstcodigo: TStringField;
    itmicmcodigo: TStringField;
    itmitmicm: TFloatField;
    itmitmbicm: TFloatField;
    itmitmaliqipi: TFloatField;
    itmitmbipi: TFloatField;
    itmitmipi: TFloatField;
    mesmestotal: TFloatField;
    qTomTof: TUniQuery;
    etdedrinscest: TStringField;
    toettecodigo: TIntegerField;
    Memo1: TMemo;
    Memo2: TMemo;
    Memo3: TMemo;
    Memo4: TMemo;
    Memo5: TMemo;
    Memo6: TMemo;
    Memo7: TMemo;
    mostraemail: TProgressBar;
    mesrefcodigo: TIntegerField;
    LlMsgEmail: TLabel;
    mestfpcodigo: TIntegerField;
    ccorrecao: TTabSheet;
    rcc: TUniQuery;
    rccrccchave: TIntegerField;
    rccmeschave: TIntegerField;
    rccrcccorrecao: TStringField;
    rccrccretorno: TStringField;
    rccrcclote: TIntegerField;
    rccrccsequencial: TIntegerField;
    plmodonfe: TPanel;
    mestdfcodigo: TStringField;
    mesmesnumero: TIntegerField;
    mesmesserie: TStringField;
    mesedritem: TIntegerField;
    enf: TUniQuery;
    enftencodigo: TIntegerField;
    enfenfseqevento: TIntegerField;
    enfenfdescricao: TStringField;
    enfenfcstat: TIntegerField;
    enfenfxml: TBlobField;
    enfenfxmotivo: TStringField;
    mev: TUniQuery;
    mevmevchave: TIntegerField;
    mevenfchave: TIntegerField;
    mevmeschave: TIntegerField;
    enfenfchave: TIntegerField;
    mesmesdatanfe: TDateField;
    qEnfMev: TUniQuery;
    qEnfMevenfseqevento: TIntegerField;
    qEnfMevenfdescricao: TStringField;
    emailevento: TTabSheet;
    Memo9: TMemo;
    Memo10: TMemo;
    reimprimirEvento: TTabSheet;
    Memo11: TMemo;
    qEnfMevtencodigo: TIntegerField;
    qEnfMevenfchaveevento: TStringField;
    qEnfMevenfregistroevento: TDateField;
    enfenfregistroevento: TDateField;
    enfenfchaveevento: TStringField;
    mesmescoocupom: TIntegerField;
    dfr: TUniQuery;
    dfrdfrchave: TIntegerField;
    dfretdcodigo: TIntegerField;
    dfrdfrserie: TStringField;
    dfrdfremissao: TDateField;
    cfr: TUniQuery;
    tom: TUniQuery;
    tof: TUniQuery;
    tomtomchave: TIntegerField;
    tomtofcodigo: TIntegerField;
    tommeschave: TIntegerField;
    tomtomobs: TStringField;
    toftofcodigo: TIntegerField;
    toftofidentificacao: TStringField;
    tofticcodigo: TIntegerField;
    dfrdfrchavenfe: TStringField;
    dfretddoc1: TStringField;
    dfredrinscest: TStringField;
    qCfrEcf: TUniQuery;
    qCfrEcfcfrcooecf: TIntegerField;
    qCfrEcfecfcaixa: TIntegerField;
    cfrcfrchave: TIntegerField;
    cfrtdfcodigo: TStringField;
    cfrcfrcooecf: TIntegerField;
    cfrecfcodigo: TIntegerField;
    cfrtofcodigo: TIntegerField;
    cfrcfremissao: TDateField;
    mesmesdatacupom: TDateField;
    ACBrValidador1: TACBrValidador;
    toetoecodigo: TIntegerField;
    itmpunqtdtribtotal: TFloatField;
    itmunisimbolotrib: TStringField;
    plstatus: TPanel;
    consultarEvento: TTabSheet;
    Memo8: TMemo;
    cfg: TUniQuery;
    cfgcfgcodigo: TIntegerField;
    cfgcfgmensagempdv: TStringField;
    cfgcfgtrmimpfis1: TIntegerField;
    cfgcfgtrmimpfis2: TIntegerField;
    cfgcfgtrmtef1: TIntegerField;
    cfgcfgtrmtef2: TIntegerField;
    cfgcfgimpnfe1: TIntegerField;
    cfgcfgimpnfe2: TIntegerField;
    cfgcfgimpnfc1: TIntegerField;
    cfgcfgimpnfc2: TIntegerField;
    cfgcfgimpnfc3: TIntegerField;
    cfgcfgservarqnfes: TStringField;
    cfgcfgnumecertif: TStringField;
    cfgcfgetdempresa: TIntegerField;
    cfgcfgprouso: TIntegerField;
    cfgcfgtoeusofora: TIntegerField;
    cfgcfgtoeusointe: TIntegerField;
    cfgcfgtoecuffora: TIntegerField;
    cfgcfgtoecufinte: TIntegerField;
    cfgcfgviasnfe: TIntegerField;
    cfgcfgnumeronfe: TIntegerField;
    cfgcfgserienfe: TStringField;
    cfgcfgobs1: TIntegerField;
    cfgcfgobs2: TIntegerField;
    cfgcfgobs3: TIntegerField;
    cfgcfgobs4: TIntegerField;
    cfgcfgdescrinfe: TIntegerField;
    cfgcfgemailnfe: TStringField;
    cfgcfgemailservidornfe: TStringField;
    cfgcfgemailsenhanfe: TStringField;
    cfgcfgmailportnfe: TStringField;
    cfgcfgemailusatls: TIntegerField;
    cfgcrtcodigo: TIntegerField;
    cfgcfgcstterceiros: TStringField;
    cfgetdapelido: TStringField;
    cfgetdidentificacao: TStringField;
    cfgetddoc1: TStringField;
    cfgufscodigo: TStringField;
    cfgcddcodigo: TStringField;
    cfgedrinscest: TStringField;
    cfgedrrua: TStringField;
    cfgedrnumero: TStringField;
    cfgedrbairro: TStringField;
    cfgedrcep: TStringField;
    cfgcddnome: TStringField;
    cfgufssigla: TStringField;
    cfgetftelefone: TStringField;
    cfgctdboxedominio: TStringField;
    tcg: TUniQuery;
    tcgtcgaliqnac: TFloatField;
    cfgcfgmodonfe: TIntegerField;
    consulta: TUniQuery;
    trm: TUniQuery;
    trmtciporta: TStringField;
    trmecfcodigo: TIntegerField;
    trmtrmcodigo: TIntegerField;
    trmtipcodigo: TIntegerField;
    mesmesregistro: TDateField;
    dfrtdfcodigo: TStringField;
    dfrufscodigo: TStringField;
    cfgcfgsenhacertificado: TStringField;
    rni: TUniQuery;
    rnirnichave: TIntegerField;
    rnirniano: TStringField;
    rnirnimes: TStringField;
    rnitdfcodigo: TStringField;
    rnirninumeroinicial: TIntegerField;
    rnirninumerofinal: TIntegerField;
    rnirnijutificativa: TStringField;
    itmitmbicms: TFloatField;
    itmitmaliqicms: TFloatField;
    itmitmicms: TFloatField;
    itmitmoutras: TFloatField;
    mesmesoutras: TFloatField;
    toettocodigo: TIntegerField;
    qEnfMevmesregistro: TDateField;
    qEteMes: TUniQuery;
    qEteMesetecodigo: TIntegerField;
    qEteMeseteemail: TStringField;
    qEteMesetdidentificacao: TStringField;
    dfrmeschave: TIntegerField;
    dfrdfrnumero: TIntegerField;
    NumeroNFe: TUniQuery;
    itmitmcargatrib: TFloatField;
    itmitmcargatribest: TFloatField;
    mesflacodigo: TIntegerField;
    plrelatorio: TPanel;
    enfenfemaildestinatario: TStringField;
    enfenfcnpjdestinatario: TStringField;
    enfenfchavenfe: TStringField;
    ici: TUniQuery;
    icf: TUniQuery;
    icficfchave: TIntegerField;
    icficfdatainicial: TDateField;
    icficfdatafinal: TDateField;
    icficfpercicmorigem: TFloatField;
    icficfpercicmdestino: TFloatField;
    iciicichave: TIntegerField;
    iciiciicmaliguotaicms: TFloatField;
    iciiciuforigem: TStringField;
    iciiciufdestino: TStringField;
    toetoedescricao: TStringField;
    mestemcodigo: TIntegerField;
    etdetdnfemodelos: TStringField;
    itmtpocodigo: TIntegerField;
    cfgcfgversao: TStringField;
    cfgcfgcestativo: TIntegerField;
    itmtcecest: TStringField;
    rfi: TUniQuery;
    rfirfinumero: TStringField;
    rfirfivencimento: TDateField;
    rfirfivalor: TFloatField;
    tit: TUniQuery;
    tittitcodigo: TIntegerField;
    tittitvalor: TFloatField;
    itmcspcodigo: TStringField;
    itmcsfcodigo: TStringField;
    mesmesbicms: TFloatField;
    mesmesicms: TFloatField;
    cfgcfgtextoemail: TStringField;
    itmitmpercreducaobaseicm: TFloatField;
    cfgcfgpercentualpis: TFloatField;
    cfgcfgpercentualcofins: TFloatField;
    qconsulta: TUniQuery;
    itmitmaliqpis: TFloatField;
    itmitmaliqcofins: TFloatField;
    itmitmpis: TCurrencyField;
    itmitmbpis: TCurrencyField;
    itmitmcofins: TCurrencyField;
    itmitmbcofins: TCurrencyField;
    cfgcfgtoenotacomplementar: TIntegerField;
    cfgcfgtoesubstnoestado: TIntegerField;
    cfgcfgtoesubstforaestado: TIntegerField;
    ncm: TUniQuery;
    ncmansanexo: TStringField;
    itmncm: TUniQuery;
    itmncmtoecodigo: TIntegerField;
    mesmesfrete: TCurrencyField;
    itmitmfrete: TCurrencyField;
    itmpunbarra: TStringField;
    ACBrValidadorBarra: TACBrValidador;
    dtl: TUniQuery;
    rfititcodigo: TIntegerField;
    mesmesdesconto: TFloatField;
    dtlltechave: TIntegerField;
    dtlmdaidentificacao: TStringField;
    dtldtlvalor: TFloatField;
    dtlmdacodigo: TIntegerField;
    itmcsicodigo: TStringField;
    mesttocodigo: TIntegerField;
    ncmsubst: TUniQuery;
    toeitm: TUniQuery;
    toeitmtoecodigo: TIntegerField;
    toeitmcstcodigo: TStringField;
    toeitmcsicodigo: TStringField;
    toeitmcspcodigo: TStringField;
    toeitmcfgpercentualpis: TFloatField;
    toeitmcsfcodigo: TStringField;
    toeitmcfgpercentualcofins: TFloatField;
    itmcst: TUniQuery;
    itmcstitmchave: TIntegerField;
    itmcstcstcodigo: TStringField;
    itmcstcsicodigo: TStringField;
    itmcstcspcodigo: TStringField;
    itmcstcsfcodigo: TStringField;
    itmcstitmaliqpis: TFloatField;
    itmcstitmaliqcofins: TFloatField;
    itmcstitmaliqipi: TFloatField;
    cfgcfgusacstnoproduto: TIntegerField;
    itmtoecodigo: TIntegerField;
    etdedrnomefazenda: TStringField;
    etdedrrazaofazenda: TStringField;
    cfgcfgtoesubstanpnoestado: TIntegerField;
    cfgcfgtoesubstanpforaestado: TIntegerField;
    cfgcfgprevisualizarimpressaonfe: TIntegerField;
    cfgcfgsubstitutotributario: TIntegerField;
    consultadesconto: TUniQuery;
    mesmesnumeropedido: TStringField;
    itmitmitempedido: TStringField;
    mesmeshoranfe: TTimeField;
    cfgcfgdescontonoservico: TIntegerField;
    cfgcfgdefinetoeatendimento: TIntegerField;
    cfgcfgtoemesinte: TIntegerField;
    mesmesretirabalcao: TIntegerField;
    mestom: TUniQuery;
    tai: TUniQuery;
    taitaichave: TIntegerField;
    taitaialiquota: TFloatField;
    etdufscodigo: TStringField;
    ssn: TUniQuery;
    ssnssncodigo: TIntegerField;
    ssnssnaliquota: TFloatField;
    ssnssnicms: TFloatField;
    icm: TUniQuery;
    icmicmcodigo: TStringField;
    icmicmaliquotas: TStringField;
    cfgssncodigo: TIntegerField;
    toecstnormal: TStringField;
    cfgcfgtoemesfora: TIntegerField;
    etdtcbcodigo: TIntegerField;
    spd: TUniQuery;
    spdspdchave: TIntegerField;
    spdspdaliquotasimples: TFloatField;
    toecstcodigo: TStringField;
    cfgatvcodigo: TIntegerField;
    mesmeschavenfe: TStringField;
    mesmesemissao: TDateField;
    pad: TUniQuery;
    padpadcodigo: TIntegerField;
    padpadncm: TStringField;
    padpadpis: TFloatField;
    padpadcofins: TFloatField;
    padpadextipi: TStringField;
    itmpadextipi: TStringField;
    cfgcfgpresencialtoedestino: TIntegerField;
    padpadcodigopiscofins: TStringField;
    itmitmmva: TFloatField;
    cfgcfgtoeinteproducaopropria: TIntegerField;
    itmproproducao: TIntegerField;
    cfgcfgtoeforaproducaopropria: TIntegerField;
    cfgcfgtoeintesubsprodpropria: TIntegerField;
    cfgcfgtoeforasubsprodpropria: TIntegerField;
    mesmespararevenda: TIntegerField;
    cfgcfgtributacaoimendes: TIntegerField;
    itmitmbasefcpicm: TFloatField;
    itmitmpercfcpicm: TFloatField;
    itmitmvalofcpicm: TFloatField;
    itmitmbasefcpicmst: TFloatField;
    itmitmpercfcpicmst: TFloatField;
    itmitmvalofcpicmst: TFloatField;
    mesmesfilialpedido: TStringField;
    itmicmaliquotas: TStringField;
    ctd: TUniQuery;
    ctdctdcnpj: TStringField;
    cfgcfgtoetransflaintepro: TIntegerField;
    cfgcfgtoetransflainte: TIntegerField;
    cfgeteemail: TStringField;
    cfgcfgcertificadoa1: TBlobField;
    cfgcfgsenhacertificadoa1: TStringField;
    etdetdcodigo: TIntegerField;
    mesmesbicm: TFloatField;
    qProSaldo: TUniQuery;
    qProSaldoprocodigo: TIntegerField;
    qProSaldoprosaldodisp: TFloatField;
    qProSaldoprosaldo: TFloatField;
    qProSaldopunmultiplicador: TFloatField;
    qProSaldoproestoque: TStringField;
    cfgcfgcontrolaestoque: TIntegerField;
    itmunicodigo: TIntegerField;
    pmc: TUniQuery;
    pmcggrem: TStringField;
    pmcregistro: TStringField;
    pmcean: TStringField;
    pmcpf: TStringField;
    pmcproduto: TStringField;
    pmcapresentacao: TStringField;
    messdecodigo: TStringField;
    IO_OpenSSL: TIdSSLIOHandlerSocketOpenSSL;
    SMTP: TIdSMTP;
    IdMessage1: TIdMessage;
    mesmescodigonota: TIntegerField;
    ori: TUniQuery;
    orietdcodigo: TIntegerField;
    orietddoc1: TStringField;
    mesoricodigo: TIntegerField;
    rdc: TUniQuery;
    qdtl: TUniQuery;
    dtldtlchave: TIntegerField;
    dtlmodalidade: TIntegerField;
    orietdapelido: TStringField;
    nrt: TUniQuery;
    nrtnrtcodigo: TStringField;
    nrtcrtcodigo: TIntegerField;
    nrtnrtidentificacao: TStringField;
    nrtnrtcfop_interno: TStringField;
    nrtnrticm_interno: TFloatField;
    nrtnrtcfop_externo: TStringField;
    nrtnrticm_externo: TFloatField;
    nrtnrtcombate_pobreza_aliquota: TFloatField;
    nrtnrtreducao_base_aliquota: TFloatField;
    nrtcstcodigo: TStringField;
    nrtcsicodigo: TStringField;
    nrtcspcodigo: TStringField;
    nrtpis_aliquota: TFloatField;
    nrtcsFcodigo: TStringField;
    nrtcofins_aliquota: TFloatField;
    nrtnrtclassificacao_is: TStringField;
    nrtnrtclassificacao_cpresumido: TStringField;
    nrtnrtibs_aliquota_estadual: TFloatField;
    nrtnrtibs_aliquota_municipal: TFloatField;
    nrtnrtdata_inicio: TDateField;
    nrtnrtdata_fim: TDateField;
    nrtnrtcbs_aliquota: TFloatField;
    nrtnrtreducao_cbs: TFloatField;
    nrtnrtreducao_ibs: TFloatField;
    nrtnrtcstibscbs: TStringField;
    itmnrtcodigo: TStringField;
    cfgcfgapuracaoicm: TIntegerField;
    itmitmtotal: TCurrencyField;
    inr: TUniQuery;
    mnr: TUniQuery;
    mesmesprotocolo: TStringField;
    Procedure FormClose(Sender: TObject; Var Action: TCloseAction);
    Procedure bconfirmaClick(Sender: TObject);
    Procedure bcancelaClick(Sender: TObject);
    procedure IdSMTPConnected(Sender: TObject);
    procedure IdSMTPDisconnected(Sender: TObject);
    procedure IdSMTPFailedRecipient(Sender: TObject; const AAddress, ACode, AText: string; var VContinue: Boolean);
    procedure IdSMTPStatus(ASender: TObject; const AStatus: TIdStatus; const AStatusText: string);
    procedure IdSMTPWork(ASender: TObject; AWorkMode: TWorkMode; AWorkCount: Int64);
    procedure IdSMTPWorkBegin(ASender: TObject; AWorkMode: TWorkMode; AWorkCountMax: Int64);
    procedure IdSMTPWorkEnd(ASender: TObject; AWorkMode: TWorkMode);
    procedure SMTPConnected(Sender: TObject);
    procedure SMTPDisconnected(Sender: TObject);
    procedure SMTPWorkBegin(ASender: TObject; AWorkMode: TWorkMode; AWorkCountMax: Int64);
    procedure SMTPWorkEnd(ASender: TObject; AWorkMode: TWorkMode);
    procedure ACBrNFeNotasStatusChange(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure IO_OpenSSLStatusInfo(const AMsg: string);
  Private
    Acesso: TAcesso;
    Fzcone: tuniconnection;
    vpConsultouSEFAZ: Boolean;
    procedure CalcularSaldo(vProcodigo: String);

    Procedure mConsultaSEFAZ;

    Procedure mCancelarNFe;
    Function mConsultaNFe(aSilent: Boolean = True): Boolean;
    Procedure mEmailNFe;
    Procedure mInutilizarNumeroNFe;
    Procedure mGerarPDF;
    Procedure mReimprimirNFe;
    Procedure CarregaNFe(narq: String);
    Procedure ImprimeNFe;

    Function validaentidade: Boolean;
    Function validatransporte: Boolean;
    Procedure mEnviarNFe;
    function GeraNomeNFe(vmeschave: String): String;
    procedure mCartaCorrecao;
    procedure cadastraemail(chave, chavemestre: string);
    procedure atualizatela;
    procedure ImprimeEventoNfe;
    Function mConsultaSEFAZInterna: Boolean;
    function VerificaPreExistencia(tipo: string): Boolean;
    function EnviarEmail(destino, copias, texto, assunto, xml, pdf, nome_cliente, nome_empresa: String): Boolean;
    procedure AtualizaMensagemEmail(Posicao: Integer; Mensagem: String);
    procedure mEmailEvento;
    procedure EnviarEmailEvento;
    procedure ReimprirEvento;
    procedure GeraNomeArqsEvento;
    procedure AjustaObservacoes;

    function impcertificado: string;

    function mConsultaEventoNFe: Boolean;
    function mCodigoConsultaSEFAZ: String;
    function processa: Boolean;
    procedure ajustafuncao;
    procedure AjustaCaminhoGeralNF(Data: TDate);
    procedure SalvarLogErro(eMessage, eStackTrace: String);
    procedure mInutilizarNumeroNFeDireto;
    procedure mManifDestDesconhecimento;

    procedure ArtMAPISendMail(const Subject, MessageText, MailFromName, MailFromAddress, MailToName, MailToAddress: String;
      const AttachmentFileNames: array of String);

    procedure VerifieAjustaItemcomSubstituicao(usEmitente, ufDestinatario: string);
    procedure VerifieAjustaItemcomConsumidorFinal(vContribuinte: Boolean);
    procedure VerifieAjustaICM;
    procedure VerifieAjustaPISCOFINS;
    procedure VerifieAjustaItemReclassificacao;
    function DefineVertical: String;
    function validatemprodutos: Boolean;
    function PermiteQuantidadeFiscal(Produto, CodUnidVenda: Integer; Quantidade: Double): Boolean;
    procedure Inicializar;
    procedure AtivaMizioArquivos;

    // procedure VerifieAjustaItemTransferenciaFilial;

    { Private declarations }
  Public
    { Public declarations }
    vpmestotalbaseicm: Double;

    vpFilial: String;
    vpPathAplicativo: String;
    vpStatSEFAZ: Integer;
    vModulo: string;

    vRotinaNFe: TRotinasNFe;

    vpDataAtual: Double;

    vusrcodigo: string;
    vpRetorno: String;
    vpArquivoNFe: String;
    vpArquivoXMLEvento: String;
    vpArquivoPDFEvento: String;
    vpMesChave: String;
    vChaveMestre: String;
    vSubPastaDoc: string;
    vPastaPrincipal: string;
    ACBrNFeDANFEFR: TACBrNFeDANFEFR;

    function LerConfiguracao: Boolean;

  published
    property zcone: tuniconnection read Fzcone write Fzcone;

  End;

  timpnfe = function(AOwner: TComponent; conexao: tuniconnection; vusrcodigo: string; vchave: string): string;
  tmodete = function(AOwner: TComponent; conexao: tuniconnection; vusuario: string; vchave: string; vChaveMestre: string): string;

  TValidaProdutos = Function(AOwner: TComponent; conexao: tuniconnection; ChaveMes: string; CodigoFilial: string = '1';
    VerificaNCM: Boolean = True): Boolean;

Var
  fnfe: Tfnfe;
  vpErroConsultaNFe: Boolean = False;
  vpConsultaVisivel: Boolean = True;

Implementation

uses
  ufnfecorrecao, uCloudComunicacao, ACBrUtil.DateTime;

{$R *.dfm}

function ModuloNFe(AOwner: TComponent; conexao: tuniconnection; varq: string; vchave: string; vRotinaNFe: TRotinasNFe; Acesso: TAcesso;
  vConsultouSefaz: Boolean): Boolean;
Var
  i, x: Integer;
  vHora: String;
  vDia: String;
  vlHamdle: Integer;
Begin

  if FindWindow('Tfnfe', nil) = 0 then
    fnfe := Tfnfe.Create(AOwner);
  try
    // ajusta variaveis de Mod Inicial
    fnfe.vpRetorno := '';
    vpErroConsultaNFe := False;
    fnfe.vpArquivoNFe := varq;
    fnfe.vpMesChave := vchave;
    fnfe.Acesso := Acesso;
    fnfe.vusrcodigo := fnfe.Acesso.Usuario.ToString;

    fnfe.vpConsultouSEFAZ := vConsultouSefaz;

    // atribui a todos os componentes de banco a conexao recebido
    fnfe.zcone := conexao;

    x := fnfe.ComponentCount - 1;
    For i := 0 To x Do
    begin
      If fnfe.Components[i] Is TUniQuery Then
        (fnfe.Components[i] As TUniQuery).Connection := conexao;

      If fnfe.Components[i] Is TUniScript Then
        (fnfe.Components[i] As TUniScript).Connection := conexao;
    end;

    vHora := agora(Application, conexao);

    fnfe.mes.Close;
    fnfe.mes.Params[0].AsString := fnfe.vpMesChave;
    fnfe.mes.Params[1].AsInteger := Acesso.Filial;
    fnfe.mes.Open;

    // vDia :=fnfe.mesmesemissao.AsString; // hoje(Application, conexao);
    vDia := hoje(Application, conexao);

    fnfe.vpDataAtual := strtodatetime(formatdatetime('dd/mm/yyyy', strtodate(vDia)) + ' ' + formatdatetime('hh:mm:ss', strtodatetime(vHora)));
    // fnfe.consulta.Fields[0].AsFloat;

    fnfe.cfg.Close;

    If Not fnfe.cfg.Active Then
    begin
      fnfe.cfg.ParamByName('flacodigo').AsString := Acesso.Filial.ToString;
      fnfe.cfg.Open;
    end;

    vlHamdle := 0;
    vlHamdle := FindWindow(nil, pchar('MizioArquivos:' + SoNumeros(fnfe.cfgetddoc1.AsString)));

    // verifica se houve erro na criação
    if vlHamdle = 0 then
    begin

      fnfe.AtivaMizioArquivos;
    end;
    if not fnfe.cfg.Active then
    begin
      fnfe.cfg.ParamByName('flacodigo').AsString:='1';
      fnfe.cfg.Open;
    end;

    if fnfe.cfgedrinscest.AsString = '' then
    begin
      showmessage('43494 - Este filial não possui Inscrição Estadual, a nota será emitida com os dados da Matriz!');
      fnfe.vpFilial := '1';
    end
    else
    begin
      fnfe.vpFilial := Acesso.Filial.ToString;
    end;

    fnfe.cfg.Close;
    fnfe.cfg.ParamByName('flacodigo').AsString := fnfe.vpFilial;
    fnfe.cfg.Open;

    fnfe.vPastaPrincipal := ExtractFilePath(Application.ExeName);

    fnfe.Caption:='Gerenciamento de Notas - v.:  '+GetAppVersionStr(extractfilepath(application.ExeName)+'modulos/mnfegourmet.bpl');

    fnfe.vSubPastaDoc := 'arqnfes';

    fnfe.AjustaCaminhoGeralNF(fnfe.vpDataAtual);

    // atribui modulo para variavel local
    // fnfe.vModulo := vModulo;

    fnfe.vRotinaNFe := vRotinaNFe;

    // carrega configuracaoes de ambiente do .ini

    fnfe.LerConfiguracao;

    fnfe.FormStyle := fsNormal;
    fnfe.pbotoes.Visible := True;
    fnfe.bconfirma.Enabled := True;

    if fnfe.ShowModal = mrOk then
      Result := True;
  finally
    fnfe.Free;
  end;
End;

exports ModuloNFe;

procedure Tfnfe.ArtMAPISendMail(const Subject, MessageText, MailFromName, MailFromAddress, MailToName, MailToAddress: String;
  const AttachmentFileNames: array of String);
// Originally by Brian Long: The Delphi Magazine issue 60 - Delphi And Email
var
  MAPIError: DWord;
  MapiMessage: TMapiMessage;
  Originator, Recipient: TMapiRecipDesc;
  Files, FilesTmp: PMapiFileDesc;
  FilesCount: Integer;
begin
  FillChar(MapiMessage, Sizeof(TMapiMessage), 0);

  MapiMessage.lpszSubject := PAnsiChar(AnsiString(Subject));
  MapiMessage.lpszNoteText := PAnsiChar(AnsiString(MessageText));

  FillChar(Originator, Sizeof(TMapiRecipDesc), 0);

  Originator.lpszName := PAnsiChar(AnsiString(MailFromName));
  Originator.lpszAddress := PAnsiChar(AnsiString(MailFromAddress));
  // MapiMessage.lpOriginator := @Originator;
  MapiMessage.lpOriginator := nil;

  MapiMessage.nRecipCount := 1;
  FillChar(Recipient, Sizeof(TMapiRecipDesc), 0);
  Recipient.ulRecipClass := MAPI_TO;
  Recipient.lpszName := PAnsiChar(AnsiString(MailToName));
  Recipient.lpszAddress := PAnsiChar(AnsiString(MailToAddress));
  MapiMessage.lpRecips := @Recipient;

  MapiMessage.nFileCount := High(AttachmentFileNames) - Low(AttachmentFileNames) + 1;
  Files := AllocMem(Sizeof(TMapiFileDesc) * MapiMessage.nFileCount);
  MapiMessage.lpFiles := Files;
  FilesTmp := Files;
  for FilesCount := Low(AttachmentFileNames) to High(AttachmentFileNames) do
  begin
    FilesTmp.nPosition := $FFFFFFFF;
    FilesTmp.lpszPathName := PAnsiChar(AnsiString(AttachmentFileNames[FilesCount]));
    Inc(FilesTmp)
  end;

  try
    MAPIError := MapiSendMail(0, Application.MainForm.Handle, MapiMessage, MAPI_LOGON_UI { or MAPI_NEW_SESSION } , 0);
  finally
    FreeMem(Files)
  end;

  case MAPIError of
    MAPI_E_AMBIGUOUS_RECIPIENT:
      showmessage('A recipient matched more than one of the recipient descriptor structures and MAPI_DIALOG was not set. No message was sent.');
    MAPI_E_ATTACHMENT_NOT_FOUND:
      showmessage('The specified attachment was not found; no message was sent.');
    MAPI_E_ATTACHMENT_OPEN_FAILURE:
      showmessage('The specified attachment could not be opened; no message was sent.');
    MAPI_E_BAD_RECIPTYPE:
      showmessage('The type of a recipient was not MAPI_TO, MAPI_CC, or MAPI_BCC. No message was sent.');
    MAPI_E_FAILURE:
      showmessage('One or more unspecified errors occurred; no message was sent.');
    MAPI_E_INSUFFICIENT_MEMORY:
      showmessage('There was insufficient memory to proceed. No message was sent.');
    MAPI_E_LOGIN_FAILURE:
      showmessage
        ('There was no default logon, and the user failed to log on successfully when the logon dialog box was displayed. No message was sent.');
    MAPI_E_TEXT_TOO_LARGE:
      showmessage('The text in the message was too large to sent; the message was not sent.');
    MAPI_E_TOO_MANY_FILES:
      showmessage('There were too many file attachments; no message was sent.');
    MAPI_E_TOO_MANY_RECIPIENTS:
      showmessage('There were too many recipients; no message was sent.');
    MAPI_E_UNKNOWN_RECIPIENT:
      showmessage('A recipient did not appear in the address list; no message was sent.');
    MAPI_E_USER_ABORT:
      showmessage('The user canceled the process; no message was sent.');
    SUCCESS_SUCCESS:
      showmessage('MAPISendMail successfully sent the message.');
  else
    showmessage('MAPISendMail failed with an unknown error code.');
  end;
end;

function Tfnfe.processa: Boolean;
begin
  bconfirma.Enabled := False;
  bcancela.Enabled := False;

  // processa comando

  case vRotinaNFe of
    rnfGerarNFe:
      mEnviarNFe;
    rnfImprimirNFe:
      mReimprimirNFe;
    rnfGerarPDF:
      mGerarPDF;
    rnfEmail:
      mEmailNFe;
    rnfCancelar:
      mCancelarNFe;
    rnfCartaCorrecao:
      mCartaCorrecao;
    rnfEmailEvento:
      mEmailEvento;
    rnfImprimirEvento:
      ReimprirEvento;
    rnfConsultaEvento:
      mConsultaEventoNFe;
    rnfInutilizar:
      mInutilizarNumeroNFe;
    rnfStatusSefaz:
      mConsultaSEFAZ;
    rnfStatusNFe:
      mConsultaNFe(False);
    rnfInutilizarDireto:
      mInutilizarNumeroNFeDireto;
    rnfManifDestDesconhecimento:
      mManifDestDesconhecimento;

  end;

  if vpRetorno <> '' then
    Result := True
  else
    Result := False;
end;

Procedure Tfnfe.FormClose(Sender: TObject; Var Action: TCloseAction);
Begin
  Action := caFree;
End;

procedure Tfnfe.FormShow(Sender: TObject);
begin

  self.Caption:='Gerenciamento de Notas - v.:  '+GetAppVersionStr(extractfilepath(application.ExeName)+'modulos/mnfegourmet.bpl');

  self.Width := 500;
  self.Height := 250;

  ajustafuncao;



end;

procedure Tfnfe.IdSMTPConnected(Sender: TObject);
begin
  LlMsgEmail.Caption := 'Conectado';
  atualizatela;
end;

procedure Tfnfe.IdSMTPDisconnected(Sender: TObject);
begin
  LlMsgEmail.Caption := 'Desconectado';
  atualizatela;

end;

procedure Tfnfe.IdSMTPFailedRecipient(Sender: TObject; const AAddress, ACode, AText: string; var VContinue: Boolean);
begin
  LlMsgEmail.Caption := 'Falha de recipiente!';
  atualizatela;

end;

procedure Tfnfe.IdSMTPStatus(ASender: TObject; const AStatus: TIdStatus; const AStatusText: string);
begin
  LlMsgEmail.Caption := AStatusText;
  atualizatela;

end;

procedure Tfnfe.IdSMTPWork(ASender: TObject; AWorkMode: TWorkMode; AWorkCount: Int64);
begin
  mostraemail.Max := AWorkCount;
  LlMsgEmail.Caption := IntToStr(AWorkCount);
  atualizatela;
end;

procedure Tfnfe.IdSMTPWorkBegin(ASender: TObject; AWorkMode: TWorkMode; AWorkCountMax: Int64);
begin
  // mostraemail.Max := AWorkCountMax;
  LlMsgEmail.Caption := 'Inicio do Envio';
  atualizatela;
end;

procedure Tfnfe.IdSMTPWorkEnd(ASender: TObject; AWorkMode: TWorkMode);
begin
  LlMsgEmail.Caption := 'Final do envio';
  atualizatela;
end;

Function Tfnfe.validatemprodutos: Boolean;
Begin
  consulta.Close;
  consulta.SQL.Text := 'select  count(itmchave) qtd from itm,pro where itm.procodigo=pro.procodigo and tpocodigo<>' + IntToStr(tpoServicos) +
    '  and meschave=' + mesmeschave.AsString;
  consulta.Open;

  if consulta.FieldByName('qtd').AsInteger = 0 then
  begin
    Result := False;
  end
  else
  begin
    Result := True;
  end;

End;

Function Tfnfe.validaentidade: Boolean;
Begin
  Result := True;
End;

Function Tfnfe.validatransporte: Boolean;
Begin
  Result := True;
End;

procedure Tfnfe.VerifieAjustaPISCOFINS;
var
  vlcfop: string;
  vlcstcodigo: string;
  vlcsicodigo: string;
  vlcspcodigo: string;
  vlcsfcodigo: string;
  vlcfgpercentualpis: string;
  vlcfgpercentualcofins: string;

  vlEtdCodigo: string;

  vlOrigemSimples: Boolean;
  vlDestinoNormal: Boolean;

  vlRetiraBalcao: Integer;
  vlParaRevenda: Integer;

begin

  if (mesttocodigo.AsInteger = 7) then
  begin

    consulta.Close;
    consulta.SQL.Text := 'select etdcodigo, mespararevenda,mesretirabalcao from mes where meschave=' + vpMesChave;
    consulta.Open;

    vlRetiraBalcao := consulta.FieldByName('mesretirabalcao').AsInteger;
    vlParaRevenda := consulta.FieldByName('mespararevenda').AsInteger;
    vlEtdCodigo := consulta.FieldByName('etdcodigo').AsString;

    consulta.Close;

    if cfgcrtcodigo.AsInteger = 3 then // normal
    begin
      vlOrigemSimples := False;
    end
    else
    begin
      vlOrigemSimples := True;
    end;

    consulta.Close;
    consulta.SQL.Text := 'select etdregime from etd where etdcodigo=' + vlEtdCodigo;
    consulta.Open;

    if (consulta.FieldByName('etdregime').AsInteger = 0) or (consulta.FieldByName('etdregime').AsInteger = 2) then
    begin
      vlDestinoNormal := False;
    end
    else
    begin
      vlDestinoNormal := True;
    end;

    consulta.Close;

    itm.Close;
    itm.Params[0].AsString := vpMesChave;
    itm.Params[1].AsInteger := Acesso.Filial;
    itm.Open;

    itm.First;

    While Not itm.Eof Do
    Begin

      if (itmitmaliqpis.AsFloat > 0) and (itmitmaliqcofins.AsFloat > 0) then
      begin

        itm.Edit;

        itmitmbpis.AsCurrency := (((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat)+ itmitmfrete.AsCurrency) - itmitmdesconto.AsCurrency +
          itmitmoutras.AsCurrency+itmitmicm.AsCurrency);
        itmitmpis.AsFloat := itmitmbpis.AsCurrency * (itmitmaliqpis.AsFloat / 100);


        itmitmbcofins.AsCurrency := (((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat)+itmitmfrete.AsCurrency ) - itmitmdesconto.AsCurrency + itmitmfrete.AsCurrency +
          itmitmoutras.AsCurrency+itmitmicm.AsCurrency);
        itmitmcofins.AsFloat := itmitmbcofins.AsCurrency * (itmitmaliqcofins.AsFloat / 100);

        itm.post;
      end
      else
      begin

        itm.Edit;
        itmitmpis.AsFloat := 0;
        itmitmbpis.AsCurrency := 0;
        itmitmcofins.AsFloat := 0;
        itmitmbcofins.AsCurrency := 0;
        itm.post;

      end;

      itm.Next;
    End;
  end;
end;

procedure Tfnfe.VerifieAjustaICM;
var
  vlcfop: string;
  vlcstcodigo: string;
  vlcsicodigo: string;
  vlcspcodigo: string;
  vlcsfcodigo: string;
  vlcfgpercentualpis: string;
  vlcfgpercentualcofins: string;

  vlEtdCodigo: string;

  vlOrigemSimples: Boolean;
  vlDestinoNormal: Boolean;

  vlRetiraBalcao: Integer;
  vlParaRevenda: Integer;

begin

  if (mesttocodigo.AsInteger <> ttoDevolucao) and (mesttocodigo.AsInteger <> ttoOutros) then
  begin

    itm.First;

    While Not itm.Eof Do
    Begin
      // Fran: 03/10/2022 - quando o veritical for boutique vai gerar a nota com CFOP de dentro do estado.

      consulta.Close;
      consulta.SQL.Text := 'SELECT p.procodigo, p.pronome, p.cfocfop, p.cfocfopfora,p.icmcodigo ,p.icmcodigofora, ';
      consulta.SQL.add('(SELECT icmaliquotas FROM icm c WHERE p.icmcodigo=c.icmcodigo) icmaliquota, ');
      consulta.SQL.add('(SELECT icmaliquotas FROM icm i WHERE p.icmcodigofora=i.icmcodigo) icmaliquotafora, ');
      consulta.SQL.add('p.propercreducaobaseicm, cstcodigo,csicodigo,cspcodigo,csfcodigo,propisaliquota, procofinsaliquota  ');
      consulta.SQL.add('from pro p where p.procodigo=' + itmprocodigo.AsString);
      consulta.Open;

      vlcstcodigo := consulta.FieldByName('cstcodigo').AsString;
      vlcsicodigo := consulta.FieldByName('csicodigo').AsString;
      vlcspcodigo := consulta.FieldByName('cspcodigo').AsString;
      vlcsfcodigo := consulta.FieldByName('csfcodigo').AsString;

      vlcfgpercentualpis := consulta.FieldByName('propisaliquota').AsString;
      vlcfgpercentualcofins := consulta.FieldByName('procofinsaliquota').AsString;

      itm.Edit;

      itmcstcodigo.AsString := vlcstcodigo;

      itmcsicodigo.AsString := consulta.FieldByName('csicodigo').AsString;
      itmcspcodigo.AsString := consulta.FieldByName('cspcodigo').AsString;
      itmcsfcodigo.AsString := consulta.FieldByName('csfcodigo').AsString;


      if (lowercase(consulta.FieldByName('icmcodigo').AsString) <> 'ff') and (lowercase(consulta.FieldByName('icmcodigo').AsString) <> 'nn') and
        (lowercase(consulta.FieldByName('icmcodigo').AsString) <> 'ii') then
      begin

        itm.Edit;

        if cfgufssigla.AsString = etdufssigla.AsString then
        begin
          itmicmcodigo.AsString := consulta.FieldByName('icmcodigo').AsString;
          itmicmaliquotas.AsString := consulta.FieldByName('icmaliquota').AsString;

          if (mesttocodigo.AsInteger = ttoVenda) { or (mesttocodigo.AsInteger = ttoOutros) } then
          begin
            itmcfocfop.AsString := consulta.FieldByName('cfocfop').AsString;
          end;

        end
        else
        begin

          if (mesttocodigo.AsInteger = ttoVenda) { or (mesttocodigo.AsInteger = ttoOutros) } then
          begin

            if cfgcfgpresencialtoedestino.AsInteger = 0 then
            begin
              itmcfocfop.AsString := consulta.FieldByName('cfocfop').AsString;
              itmicmcodigo.AsString := consulta.FieldByName('icmcodigo').AsString;
              itmicmaliquotas.AsString := consulta.FieldByName('icmaliquota').AsString;
            end
            else
            begin
              itmcfocfop.AsString := consulta.FieldByName('cfocfopfora').AsString;
              itmicmcodigo.AsString := consulta.FieldByName('icmcodigofora').AsString;
              itmicmaliquotas.AsString := consulta.FieldByName('icmaliquotafora').AsString;
            end;

          end;
        end;

        if itmicmaliquotas.AsFloat > 0 then
        begin

          itmitmbicm.AsCurrency := ((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat) - itmitmdesconto.AsCurrency + itmitmfrete.AsCurrency +
            itmitmoutras.AsCurrency);

          itmitmpercreducaobaseicm.AsFloat := consulta.FieldByName('propercreducaobaseicm').AsFloat;
          if itmitmpercreducaobaseicm.AsFloat > 0 then
          begin
            itmitmbicm.AsCurrency := itmitmbicm.AsCurrency - (itmitmbicm.AsCurrency * (itmitmpercreducaobaseicm.AsFloat / 100))
          end;

          itmitmicm.AsFloat := itmitmbicm.AsCurrency * (itmicmaliquotas.AsFloat / 100);

        end
        else
        begin
          itmitmpercreducaobaseicm.AsFloat := 0;
          itmitmbicm.AsCurrency := 0;
          itmitmicm.AsFloat := 0;
        end;

        itm.post;
      end;


      if itm.State=dsbrowse then
        itm.Edit;

      itmitmaliqpis.AsFloat := consulta.FieldByName('propisaliquota').AsFloat;
      itmitmaliqcofins.AsFloat := consulta.FieldByName('procofinsaliquota').AsFloat;

      if itmitmaliqpis.AsFloat > 0 then
      begin

        itmitmbpis.AsCurrency := (((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat)+itmitmfrete.AsCurrency)  - itmitmdesconto.AsCurrency +
          itmitmoutras.AsCurrency+itmitmicm.AsCurrency);

        itmitmpis.AsFloat := itmitmbpis.AsCurrency * (itmitmaliqpis.AsFloat / 100);

      end
      else
      begin
        itmitmpis.AsFloat := 0;
        itmitmbpis.AsCurrency := 0;
      end;

      if itmitmaliqcofins.AsFloat > 0 then
      begin

        itmitmbcofins.AsCurrency := (((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat)+ itmitmfrete.AsCurrency) - itmitmdesconto.AsCurrency  +
          itmitmoutras.AsCurrency+itmitmicm.AsCurrency);

        itmitmcofins.AsFloat := itmitmbcofins.AsCurrency * (itmitmaliqcofins.AsFloat / 100);

      end
      else
      begin
        itmitmcofins.AsFloat := 0;
        itmitmbcofins.AsCurrency := 0;
      end;
      itm.post;


      itm.Next;
    end;

    consulta.Close;
    consulta.SQL.Text := 'set @disable_triggers=1';
    consulta.ExecSQL;

    consulta.Close;
    consulta.SQL.Text := 'update mes set ';
    consulta.SQL.add('mesbicm=(select sum(itmbicm) from itm where mes.meschave=itm.meschave and meschave=' + mesmeschave.AsString + ') ');
    consulta.SQL.add('  ,mespis=(select sum(itmpis) from itm where mes.meschave=itm.meschave and meschave=' + mesmeschave.AsString + ') ');
    consulta.SQL.add('  ,mescofins=(select sum(itmcofins) from itm where mes.meschave=itm.meschave and meschave=' + mesmeschave.AsString + ') ');
    consulta.SQL.add('  where meschave=' + mesmeschave.AsString);
    consulta.ExecSQL;

    consulta.Close;
    consulta.SQL.Text := 'set @disable_triggers=null';
    consulta.ExecSQL;

  end;

end;

Procedure Tfnfe.ImprimeNFe;
Var
  it: Integer;
  vtBC: Double;
  vtICMS: Double;
  vtBCST: Double;
  vtICMSST: Double;

  vtipi: Double;
  vCST: String;

  vInfComplTEF, vInfComplGeral, vSeparadorGeral: String;
  vInfComplCF, vSeparadorCF: String;
  vInfComplNF, vSeparadorNF: String;
  vInfComplNFP, vSeparadorNFP: String;
  vInfComplNFe, vSeparadorNFe: String;
  Duplicata: TDupCollectionItem;

  vxdesc, vxtot, vxliq: Double;

  vAnoMesNFe: String;

  vTestaInscEst: String;

  vErro: String;
  vMsgRetorno: String;

  vNumeroNFe: Integer;
  varquivoXML: TStringList;
  varquivoNome: String;

  vChaveNFe: String;
  vChaveNFeErrada: String;

  vProtocoloNFe: String;
  vDataNFe: String;

  (* Carga Tributária *)
  vlTotTrib: Double;
  vlTotTribEst: Double;
  vlMensagemCargaTrib: String;

  (* Retornos da SEFAZ *)
  vCStat: Integer;
  vXMotivo: String;

  (* Utilizados para chamada do mvpr - Validação de Produtos *)
  ValidaProdutos: TValidaProdutos;
  vPodeProdutos: Boolean;
  Pack: HModule;
  i: Integer;
  vlNomeArquivoNFe: string;
  ok: Boolean;

  (* CST e CSOSN *)
  vlCSTIcmsOK: Boolean;
  vlCSTIcms: TpcnCSTIcms;

  vlCSOSNIcmsOK: Boolean;
  vlCSOSNIcms: TpcnCSOSNIcms;

  vltotpis: Double;
  vltotcofins: Double;
//  vltotServicos: Double;
  vlTotalFrete: Double;
  vlTotalDinheiro: Double;
  vlTotalPIX: Double;
  vlTotalOnLine: Double;

  vlrfinumero: string;
  vlParcela: Integer;
  vlPag: currency;
  vlTotalPag: currency;
  vlParcelaIndividual: currency;
  vltitulo: Integer;
  vlFatvLiq: Double;
  vlTotalCartoes: Double;
  vlTemANP: Boolean;
  vlTotalST: Double;

  vlTotalDescontoProdutos: Double;
  vlTotalDescontoServico: Double;

  vhrNFe: string;

  vlTotvFCP: Double;
  vlTotvFCPDest: Double;
  vlTotvFCPST: Double;
  vlICMSUFDest: Double;

  vlcodigonfe: string;
  vlItem: string;

  vlTentativasEnvio: Integer;

var
  s: String;
  iValue, iCode, iReduz: Integer;

  vlMensagemICM: STRING;
  vlMensagemReducaoBase: STRING;
  vlReducoes: TStringList;
  vlitemErro: String;
  vlMensagemSaldofiscal: string;

  vlQtdTributaria: Double;
  origCombl: TorigCombCollectionItem;
  vlNovoNcmGtin: string;
  vlProNcmMedicamento: Boolean;


  vlMesChaveNFE:String;
  vlMesCodigoNFE:String;

  // reforma tributaria
  TotalIBSCBSgIBSCBSgIBSUFvIBSUF:Double;
  TotalIBSCBSgIBSCBSgIBSMunvIBSMun:Double;
  TotalIBSCBSgIBSCBSgCBSvCBS:Double;

  TotalIBSCBSgIBSCBSvBC:Double;

  TotalIBSCBSgIBSCBSgTribRegularvTribRegIBSUF:Double;
  TotalIBSCBSgIBSCBSgTribRegularvTribRegIBSMun:Double;
  TotalIBSCBSgIBSCBSgTribRegularvTribRegCBS:Double;


Begin

  {
    consulta.close;
    consulta.sql.Text:='SET time_zone = "-04:00";';
    consulta.ExecSQL;

    consulta.close;
    consulta.sql.Text:='SET @@session.time_zone = "-04:00";';
    consulta.ExecSQL;
  }

  vlTentativasEnvio := 10;

  vlTotalDescontoProdutos := 0;
  vlTotalDescontoServico := 0;
  vpmestotalbaseicm := 0;

  vlTotvFCP := 0;
  vlTotvFCPDest := 0;
  vlTotvFCPST := 0;
  vlICMSUFDest := 0;

  vlTotalST := 0;
  vlTemANP := False;
  vlTotalDinheiro := 0;
  vlTotalPIX := 0;
  vlTotalOnLine := 0;

  vlTotalCartoes := 0;
  vlTotalFrete := 0;
  vxdesc := 0;
  vxtot := 0;
  vxliq := 0;
 // vltotServicos := 0;
  vlParcelaIndividual := 0;

  vltotpis := 0;
  vltotcofins := 0;

  // reforma tributaria

  TotalIBSCBSgIBSCBSgIBSUFvIBSUF:=0;
  TotalIBSCBSgIBSCBSvBC :=0;
  TotalIBSCBSgIBSCBSgIBSMunvIBSMun :=0;
  TotalIBSCBSgIBSCBSgCBSvCBS :=0;
  TotalIBSCBSgIBSCBSgTribRegularvTribRegIBSUF :=0;
  TotalIBSCBSgIBSCBSgTribRegularvTribRegIBSMun :=0;
  TotalIBSCBSgIBSCBSgTribRegularvTribRegCBS:=0;



  cfg.Close;
  cfg.ParamByName('flacodigo').AsInteger := Acesso.Filial;
  cfg.Open;

  //
  // ****** Carrega consulta da tabela mes e itm ********
  //

  mes.Close;
  mes.Params[0].AsString := vpMesChave;
  mes.Params[1].AsInteger := Acesso.Filial;
  mes.Open;

  rfi.Close;
  rfi.ParamByName('meschave').AsInteger := mesmeschave.AsInteger;
  rfi.Open;
  while not rfi.Eof do
  begin
    if strtodate(rfirfivencimento.AsString) < strtodate(hoje(Application, zcone)) then
    begin
      showmessage(' 9773  ATENÇÃO!' + #13 + #13 + 'Falha na Validação do SEFAZ MT.' + #13 +
        'O Contas a Rceber desta nota tem vencimento anterior a emissão da nota.' + 'Registro do Contas a Rceceber com a numero nr.: ' +
        rfirfinumero.AsString + ' vencimento ' + rfirfivencimento.AsString);
      exit;
    end;

    rfi.Next;
  end;

  rfi.First;

  qDtl.Close;
  qDtl.SQL.Clear;
  qDtl.SQL.add('SELECT distinct lte.ltetroco ltetroco, lte.ltechave ');
  qDtl.SQL.add('  FROM rfm ');
  qDtl.SQL.add(' INNER JOIN mfi ON rfm.rfichave = mfi.rfichave ');
  qDtl.SQL.add(' INNER JOIN mlt ON mlt.mfichave = mfi.mfichave ');
  qDtl.SQL.add(' INNER JOIN lte ON mlt.ltechave = lte.ltechave ');
  qDtl.SQL.add(' WHERE rfm.meschave = ' + mesmeschave.AsString);
  qDtl.Open;


  dtl.close;
  dtl.Connection := zcone;
  dtl.ParamByName('ltechave').AsString:=qDtl.FieldByName('ltechave').AsString;
  dtl.Open;


  tit.Close;
  tit.ParamByName('titcodigo').AsInteger := rfititcodigo.AsInteger;
  tit.Open;

  itm.Close;
  itm.Params[0].AsString := vpMesChave;
  itm.Params[1].AsInteger := Acesso.Filial;
  itm.Open;

  if (mesttocodigo.AsInteger = ttoVenda) { or (mesttocodigo.AsInteger = ttoOutros) } then
  begin

    if cfgcfgcontrolaestoque.AsInteger = 1 then
    begin

      vlMensagemSaldofiscal := '';
      itm.First;
      while not itm.Eof do
      begin

        if PermiteQuantidadeFiscal(itmprocodigo.AsInteger, itmunicodigo.AsInteger, itmitmquantidade.AsFloat) = False then
        begin
          vlMensagemSaldofiscal := vlMensagemSaldofiscal + 'Produto: ' + itmprocodigo.AsString + ' ' + itmpronome.AsString +
            ' sem saldo disponivel para emissão de nota fiscal' + #13;
        end;

        itm.Next;
      end;

    end;

  end;

  if vlMensagemSaldofiscal <> '' then
  begin
    showmessage(' 198787 ' + vlMensagemSaldofiscal);
    exit;
  end;

  itm.First;
  vlReducoes := TStringList.Create;

  itm.First;
  while not itm.Eof do
  begin
    consulta.Close;
    consulta.SQL.Text := 'select propercreducaobaseicm from pro where propercreducaobaseicm>0 and procodigo=' + itmprocodigo.AsString;
    consulta.Open;
    if not consulta.IsEmpty then
    begin
      vlReducoes.add(floattostr(100 - consulta.FieldByName('propercreducaobaseicm').AsFloat) + '%');
    end;

    itm.Next;
  end;

  itm.First;

  (*
    *
    ****** Verifica Pré-existência da NFe *******
    *
  *)
  if validatemprodutos = False then
  begin
    showmessage(' 44456454 - Não é permitido emissão de nota com apenas SERVIÇOS e sem MERCADORIAS!');
    exit; // Se NFe já existe abandona a geração.
  end;

  try
    if VerificaPreExistencia('55') then
      exit; // Se NFe já existe abandona a geração.
  except

  end;



  //
  // Valida Itens para Emissão do Documento
  //

  Pack := LoadPackage('modulos\mvpr.bpl');
  If Pack <> 0 Then
    Try
      @ValidaProdutos := GetProcAddress(Pack, pchar('ValidaProdutos'));

      If Assigned(ValidaProdutos) Then
        vPodeProdutos := ValidaProdutos(Application, zcone, vpMesChave, Acesso.Filial.ToString);

    Finally
      // DoUnLoadPackage(Application, Pack);
    End;

  if not vPodeProdutos then
    exit;

  vPodeProdutos := True;

  //
  // Carrega Operação e Entidade
  //

  toe.Close;

  toe.SQL.Text := 'select ttecodigo, toeidentificacao, toecodigo, ttocodigo,toedescricao,cstnormal,cstcodigo from toe where toecodigo=' +
    mestoecodigo.AsString;

  toe.Open;

  etd.Close;
  etd.ParamByName('etdcodigo').AsInteger := mesetdcodigo.AsInteger;
  etd.ParamByName('edritem').AsInteger := mesedritem.AsInteger;
  etd.Open;

  if etd.IsEmpty then
  begin
    Application.MessageBox(pchar('Falha no Cadastros do Destinatário!' + #13 + #13 + 'Corrija no cadastro do destinatário e tente novamente.'), '',
      MB_OK + MB_ICONERROR);

    exit;
  end;

  if etdetftelefone.AsString = '' then
  begin
    Application.MessageBox(pchar('Para emissão de NFe é necessário o NÚMERO do TELEFONE do CLIENTE para a nota!' + #13 + #13 +
      'Corrija no cadastro do CLIENTE e tente novamente.'), '', MB_OK + MB_ICONERROR);

    exit;

  end;

  AjustaObservacoes;

  CheckBox1.Checked := True;
  atualizatela;


  //
  // ***** Inicia GERAÇÃO da NFe *****
  //

  ACBrNFeNotas.NotasFiscais.Clear;

  ACBrNFeDANFEFR.NumCopias := cfgcfgviasnfe.AsInteger;
  if rfi.RecordCount > 0 then
  begin
    ACBrNFeDANFEFR.ExibeCampoFatura := True;
  end;

  If FileExists(ExtractFilePath(Application.ExeName) + 'logonfe.jpg') Then
  begin
    ACBrNFeDANFEFR.Logo := ExtractFilePath(Application.ExeName) + 'logonfe.jpg';
    ACBrNFeDANFEFR.ExpandeLogoMarca := True;
  end;



  // Try

  With ACBrNFeNotas.NotasFiscais.add.NFe Do
  Begin

    ide.indIntermed := iiSemOperacao;

    infRespTec.cnpj := '14477548000131';
    infRespTec.email := 'Mizio@Miziosisemas.com.br';
    infRespTec.xContato := 'Mizio Sistemas';
    infRespTec.fone := '6635442765';

    (*
      *
      ********* Identificação da NFe - IDE ********
      *
    *)

    if (rfi.RecordCount > 0) then
    begin

      // fpCartaoCredito, fpCartaoDebito
      vlTotalDescontoServico := 0;

      consulta.Close;
      consulta.SQL.Text := 'select  itmdesconto from itm,pro where itm.procodigo=pro.procodigo and tpocodigo=' + IntToStr(tpoServicos) +
        '  and meschave=' + mesmeschave.AsString;
      consulta.Open;
      consulta.First;
      while not consulta.Eof do
      begin

        // vlTotalDescontoServico := vlTotalDescontoServico + consulta.FieldByName('itmdesconto').AsCurrency;

        consulta.Next;
      end;

     { consulta.Close;
      consulta.SQL.Text := 'select messervicos, mesprodutos, mesdesconto from mes where meschave=' + mesmeschave.AsString;
      consulta.Open;

      if consulta.FieldByName('messervicos').AsFloat > 0 then
      begin

        vltotServicos := consulta.FieldByName('messervicos').AsFloat -
          (consulta.FieldByName('mesdesconto').AsCurrency * (consulta.FieldByName('mesdesconto').AsCurrency / (consulta.FieldByName('mesprodutos')
          .AsFloat + consulta.FieldByName('messervicos').AsFloat)));
      end
      else
      begin
        vltotServicos := 0;
      end;}

      vlTotalPIX := 0;
      vlTotalOnLine := 0;
      vlTotalDinheiro := 0;
      dtl.First;

      while not dtl.Eof do
      begin

        with pag.add do
        begin

          if dtlmodalidade.AsInteger = mdaChequeTerceiros then
            tPag := fpCheque;

          if dtlmodalidade.AsInteger = mdaCartaoDebito then
          begin
            vlTotalCartoes := vlTotalCartoes + dtldtlvalor.AsCurrency;
            tPag := fpCartaoDebito;
          end;

          if dtlmodalidade.AsInteger = mdaCartaoCredito then
          begin
            vlTotalCartoes := vlTotalCartoes + dtldtlvalor.AsCurrency;
            tPag := fpCartaoCredito;
          end;

          if dtlmodalidade.AsInteger = mdaConvenio then
            tPag := fpCreditoLoja;

          if dtlmodalidade.AsInteger = mdaDinheiro then
          begin
            vlTotalDinheiro := vlTotalDinheiro + dtldtlvalor.AsCurrency;
            tPag := fpDinheiro;
          end;

          if dtlmodalidade.AsInteger = mdaPIX then
          begin
            vlTotalPIX := vlTotalPIX + dtldtlvalor.AsCurrency;
            tPag := fpPagamentoInstantaneo;
          end;

          if dtlmodalidade.AsInteger = mdaOnline then
          begin
            vlTotalOnLine := vlTotalOnLine + dtldtlvalor.AsCurrency;
            tPag := fpTransfBancario;
          end;


          vlTotalDescontoProdutos := 0;

          itm.First;
          while not itm.Eof do
          begin
            if itmtpocodigo.AsInteger = tpoMercadoriaRevenda then
            begin

              vlTotalDescontoProdutos := vlTotalDescontoProdutos + itmitmdesconto.AsCurrency;

            end;

            itm.Next;
          end;

          vlPag := dtldtlvalor.AsCurrency;

          vPag := vlPag;
        end;
        dtl.Next;
      end;

     { if not consulta.IsEmpty then
      begin
        if consulta.FieldByName('messervicos').AsString <> '' then
          vltotServicos := consulta.FieldByName('messervicos').AsCurrency
        else
          vltotServicos := 0;
      end;}

      vlTotalPag := 0;
      if dtlmodalidade.AsInteger = mdaConvenio then
      begin

        Cobr.Fat.nFat := 'Tit: nr: ' + rfititcodigo.AsString;
        // Cobr.Fat.vOrig := (tittitvalor.AsCurrency - vltotServicos) - vlTotalDinheiro;

        Cobr.Fat.vOrig := dtldtlvalor.AsCurrency;
        Cobr.Fat.vDesc := 0;
        // Cobr.Fat.vLiq := tittitvalor.AsCurrency - vltotServicos - vlTotalDinheiro;
        vlParcela := 1;
        vlrfinumero := '';
        vltitulo := -1;
        vlFatvLiq := 0;
        while not rfi.Eof do
        begin

          vltitulo := rfititcodigo.AsInteger;

          if vlrfinumero <> rfirfinumero.AsString then
          begin

            { if (RoundTo(rfirfivalor.AsCurrency - (vltotServicos / rfi.RecordCount), -2) > 0.01) or  (RoundTo(rfirfivalor.AsCurrency - (vltotServicos / rfi.RecordCount), -2) = 0) then
              BEGIN }
            Duplicata := Cobr.Dup.add;
            Duplicata.nDup := formatfloat('000', vlParcela);
            Duplicata.dVenc := rfirfivencimento.AsFloat;
            { Duplicata.vDup :=
              strtofloat(formatfloat('#0.00', rfirfivalor.AsCurrency - (rfirfivalor.AsCurrency * ((vltotServicos - vlTotalDescontoServico) / (mesmestotal.AsCurrency)))));
              vlTotalPag := vlTotalPag +
              strtofloat(formatfloat('#0.00', rfirfivalor.AsCurrency - (rfirfivalor.AsCurrency * ((vltotServicos - vlTotalDescontoServico) / (mesmestotal.AsCurrency)))));
            }

           { Duplicata.vDup :=
              strtofloat(formatfloat('#0.00', rfirfivalor.AsCurrency - (rfirfivalor.AsCurrency * ((vltotServicos) / (mesmestotal.AsCurrency)))));
            vlTotalPag := vlTotalPag +
              strtofloat(formatfloat('#0.00', rfirfivalor.AsCurrency - (rfirfivalor.AsCurrency * ((vltotServicos) / (mesmestotal.AsCurrency)))));
           }

            Duplicata.vDup := rfirfivalor.AsCurrency;
            vlTotalPag := vlTotalPag +rfirfivalor.AsCurrency;


            vlParcelaIndividual := Duplicata.vDup;
            vlrfinumero := rfirfinumero.AsString;
            vlParcela := vlParcela + 1;
            { END; }
          end;
          rfi.Next;

          if rfi.Eof then
          begin

            vlFatvLiq := vlTotalPag;
            Cobr.Fat.vLiq := vlTotalPag;

          end;

        end;
        Cobr.Fat.vOrig := Cobr.Fat.vLiq;
      end;

    end
    else
    begin

      if (toettocodigo.AsInteger = ttoDevolucao) or (toettocodigo.AsInteger = ttoRemessaRetorno) or (toettocodigo.AsInteger = ttoOutros) or
        (toettocodigo.AsInteger = ttoComplemento) then
      begin
        with pag.add do
        begin
          tPag := fpSemPagamento;
          vPag := 0;
        end;
      end

      else
      begin

        if not dtl.IsEmpty then
        begin
          {
          consulta.Close;
          consulta.SQL.Text := 'select messervicos, mesprodutos, mesdesconto from mes where meschave=' + mesmeschave.AsString;
          consulta.Open;
          vltotServicos := consulta.FieldByName('messervicos').AsFloat -
            (consulta.FieldByName('mesdesconto').AsCurrency * (consulta.FieldByName('mesdesconto').AsCurrency / (consulta.FieldByName('mesprodutos')
            .AsFloat + consulta.FieldByName('messervicos').AsFloat)));
          }
          vlTotalDinheiro := 0;
          dtl.First;

          while not dtl.Eof do
          begin

            with pag.add do
            begin

              if dtlmodalidade.AsInteger = mdaChequeTerceiros then
                tPag := fpCheque;

              if dtlmodalidade.AsInteger = mdaCartaoDebito then
                tPag := fpCartaoDebito;

              if dtlmodalidade.AsInteger = mdaCartaoCredito then
                tPag := fpCartaoCredito;

              if dtlmodalidade.AsInteger = mdaConvenio then
                tPag := fpCreditoLoja;

              if dtlmodalidade.AsInteger = mdaDinheiro then
              begin
                vlTotalDinheiro := vlTotalDinheiro + dtldtlvalor.AsCurrency;
                tPag := fpDinheiro;
              end;

              if dtlmodalidade.AsInteger = mdaPIX then
              begin
                vlTotalPIX := vlTotalPIX + dtldtlvalor.AsCurrency;
                tPag := fpPagamentoInstantaneo;
              end;

              if dtlmodalidade.AsInteger = mdaOnLine then
              begin
                vlTotalOnLine := vlTotalOnLine + dtldtlvalor.AsCurrency;
                tPag := fpTransfBancario;
              end;


              vlPag := dtldtlvalor.AsCurrency;

              vPag := vlPag;
            end;
            dtl.Next;
          end;

        end
        else
        begin

          with pag.add do
          begin

            consulta.Close;
            consulta.SQL.Text := 'select sum(itmtotal-itmdesconto+itmfrete) produtos from itm,pro where itm.procodigo=pro.procodigo and pro.tpocodigo=' +
              QuotedStr('00') + ' and meschave=' + mesmeschave.AsString;
            consulta.Open;

            tPag := fpDinheiro;
            vPag := consulta.FieldByName('produtos').AsFloat;

          end;
        end;
      end;

    end;

    ide.cUF := cfgufscodigo.AsInteger;
    // Ide.cNF -> Código da NFe definido por último.

    ide.natOp := toetoeidentificacao.AsString;

    case mestfpcodigo.AsInteger of
      0:
        ide.indPag := ipVista;
      1:
        ide.indPag := ipPrazo;
      9:
        ide.indPag := ipOutras;
    else
      ide.indPag := ipOutras;
    end;

    ide.modelo := 55;
    ide.serie := cfgcfgserienfe.AsInteger;

    // Ide.cNF -> Número da NFe definido por último.
    infNFe.Versao := cfgcfgversao.AsFloat;

    ide.dEmi := vpDataAtual;
    ide.dSaiEnt := strtodatetime(agora(Application, zcone));

    // Ide.dSaiEnt := vpDataAtual;

    if UpperCase(cfgufssigla.AsString) <> UpperCase(etdufssigla.AsString) then
    begin

      if not etd.Active then
      begin
        etd.Close;
        etd.ParamByName('etdcodigo').AsInteger := mesetdcodigo.AsInteger;
        etd.ParamByName('edritem').AsInteger := mesedritem.AsInteger;
        etd.Open;

      end;

      if etdtcbcodigo.AsInteger = 2 then
      begin

        if ide.indPres = pcPresencial then
        begin
          if ide.indFinal = cfConsumidorFinal then
          begin
            if cfgcfgpresencialtoedestino.AsInteger = 1 then
            begin

              ide.idDest := doInterestadual;
              Transp.modFrete := mfSemFrete;

            end
            else
            begin

              ide.idDest := doInterna;
              Transp.modFrete := mfSemFrete;
            end;

          end
          else
          begin


            if cfgcfgpresencialtoedestino.AsInteger = 1 then
            begin
              ide.idDest := doInterestadual
            end
            else
            begin
              ide.idDest := doInterna;
              Transp.modFrete := mfSemFrete;
            end;
          end;
        end
        else
        begin


          if cfgcfgpresencialtoedestino.AsInteger = 1 then
          begin
            ide.idDest := doInterestadual
          end
          else
          begin
            ide.idDest := doInterna;
            Transp.modFrete := mfSemFrete;
          end;

        end;

      end
      else
      begin

        if ide.indPres = pcPresencial then
        begin
          if ide.indFinal = cfConsumidorFinal then
          begin

            if cfgcfgpresencialtoedestino.AsInteger = 1 then
            begin
              ide.idDest := doInterestadual;
              Transp.modFrete := mfSemFrete;
            end
            else
            begin

              ide.idDest := doInterna;
              Transp.modFrete := mfSemFrete;
            end;
          end
          else
          begin

            if cfgcfgpresencialtoedestino.AsInteger = 1 then
            begin
              ide.idDest := doInterestadual
            end
            else
            begin
              ide.idDest := doInterna;
            end;

          end;
        end
        else
        begin

          ide.idDest := doInterestadual
        end;

      end;
    end
    else
    begin

      

      itm.First;

      dtm.Close;
      dtm.ParamByName('meschave').AsString := vpMesChave;
      dtm.ParamByName('flacodigo').AsInteger := mesflacodigo.AsInteger;
      dtm.Open;

      If dtm.RecordCount = 1 Then
      Begin

        if vlTemANP then
        begin

          ide.idDest := doInterna;
          Transp.modFrete := mfContaDestinatario;

        end;
      End
      else
      begin
        Transp.modFrete := mfSemFrete;
        ide.idDest := doInterna;
      end;
    end;

    case toettecodigo.AsInteger of
      0:
        ide.tpNF := tnEntrada;
      1:
        ide.tpNF := tnSaida;
    end;

    ide.tpImp := tiRetrato;
    ide.tpEmis := teNormal;

    // Ide.tpEmis := teContingencia;
    // ACBrNFeNotas.Configuracoes.Geral.FormaEmissao := teContingencia;

    (* Finalidade da NFe *)
    case toettocodigo.AsInteger of
      ttoCompra, ttoVenda, ttoOutros, ttoRemessaRetorno:
        ide.finNFe := fnNormal;
      ttoDevolucao:
        ide.finNFe := fnDevolucao;
      ttoAjuste:
        ide.finNFe := fnAjuste;
      ttoComplemento:
        ide.finNFe := fnComplementar;
    end;

    if (toettocodigo.AsInteger = ttoVenda) or (toettocodigo.AsInteger = ttoOutros) then
      ide.indPres := pcPresencial
    else
      ide.indPres := pcNao;

      if mesoricodigo.AsInteger=3 then  // delivery entrega
      begin
        ide.indPres:= pcTeleatendimento;
        ide.indIntermed:=iiOperacaoSemIntermediador;

      end
      else if (mesoricodigo.AsInteger=7) or (mesoricodigo.AsInteger=8)  then  // nuc ou aiqfome
      begin

        ori.close;
        ori.ParamByName('oricodigo').AsInteger:=mesoricodigo.AsInteger;
        ori.Open;

        if orietdcodigo.AsInteger<>0 then
        begin

          ide.indPres:= pcTeleatendimento;
          ide.indIntermed:=iiOperacaoComIntermediador;

          with infIntermed do
          begin


           infIntermed.CNPJ:=SoNumeros(orietddoc1.AsString);
           infIntermed.idCadIntTran:=orietdapelido.AsString;

          end;

        end;
      end
      else    // presencial no salão
      begin
        ide.indPres := pcPresencial;
        ide.indIntermed := iiSemOperacao;
      end;



    ide.cMunFG := cfgcddcodigo.AsInteger;

    if cfgcfgmodonfe.AsInteger = 2 then
      ide.tpAmb := taHomologacao;

    if cfgcfgmodonfe.AsInteger = 1 then
      ide.tpAmb := taProducao;

    ide.verProc := '21.25.300.1';

    ctd.Close;
    ctd.Connection := zcone;
    ctd.Open;

    if not ctd.IsEmpty then
    begin
      if (ctdctdcnpj.AsString <> '') and (ctdctdcnpj.AsString <> '0') then
      begin
        try
          if strtofloat(SoNumeros(ctdctdcnpj.AsString)) > 0 then
          begin
            autXML.add.CNPJCPF := SoNumeros(ctdctdcnpj.AsString);
          end;
        except

        end;
      end;
    end;
    (*
      *
      ****** Grupo de Informações de Documentos Referenciados
      *
    *)
    vInfComplCF := '';
    vSeparadorCF := '';

    vInfComplNF := '';
    vSeparadorNF := '';
    vInfComplNFP := '';
    vSeparadorNFP := '';
    vInfComplNFe := '';
    vSeparadorNFe := '';

    dfr.Close;
    dfr.Params[0].AsString := vpMesChave;
    dfr.Open;

    (* Documento Fiscal Referenciado *)
    while not dfr.Eof do
    begin
      with ide.NFref.add do
      begin
        (* Nota Fiscal Modelo 1/1a *)
        if dfrtdfcodigo.AsString = tdfNotaFiscal then
          with RefNF do
          begin
            cUF := dfrufscodigo.AsInteger;
            AAMM := formatdatetime('yymm', dfrdfremissao.AsFloat);
            cnpj := SomenteNumeros(dfretddoc1.AsString);
            modelo := dfrtdfcodigo.AsInteger;
            // serie := dfrdfrserie.AsInteger;
            serie := cfgcfgserienfe.AsInteger;

            nNF := dfrdfrnumero.AsInteger;

            if vInfComplNF = '' then
              vInfComplNF := 'Nota Fiscal referenciada: ';

            vInfComplNF := vInfComplNF + vSeparadorNF + dfrdfrnumero.AsString;
            vSeparadorNF := ', ';
          end;

        (* Nota Fiscal de Produtor Rural *)
        if dfrtdfcodigo.AsString = tdfNotaFiscalDeProdutor then
          with RefNFP do
          begin
            cUF := dfrufscodigo.AsInteger;
            AAMM := formatdatetime('yymm', dfrdfremissao.AsFloat);
            CNPJCPF := SomenteNumeros(dfretddoc1.AsString);

            IE := SomenteNumeros(dfredrinscest.AsString);

            if Copy(IE, 1, 1) = '0' then
              IE := Copy(IE, 2, 20);

            if Copy(IE, 1, 1) = '0' then
              IE := Copy(IE, 2, 20);

            if Copy(IE, 1, 1) = '0' then
              IE := Copy(IE, 2, 20);

            if Copy(IE, 1, 1) = '0' then
              IE := Copy(IE, 2, 20);

            modelo := dfrtdfcodigo.AsString;
            serie := cfgcfgserienfe.AsInteger;
            // serie := dfrdfrserie.AsInteger;
            nNF := dfrdfrnumero.AsInteger;

            if vInfComplNFP = '' then
              vInfComplNFP := 'Nota Fiscal de Produtor referenciada: ';

            vInfComplNFP := vInfComplNFP + vSeparadorNFP + dfrdfrnumero.AsString;
            vSeparadorNFP := ', ';
          end;

        (* Nota Fiscal Eletrônica - NFe *)
        if MatchStr(dfrtdfcodigo.AsString, [tdfNotaFiscalEletronica, tdfNotaFiscalConsumidorEletronica]) then
        begin
          refNFe := dfrdfrchavenfe.AsString;

          if vInfComplNFe = '' then
            vInfComplNFe := 'NF-e referenciada: ';

          vInfComplNFe := vInfComplNFe + vSeparadorNFe + dfrdfrchavenfe.AsString;
          vSeparadorNFe := ', ';
        end;
      end;

      dfr.Next;
    end;

    if vInfComplNF <> '' then
      vInfComplNF := vInfComplNF + ';';

    if vInfComplNFP <> '' then
      vInfComplNFP := vInfComplNFP + ';';

    if vInfComplNFe <> '' then
      vInfComplNFe := vInfComplNFe + ';';

    if vInfComplCF <> '' then
      vInfComplCF := vInfComplCF + ';';

    (*
      *
      ****** Emitente da NFe - EMIT ********
      *
    *)

    Emit.CNPJCPF := SomenteNumeros(cfgetddoc1.AsString);
    Emit.IE := SomenteNumeros(cfgedrinscest.AsString);

    if Copy(Emit.IE, 1, 1) = '0' then
      Emit.IE := Copy(Emit.IE, 2, 20);

    if Copy(Emit.IE, 1, 1) = '0' then
      Emit.IE := Copy(Emit.IE, 2, 20);

    if Copy(Emit.IE, 1, 1) = '0' then
      Emit.IE := Copy(Emit.IE, 2, 20);

    if Copy(Emit.IE, 1, 1) = '0' then
      Emit.IE := Copy(Emit.IE, 2, 20);

    Emit.xNome := cfgetdidentificacao.AsString;
    Emit.xFant := cfgetdapelido.AsString;
    Emit.EnderEmit.fone := cfgetftelefone.AsString;
    Emit.EnderEmit.CEP := StrToInt(SomenteNumeros(cfgedrcep.AsString));
    Emit.EnderEmit.xLgr := cfgedrrua.AsString;
    Emit.EnderEmit.nro := cfgedrnumero.AsString;
    Emit.EnderEmit.xCpl := '';
    Emit.EnderEmit.xBairro := cfgedrbairro.AsString;
    Emit.EnderEmit.cMun := cfgcddcodigo.AsInteger;
    Emit.EnderEmit.xMun := cfgcddnome.AsString;
    Emit.EnderEmit.UF := UpperCase(cfgufssigla.AsString);
    Emit.EnderEmit.cPais := 1058;

    if trim(mesmesfilialpedido.AsString) <> '' then
    begin
      Emit.EnderEmit.xCpl := mesmesfilialpedido.AsString;
    end;

    Emit.EnderEmit.xPais := 'BRASIL';

    case cfgcrtcodigo.AsInteger of
      1:
        Emit.CRT := crtSimplesNacional;
      2:
        Emit.CRT := crtSimplesExcessoReceita;
      3:
        Emit.CRT := crtRegimeNormal;
    end;

    (*
      *
      ********* Destinatário da NFe **********
      *
    *)

    Dest.CNPJCPF := SomenteNumeros(self.etdetddoc1.AsString);
    Dest.EnderDest.CEP := StrToInt(SomenteNumeros(etdedrcep.AsString));
    Dest.EnderDest.xLgr := etdedrrua.AsString;
    Dest.EnderDest.nro := etdedrnumero.AsString;
    Dest.EnderDest.xCpl := '';
    Dest.EnderDest.xBairro := etdedrbairro.AsString;
    Dest.EnderDest.cMun := etdcddcodigo.AsInteger;
    Dest.EnderDest.xMun := etdcddnome.AsString;
    Dest.EnderDest.UF := UpperCase(etdufssigla.AsString);
    Dest.EnderDest.fone := etdetftelefone.AsString;

    (* Valida Inscrição Estadual do Destinatário *)
    try
      vTestaInscEst := trim(SomenteNumeros(etdedrinscest.AsString));

      if vTestaInscEst = '00000000000' then
        vTestaInscEst := '';

      strtofloat(vTestaInscEst);

      ACBrValidador1.TipoDocto := docInscEst;
      ACBrValidador1.Complemento := UpperCase(etdufssigla.AsString);
      ACBrValidador1.Documento := vTestaInscEst;

      if not ACBrValidador1.Validar then
      begin
        Application.MessageBox(pchar('Inscrição Estadual do destinatário inválida.' + #13 + #13 +
          'Corrija no cadastro do destinatário e tente novamente.'), 'Inscrição Estadual Inválida', MB_OK + MB_ICONERROR);
        vTestaInscEst := '';
        exit;
      end;

      if Length(SomenteNumeros(self.etdetddoc1.AsString)) = 14 then
        ACBrValidador1.TipoDocto := docCNPJ;

      if Length(SomenteNumeros(self.etdetddoc1.AsString)) = 11 then
        ACBrValidador1.TipoDocto := docCPF;

      ACBrValidador1.Documento := SomenteNumeros(self.etdetddoc1.AsString);

      if not ACBrValidador1.Validar then
      begin
        Application.MessageBox(pchar('CNPJ ou CPF do destinatário inválido.' + #13 + #13 + 'Corrija no cadastro do destinatário e tente novamente.'),
          'CNPJ ou CPF Inválido', MB_OK + MB_ICONERROR);

        exit;
      end;

    except
      vTestaInscEst := '';
    end;

    if vTestaInscEst <> '' then
    begin
      Dest.IE := vTestaInscEst;
      Dest.indIEDest := inContribuinte;

      if mesmespararevenda.AsInteger = 1 then
      begin
        ide.indFinal := cfNao;
      end
      else
      begin
        ide.indFinal := cfConsumidorFinal;
      end;
    end
    else
    begin
      Dest.IE := '';
      Dest.indIEDest := inNaoContribuinte;
      ide.indFinal := cfConsumidorFinal;
    end;

    if etdedrrazaofazenda.AsString <> '' then
      Dest.xNome := etdedrrazaofazenda.AsString
    else
      Dest.xNome := etdetdidentificacao.AsString;
    Dest.EnderDest.cPais := 1058;
    Dest.EnderDest.xPais := 'BRASIL';

    (*
      *
      ********* Detalhamento de Produtos e Serviços - DET ***********
      *
    *)

    itm.Refresh;

    itm.IndexFieldNames := 'itmchave';
    itm.First;
    it := 1;

    vtBC := 0;
    vtICMS := 0;
    vtBCST := 0;
    vtICMSST := 0;

    vlTotTrib := 0;
    vlTotTribEst := 0;
    vlMensagemCargaTrib := '';

    itm.Close;
    itm.Params[0].AsString := vpMesChave;
    itm.Params[1].AsInteger := Acesso.Filial;
    itm.Open;

    itm.First;
    While Not itm.Eof Do
    Begin

      if (cfgcfgusacstnoproduto.AsInteger = 0) and (cfgcfgdefinetoeatendimento.AsInteger = 0) then
      begin

        toeitm.Close;
        toeitm.Connection := zcone;
        toeitm.ParamByName('toecodigo').AsInteger := itmtoecodigo.AsInteger;
        toeitm.Open;

        itmcst.Close;
        itmcst.Connection := zcone;
        itmcst.ParamByName('itmchave').AsInteger := itmitmchave.AsInteger;
        itmcst.Open;

        if dfr.IsEmpty then
        begin

          if itmcstcodigo.AsString = '' then
          begin

            itmcst.Edit;
            itmcstcstcodigo.AsString := toeitmcstcodigo.AsString;
            itmcstcsicodigo.AsString := toeitmcsicodigo.AsString;
            itmcstcspcodigo.AsString := toeitmcspcodigo.AsString;
            itmcstcsfcodigo.AsString := toeitmcsfcodigo.AsString;
            itmcstitmaliqpis.AsFloat := toeitmcfgpercentualpis.AsFloat;
            itmcstitmaliqcofins.AsFloat := toeitmcfgpercentualcofins.AsFloat;
            itmcst.post;
          end;
        end;

      end;
      itm.Next;
    End;

    if (mesttocodigo.AsInteger = ttoVenda) { or (mesttocodigo.AsInteger = ttoOutros) } then
    begin

      VerifieAjustaICM;
      VerifieAjustaItemcomSubstituicao(Emit.EnderEmit.UF, Dest.EnderDest.UF);
      VerifieAjustaPISCOFINS;
    end
    { else if (mesttocodigo.AsInteger = ttoOutros) then
      begin
      VerifieAjustaICM;
      end }
    else if (mesttocodigo.AsInteger = ttoReclassificacao) then
    begin
      VerifieAjustaItemReclassificacao;
    end;

    if UpperCase(cfgufssigla.AsString) <> UpperCase(etdufssigla.AsString) then
    begin
      if ide.indPres = pcPresencial then
      begin
        if ide.indFinal = cfConsumidorFinal then
        begin
          if mesmesretirabalcao.AsInteger = 1 then
          begin

            VerifieAjustaItemcomConsumidorFinal(False);

          end
          else
          begin

            ide.idDest := doInterestadual;
          end;

        end;
      end;
    end;

    itm.Close;
    itm.Params[0].AsString := vpMesChave;
    itm.Params[1].AsInteger := Acesso.Filial;
    itm.Open;

    itm.First;

    itm.First;
    While Not itm.Eof Do
    Begin

      vlQtdTributaria := 1;

      

      With Det.add Do
      Begin

        infAdProd := itmitmdesccomple.AsString;
        Prod.nItem := it;
        Prod.ncm := SomenteNumeros(itmproncm.AsString);

        ACBrValidadorBarra.TipoDocto := docGTIN;
        ACBrValidadorBarra.Documento := Copy(itmpunbarra.AsString, 2, 13);
        if ACBrValidadorBarra.Validar then
        begin
          Prod.cEAN := Copy(itmpunbarra.AsString, 2, 13);
          Prod.cEANTrib := Prod.cEAN;

          pmc.Close;
          pmc.ParamByName('ean').AsString := Prod.cEAN;
          pmc.Open;
          vlProNcmMedicamento := False;
          consulta.Close;
          consulta.SQL.Text := 'select proncm from pro where procodigo=' + itmprocodigo.AsString;
          consulta.Open;
          if (Copy(consulta.FieldByName('proncm').AsString, 1, 4) = '3001') or (Copy(consulta.FieldByName('proncm').AsString, 1, 4) = '3002') or
            (Copy(consulta.FieldByName('proncm').AsString, 1, 4) = '3003') or (Copy(consulta.FieldByName('proncm').AsString, 1, 4) = '3004') or
            (Copy(consulta.FieldByName('proncm').AsString, 1, 4) = '3005') or (Copy(consulta.FieldByName('proncm').AsString, 1, 4) = '3006') then
          begin
            vlProNcmMedicamento := True;
          end;

          if (not pmc.IsEmpty) or (vlProNcmMedicamento) then
          begin

            if (pmcpf.AsString <> '') or (vlProNcmMedicamento) then
            begin

              With Prod.med.add Do
              Begin
                if pmcregistro.AsString <> '' then
                begin
                  cProdANVISA := pmcregistro.AsString;
                end
                else
                begin
                  cProdANVISA := 'ISENTO';
                end;
                if pmcpf.AsString <> '' then
                begin
                  vPMC := pmcpf.AsFloat;
                end;
              End;

            end;

          end;

        end
        else
        begin
          Prod.cEAN := 'SEM GTIN';
          Prod.cEANTrib := Prod.cEAN;
        end;

        if itmpadextipi.AsString <> '' then
        begin
          Prod.EXTIPI := itmpadextipi.AsString;
        end;

        Prod.CFOP := SoNumeros(itmcfocfop.AsString); // '5101';

        
        Prod.cProd := self.itmprocodigo.AsString; // '67';

        If cfgcfgdescrinfe.AsInteger = 0 Then
          Prod.xProd := BuscaTroca(trim(itmpronome.AsString), '%', '');

        If cfgcfgdescrinfe.AsInteger = 1 Then
          Prod.xProd := BuscaTroca(trim(itmpronomereduzido.AsString), '%', '');

        If (Copy(Prod.xProd, 1, 1) = '.') Then
          Prod.xProd := trim(Copy(Prod.xProd, 2, 300));

        Prod.qCom := self.itmitmquantidade.AsFloat;
        Prod.uCom := self.itmunisimbolo.AsString; // 'KG';
        Prod.vProd := TBRound(self.itmitmquantidade.AsFloat * self.itmitmvalor.AsFloat, 2);
        Prod.vUnCom := self.itmitmvalor.AsFloat; // 10;

        Prod.vDesc := self.itmitmdesconto.AsFloat;

        Prod.qTrib := self.itmpunqtdtribtotal.AsFloat;
        Prod.uTrib := self.itmunisimbolotrib.AsString;
        if itmpunqtdtribtotal.AsCurrency > 0 then
          Prod.vUnTrib := Prod.vProd / Prod.qTrib
        else
          Prod.vUnTrib := 0;

        Prod.vOutro := self.itmitmoutras.AsFloat;

        vxdesc := vxdesc + Prod.vDesc; // acumula o valor do desconto
        vxtot := vxtot + Prod.vProd; // acumula o valor total do item
        vxliq := vxliq + (vxtot - vxdesc); // acumula o valor liquido da nota

        // inclui dados do pedido
        if (mesmesnumeropedido.AsString <> '') and (itmitmitempedido.AsString <> '') then
        begin
          Prod.xPed := mesmesnumeropedido.AsString;

          s := itmitmitempedido.AsString;

          val(s, iValue, iCode);

          if iCode = 0 then
          begin
            Prod.nItemPed := formatfloat('000000', itmitmitempedido.AsInteger);

          end
          else
          begin
            Prod.nItemPed := itmitmitempedido.AsString;
          end;

        end;

        if itmtpocodigo.AsInteger = 99 then
          Prod.CEST := '01.999.00';

        if itmtcecest.AsString <> '' then
        begin
          Prod.CEST := itmtcecest.AsString;
        end;

        With Imposto Do
        Begin

          (* Se for operação de Venda define o total de carga tributária por item *)
          if (toettocodigo.AsInteger = ttoVenda) or (toettocodigo.AsInteger = ttoOutros) then
          begin
            Imposto.vTotTrib := itmitmcargatrib.AsFloat + itmitmcargatribest.AsFloat;

            (* Acumula totais de carga tributária por ente Federal e Estadual *)
            vlTotTrib := vlTotTrib + itmitmcargatrib.AsFloat;
            vlTotTribEst := vlTotTribEst + itmitmcargatribest.AsFloat;
          end;




          case mesrefcodigo.AsInteger of
            1:
              begin
                Prod.vFrete := itmitmfrete.AsCurrency;
                vlTotalFrete := vlTotalFrete + itmitmfrete.AsCurrency;
              end;
            9:
              Total.ICMSTot.vFrete := 0;
          end;

          With ICMS Do
          Begin


            case Emit.CRT of
              (* CSOSN *)

              crtSimplesNacional:
                begin

                  vCST := self.itmcstcodigo.AsString;

                  if (Copy(self.itmcstcodigo.AsString, 2, 2) = '61') then
                  begin

                    vCST := Copy(self.itmcstcodigo.AsString, 2, 2);
                    vlCSTIcms := StrToCSTICMS(vlCSTIcmsOK, vCST);

                    if vlCSTIcmsOK then
                      CST := vlCSTIcms;

                  end
                  else
                  begin

                    vlCSOSNIcms := StrToCSOSNIcms(vlCSOSNIcmsOK, vCST);

                    if vlCSOSNIcmsOK then
                      CSOSN := vlCSOSNIcms

                  end;
                end;

              (* CST *)
              crtRegimeNormal, crtSimplesExcessoReceita:
                begin

                  if (Copy(self.itmcstcodigo.AsString, 2, 2) = '60') then
                  begin

                    vlCSTIcms := StrToCSTICMS(vlCSTIcmsOK, Copy(self.itmcstcodigo.AsString, 2, 2) + 'rep');

                  end
                  else
                  begin
                    vCST := Copy(self.itmcstcodigo.AsString, 2, 2);

                    vlCSTIcms := StrToCSTICMS(vlCSTIcmsOK, vCST);

                  end;

                  if vlCSTIcmsOK then
                    CST := vlCSTIcms;
                end;

            end;

            ICMS.modBC := dbiValorOperacao;
            If (lowercase(self.itmicmcodigo.AsString) = 'ff') Or (lowercase(self.itmicmcodigo.AsString) = 'ii') Or
              (lowercase(self.itmicmcodigo.AsString) = 'nn') Or (lowercase(self.itmicmcodigo.AsString) = '00') Or
              (lowercase(self.itmicmcodigo.AsString) = '01') Then
            Begin
              ICMS.pICMS := 0;
              ICMS.vICMS := 0;
              ICMS.vBC := 0;
            End
            Else
            Begin
              If (self.itmicmcodigo.AsFloat = 0.01) or (self.itmitmicm.AsFloat = 0) Then
              Begin
                ICMS.pICMS := 0;
                ICMS.vICMS := 0;
                ICMS.vBC := 0;
                if (ICMS.CSOSN = csosn900) or (ICMS.CSOSN = csosn500) or (ICMS.CSOSN = csosn400) then
                begin
                  if (itmitmbicms.AsFloat > 0) and (itmitmaliqicms.AsFloat > 0) then
                  begin
                    ICMS.modBCST := dbisMargemValorAgregado;
                    ICMS.pMVAST := itmitmmva.AsFloat;
                    ICMS.vBCST := itmitmbicms.AsFloat;
                    ICMS.pICMSST := itmitmaliqicms.AsFloat;
                    ICMS.vICMSST := itmitmicms.AsFloat;
                    ICMS.pRedBC := itmitmpercreducaobaseicm.AsCurrency;
                  end;
                end
                else
                begin
                  if (itmitmbicms.AsFloat > 0) and (itmitmaliqicms.AsFloat > 0) then
                  begin
                    ICMS.modBCST := dbisMargemValorAgregado;
                    ICMS.pMVAST := itmitmmva.AsFloat;
                    ICMS.vBCST := itmitmbicms.AsFloat;
                    ICMS.pICMSST := itmitmaliqicms.AsFloat;
                    ICMS.vICMSST := itmitmicms.AsFloat;
                    ICMS.pRedBC := itmitmpercreducaobaseicm.AsCurrency;

                  end;
                end;
              End
              Else
              Begin
                ICMS.pICMS := self.itmicmaliquotas.AsFloat;
                ICMS.vICMS := itmitmicm.AsFloat;
                ICMS.vBC := itmitmbicm.AsCurrency;
                ICMS.pRedBC := itmitmpercreducaobaseicm.AsCurrency;

                if (ICMS.CSOSN = csosn900) or (ICMS.CSOSN = csosn500) or (ICMS.CSOSN = csosn400) then
                begin
                  if (itmitmbicms.AsFloat > 0) and (itmitmaliqicms.AsFloat > 0) then
                  begin
                    ICMS.modBCST := dbisMargemValorAgregado;
                    ICMS.pMVAST := itmitmmva.AsFloat;
                    ICMS.vBCST := itmitmbicms.AsFloat;
                    ICMS.pICMSST := itmitmaliqicms.AsFloat;
                    ICMS.vICMSST := itmitmicms.AsFloat;
                  end;
                end
                else
                begin
                  if (itmitmbicms.AsFloat > 0) and (itmitmaliqicms.AsFloat > 0) then
                  begin
                    ICMS.modBCST := dbisMargemValorAgregado;
                    ICMS.pMVAST := itmitmmva.AsFloat;
                    ICMS.vBCST := itmitmbicms.AsFloat;
                    ICMS.pICMSST := itmitmaliqicms.AsFloat;
                    ICMS.vICMSST := itmitmicms.AsFloat;
                  end;
                end;
              End;
            End;

            if (ICMS.CSOSN = csosn202) or (ICMS.CSOSN = csosn500) then
            begin

              vtICMS := vtICMS + 0;
              vtBC := vtBC + 0;
              ICMS.vBCFCPST := 0;
              ICMS.pFCPST := 0;
              ICMS.vFCPST := 0;

            end
            else
            begin
              vtICMS := vtICMS + ICMS.vICMS;
              vtBC := vtBC + ICMS.vBC;

            end;

            vlTotalST := vlTotalST + ICMS.vICMSST;
            vtICMSST := vtICMSST + ICMS.vICMSST;
            vtBCST := vtBCST + ICMS.vBCST;
            { if (ICMS.CST = cst60) and (Ide.indFinal = cfConsumidorFinal) then
              begin
              pST := 17;
              end; }

            if (itmcfocfop.AsString <> '5.405') and (itmcfocfop.AsString <> '6.411') and (itmcfocfop.AsString <> '6.403') then
            begin

              if (Dest.indIEDest = inNaoContribuinte) and (ide.indFinal = cfConsumidorFinal) and (Emit.EnderEmit.UF <> Dest.EnderDest.UF) and
                (cfgcfgpresencialtoedestino.AsInteger = 1) then
              begin


                //
                // ****** Carrega tabela icms ********
                //

                icf.Close;
                icf.FilterSQL := QuotedStr(formatdatetime('yyyy-mm-dd', ide.dEmi)) + ' BETWEEN date(icfdatainicial) AND date(icfdatafinal)';
                icf.Open;

                ici.Close;
                ici.FilterSQL := 'iciuforigem=' + QuotedStr(Emit.EnderEmit.UF) + ' AND iciufdestino=' + QuotedStr(Dest.EnderDest.UF);
                ici.Open;

                if vtBC > 0 then
                begin

                  ICMSUFDest.vBCUFDest := vtBC;
                  ICMSUFDest.pICMSUFDest := 0; // itmicmaliquotas.AsFloat;
                  ICMSUFDest.pICMSInter := itmicmaliquotas.AsFloat; // iciiciicmaliguotaicms.AsFloat;
                  ICMSUFDest.pICMSInterPart := icficfpercicmdestino.AsFloat;

                  if (vtBC * (itmicmaliquotas.AsFloat / 100)) - (vtBC * (ICMSUFDest.pICMSInter / 100)) > 0 then
                  begin
                    // ICMSUFDest.vICMSUFDest := (vtBC * (itmicmaliquotas.AsFloat / 100)) - (vtBC * (ICMSUFDest.pICMSInter / 100));
                    ICMSUFDest.vICMSUFDest := RoundTo((vtBC * (iciiciicmaliguotaicms.AsFloat / 100)) * (icficfpercicmorigem.AsFloat / 100), -2);
                    vlICMSUFDest := vlICMSUFDest + ICMSUFDest.vICMSUFDest;
                  end;

                  // ICMSUFDest.vICMSUFRemet := RoundTo((vtBC * (iciiciicmaliguotaicms.AsFloat / 100)) * (icficfpercicmorigem.AsFloat / 100), -2);
                  ICMSUFDest.vICMSUFRemet := 0;
                  // ICMSUFDest.vICMSUFDest := RoundTo((vtBC * (iciiciicmaliguotaicms.AsFloat / 100)) * (icficfpercicmorigem.AsFloat / 100), -2);
                  ICMSUFDest.vICMSUFDest := 0;

                end;
              end;
            end;

            if cfgcrtcodigo.AsInteger <> 1 then
            begin

              if (itmitmbasefcpicm.AsString <> '') and (itmitmbasefcpicm.AsString <> '0') then
              begin

                if (Dest.indIEDest <> inContribuinte) then
                begin
                  if (Emit.EnderEmit.UF <> Dest.EnderDest.UF) then
                  begin

                    // ICMSUFDest.pFCPUFDest:=itmitmpercfcpicm.AsFloat;
                    // ICMSUFDest.vFCPUFDest := itmitmvalofcpicm.AsFloat;
                    // ICMSUFDest.vBCFCPUFDest:= itmitmbasefcpicm.AsFloat;

                    // vlTotvFCPDest := vlTotvFCPDest + itmitmvalofcpicm.AsFloat;
                    vlTotvFCPDest := 0;
                  end
                  else
                  begin
                    vBCFCP := itmitmbasefcpicm.AsFloat;
                    pFCP := itmitmpercfcpicm.AsFloat;
                    vFCP := itmitmvalofcpicm.AsFloat;
                    vlTotvFCP := vlTotvFCP + itmitmvalofcpicm.AsFloat;

                  end;
                end
                else
                begin

                  if (Emit.EnderEmit.UF <> Dest.EnderDest.UF) then
                  begin

                    // ICMSUFDest.pFCPUFDest:=itmitmpercfcpicm.AsFloat;
                    // ICMSUFDest.vFCPUFDest := itmitmvalofcpicm.AsFloat;
                    // ICMSUFDest.vBCFCPUFDest:= itmitmbasefcpicm.AsFloat;
                    // vlTotvFCPDest := vlTotvFCPDest + itmitmvalofcpicm.AsFloat;

                    vlTotvFCPDest := 0;
                  end
                  else
                  begin
                    vBCFCP := itmitmbasefcpicm.AsFloat;
                    pFCP := itmitmpercfcpicm.AsFloat;
                    vFCP := itmitmvalofcpicm.AsFloat;
                    vlTotvFCP := vlTotvFCP + itmitmvalofcpicm.AsFloat;
                  end;

                end;
              end;

              if (itmitmbasefcpicmst.AsString <> '') and (itmitmbasefcpicmst.AsString <> '0') then
              begin

                vBCFCPST := itmitmbasefcpicmst.AsFloat;
                pFCPST := itmitmpercfcpicmst.AsFloat;
                vFCPST := itmitmvalofcpicmst.AsFloat;
                vlTotvFCPST := vlTotvFCPST + itmitmvalofcpicmst.AsFloat;
              end;

            end;

            if mesmespararevenda.AsInteger = 1 then
            begin
              if itmcstcodigo.AsString = '101' then
              begin
                vpmestotalbaseicm := vpmestotalbaseicm + ((itmitmvalor.AsFloat * itmitmquantidade.AsFloat) - itmitmdesconto.AsCurrency);
              end;

            end;




// IMPLEMENTAÇÃO DOS NOVOS IMPOSTOS IBS / CBS

            // Reforma Tributária

            if ((cfgcrtcodigo.AsInteger>=3) and (cfgcfgapuracaoicm.AsInteger=2) ) or  (cfgcfgmodonfe.AsInteger = 2) then
            begin

              nrt.close;
              nrt.ParamByName('nrtcodigo').AsString:=itmnrtcodigo.AsString;
              nrt.Open;

              if (nrt.RecordCount>0) {and (copy(mesmesprotocolo.asstring,1,6)<>'000000') and (copy(mesmesprotocolo.asstring,1,6)<>'')}  then
              begin

                inr.close;
                inr.ParamByName('itmchave').AsString:=itmitmchave.AsString;
                inr.Open;

                if inr.RecordCount>0 then
                begin

                  //  Informações do tributo: IBS / CBS

                  IBSCBS.CST := StrToCSTIBSCBS(inr.FieldByName('cst_ibscbs').AsString);
                  IBSCBS.cClassTrib :=inr.FieldByName('class_trib_ibscbs').AsString;
                  IBSCBS.gIBSCBS.vBC :=inr.FieldByName('base_calc_ibscbs').AsCurrency;

                  TotalIBSCBSgIBSCBSvBC:=SimpleRoundTo(TotalIBSCBSgIBSCBSvBC+IBSCBS.gIBSCBS.vBC,-2);


                  // pAliqEfet=0,0600%×(1−0,40)=0,0600%×0,60
                  IBSCBS.gIBSCBS.gIBSUF.pIBSUF :=inr.FieldByName('perc_ibs_uf').AsCurrency;
                  IBSCBS.gIBSCBS.gIBSUF.gRed.pRedAliq :=inr.FieldByName('red_aliq_ibs_uf').AsCurrency;
                  IBSCBS.gIBSCBS.gIBSUF.gRed.pAliqEfet :=inr.FieldByName('aliq_efetiva_ibs_uf').AsCurrency;
                  IBSCBS.gIBSCBS.gIBSUF.vIBSUF :=inr.FieldByName('valor_ibs_uf').AsCurrency;
                  TotalIBSCBSgIBSCBSgIBSUFvIBSUF:=SimpleRoundTo(TotalIBSCBSgIBSCBSgIBSUFvIBSUF+IBSCBS.gIBSCBS.gIBSUF.vIBSUF,-2);


                  IBSCBS.gIBSCBS.gIBSMun.pIBSMun :=inr.FieldByName('perc_ibs_mun').AsCurrency;
                  IBSCBS.gIBSCBS.gIBSMun.gRed.pRedAliq :=inr.FieldByName('red_aliq_ibs_mun').AsCurrency;
                  IBSCBS.gIBSCBS.gIBSMun.gRed.pAliqEfet :=inr.FieldByName('aliq_efetiva_ibs_mun').AsCurrency;
                  IBSCBS.gIBSCBS.gIBSMun.vIBSMun :=inr.FieldByName('valor_ibs_mun').AsCurrency;
                  TotalIBSCBSgIBSCBSgIBSMunvIBSMun:=SimpleRoundTo(TotalIBSCBSgIBSCBSgIBSMunvIBSMun+IBSCBS.gIBSCBS.gIBSMun.vIBSMun,-2);

                  IBSCBS.gIBSCBS.gCBS.pCBS :=inr.FieldByName('perc_cbs').AsCurrency;
                  IBSCBS.gIBSCBS.gCBS.gRed.pRedAliq :=inr.FieldByName('red_aliq_cbs').AsCurrency;
                  IBSCBS.gIBSCBS.gCBS.gRed.pAliqEfet :=inr.FieldByName('aliq_efetiva_cbs').AsCurrency;
                  IBSCBS.gIBSCBS.gCBS.vCBS :=inr.FieldByName('valor_cbs').AsCurrency;

                  TotalIBSCBSgIBSCBSgCBSvCBS:=SimpleRoundTo(TotalIBSCBSgIBSCBSgCBSvCBS+IBSCBS.gIBSCBS.gCBS.vCBS,-2);

                  IBSCBS.gIBSCBS.vIBS := inr.FieldByName('total_ibs_ufmun').AsCurrency;

                end
                else
                begin


                  //  Informações do tributo: IBS / CBS

                  IBSCBS.CST :=  StrToCSTIBSCBS(nrtnrtcstibscbs.AsString); // TCSTIBSCBS.cst000;
                  IBSCBS.cClassTrib := nrtnrtcodigo.AsString;
                  IBSCBS.gIBSCBS.vBC :=SimpleRoundTo( ((Prod.vProd+itmitmfrete.AsCurrency)-(COFINS.vCOFINS+pis.vPIS+ICMS.vICMS)   ),-2);  // total do item

                  TotalIBSCBSgIBSCBSvBC:=SimpleRoundTo(TotalIBSCBSgIBSCBSvBC+IBSCBS.gIBSCBS.vBC,-2);


                  // pAliqEfet=0,0600%×(1−0,40)=0,0600%×0,60
                  IBSCBS.gIBSCBS.gIBSUF.pIBSUF := nrtnrtibs_aliquota_estadual.AsFloat;
                  if nrtnrtreducao_ibs.AsFloat>0 then
                  begin
                    IBSCBS.gIBSCBS.gIBSUF.gRed.pRedAliq :=nrtnrtreducao_ibs.AsFloat  ;
                    IBSCBS.gIBSCBS.gIBSUF.gRed.pAliqEfet := RoundTo(nrtnrtibs_aliquota_estadual.AsFloat-((nrtnrtibs_aliquota_estadual.AsFloat)*((nrtnrtreducao_ibs.AsFloat)/100)),-2);
                    IBSCBS.gIBSCBS.gIBSUF.vIBSUF :=SimpleRoundTo(IBSCBS.gIBSCBS.vBC*(IBSCBS.gIBSCBS.gIBSUF.gRed.pAliqEfet/100),-2);
                  end
                  else
                  begin
                    IBSCBS.gIBSCBS.gIBSUF.vIBSUF :=SimpleRoundTo(IBSCBS.gIBSCBS.vBC*(IBSCBS.gIBSCBS.gIBSUF.pIBSUF /100),-2);
                  end;
                  TotalIBSCBSgIBSCBSgIBSUFvIBSUF:=SimpleRoundTo(TotalIBSCBSgIBSCBSgIBSUFvIBSUF+IBSCBS.gIBSCBS.gIBSUF.vIBSUF,-2);


                  IBSCBS.gIBSCBS.gIBSMun.pIBSMun := nrtnrtibs_aliquota_municipal.AsFloat;
                  if nrtnrtreducao_ibs.AsFloat>0 then
                  begin
                    IBSCBS.gIBSCBS.gIBSMun.gRed.pRedAliq :=nrtnrtreducao_ibs.AsFloat  ;
                    IBSCBS.gIBSCBS.gIBSMun.gRed.pAliqEfet := RoundTo(nrtnrtibs_aliquota_municipal.AsFloat-(nrtnrtibs_aliquota_municipal.AsFloat*(nrtnrtreducao_ibs.AsFloaT/100)),-2);
                    IBSCBS.gIBSCBS.gIBSMun.vIBSMun :=SimpleRoundTo(IBSCBS.gIBSCBS.vBC*(IBSCBS.gIBSCBS.gIBSMun.gRed.pAliqEfet/100),-2);
                  end
                  else
                  begin
                    IBSCBS.gIBSCBS.gIBSMun.vIBSMun :=SimpleRoundTo(IBSCBS.gIBSCBS.vBC*(IBSCBS.gIBSCBS.gIBSMun.pIBSMun/100),-2);
                  end;

                  TotalIBSCBSgIBSCBSgIBSMunvIBSMun:=SimpleRoundTo(TotalIBSCBSgIBSCBSgIBSMunvIBSMun+IBSCBS.gIBSCBS.gIBSMun.vIBSMun,-2);

                  IBSCBS.gIBSCBS.gCBS.pCBS := nrtnrtcbs_aliquota.AsFloat;
                  if nrtnrtreducao_ibs.AsFloat>0 then
                  begin
                    IBSCBS.gIBSCBS.gCBS.gRed.pRedAliq := nrtnrtreducao_cbs.AsFloat;
                    IBSCBS.gIBSCBS.gCBS.gRed.pAliqEfet :=SimpleRoundTo(nrtnrtcbs_aliquota.AsFloat-(nrtnrtcbs_aliquota.AsFloat*(nrtnrtreducao_cbs.AsFloat/100)),-2);
                    IBSCBS.gIBSCBS.gCBS.vCBS :=SimpleRoundTo(IBSCBS.gIBSCBS.vBC*(IBSCBS.gIBSCBS.gCBS.gRed.pAliqEfet/100),-2); // total do item
                  end
                  else
                  begin
                    IBSCBS.gIBSCBS.gCBS.vCBS :=SimpleRoundTo(IBSCBS.gIBSCBS.vBC*(IBSCBS.gIBSCBS.gCBS.pCBS/100),-2); // total do item
                  end;

                  TotalIBSCBSgIBSCBSgCBSvCBS:=SimpleRoundTo(TotalIBSCBSgIBSCBSgCBSvCBS+IBSCBS.gIBSCBS.gCBS.vCBS,-2);

                  IBSCBS.gIBSCBS.vIBS := SimpleRoundTo( IBSCBS.gIBSCBS.gIBSMun.vIBSMun +IBSCBS.gIBSCBS.gIBSUF.vIBSUF, -2); // aqui deve dar 0.01

                  inr.close;
                  inr.ParamByName('itmchave').AsString:=itmitmchave.AsString;
                  inr.Open;

                  if inr.IsEmpty then
                    inr.Append
                  else
                    inr.Edit;
                  //  Informações do tributo: IBS / CBS

                  inr.FieldByName('itmchave').AsInteger:=itmitmchave.AsInteger;

                  inr.FieldByName('cst_ibscbs').AsString:=CSTIBSCBSToStr(IBSCBS.CST);
                  inr.FieldByName('class_trib_ibscbs').AsString:=IBSCBS.cClassTrib ;
                  inr.FieldByName('base_calc_ibscbs').AsCurrency:=IBSCBS.gIBSCBS.vBC ;


                  // pAliqEfet=0,0600%×(1−0,40)=0,0600%×0,60
                  inr.FieldByName('perc_ibs_uf').AsCurrency:=IBSCBS.gIBSCBS.gIBSUF.pIBSUF ;
                  inr.FieldByName('red_aliq_ibs_uf').AsCurrency:=IBSCBS.gIBSCBS.gIBSUF.gRed.pRedAliq ;
                  inr.FieldByName('aliq_efetiva_ibs_uf').AsCurrency:=IBSCBS.gIBSCBS.gIBSUF.gRed.pAliqEfet ;
                  inr.FieldByName('valor_ibs_uf').AsCurrency:=IBSCBS.gIBSCBS.gIBSUF.vIBSUF;


                  inr.FieldByName('perc_ibs_mun').AsCurrency:=IBSCBS.gIBSCBS.gIBSMun.pIBSMun ;
                  inr.FieldByName('red_aliq_ibs_mun').AsCurrency:=IBSCBS.gIBSCBS.gIBSMun.gRed.pRedAliq ;
                  inr.FieldByName('aliq_efetiva_ibs_mun').AsCurrency:=IBSCBS.gIBSCBS.gIBSMun.gRed.pAliqEfet ;
                  inr.FieldByName('valor_ibs_mun').AsCurrency:=IBSCBS.gIBSCBS.gIBSMun.vIBSMun ;

                  inr.FieldByName('perc_cbs').AsCurrency:=IBSCBS.gIBSCBS.gCBS.pCBS ;
                  inr.FieldByName('red_aliq_cbs').AsCurrency:=IBSCBS.gIBSCBS.gCBS.gRed.pRedAliq;
                  inr.FieldByName('aliq_efetiva_cbs').AsCurrency:=IBSCBS.gIBSCBS.gCBS.gRed.pAliqEfet;
                  inr.FieldByName('valor_cbs').AsCurrency:=IBSCBS.gIBSCBS.gCBS.vCBS;

                  inr.FieldByName('total_ibs_ufmun').AsCurrency:=IBSCBS.gIBSCBS.vIBS;
                  inr.Post;

                end;
              end;

            end;

          End;


            If self.itmitmaliqipi.AsFloat <> 0 Then
            Begin

              if toettocodigo.AsInteger=ttoDevolucao then
              begin
                 vIPIDevol := itmitmipi.AsCurrency;
                 pDevol := 100;
              end
              else
              begin
                ipi.vIPI := itmitmipi.AsCurrency;
              end;

              ipi.vBC := itmitmbipi.AsCurrency;
              ipi.pIPI := self.itmitmaliqipi.AsFloat;

              ipi.CST := StrToCSTIPI(ok, itmcsicodigo.AsString);
              vtipi := vtipi + ipi.vIPI;
            End
            Else
            Begin
              ipi.CST := StrToCSTIPI(ok, itmcsicodigo.AsString);

              if toettocodigo.AsInteger=ttoDevolucao then
              begin
                 vIPIDevol := itmitmipi.AsCurrency;
                 pDevol := 100;
                 vtipi := vtipi + vIPIDevol;
              end;

              // ipi.CST := ipi01;
            End;


          if itmcspcodigo.AsString = '' then
          begin
            pis.CST := StrToCSTPIS(ok, formatfloat('00', 99));
          end
          else
          begin

            pis.CST := StrToCSTPIS(ok, formatfloat('00', itmcspcodigo.AsInteger));
          end;

          if cfgcrtcodigo.AsInteger = 3 then // não é simples nem mei
          begin

            pis.pPIS := itmitmaliqpis.AsFloat;

            if cfgcfgtoenotacomplementar.AsInteger = mestoecodigo.AsInteger then
            begin
              pis.vPIS := itmitmpis.AsCurrency;
              pis.vBC := itmitmbpis.AsCurrency
            end
            else
            begin
              if itmitmaliqpis.AsFloat <> 0 then
              begin
                pis.vPIS := ((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat) - itmitmdesconto.AsCurrency) * (itmitmaliqpis.AsFloat / 100);
                pis.vBC := (itmitmvalor.AsCurrency * itmitmquantidade.AsFloat) - itmitmdesconto.AsCurrency;
              end;
            end;
            vltotpis := vltotpis + pis.vPIS;

          end;
          if itmcsfcodigo.AsString = '' then
          begin
            COFINS.CST := StrToCSTCOFINS(ok, formatfloat('00', 99));

          end
          else
          begin
            COFINS.CST := StrToCSTCOFINS(ok, formatfloat('00', itmcsfcodigo.AsInteger));
          end;
          if cfgcrtcodigo.AsInteger = 3 then // não é simples nem mei
          begin
            COFINS.pCOFINS := itmitmaliqcofins.AsFloat;

            if cfgcfgtoenotacomplementar.AsInteger = mestoecodigo.AsInteger then
            begin
              COFINS.vBC := itmitmbcofins.AsCurrency;
              COFINS.vCOFINS := itmitmcofins.AsCurrency;
            end
            else
            begin
              if itmitmaliqcofins.AsFloat <> 0 then
              begin
                COFINS.vBC := (itmitmvalor.AsCurrency * itmitmquantidade.AsFloat) - itmitmdesconto.AsCurrency;
                COFINS.vCOFINS := ((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat) - itmitmdesconto.AsCurrency) *
                  (itmitmaliqcofins.AsFloat / 100);
              end;
            end;

            vltotcofins := vltotcofins + COFINS.vCOFINS;
          end;

          { if cfgcfgcstpis.AsString <> '' then
            begin
            pis.CST := StrToCSTPIS(ok, cfgcfgcstpis.AsString);
            end;

            if cfgcfgcstcofins.AsString <> '' then
            begin
            COFINS.CST := StrToCSTCOFINS(ok, cfgcfgcstcofins.AsString);
            end; }

        End;
        it := it + 1;
      End;
      itm.Next;
    End;

    (*
      *
      ******** Informações do Transporte da NF-e - TRANSP ********
      *
    *)

    // Responsavel pelo Frete 0- Por conta do emitente; 1- Por conta do destinatário/remetente;2- Por conta de terceiros;9- Sem cobrança de frete
    case mesrefcodigo.AsInteger of
      1:
       Transp.modFrete := mfContaDestinatario;
      2:
        Transp.modFrete := mfContaTerceiros;
      3:
        Transp.modFrete := mfProprioRemetente;

      9:
        Transp.modFrete := mfSemFrete;
    end;

    { if (Ide.indPres = pcPresencial) and (Ide.indFinal = cfConsumidorFinal) then
      begin
      Transp.modFrete := mfSemFrete;
      end; }

    dtm.Close;
    dtm.ParamByName('meschave').AsString := vpMesChave;
    dtm.ParamByName('flacodigo').AsInteger := mesflacodigo.AsInteger;
    dtm.Open;

    if Transp.modFrete <> mfSemFrete then
    begin

      If dtm.RecordCount = 1 Then
      Begin

        Transp.Transporta.xNome := dtmetdidentificacao.AsString;
        Transp.Transporta.CNPJCPF := SomenteNumeros(dtmetddoc1.AsString);
        Transp.Transporta.IE := SomenteNumeros(dtmedrinscest.AsString);

        if Copy(Transp.Transporta.IE, 1, 1) = '0' then
          Transp.Transporta.IE := Copy(Transp.Transporta.IE, 2, 20);

        if Copy(Transp.Transporta.IE, 1, 1) = '0' then
          Transp.Transporta.IE := Copy(Transp.Transporta.IE, 2, 20);

        if Copy(Transp.Transporta.IE, 1, 1) = '0' then
          Transp.Transporta.IE := Copy(Transp.Transporta.IE, 2, 20);

        if Copy(Transp.Transporta.IE, 1, 1) = '0' then
          Transp.Transporta.IE := Copy(Transp.Transporta.IE, 2, 20);

        Transp.Transporta.xEnder := dtmedrrua.AsString;
        Transp.Transporta.xMun := dtmcddnome.AsString;
        Transp.Transporta.UF := dtmufssigla.AsString;

        { Transp.veicTransp.placa := dtmdtmplaca.AsString;
          Transp.veicTransp.UF := dtmufssigla.AsString; }

        if Emit.EnderEmit.UF <> Dest.EnderDest.UF then // fora do estado
        begin

          Transp.Transporta.xNome := dtmetdidentificacao.AsString;
          Transp.Transporta.CNPJCPF := SomenteNumeros(dtmetddoc1.AsString);
          Transp.Transporta.IE := SomenteNumeros(dtmedrinscest.AsString);

          if Copy(Transp.Transporta.IE, 1, 1) = '0' then
            Transp.Transporta.IE := Copy(Transp.Transporta.IE, 2, 20);

          if Copy(Transp.Transporta.IE, 1, 1) = '0' then
            Transp.Transporta.IE := Copy(Transp.Transporta.IE, 2, 20);

          if Copy(Transp.Transporta.IE, 1, 1) = '0' then
            Transp.Transporta.IE := Copy(Transp.Transporta.IE, 2, 20);

          if Copy(Transp.Transporta.IE, 1, 1) = '0' then
            Transp.Transporta.IE := Copy(Transp.Transporta.IE, 2, 20);

          Transp.Transporta.xEnder := dtmedrrua.AsString;
          Transp.Transporta.xMun := dtmcddnome.AsString;
          Transp.Transporta.UF := dtmufssigla.AsString;

          { Transp.veicTransp.placa := dtmdtmplaca.AsString;
            Transp.veicTransp.UF := dtmufssigla.AsString; }

          Transp.Vol.add;
          Transp.Vol.Items[0].qVol := dtmdtmvolumes.AsInteger;
          Transp.Vol.Items[0].esp := dtmdtmespecie.AsString;
          Transp.Vol.Items[0].marca := dtmdtmmarcas.AsString;
          Transp.Vol.Items[0].pesoB := dtmdtmpesobruto.AsFloat;
          Transp.Vol.Items[0].pesoL := dtmdtmpesoliq.AsFloat;

        end
        else
        begin

          Transp.Vol.add;
          Transp.Vol.Items[0].qVol := dtmdtmvolumes.AsInteger;
          Transp.Vol.Items[0].esp := dtmdtmespecie.AsString;
          Transp.Vol.Items[0].marca := dtmdtmmarcas.AsString;
          Transp.Vol.Items[0].pesoB := dtmdtmpesobruto.AsFloat;
          Transp.Vol.Items[0].pesoL := dtmdtmpesoliq.AsFloat;
        end;
      End
      Else
      Begin

        Transp.Transporta.xNome := '';
        Transp.Transporta.CNPJCPF := '';
        Transp.Transporta.IE := '';
        Transp.Transporta.xEnder := '';
        Transp.Transporta.xMun := '';
        Transp.Transporta.UF := '';

        Transp.Vol.add;
        Transp.Vol.Items[0].qVol := 1;
        Transp.Vol.Items[0].esp := '';
        Transp.Vol.Items[0].marca := '';
        Transp.Vol.Items[0].pesoB := 0;
        Transp.Vol.Items[0].pesoL := 0;

      End;

    end
    else
    begin

      Transp.Transporta.xNome := '';
      Transp.Transporta.CNPJCPF := '';
      Transp.Transporta.IE := '';
      Transp.Transporta.xEnder := '';
      Transp.Transporta.xMun := '';
      Transp.Transporta.UF := '';

      Transp.Vol.add;
      Transp.Vol.Items[0].qVol := 1;
      Transp.Vol.Items[0].esp := '';
      Transp.Vol.Items[0].marca := '';
      Transp.Vol.Items[0].pesoB := 0;
      Transp.Vol.Items[0].pesoL := 0;

    end;

    (*
      *
      ******* Totais da NFe *******
      *
    *)

    Total.ICMSTot.vTotTrib := RoundTo(vlTotTrib + vlTotTribEst, -2);

    if toettocodigo.AsInteger=ttoDevolucao then
      Total.ICMSTot.vIPIDevol := vtipi
    else
      Total.ICMSTot.vIPI := vtipi;

    Total.ICMSTot.vBC := vtBC;
    Total.ICMSTot.vICMS := RoundTo(vtICMS, -2);

    if vlICMSUFDest > 0 then
    begin
      Total.ICMSTot.vICMSUFDest := vlICMSUFDest;
    end;
    // 180;
    Total.ICMSTot.vBCST := vtBCST; // + Total.ICMSTot.vST;
    Total.ICMSTot.vST := RoundTo(vtICMSST, -2);
    Total.ICMSTot.vProd := RoundTo(vxtot, -2);
    Total.ICMSTot.vDesc := RoundTo(vxdesc, -2);
    Total.ICMSTot.vOutro := mesmesoutras.AsCurrency;
    Total.ICMSTot.vFrete := mesmesFrete.AsCurrency;


    if cfgcrtcodigo.AsInteger <> 1 then
    begin
      Total.ICMSTot.vFCP := vlTotvFCP;
      Total.ICMSTot.vFCPST := vlTotvFCPST;
    end;

    if vlTotvFCPDest > 0 then
    begin
      Total.ICMSTot.vFCPufdest := vlTotvFCPDest;
    end;

    consulta.Close;
    consulta.SQL.Text := 'select messervicos, mesprodutos, mesdesconto from mes where meschave=' + mesmeschave.AsString;
    consulta.Open;

    {
    if consulta.FieldByName('messervicos').AsFloat > 0 then
    begin
      if cfgcfgdescontonoservico.AsInteger = 1 then
      begin
        vltotServicos := consulta.FieldByName('messervicos').AsFloat;
      end
      else
      begin
        vltotServicos := consulta.FieldByName('messervicos').AsFloat;
      end;
    end
    else
    begin
      vltotServicos := 0;
    end;
    }

    // reforma tributaria
// reforma tributaria

      if ((cfgcrtcodigo.AsInteger>=3) and (cfgcfgapuracaoicm.AsInteger=2) ) or  (cfgcfgmodonfe.AsInteger = 2) then
      begin

        mnr.Close;
        mnr.ParamByName('meschave').AsInteger:=mesmeschave.AsInteger;
        mnr.Open;

        if (mnr.RecordCount>0) and (copy(mesmesprotocolo.asstring,1,6)<>'000000')  and (copy(mesmesprotocolo.asstring,1,6)<>'')  then
        begin
          // carrega os dados de uma nota ja emitida e autorizada

          Total.IBSCBSTot.vBCIBSCBS :=mnr.FieldByName('total_base_ibscbs').AsCurrency;

          Total.IBSCBSTot.gIBS.gIBSUFTot.vIBSUF :=mnr.FieldByName('total_ibs_uf').AsCurrency;
          Total.IBSCBSTot.gIBS.gIBSUFTot.vDif := 0;
          Total.IBSCBSTot.gIBS.gIBSUFTot.vDevTrib := 0;


          Total.IBSCBSTot.gIBS.gIBSMunTot.vIBSMun :=mnr.FieldByName('total_ibs_mun').AsCurrency;
          Total.IBSCBSTot.gIBS.gIBSMunTot.vDif := 0;
          Total.IBSCBSTot.gIBS.gIBSMunTot.vDevTrib := 0;

          // RESUMO IBS

          Total.IBSCBSTot.gIBS.vIBS :=mnr.FieldByName('credito_presumido_ibs').AsCurrency;
          Total.IBSCBSTot.gIBS.vCredPres := 0;
          Total.IBSCBSTot.gIBS.vCredPresCondSus := 0;


          // CBS
          Total.IBSCBSTot.gCBS.vDif := 0;
          Total.IBSCBSTot.gCBS.vDevTrib := 0;

          Total.IBSCBSTot.gCBS.vCBS :=mnr.FieldByName('total_cbs').AsCurrency;

          Total.IBSCBSTot.gCBS.vCredPres := 0;
          Total.IBSCBSTot.gCBS.vCredPresCondSus := 0;

        end
        else
        begin
          // calculo para emissão da nota


          if nrt.RecordCount>0 then
          begin

            // Total.ISTot.vIS := 100;

            Total.IBSCBSTot.vBCIBSCBS := TotalIBSCBSgIBSCBSvBC;

            // UF E MUN

            if TotalIBSCBSgIBSCBSgIBSUFvIBSUF>0 then
              Total.IBSCBSTot.gIBS.gIBSUFTot.vIBSUF := TotalIBSCBSgIBSCBSgIBSUFvIBSUF
            else
              Total.IBSCBSTot.gIBS.gIBSUFTot.vIBSUF := TotalIBSCBSgIBSCBSgTribRegularvTribRegIBSUF;

            Total.IBSCBSTot.gIBS.gIBSUFTot.vDif := 0;
            Total.IBSCBSTot.gIBS.gIBSUFTot.vDevTrib := 0;


            if TotalIBSCBSgIBSCBSgIBSMunvIBSMun>0 then
              Total.IBSCBSTot.gIBS.gIBSMunTot.vIBSMun :=TotalIBSCBSgIBSCBSgIBSMunvIBSMun
            else
              Total.IBSCBSTot.gIBS.gIBSMunTot.vIBSMun := TotalIBSCBSgIBSCBSgTribRegularvTribRegIBSMun;

            Total.IBSCBSTot.gIBS.gIBSMunTot.vDif := 0;
            Total.IBSCBSTot.gIBS.gIBSMunTot.vDevTrib := 0;

            // RESUMO IBS

            Total.IBSCBSTot.gIBS.vIBS := Total.IBSCBSTot.gIBS.gIBSUFTot.vIBSUF+Total.IBSCBSTot.gIBS.gIBSMunTot.vIBSMun;
            Total.IBSCBSTot.gIBS.vCredPres := 0;
            Total.IBSCBSTot.gIBS.vCredPresCondSus := 0;


            // CBS
            Total.IBSCBSTot.gCBS.vDif := 0;
            Total.IBSCBSTot.gCBS.vDevTrib := 0;

            if TotalIBSCBSgIBSCBSgCBSvCBS>0 then
              Total.IBSCBSTot.gCBS.vCBS :=TotalIBSCBSgIBSCBSgCBSvCBS
            else
              Total.IBSCBSTot.gCBS.vCBS :=TotalIBSCBSgIBSCBSgTribRegularvTribRegCBS;

            Total.IBSCBSTot.gCBS.vCredPres := 0;
            Total.IBSCBSTot.gCBS.vCredPresCondSus := 0;


            if mnr.IsEmpty then
              mnr.Append
            else
              mnr.Edit;

            mnr.FieldByName('meschave').AsInteger:=mesmeschave.AsInteger;
            mnr.FieldByName('total_base_ibscbs').AsCurrency:=Total.IBSCBSTot.vBCIBSCBS ;
            mnr.FieldByName('total_ibs_uf').AsCurrency:=Total.IBSCBSTot.gIBS.gIBSUFTot.vIBSUF;
            mnr.FieldByName('total_ibs_mun').AsCurrency:=Total.IBSCBSTot.gIBS.gIBSMunTot.vIBSMun;
            mnr.FieldByName('total_ibs_ufmun').AsCurrency:=Total.IBSCBSTot.gIBS.gIBSUFTot.vIBSUF+Total.IBSCBSTot.gIBS.gIBSMunTot.vIBSMun;
            mnr.FieldByName('credito_presumido_ibs').AsCurrency:=Total.IBSCBSTot.gIBS.vIBS;
            mnr.FieldByName('total_cbs').AsCurrency:=Total.IBSCBSTot.gCBS.vCBS;
            mnr.FieldByName('credito_presumido_cbs').AsCurrency:=0;
            mnr.Post;

          end;

        end;
      end;

    Total.ICMSTot.vNF := mesmestotal.AsCurrency;

    Total.ICMSTot.vPIS := vltotpis;
    Total.ICMSTot.vCOFINS := vltotcofins;


    case mesrefcodigo.AsInteger of
      1:
        Total.ICMSTot.vFrete := vlTotalFrete;
      9:
        Total.ICMSTot.vFrete := 0;
    end;



    qTomTof.Close;
    qTomTof.SQL.Text := 'SELECT distinct tofidentificacao FROM tom, tof WHERE ';
    qTomTof.SQL.add('tom.tofcodigo = tof.tofcodigo AND ');
    qTomTof.SQL.add('tof.ticcodigo IN (' + IntToStr(ticObservacao) + ') AND ');
    qTomTof.SQL.add('tom.meschave = ' + vpMesChave + ' ');
    qTomTof.SQL.add('ORDER BY tof.tofcodigo');
    qTomTof.Open;

    vInfComplGeral := '';

    { if (cfgcfgobs2.AsString <> '0') or (cfgcfgobs3.AsString <> '0') or (cfgcfgobs4.AsString <> '0') then
      begin }

    While Not qTomTof.Eof Do
    Begin
      if pos(trim(qTomTof.Fields[0].AsString), vInfComplGeral) = 0 then
      begin

        if pos('%?', qTomTof.Fields[0].AsString) > 0 then
        begin
          if pos('%?', qTomTof.Fields[0].AsString) > 0 then
          begin

            spd.Close;
            spd.Open;

            if (spdspdaliquotasimples.AsString <> '') and (spdspdaliquotasimples.AsString <> '0') then
            begin

              icm.Close;
              icm.Open;

              { if not icm.Locate('icmaliquotas', spdspdaliquotasimples.AsString, []) then
                begin
                icm.Append;
                icmicmcodigo.AsString := sonumeros(spdspdaliquotasimples.AsString);
                icmicmaliquotas.AsString := spdspdaliquotasimples.AsString;
                icm.post;
                end;
              }

              if spdspdaliquotasimples.AsFloat <> 0 then
              begin
                if mesmespararevenda.AsInteger = 1 then
                begin
                  consulta.Close;
                  consulta.SQL.Text := 'select etdregime from etd where etdcodigo=' + mesetdcodigo.AsString;
                  consulta.Open;

                  if consulta.FieldByName('etdregime').AsInteger = 1 then
                  begin
                    vlMensagemICM := StringReplace(qTomTof.Fields[0].AsString, '%?', spdspdaliquotasimples.AsString + '%', []);
                  end
                  else
                  begin
                    vlMensagemICM := StringReplace(qTomTof.Fields[0].AsString, '%?', spdspdaliquotasimples.AsString + '%', []);

                  end;
                end
                else
                begin

                  // vlMensagemICM := '';

                end;

              end;
            end
            else
            begin
              vlMensagemICM := ''; // StringReplace(qTomTof.Fields[0].AsString, '%?', itmicmcodigo.AsString + '%', []);
            end;
          end
          else
          begin
            vlMensagemICM := qTomTof.Fields[0].AsString;
          end;

          if pos('R$', vlMensagemICM) > 0 then
          begin
            spd.Close;
            spd.Open;

            if (spdspdaliquotasimples.AsString <> '') and (spdspdaliquotasimples.AsString <> '0') then
            begin

              icm.Close;
              icm.Open;

              if not icm.Locate('icmaliquotas', spdspdaliquotasimples.AsString, []) then

                { begin
                  icm.Append;
                  icmicmcodigo.AsString := sonumeros(spdspdaliquotasimples.AsString);
                  icmicmaliquotas.AsString := spdspdaliquotasimples.AsString;
                  icm.post;
                  end; }

                if spdspdaliquotasimples.AsFloat <> 0 then
                begin

                  vlMensagemICM := StringReplace(vlMensagemICM, 'R$?',
                    'R$ ' + floattostr(RoundTo(vpmestotalbaseicm { mesmestotal.AsCurrency } * (spdspdaliquotasimples.AsFloat / 100), -2)), []);

                end;
            end
            else
            begin

              vlMensagemICM := StringReplace(vlMensagemICM, 'R$?',
                'R$ ' + floattostr(RoundTo(vpmestotalbaseicm { mesmestotal.AsCurrency } * (itmicmcodigo.AsFloat / 100), -2)), []);
            end;
          end
          else
          begin
            vlMensagemICM := vlMensagemICM;
          end;

          if pos(vlMensagemICM, vInfComplGeral) = 0 then
          begin
            vInfComplGeral := vInfComplGeral + trim(vlMensagemICM) + ';';
          end;

        end
        else
        begin
          if pos(trim(qTomTof.Fields[0].AsString), vInfComplGeral) = 0 then
          begin
            vInfComplGeral := vInfComplGeral + trim(qTomTof.Fields[0].AsString) + ';';
          end;
        end;
      end;
      qTomTof.Next;
    End;
    { end; }


    dtl.First;
    while not dtl.Eof do
    begin

      rdc.close;
      rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
      rdc.Open;

      if not rdc.IsEmpty then
      begin
        if pos('{',rdc.FieldByName('rdcnrauto').AsString)=0 then
        begin
          vInfComplTEF:=vInfComplTEF+#13+'; Cód. Transação TEF: '+rdc.FieldByName('rdcnrauto').AsString;
        end;
      end;

      dtl.Next;
    end;

    vInfComplGeral:=vInfComplGeral+#13+vInfComplTEF;


    (* Trata mensagem referente Carga Tributária *)
    if (vlTotTrib + vlTotTribEst) > 0 then
    begin
      vlMensagemCargaTrib := 'Trib. aprox. R$ ';
      vlMensagemCargaTrib := vlMensagemCargaTrib + formatfloat('#,###.00', RoundTo(vlTotTrib, -2)) + ' Federal ';

      if vlTotTribEst > 0 then
        vlMensagemCargaTrib := vlMensagemCargaTrib + ' e ' + formatfloat('#,###.00', RoundTo(vlTotTribEst, -2)) + ' Estadual ';

      vlMensagemCargaTrib := vlMensagemCargaTrib + ' Fonte: IBPT 5oi7eW;'
    end;

    (* Trata mensagem referente Redução de base se calculo *)
    { * REDUÇÃO DA BASE DE CALCULO A 58,33% CONFORME INCISO II DO ARTIGO 1 DO ANEXO V DO RICMS/MT * }

    vlMensagemReducaoBase := '';

    if vlReducoes.Count > 0 then
    begin
      for iReduz := 0 to vlReducoes.Count - 1 do
      begin

        vlMensagemReducaoBase := StringReplace('REDUÇÃO DA BASE DE CALCULO A % CONFORME INCISO II DO ARTIGO 1 DO ANEXO V DO RICMS/MT', '%',
          vlReducoes[iReduz], []) + ' ';
      end;
    end;


    InfAdic.infCpl := StringReplace(vInfComplGeral + vInfComplCF + vInfComplNF + vInfComplNFP + vInfComplNFe + vlMensagemCargaTrib +
      vlMensagemReducaoBase, toetoeidentificacao.AsString, '', [rfReplaceAll, rfIgnoreCase]);

    if UpperCase(cfgufssigla.AsString) <> UpperCase(etdufssigla.AsString) then
    begin
      if ide.indPres = pcPresencial then
      begin
        if ide.indFinal = cfConsumidorFinal then
        begin

          consulta.Close;
          consulta.SQL.Text := 'select toeidentificacao from toe where toecodigo=' + mestoecodigo.AsString;
          consulta.Open;
          ide.natOp := consulta.FieldByName('toeidentificacao').AsString;
          if etdtcbcodigo.AsInteger = 2 then
          begin

            if (cfgatvcodigo.AsInteger = atvrestaurante) then
            begin

              if cfgcfgpresencialtoedestino.AsInteger = 1 then
              begin
                ide.idDest := doInterestadual;
                Transp.modFrete := mfSemFrete;
              end
              else
              begin
                ide.idDest := doInterna;
              end;
            end
            else
            begin
              if ide.indPres = pcPresencial then
              begin
                if ide.indFinal = cfConsumidorFinal then
                begin

                  if mesmesretirabalcao.AsInteger = 0 then
                  begin
                    ide.idDest := doInterestadual;
                    // Transp.modFrete := mfSemFrete;

                  end
                  else
                  begin

                    if cfgcfgpresencialtoedestino.AsInteger = 1 then
                    begin
                      ide.idDest := doInterestadual;
                      Transp.modFrete := mfSemFrete;
                    end
                    else
                    begin
                      if Emit.EnderEmit.UF <> Dest.EnderDest.UF then // fora do estado
                      begin

                        if (cfgatvcodigo.AsInteger = atvrestaurante) then
                        begin
                          ide.idDest := doInterna;
                          Transp.modFrete := mfSemFrete;
                        end
                        else
                        begin

                          if cfgcfgpresencialtoedestino.AsInteger = 1 then
                          begin
                            ide.idDest := doInterestadual
                          end
                          else
                          begin
                            ide.idDest := doInterna;
                            Transp.modFrete := mfSemFrete;
                          end;

                        end;
                      end
                      else
                      begin

                        ide.idDest := doInterna;
                        Transp.modFrete := mfSemFrete;

                      end;

                    end;
                  end;
                end
                else
                begin
                  ide.idDest := doInterestadual
                end;
              end
              else
              begin
                ide.idDest := doInterestadual
              end;
            end;

          end
          else
          begin
            if (cfgatvcodigo.AsInteger = atvrestaurante) or (cfgatvcodigo.AsInteger = atvmercado) then
            begin

              if cfgcfgpresencialtoedestino.AsInteger = 1 then
              begin
                ide.idDest := doInterestadual;
                Transp.modFrete := mfSemFrete;
              end
              else
              begin
                ide.idDest := doInterna;
              end;
            end
            else
            begin

              if ide.indPres = pcPresencial then
              begin
                if ide.indFinal = cfConsumidorFinal then
                begin

                  if cfgcfgpresencialtoedestino.AsInteger = 1 then
                  begin
                    ide.idDest := doInterestadual;
                    Transp.modFrete := mfSemFrete;
                  end
                  else
                  begin
                    ide.idDest := doInterna;
                    Transp.modFrete := mfSemFrete;
                  end;
                end
                else
                begin

                  if cfgcfgpresencialtoedestino.AsInteger = 1 then
                  begin
                    ide.idDest := doInterestadual
                  end
                  else
                  begin
                    ide.idDest := doInterna;
                  end;

                end;
              end
              else
              begin

                ide.idDest := doInterestadual
              end;

            end;
          end;

          // InfAdic.infCpl := InfAdic.infCpl + ' ' + '"ICMS recolhido anteriormente por estimativa simplificada - Operação Presencial/Venda no Balcão”';

        end;
      end;
    end;

    (*
      *
      ********* Identifica o Número da NF-e **********
      *
    *)

    if (self.mesmesnumero.AsString <> '') and (self.mesmesnumero.AsString <> '0') and (mestemcodigo.AsInteger <> 3) then
      vNumeroNFe := self.mesmesnumero.AsInteger
    else
    begin
      NumeroNFe.Close;
      NumeroNFe.ParamByName('flacodigo').AsString := vpFilial;
      NumeroNFe.ExecSQL;
      vNumeroNFe := NumeroNFe.Fields[0].AsInteger;

      { qConsulta.Close;
        qConsulta.SQL.Text := 'select cfgnumeronfe from cfgmnfe where cfgcodigo=1';
        qConsulta.Open;

        vNumeroNFe := qConsulta.FieldByName('cfgnumeronfe').AsInteger + 1; }

      { qConsulta.Close;
        qConsulta.SQL.Text := 'UPDATE cfgmnfe SET cfgnumeronfe = ' + IntToStr(vNumeroNFe) + ' and cfgcodigo=1';
        qConsulta.ExecSQL;

        qConsulta.Close;
        qConsulta.SQL.Text := 'UPDATE cfgmnfe SET cfgnumeronfe = ' + IntToStr(vNumeroNFe) + ' and cfgcodigo=' + Acesso.Filial.ToString;
        qConsulta.ExecSQL; }

      // showmessage('Nota a ser emitida: ' + IntToStr(vNumeroNFe));

    end;

    { if vNumeroNFe > cfgcfgnumeronfe.AsInteger then
      begin
      qConsulta.Close;
      qConsulta.SQL.Text := 'UPDATE cfgmnfe SET cfgnumeronfe = ' + IntToStr(vNumeroNFe) + ' and cfgcodigo=1';
      qConsulta.ExecSQL;

      qConsulta.Close;
      qConsulta.SQL.Text := 'UPDATE cfgmnfe SET cfgnumeronfe = ' + IntToStr(vNumeroNFe) + ' and cfgcodigo=' + Acesso.Filial.ToString;
      qConsulta.ExecSQL;

      end; }

    ide.nNF := vNumeroNFe;

    if mesmescodigonota.AsInteger<>0 then
      ide.cNF :=mesmescodigonota.AsInteger
    else
     ide.cNF := GerarCodigoDFe(vNumeroNFe);

    (* A partir deste momento venda é considerada uma NF-e Pendente pois já possui número *)
    consulta.Close;
    consulta.SQL.Text := 'set @disable_triggers=1';
    consulta.ExecSQL;

    try
      qconsulta.Close;
      qconsulta.SQL.Text := 'UPDATE mes SET ';
      qconsulta.SQL.add('mesregistro = ' + QuotedStr(ajustadata(DateToStr(vpDataAtual))) + ', ');
      qconsulta.SQL.add('mesnumero = ' + IntToStr(vNumeroNFe) + ', ');
      qconsulta.SQL.add('messerie = ' + IntToStr(ide.serie) + ', ');
      qconsulta.SQL.add('tdfcodigo = ' + QuotedStr('55') + ', ');
      qconsulta.SQL.add('temcodigo = 4 ');
      qconsulta.SQL.add('WHERE meschave = ' + vpMesChave + ' and flacodigo=' + Acesso.Filial.ToString);
      qconsulta.ExecSQL;
    except

    end;

    consulta.Close;
    consulta.SQL.Text := 'set @disable_triggers=null';
    consulta.ExecSQL;

  End;

  try

    ACBrNFeNotas.Configuracoes.WebServices.Visualizar := False;

    CheckBox3.Checked := True;
    atualizatela;

    // Assina e salva arquivo no Path definido
    ACBrNFeNotas.NotasFiscais.Assinar;

    CheckBox4.Checked := True;
    atualizatela;

    // Valida Arquivo
    ACBrNFeNotas.NotasFiscais.Validar;

    CheckBox5.Checked := True;
    atualizatela;

    vChaveNFe := Copy(ACBrNFeNotas.NotasFiscais.Items[0].NFe.infNFe.ID, 4, 44);

  Except
    On E: Exception Do
    Begin

      sleep(1000);

      ACBrNFeNotas.Consultar;

      vCStat := ACBrNFeNotas.NotasFiscais.Items[0].NFe.procNFe.CStat;
      vXMotivo := ACBrNFeNotas.NotasFiscais.Items[0].NFe.procNFe.xMotivo;

      If (vCStat = 100) or (vCStat = 150) Then
      Begin
        vChaveNFe := Copy(ACBrNFeNotas.NotasFiscais.Items[0].NFe.infNFe.ID, 4, 44);

        vProtocoloNFe := ACBrNFeNotas.NotasFiscais.Items[0].NFe.procNFe.nProt;
        vhrNFe := TimeToStr(ACBrNFeNotas.NotasFiscais.Items[0].NFe.procNFe.DhRecbto);
        vpDataAtual := strtodate(Copy(datetimetostr(ACBrNFeNotas.NotasFiscais.Items[0].NFe.procNFe.DhRecbto), 1, 10));

        consulta.Close;
        consulta.SQL.Text := 'UPDATE mes SET ';
        consulta.SQL.add('tdfcodigo = ' + QuotedStr('55') + ', ');
        consulta.SQL.add('refcodigo = 9, ');
        consulta.SQL.add('mesdatanfe = ' + QuotedStr(ajustadata((Copy(datetimetostr(ACBrNFeNotas.NotasFiscais.Items[0].NFe.procNFe.DhRecbto), 1, 10))
          )) + ', ');
        consulta.SQL.add('mesregistro = ' + QuotedStr(ajustadata((Copy(datetimetostr(ACBrNFeNotas.NotasFiscais.Items[0].NFe.procNFe.DhRecbto), 1, 10))
          )) + ', ');
        consulta.SQL.add('mesprotocolo = ' + QuotedStr(vProtocoloNFe) + ', ');
        consulta.SQL.add('meshoranfe = ' + QuotedStr(vhrNFe) + ', ');
        consulta.SQL.add('temcodigo = 5, ');
        consulta.SQL.add('meschavenfe = ' + QuotedStr(vChaveNFe) + ' WHERE ');
        consulta.SQL.add('meschave = ' + vpMesChave + ' and flacodigo=' + Acesso.Filial.ToString);
        consulta.ExecSQL;

        ACBrNFeNotas.NotasFiscais.Clear;
        ACBrNFeNotas.Configuracoes.Geral.VersaoQRCode := veqr200;

        mEmailNFe;

        exit;

      end;

      If E.Message = '' Then
        vErro := ''
      Else
        vErro := #13 + 'Erro: ' + E.Message;


     if pos('duplicidade', lowercase(E.Message)) > 0 then
      begin

        vChaveNFe := Copy(lowercase(E.Message), pos('[', lowercase(E.Message)) - 1);

        vChaveNFe := Copy(vChaveNFe, 1,length(vChaveNFe) );
        vChaveNFe := Copy(vChaveNFe, 1, pos(']', lowercase(vChaveNFe)) - 1);

        vChaveNFe := SoNumeros(vChaveNFe);




        if fileexists(ACBrNFeNotas.Configuracoes.Arquivos.PathSalvar+vChaveNFe+'-nfe.xml'  ) then
        begin
          ACBrNFeNotas.NotasFiscais.Clear;
          ACBrNFeNotas.NotasFiscais.LoadFromFile(ACBrNFeNotas.Configuracoes.Arquivos.PathSalvar+vChaveNFe+'-nfe.xml' );

          vpArquivoNFe:=ACBrNFeNotas.Configuracoes.Arquivos.PathSalvar+vChaveNFe+'-nfe.xml';

         if mConsultaNFe(False) then
          exit;

        end;



        consulta.Close;
        consulta.SQL.Text := 'UPDATE mes SET ';
        consulta.SQL.add('tdfcodigo = ' + QuotedStr('55') + ', ');
        consulta.SQL.add('refcodigo = 9, ');
        consulta.SQL.add('meschavenfe = ' + QuotedStr(vChaveNFe) + ' WHERE ');

        consulta.SQL.add('meschave = ' + vpMesChave + ' and flacodigo=' + Acesso.Filial.ToString);
        consulta.ExecSQL;


         
        CheckBox3.Checked := True;
        atualizatela;

          // Assina e salva arquivo no Path definido
        ACBrNFeNotas.NotasFiscais.Assinar;

        CheckBox4.Checked := True;
        atualizatela;

          // Valida Arquivo
        ACBrNFeNotas.NotasFiscais.Validar;

        CheckBox5.Checked := True;
        atualizatela;

        vChaveNFe := Copy(ACBrNFeNotas.NotasFiscais.Items[0].NFe.infNFe.ID, 4, 44);

        ACBrNFeNotas.Enviar(0, False, True, False);


      end
      else  if pos('ID:I05/NCM(Código NCM) - Conteúdo inválido.', E.Message) > 0 then
      begin

        vlItem := Copy(E.Message, pos('"', E.Message) + 1, 4);
        vlItem := SoNumeros(vlItem);

        showmessage('A T E N Ç Ã O:' + #13 + #13 + 'O produto :' + #13 + #13 + ACBrNFeNotas.NotasFiscais.Items[0].NFe.Det.Items[StrToInt(vlItem) - 1]
          .Prod.xProd + #13 + #13 + ' Está com o NCM inválido!' + #13 + #13 + 'Por favor, ajustar no cadastro de Produtos');

        exit;
      end
      else
      begin

        Application.MessageBox(pchar('Erro na geração da NF-e.' + #13 + 'Mensagem: ' + vErro + #13 + #13 + #13 +
          'Utilize a opção "Imprimir com NFe".'), 'Erro Geração NF-e', MB_OK + MB_ICONERROR);
      end;

      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=1';
      consulta.ExecSQL;

      consulta.Close;
      consulta.SQL.Text := 'update mes set temcodigo=4 where meschave=' + vpMesChave;
      consulta.ExecSQL;
      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=null';
      consulta.ExecSQL;

      SalvarLogErro(E.Message, E.StackTrace);
      exit;
    End;
  end;

  // Try
  plmodonfe.Caption := 'Aguardando SEFAZ : ' + vlTentativasEnvio.ToString + '/10';
  Application.ProcessMessages;

  try
  ACBrNFeNotas.Enviar(mesmeschave.AsInteger, False, True, False);
 vCStat := ACBrNFeNotas.NotasFiscais.Items[0].NFe.procNFe.CStat;

  except
      On E: Exception Do
    Begin

      if pos('Duplicidade de NF-e [',e.Message)>0  then
      begin
        mConsultaNFe;
      end
      else if pos('539-Rejeicao',e.Message)>0  then
      begin

        vlMesChaveNFE:=copy(e.Message,pos('[',e.Message)+1,200);
        vlMesChaveNFE:=copy(vlMesChaveNFE,1,pos(']',vlMesChaveNFE)-1);
        vlMesChaveNFE:=SoNumeros(vlMesChaveNFE);

        vlMesCodigoNFE:=copy( vlMesChaveNFE,36,8);


        qconsulta.Close;
        qconsulta.SQL.Text := 'UPDATE mes SET ';
        qconsulta.SQL.add('mescodigonota = ' + vlMesCodigoNFE + ', ');
        qconsulta.SQL.add('meschavenfe = ' + QuotedStr(vlMesChaveNFE) + ' WHERE ');
        qconsulta.SQL.add('meschave = ' + vpMesChave + ' and flacodigo=' + Acesso.Filial.ToString);
        qconsulta.ExecSQL;


        mes.Close;
        mes.Params[0].AsString := fnfe.vpMesChave;
        mes.Params[1].AsInteger := Acesso.Filial;
        mes.Open;

        // por que  GeraXML;

        ACBrNFeNotas.Enviar(mesmeschave.AsInteger, False, True, False);


      end
      else
      begin
        ShowMessage('Erro emissão do Nota: '+e.Message);
        exit;
      end;


    End;

  end;

  sleep(1000);

 { vlTentativasEnvio := 1;

  while vlTentativasEnvio <= 30 do
  begin

    ACBrNFeNotas.Consultar(mesmeschavenfe.AsString);

    vCStat := ACBrNFeNotas.NotasFiscais.Items[0].NFe.procNFe.CStat;
    vXMotivo := ACBrNFeNotas.NotasFiscais.Items[0].NFe.procNFe.xMotivo;

    if (vCStat = 100) or (vCStat = 301) then
      break;

    vlTentativasEnvio := vlTentativasEnvio + 1;
    plmodonfe.Caption := 'Aguardando SEFAZ : ' + vlTentativasEnvio.ToString + '/10';
    Application.ProcessMessages;
    sleep(3000);

  end;
  }

  CheckBox6.Checked := True;

  if cfgcfgmodonfe.AsInteger = 2 then
    plmodonfe.Caption := 'Homologação'
  else
    plmodonfe.Caption := 'Produção';

  Application.ProcessMessages;

  atualizatela;

  // showmessage(vCStat.ToString);
  // Se código de status = 100 - Autorizado o uso da NF-e.
  If vCStat = 100 Then
  Begin

    if cfgcfgprevisualizarimpressaonfe.AsInteger = 1 then
    begin
      ACBrNFeDANFEFR.MostraPreview := True;
      ACBrNFeDANFEFR.MostraSetup := True;
    end;

    ACBrNFeNotas.NotasFiscais.Imprimir;

    ACBrNFeDANFEFR.PathPDF := vPastaPrincipal + 'pdfs\NFe';
    ACBrNFeDANFEFR.Sistema := '(66)3544-2765 Mizio Sistemas';
    ACBrNFeNotas.NotasFiscais.ImprimirPDF;

    vProtocoloNFe := ACBrNFeNotas.NotasFiscais.Items[0].NFe.procNFe.nProt;
    vhrNFe := TimeToStr(ACBrNFeNotas.NotasFiscais.Items[0].NFe.ide.dEmi);

    consulta.Close;
    consulta.SQL.Text := 'set @disable_triggers=1';
    consulta.ExecSQL;

    qconsulta.Close;
    qconsulta.SQL.Text := 'UPDATE mes SET ';
    qconsulta.SQL.add('mesregistro = ' + QuotedStr(ajustadata(DateToStr(vpDataAtual))) + ', ');
    qconsulta.SQL.add('mesdatanfe = ' + QuotedStr(ajustadata(DateToStr(vpDataAtual))) + ', ');
    qconsulta.SQL.add('mesnumero = ' + IntToStr(vNumeroNFe) + ', ');
    qconsulta.SQL.add('tdfcodigo = ' + QuotedStr('55') + ', ');
    qconsulta.SQL.add('meshoranfe = ' + QuotedStr(vhrNFe) + ', ');
    qconsulta.SQL.add('mesprotocolo = ' + QuotedStr(vProtocoloNFe) + ', ');
    qconsulta.SQL.add('temcodigo = 5, ');
    qconsulta.SQL.add('meschavenfe = ' + QuotedStr(vChaveNFe) + ' WHERE ');
    qconsulta.SQL.add('meschave = ' + vpMesChave + ' and flacodigo=' + Acesso.Filial.ToString);
    qconsulta.ExecSQL;

    consulta.Close;
    consulta.SQL.Text := 'set @disable_triggers=null';
    consulta.ExecSQL;

    try
      vlNomeArquivoNFe := GeraNomeNFe(vpMesChave);

      if FileExists(vlNomeArquivoNFe) then
      begin

        if not mes.Active then
        begin
          mes.Close;
          mes.Params[0].AsString := vpMesChave;
          mes.Params[1].AsInteger := Acesso.Filial;
          mes.Open;
        end;

      end;
    except
    end;

    ACBrNFeNotas.NotasFiscais.Clear;

    sleep(500);

    mEmailNFe;

  End
  else if vCStat = 301 then
  begin


    // ACBrNFe.NotasFiscais.Imprimir;

    ACBrNFeDANFEFR.PathPDF := vPastaPrincipal + 'pdfs\NFe';

    if not DirectoryExists(ACBrNFeDANFEFR.PathPDF) then
      ForceDirectories(ACBrNFeDANFEFR.PathPDF);

    ACBrNFeNotas.NotasFiscais.ImprimirPDF;

    vProtocoloNFe := ACBrNFeNotas.NotasFiscais.Items[0].NFe.procNFe.nProt;
    vhrNFe := TimeToStr(ACBrNFeNotas.NotasFiscais.Items[0].NFe.ide.dEmi);
    consulta.Close;
    consulta.SQL.Text := 'set @disable_triggers=1';
    consulta.ExecSQL;

    qconsulta.Close;
    qconsulta.SQL.Text := 'UPDATE mes SET ';
    qconsulta.SQL.add('mesregistro = ' + QuotedStr(ajustadata(DateToStr(vpDataAtual))) + ', ');
    qconsulta.SQL.add('mesdatanfe = ' + QuotedStr(ajustadata(DateToStr(vpDataAtual))) + ', ');
    qconsulta.SQL.add('meshoranfe = ' + QuotedStr(vhrNFe) + ', ');
    qconsulta.SQL.add('mesnumero = ' + IntToStr(vNumeroNFe) + ', ');
    qconsulta.SQL.add('tdfcodigo = ' + QuotedStr('55') + ', ');
    qconsulta.SQL.add('sdecodigo = ''04'', ');
    qconsulta.SQL.add('mesprotocolo = ' + QuotedStr(vProtocoloNFe) + ', ');
    qconsulta.SQL.add('temcodigo = 5, ');
    qconsulta.SQL.add('meschavenfe = ' + QuotedStr(vChaveNFe) + ' WHERE ');
    qconsulta.SQL.add('meschave = ' + vpMesChave + ' and flacodigo=' + Acesso.Filial.ToString);
    qconsulta.ExecSQL;

    consulta.Close;
    consulta.SQL.Text := 'set @disable_triggers=null';
    consulta.ExecSQL;

    try
      vlNomeArquivoNFe := GeraNomeNFe(vpMesChave);

      if FileExists(vlNomeArquivoNFe) then
      begin
        if not mes.Active then
        begin
          mes.Close;
          mes.Params[0].AsString := vpMesChave;
          mes.Params[1].AsInteger := Acesso.Filial;
          mes.Open;
        end;

      end;
    except
    end;

    ACBrNFeNotas.NotasFiscais.Clear;

  end
  else
  begin
    Application.MessageBox(pchar('NF-e não Autorizada.' + #13 + #13 + 'Mensagem: ' + #13 + IntToStr(vCStat) + ' - ' + vXMotivo), 'Erro NF-e',
      MB_OK + MB_ICONWARNING);

    consulta.Close;
    consulta.SQL.Text := 'set @disable_triggers=1';
    consulta.ExecSQL;

    consulta.Close;
    consulta.SQL.Text := 'update mes set temcodigo=4 where meschave=' + vpMesChave;
    consulta.ExecSQL;

    consulta.Close;
    consulta.SQL.Text := 'set @disable_triggers=null';
    consulta.ExecSQL;

  end;
  vpRetorno := '';
  CalcularSaldo(itmprocodigo.AsString);

End;

procedure Tfnfe.CalcularSaldo(vProcodigo: String);

var

  vlSaldo: Double;
  vlSaldoDisp: Double;

begin
  inherited;
  try

    vlSaldo := 0;
    consulta.Close;
    consulta.SQL.Text := 'select calcSaldoProduto(' + vProcodigo + ')';
    consulta.Open;
    vlSaldo := consulta.Fields[0].AsFloat;

    vlSaldoDisp := 0;
    consulta.Close;
    consulta.SQL.Text := 'select calcSaldoProdutoDisp(' + vProcodigo + ')';
    consulta.Open;
    vlSaldoDisp := consulta.Fields[0].AsFloat;

    consulta.Close;
    consulta.SQL.Text := 'UPDATE pro SET prosaldo = ' + BuscaTroca(floattostr(vlSaldo), ',', '.') + ', prosaldodisp =  ' +
      BuscaTroca(floattostr(vlSaldoDisp), ',', '.') + ' where procodigo=' + vProcodigo;
    consulta.ExecSQL;

  finally
  end;
end;


Function Tfnfe.GeraNomeNFe(vmeschave: String): String;
Var
  Retorno: String;
  vAnoMesNFe: String;
  arq: String;
Begin
  Retorno := '';

  qconsulta.Close;
  qconsulta.SQL.Text := 'SELECT mesdatanfe, mesregistro, meschavenfe FROM mes WHERE meschave = ' + vmeschave + ' and flacodigo=' +
    Acesso.Filial.ToString;
  qconsulta.Open;

  If (self.qconsulta.RecordCount = 1) And (qconsulta.Fields[0].AsString <> '') Then
  Begin
    vAnoMesNFe := vPastaPrincipal + fnfe.vSubPastaDoc + '\' + formatdatetime('yyyymm', qconsulta.Fields[0].AsFloat);
    arq := vAnoMesNFe + '\' + qconsulta.Fields[2].AsString + '-nfe.XML';
    Retorno := arq;
  End
  Else If (self.qconsulta.RecordCount = 1) And (qconsulta.Fields[1].AsString <> '') Then
  Begin
    vAnoMesNFe := vPastaPrincipal + fnfe.vSubPastaDoc + '\' + formatdatetime('yyyymm', qconsulta.Fields[1].AsFloat);
    arq := vAnoMesNFe + '\' + qconsulta.Fields[2].AsString + '-nfe.XML';
    Retorno := arq;
  End;

  if not DirectoryExists(vAnoMesNFe) then
    ForceDirectories(vAnoMesNFe);

  qconsulta.Close;

  Result := Retorno;
End;

procedure Tfnfe.VerifieAjustaItemcomConsumidorFinal(vContribuinte: Boolean);
var
  vlcfop: string;
  vlcstcodigo: string;
  vlcsicodigo: string;
  vlcspcodigo: string;
  vlcsfcodigo: string;
  vlcfgpercentualpis: string;
  vlcfgpercentualcofins: string;
begin

  if  ((mesttocodigo.AsInteger <> ttoDevolucao) and (mesttocodigo.AsInteger <> ttoOutros)) then
  begin

    itm.First;

    // ajusta o toe do item para produto sem substituição
    While Not itm.Eof Do
    Begin
      if (itmtcecest.AsString = '') then
      begin

        if vContribuinte then // fora do estado
        begin

          if (cfgcfgtoeinteproducaopropria.AsInteger <> 0) then
          begin

            consulta.Close;
            consulta.SQL.Text :=
              'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins from toe where toecodigo=' +
              cfgcfgtoeforaproducaopropria.AsString;
            consulta.Open;

          end
          else
          begin

            consulta.Close;
            consulta.SQL.Text :=
              'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins from toe where toecodigo=' +
              cfgcfgtoemesfora.AsString;
            consulta.Open;

          end;

        end
        else
        begin


          if cfgcfgpresencialtoedestino.AsInteger = 1 then
          begin

            if (cfgcfgtoeinteproducaopropria.AsInteger <> 0) then
            begin
              consulta.Close;
              consulta.SQL.Text :=
                'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins from toe where toecodigo=' +
                cfgcfgtoeforaproducaopropria.AsString;
              consulta.Open;

            end
            else
            begin

              consulta.Close;
              consulta.SQL.Text :=
                'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins from toe where toecodigo=' +
                cfgcfgtoemesfora.AsString;
              consulta.Open;

            end;
          end
          else
          begin

            if (cfgcfgtoeinteproducaopropria.AsInteger <> 0) then
            begin

              consulta.Close;
              consulta.SQL.Text :=
                'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins from toe where toecodigo=' +
                cfgcfgtoeinteproducaopropria.AsString;
              consulta.Open;

            end
            else
            begin

              consulta.Close;
              consulta.SQL.Text :=
                'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins from toe where toecodigo=' +
                cfgcfgtoemesinte.AsString;
              consulta.Open;
            end;
          end;

        end;

        vlcstcodigo := consulta.FieldByName('cstcodigo').AsString;
        vlcsicodigo := consulta.FieldByName('csicodigo').AsString;
        vlcspcodigo := consulta.FieldByName('cspcodigo').AsString;
        vlcsfcodigo := consulta.FieldByName('csfcodigo').AsString;

        vlcfgpercentualpis := consulta.FieldByName('cfgpercentualpis').AsString;
        vlcfgpercentualpis := StringReplace(vlcfgpercentualpis, ',', '.', [rfReplaceAll, rfIgnoreCase]);

        vlcfgpercentualcofins := consulta.FieldByName('cfgpercentualcofins').AsString;
        vlcfgpercentualcofins := StringReplace(vlcfgpercentualcofins, ',', '.', [rfReplaceAll, rfIgnoreCase]);

        vlcfop := consulta.FieldByName('toecfopsaida').AsString;

        itmncm.Close;


        if cfgcfgpresencialtoedestino.AsInteger = 1 then
        begin
          itmncm.SQL.Text := 'update itm set itmaliqcofins=' + vlcfgpercentualcofins + ' ,itmaliqpis=' + vlcfgpercentualpis + ', cfocfop=' +
            QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' + QuotedStr(vlcsicodigo) + ', cspcodigo=' +
            QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' + cfgcfgtoemesfora.AsString + ' where itmchave=' +
            itmitmchave.AsString;
          itmncm.ExecSQL;

        end
        else
        begin

          itmncm.SQL.Text := 'update itm set itmaliqcofins=' + vlcfgpercentualcofins + ' ,itmaliqpis=' + vlcfgpercentualpis + ', cfocfop=' +
            QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' + QuotedStr(vlcsicodigo) + ', cspcodigo=' +
            QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' + cfgcfgtoemesinte.AsString + ' where itmchave=' +
            itmitmchave.AsString;
          itmncm.ExecSQL;
        end;

      end;
      itm.Next;
    End;

    if  ((mesttocodigo.AsInteger <> ttoDevolucao) and (mesttocodigo.AsInteger <> ttoOutros)) then
    begin

      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=1';
      consulta.ExecSQL;


      if cfgcfgpresencialtoedestino.AsInteger = 1 then
      begin
        itmncm.Close;
        itmncm.SQL.Text := 'update mes set toecodigo=' + cfgcfgtoemesfora.AsString + ' where meschave=' + mesmeschave.AsString;
        itmncm.ExecSQL;

      end
      else
      begin

        itmncm.Close;
        itmncm.SQL.Text := 'update mes set toecodigo=' + cfgcfgtoemesinte.AsString + ' where meschave=' + mesmeschave.AsString;
        itmncm.ExecSQL;
      end;
      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=null';
      consulta.ExecSQL;
    end;



    // fim do ajusta o toe do item para produto com substituição

  end;
end;

{
  procedure Tfnfe.VerifieAjustaItemTransferenciaFilial;
  var
  vlcfop: string;
  vlToecodigo: string;
  vlcstcodigo: string;
  vlcsicodigo: string;
  vlcspcodigo: string;
  vlcsfcodigo: string;
  vlitmmva: string;
  vlitmreducaobaseicm: string;
  vlpercentualpis: string;
  vlpercentualcofins: string;
  vlProducao: Integer;

  begin

  itm.First;

  // ajusta o toe do item para produto sem substituição
  While Not itm.Eof Do
  Begin

  consulta.Close;
  consulta.SQL.Text := 'SELECT pro.procodigo,pro.pronome, pro.proproducao,pro.icmcodigo,';
  consulta.SQL.Add('pro.cfocfop,cstcodigo,csicodigo,cspcodigo, csfcodigo, pro.propisaliquota, ');
  consulta.SQL.Add('pro.procofinsaliquota, promva, propercfcp, pro.propercreducaobaseicm ');
  consulta.SQL.Add('from pro where procodigo=' + itmprocodigo.AsString);
  consulta.Open;

  vlcstcodigo := consulta.FieldByName('cstcodigo').AsString;
  vlcsicodigo := consulta.FieldByName('csicodigo').AsString;
  vlcspcodigo := consulta.FieldByName('cspcodigo').AsString;
  vlcsfcodigo := consulta.FieldByName('csfcodigo').AsString;

  vlpercentualpis := consulta.FieldByName('propisaliquota').AsString;
  vlpercentualpis := StringReplace(vlpercentualpis, ',', '.', [rfReplaceAll, rfIgnoreCase]);

  vlpercentualcofins := consulta.FieldByName('procofinsaliquota').AsString;
  vlpercentualcofins := StringReplace(vlpercentualcofins, ',', '.', [rfReplaceAll, rfIgnoreCase]);

  vlitmmva := consulta.FieldByName('promva').AsString;
  vlitmmva := StringReplace(vlitmmva, ',', '.', [rfReplaceAll, rfIgnoreCase]);

  vlitmreducaobaseicm := consulta.FieldByName('propercreducaobaseicm').AsString;
  vlitmreducaobaseicm := StringReplace(vlitmreducaobaseicm, ',', '.', [rfReplaceAll, rfIgnoreCase]);

  vlProducao := consulta.FieldByName('proproducao').AsInteger;

  if vlProducao = 1 then
  begin
  consulta.Close;
  consulta.SQL.Text := 'select toecodigo, toecfoosaida from toe where toecodigo=' + cfgcfgtoetransflaintepro.AsString;
  consulta.Open;
  end
  else
  begin
  consulta.Close;
  consulta.SQL.Text := 'select toecodigo, toecfoosaida from toe where toecodigo=' + cfgcfgtoetransflainte.AsString;
  consulta.Open;
  end;

  vlcfop := consulta.FieldByName('toecfoosaida').AsString;
  vlToecodigo := consulta.FieldByName('toecodigo').AsString;

  itmncm.Close;
  itmncm.SQL.Text := 'update itm set  toecodigo=' + vlToecodigo + ', itmpercreducaobaseicm=' + vlitmreducaobaseicm + ', itmmva=' + vlitmmva +
  ', itmaliqcofins=' + vlpercentualcofins + ' ,itmaliqpis=' + vlpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' +
  QuotedStr(vlcstcodigo) + ', csicodigo=' + QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' +
  QuotedStr(vlcsfcodigo) + ' where itmchave=' + itmitmchave.AsString;
  itmncm.ExecSQL;

  itm.Next;
  End;



  // fim do ajusta o toe do item para produto com substituição

  end;
}

procedure Tfnfe.VerifieAjustaItemReclassificacao;
var
  vlcfop: string;
  vlcstcodigo: string;
  vlcsicodigo: string;
  vlcspcodigo: string;
  vlcsfcodigo: string;
  vlcfgpercentualpis: string;
  vlcfgpercentualcofins: string;
begin

  itm.First;

  // ajusta o toe do item para produto sem substituição
  While Not itm.Eof Do
  Begin

    consulta.Close;
    consulta.SQL.Text :=
      'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins from toe where toecodigo=' +
      mestoecodigo.AsString;
    consulta.Open;

    vlcstcodigo := consulta.FieldByName('cstcodigo').AsString;
    vlcsicodigo := consulta.FieldByName('csicodigo').AsString;
    vlcspcodigo := consulta.FieldByName('cspcodigo').AsString;
    vlcsfcodigo := consulta.FieldByName('csfcodigo').AsString;

    vlcfgpercentualpis := consulta.FieldByName('cfgpercentualpis').AsString;
    vlcfgpercentualpis := StringReplace(vlcfgpercentualpis, ',', '.', [rfReplaceAll, rfIgnoreCase]);

    vlcfgpercentualcofins := consulta.FieldByName('cfgpercentualcofins').AsString;
    vlcfgpercentualcofins := StringReplace(vlcfgpercentualcofins, ',', '.', [rfReplaceAll, rfIgnoreCase]);

    vlcfop := consulta.FieldByName('toecfopsaida').AsString;

    itmncm.Close;

    itmncm.SQL.Text := 'update itm set itmaliqcofins=' + vlcfgpercentualcofins + ' ,itmaliqpis=' + vlcfgpercentualpis + ', cfocfop=' +
      QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' + QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) +
      ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' + mestoecodigo.AsString + ' where itmchave=' + itmitmchave.AsString;
    itmncm.ExecSQL;

    itm.Next;
  End;



  // fim do ajusta o toe do item para produto com substituição

end;

procedure Tfnfe.VerifieAjustaItemcomSubstituicao(usEmitente, ufDestinatario: string);
var
  vlcfop: string;
  vlcstcodigo: string;
  vlcsicodigo: string;
  vlcspcodigo: string;
  vlcsfcodigo: string;
  vlcfgpercentualpis: string;
  vlcfgpercentualcofins: string;
  vlTceCest: string;
  vlToeMensagemPermite: string;
  vlToeMensagemNaoPermite: string;
  vlTofcodigo: Integer;

  vlRetiraBalcao: Integer;
  vlParaRevenda: Integer;
begin

  if (mesttocodigo.AsInteger <> ttoDevolucao) and (mesttocodigo.AsInteger <> ttoOutros) then
  begin

    consulta.Close;
    consulta.SQL.Text := 'select etdcodigo, mespararevenda,mesretirabalcao from mes where meschave=' + vpMesChave;
    consulta.Open;

    vlRetiraBalcao := consulta.FieldByName('mesretirabalcao').AsInteger;

    itm.First;

    // ajusta o toe do item para produto com substituição
    While Not itm.Eof Do
    Begin

      if (itmtcecest.AsString <> '') OR (cfgcfgsubstitutotributario.AsInteger = 1) then
      begin

        if usEmitente <> ufDestinatario then // fora do estado
        begin


            if (cfgcfgtoesubstforaestado.AsInteger <> 0) and (cfgcfgtoesubstnoestado.AsInteger <> 0) then
            begin

              if (etdtcbcodigo.AsInteger = 2) and (vlRetiraBalcao <> 1) then // contribuinte e nao presencial
              begin
                if itmproproducao.AsInteger = 1 then
                begin
                  consulta.Close;
                  consulta.SQL.Text :=
                    'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                    + cfgcfgtoeforasubsprodpropria.AsString;
                  consulta.Open;

                end
                else
                begin
                  consulta.Close;
                  consulta.SQL.Text :=
                    'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                    + cfgcfgtoesubstforaestado.AsString;
                  consulta.Open;

                end;

              end
              else
              begin

                if cfgcfgpresencialtoedestino.AsInteger = 1 then
                begin
                  consulta.Close;
                  consulta.SQL.Text :=
                    'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                    + cfgcfgtoesubstforaestado.AsString;
                  consulta.Open;

                end
                else
                begin

                  if (cfgcfgtoeinteproducaopropria.AsInteger <> 0) then
                  begin

                    consulta.Close;
                    consulta.SQL.Text :=
                      'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                      + cfgcfgtoeintesubsprodpropria.AsString;
                    consulta.Open;
                  end
                  else
                  begin

                    consulta.Close;
                    consulta.SQL.Text :=
                      'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                      + cfgcfgtoesubstnoestado.AsString;
                    consulta.Open;
                  end;

                end;

              end;

              vlcstcodigo := consulta.FieldByName('cstcodigo').AsString;
              vlcsicodigo := consulta.FieldByName('csicodigo').AsString;
              vlcspcodigo := consulta.FieldByName('cspcodigo').AsString;
              vlcsfcodigo := consulta.FieldByName('csfcodigo').AsString;

              vlToeMensagemPermite := consulta.FieldByName('toetextopermite').AsString;
              vlToeMensagemNaoPermite := consulta.FieldByName('toetextonaopermite').AsString;

              vlcfgpercentualpis := consulta.FieldByName('cfgpercentualpis').AsString;
              vlcfgpercentualpis := StringReplace(vlcfgpercentualpis, ',', '.', [rfReplaceAll, rfIgnoreCase]);

              vlcfgpercentualcofins := consulta.FieldByName('cfgpercentualcofins').AsString;
              vlcfgpercentualcofins := StringReplace(vlcfgpercentualcofins, ',', '.', [rfReplaceAll, rfIgnoreCase]);

              vlcfop := consulta.FieldByName('toecfopsaida').AsString;

              vlTceCest := itmtcecest.AsString;


              if cfgcfgpresencialtoedestino.AsInteger = 1 then
              begin
                if (cfgcfgtoeinteproducaopropria.AsInteger <> 0) then
                begin
                  if  (mesttocodigo.AsInteger = 7) then
                  begin

                    itmncm.Close;
                    itmncm.SQL.Text := 'update itm set  itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins +
                      ' ,itmaliqpis=' + vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) +
                      ', csicodigo=' + QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) +
                      ', toecodigo=' + cfgcfgtoeforasubsprodpropria.AsString + ' where itmchave=' + itmitmchave.AsString;
                    itmncm.ExecSQL;
                  end;

                end
                else
                begin
                  if (mesttocodigo.AsInteger = 7) then
                  begin

                    itmncm.Close;
                    itmncm.SQL.Text := 'update itm set  itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins +
                      ' ,itmaliqpis=' + vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) +
                      ', csicodigo=' + QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) +
                      ', toecodigo=' + cfgcfgtoesubstforaestado.AsString + ' where itmchave=' + itmitmchave.AsString;
                    itmncm.ExecSQL;
                  end;
                end;

              end
              else
              begin
                if (cfgcfgtoeinteproducaopropria.AsInteger <> 0) then
                begin
                  if (mesttocodigo.AsInteger = 7) then
                  begin

                    itmncm.Close;
                    itmncm.SQL.Text := 'update itm set  itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins +
                      ' ,itmaliqpis=' + vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) +
                      ', csicodigo=' + QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) +
                      ', toecodigo=' + cfgcfgtoeintesubsprodpropria.AsString + ' where itmchave=' + itmitmchave.AsString;
                    itmncm.ExecSQL;

                  end;
                end
                else
                begin

                  if  (mesttocodigo.AsInteger = 7) then
                  begin

                    itmncm.Close;
                    itmncm.SQL.Text := 'update itm set  itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins +
                      ' ,itmaliqpis=' + vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) +
                      ', csicodigo=' + QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) +
                      ', toecodigo=' + cfgcfgtoesubstnoestado.AsString + ' where itmchave=' + itmitmchave.AsString;
                    itmncm.ExecSQL;
                  end;
                end;
              end;

            end;


        end
        else if usEmitente = ufDestinatario then
        begin

            if (cfgcfgtoesubstnoestado.AsInteger <> 0) then
            begin

              if (cfgcfgtoeinteproducaopropria.AsInteger <> 0) then
              begin

                if itmproproducao.AsInteger = 1 then
                begin
                  consulta.Close;
                  consulta.SQL.Text :=
                    'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                    + cfgcfgtoeintesubsprodpropria.AsString;

                  consulta.Open;

                end
                else
                begin
                  consulta.Close;
                  consulta.SQL.Text :=
                    'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                    + cfgcfgtoesubstnoestado.AsString;
                  consulta.Open;

                end;
              end
              else
              begin

                consulta.Close;
                consulta.SQL.Text :=
                  'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                  + cfgcfgtoesubstnoestado.AsString;
                consulta.Open;

              end;

              vlcstcodigo := consulta.FieldByName('cstcodigo').AsString;
              vlcsicodigo := consulta.FieldByName('csicodigo').AsString;
              vlcspcodigo := consulta.FieldByName('cspcodigo').AsString;
              vlcsfcodigo := consulta.FieldByName('csfcodigo').AsString;
              if consulta.FieldByName('toetextopermite').AsString <> '' then
              begin
                vlToeMensagemPermite := consulta.FieldByName('toetextopermite').AsString;
              end;

              if consulta.FieldByName('toetextonaopermite').AsString <> '' then
              begin
                vlToeMensagemNaoPermite := consulta.FieldByName('toetextonaopermite').AsString;
              end;

              vlcfgpercentualpis := consulta.FieldByName('cfgpercentualpis').AsString;
              vlcfgpercentualpis := StringReplace(vlcfgpercentualpis, ',', '.', [rfReplaceAll, rfIgnoreCase]);

              vlcfgpercentualcofins := consulta.FieldByName('cfgpercentualcofins').AsString;
              vlcfgpercentualcofins := StringReplace(vlcfgpercentualcofins, ',', '.', [rfReplaceAll, rfIgnoreCase]);

              vlcfop := consulta.FieldByName('toecfopsaida').AsString;

              vlTceCest := itmtcecest.AsString;

              itmncm.Close;

              if itmproproducao.AsInteger = 1 then
              begin
                if (mesttocodigo.AsInteger = 7) then
                begin

                  itmncm.SQL.Text := 'update itm set itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins + ' ,itmaliqpis='
                    + vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' +
                    QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' +
                    cfgcfgtoeintesubsprodpropria.AsString + ' where itmchave=' + itmitmchave.AsString;
                  itmncm.ExecSQL;
                end;

              end
              else
              begin
                if (mesttocodigo.AsInteger = 7) then
                begin

                  itmncm.SQL.Text := 'update itm set itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins + ' ,itmaliqpis='
                    + vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' +
                    QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' +
                    cfgcfgtoesubstnoestado.AsString + ' where itmchave=' + itmitmchave.AsString;
                  itmncm.ExecSQL;
                end;
              end;

            end;

        end;

      end
      else
      begin

        // sem substiuição

        if usEmitente <> ufDestinatario then
        begin
          if etdtcbcodigo.AsInteger = 2 then
          begin

            if (cfgcfgdefinetoeatendimento.AsInteger = 1) then
            begin

              consulta.Close;
              consulta.SQL.Text :=
                'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                + itmtoecodigo.AsString;
              consulta.Open;

            end
            else
            begin


              if cfgcfgpresencialtoedestino.AsInteger = 1 then
              begin

                consulta.Close;
                consulta.SQL.Text :=
                  'select toecfopsaida,cstnormal as cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                  + cfgcfgtoemesfora.AsString;
                consulta.Open;

              end
              else
              begin

                if (cfgcfgtoemesinte.AsInteger <> 0) or (cfgcfgtoeinteproducaopropria.AsInteger <> 0) then
                begin

                  if itmproproducao.AsInteger = 1 then
                  begin

                    if etdedrinscest.AsString <> '' then
                    begin
                      if etdufssigla.AsString <> cfgufssigla.AsString then
                      begin

                        consulta.Close;
                        consulta.SQL.Text :=
                          'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite  from toe where toecodigo='
                          + cfgcfgtoeforaproducaopropria.AsString;
                        consulta.Open;

                      end
                      else
                      begin

                        consulta.Close;
                        consulta.SQL.Text :=
                          'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite  from toe where toecodigo='
                          + cfgcfgtoeforaproducaopropria.AsString;
                        consulta.Open;

                      end;

                    end
                    else
                    begin

                      consulta.Close;
                      consulta.SQL.Text :=
                        'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite  from toe where toecodigo='
                        + cfgcfgtoeforaproducaopropria.AsString;
                      consulta.Open;

                    end;

                  end
                  else
                  begin


                    if cfgcfgpresencialtoedestino.AsInteger = 1 then
                    begin

                      consulta.Close;
                      consulta.SQL.Text :=
                        'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite  from toe where toecodigo='
                        + cfgcfgtoemesfora.AsString;
                      consulta.Open;

                    end
                    else
                    begin

                      consulta.Close;
                      consulta.SQL.Text :=
                        'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite  from toe where toecodigo='
                        + cfgcfgtoemesinte.AsString;
                      consulta.Open;

                    end;
                  end;
                end
                else
                begin

                  consulta.Close;
                  consulta.SQL.Text :=
                    'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite  from toe where toecodigo='
                    + cfgcfgtoemesfora.AsString;
                  consulta.Open;

                end;

              end;

            end;
            vlcstcodigo := consulta.FieldByName('cstcodigo').AsString;
            vlcsicodigo := consulta.FieldByName('csicodigo').AsString;
            vlcspcodigo := consulta.FieldByName('cspcodigo').AsString;
            vlcsfcodigo := consulta.FieldByName('csfcodigo').AsString;

            vlToeMensagemPermite := consulta.FieldByName('toetextopermite').AsString;
            vlToeMensagemNaoPermite := consulta.FieldByName('toetextonaopermite').AsString;

            vlcfgpercentualpis := consulta.FieldByName('cfgpercentualpis').AsString;
            vlcfgpercentualpis := StringReplace(vlcfgpercentualpis, ',', '.', [rfReplaceAll, rfIgnoreCase]);

            vlcfgpercentualcofins := consulta.FieldByName('cfgpercentualcofins').AsString;
            vlcfgpercentualcofins := StringReplace(vlcfgpercentualcofins, ',', '.', [rfReplaceAll, rfIgnoreCase]);

            vlcfop := consulta.FieldByName('toecfopsaida').AsString;

            vlTceCest := itmtcecest.AsString;

            itmncm.Close;


            if cfgcfgpresencialtoedestino.AsInteger = 1 then
            begin
              if (cfgcfgtoeinteproducaopropria.AsInteger <> 0) then
              begin
                if itmproproducao.AsInteger = 1 then
                begin
                  if  (mesttocodigo.AsInteger = 7) then
                  begin

                    itmncm.SQL.Text := 'update itm set itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins +
                      ' ,itmaliqpis=' + vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) +
                      ', csicodigo=' + QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) +
                      ', toecodigo=' + cfgcfgtoeforaproducaopropria.AsString + ' where itmchave=' + itmitmchave.AsString;
                    itmncm.ExecSQL;
                  end;
                end
                else
                begin
                  if  (mesttocodigo.AsInteger = 7) then
                  begin

                    itmncm.SQL.Text := 'update itm set itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins +
                      ' ,itmaliqpis=' + vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) +
                      ', csicodigo=' + QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) +
                      ', toecodigo=' + cfgcfgtoemesfora.AsString + ' where itmchave=' + itmitmchave.AsString;
                    itmncm.ExecSQL;
                  end;

                end;

              end
              else
              begin
                if  (mesttocodigo.AsInteger = 7) then
                begin

                  itmncm.SQL.Text := 'update itm set itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins + ' ,itmaliqpis='
                    + vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' +
                    QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' +
                    cfgcfgtoemesfora.AsString + ' where itmchave=' + itmitmchave.AsString;
                  itmncm.ExecSQL;
                end;

              end;
            end
            else

            begin

              if (cfgcfgtoeinteproducaopropria.AsInteger <> 0) then
              begin
                if itmproproducao.AsInteger = 1 then
                begin
                  if  (mesttocodigo.AsInteger = 7) then
                  begin

                    itmncm.SQL.Text := 'update itm set itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins +
                      ' ,itmaliqpis=' + vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) +
                      ', csicodigo=' + QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) +
                      ', toecodigo=' + cfgcfgtoeinteproducaopropria.AsString + ' where itmchave=' + itmitmchave.AsString;
                    itmncm.ExecSQL;
                  end;
                end
                else
                begin
                  if  (mesttocodigo.AsInteger = 7) then
                  begin

                    itmncm.SQL.Text := 'update itm set itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins +
                      ' ,itmaliqpis=' + vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) +
                      ', csicodigo=' + QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) +
                      ', toecodigo=' + cfgcfgtoemesfora.AsString + ' where itmchave=' + itmitmchave.AsString;
                    itmncm.ExecSQL;
                  end;

                end;
              end
              else
              begin
                if  (mesttocodigo.AsInteger = 7) then
                begin

                  itmncm.SQL.Text := 'update itm set itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins + ' ,itmaliqpis='
                    + vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' +
                    QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' +
                    cfgcfgtoemesfora.AsString + ' where itmchave=' + itmitmchave.AsString;
                  itmncm.ExecSQL;
                end;
              end;

            end;

          end
          else
          begin

            if itmproproducao.AsInteger = 1 then
            begin
              consulta.Close;
              consulta.SQL.Text :=
                'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                + cfgcfgtoemesinte.AsString;
              consulta.Open;

            end
            else
            begin
              consulta.Close;
              consulta.SQL.Text :=
                'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                + cfgcfgtoemesinte.AsString;
              consulta.Open;
            end;

            vlcstcodigo := consulta.FieldByName('cstcodigo').AsString;
            vlcsicodigo := consulta.FieldByName('csicodigo').AsString;
            vlcspcodigo := consulta.FieldByName('cspcodigo').AsString;
            vlcsfcodigo := consulta.FieldByName('csfcodigo').AsString;

            vlToeMensagemPermite := consulta.FieldByName('toetextopermite').AsString;
            vlToeMensagemNaoPermite := consulta.FieldByName('toetextonaopermite').AsString;

            vlcfgpercentualpis := consulta.FieldByName('cfgpercentualpis').AsString;
            vlcfgpercentualpis := StringReplace(vlcfgpercentualpis, ',', '.', [rfReplaceAll, rfIgnoreCase]);

            vlcfgpercentualcofins := consulta.FieldByName('cfgpercentualcofins').AsString;
            vlcfgpercentualcofins := StringReplace(vlcfgpercentualcofins, ',', '.', [rfReplaceAll, rfIgnoreCase]);

            vlcfop := consulta.FieldByName('toecfopsaida').AsString;

            vlTceCest := itmtcecest.AsString;
            if  (mesttocodigo.AsInteger = 7) then
            begin

              itmncm.Close;

              itmncm.SQL.Text := 'update itm set itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins + ' ,itmaliqpis=' +
                vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' +
                QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' +
                cfgcfgtoemesinte.AsString + ' where itmchave=' + itmitmchave.AsString;
              itmncm.ExecSQL;
            end;

          end;

          vlToeMensagemPermite := consulta.FieldByName('toetextopermite').AsString;

          vlToeMensagemNaoPermite := consulta.FieldByName('toetextonaopermite').AsString;
          spd.Close;
          spd.Open;

          if (cfgcrtcodigo.AsInteger in [1, 2]) and (spdspdaliquotasimples.AsInteger = 0) then
          begin
            // vlToeMensagemPermite := '';
          end
          else
          begin
            vlToeMensagemNaoPermite := '';
          end;

        end
        else
        begin
          if (cfgcfgdefinetoeatendimento.AsInteger = 1) then
          begin

            consulta.Close;
            consulta.SQL.Text :=
              'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
              + itmtoecodigo.AsString;
            consulta.Open;

          end
          else
          begin

            if (cfgcfgtoeinteproducaopropria.AsInteger <> 0) then
            begin

              if itmproproducao.AsInteger = 1 then
              begin
                consulta.Close;
                consulta.SQL.Text :=
                  'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                  + cfgcfgtoeinteproducaopropria.AsString;
                consulta.Open;
              end
              else
              begin
                consulta.Close;
                consulta.SQL.Text :=
                  'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                  + cfgcfgtoemesinte.AsString;
                consulta.Open;

              end;

            end
            else
            begin

              consulta.Close;
              consulta.SQL.Text := 'select etdcodigo, mespararevenda,mesretirabalcao from mes where meschave=' + vpMesChave;
              consulta.Open;

              vlRetiraBalcao := consulta.FieldByName('mesretirabalcao').AsInteger;
              vlParaRevenda := consulta.FieldByName('mespararevenda').AsInteger;

              if vlParaRevenda = 1 then
              begin

                if etdufssigla.AsString <> cfgufssigla.AsString then
                begin

                  if cfgcfgpresencialtoedestino.AsInteger = 1 then
                  begin
                    consulta.Close;
                    consulta.SQL.Text :=
                      'select toecfopsaida,cstnormal as cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                      + cfgcfgtoemesfora.AsString;
                    consulta.Open;
                  end
                  else
                  begin

                    consulta.Close;
                    consulta.SQL.Text :=
                      'select toecfopsaida,cstnormal as cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                      + cfgcfgtoemesinte.AsString;
                    consulta.Open;

                  end;

                end
                else
                begin
                  consulta.Close;
                  consulta.SQL.Text :=
                    'select toecfopsaida,cstnormal as cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                    + cfgcfgtoemesinte.AsString;
                  consulta.Open;

                end;

              end
              else
              begin

                consulta.Close;
                consulta.SQL.Text :=
                  'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
                  + cfgcfgtoemesinte.AsString;
                consulta.Open;
              end;

            end;

          end;

          vlcstcodigo := consulta.FieldByName('cstcodigo').AsString;
          vlcsicodigo := consulta.FieldByName('csicodigo').AsString;
          vlcspcodigo := consulta.FieldByName('cspcodigo').AsString;
          vlcsfcodigo := consulta.FieldByName('csfcodigo').AsString;

          vlToeMensagemPermite := consulta.FieldByName('toetextopermite').AsString;
          vlToeMensagemNaoPermite := consulta.FieldByName('toetextonaopermite').AsString;

          vlcfgpercentualpis := consulta.FieldByName('cfgpercentualpis').AsString;
          vlcfgpercentualpis := StringReplace(vlcfgpercentualpis, ',', '.', [rfReplaceAll, rfIgnoreCase]);

          vlcfgpercentualcofins := consulta.FieldByName('cfgpercentualcofins').AsString;
          vlcfgpercentualcofins := StringReplace(vlcfgpercentualcofins, ',', '.', [rfReplaceAll, rfIgnoreCase]);

          vlcfop := consulta.FieldByName('toecfopsaida').AsString;

          vlTceCest := itmtcecest.AsString;

          if  (mesttocodigo.AsInteger = 7) then
          begin

            itmncm.Close;
            if (cfgcfgdefinetoeatendimento.AsInteger = 1) then
            begin

              itmncm.SQL.Text := 'update itm set itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins + ' ,itmaliqpis=' +
                vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' +
                QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' +
                itmtoecodigo.AsString + ' where itmchave=' + itmitmchave.AsString;
              itmncm.ExecSQL;
            end
            else
            begin

              if (cfgcfgtoeinteproducaopropria.AsInteger <> 0) then
              begin
                if itmproproducao.AsInteger = 1 then
                begin

                  itmncm.SQL.Text := 'update itm set itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins + ' ,itmaliqpis='
                    + vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' +
                    QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' +
                    cfgcfgtoeinteproducaopropria.AsString + ' where itmchave=' + itmitmchave.AsString;
                  itmncm.ExecSQL;
                end
                else
                begin
                  itmncm.SQL.Text := 'update itm set itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins + ' ,itmaliqpis='
                    + vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' +
                    QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' +
                    cfgcfgtoemesinte.AsString + ' where itmchave=' + itmitmchave.AsString;
                  itmncm.ExecSQL;

                end;

              end
              else
              begin
                itmncm.SQL.Text := 'update itm set itmcest=' + QuotedStr(vlTceCest) + '  , itmaliqcofins=' + vlcfgpercentualcofins + ' ,itmaliqpis=' +
                  vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' +
                  QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' +
                  cfgcfgtoemesinte.AsString + ' where itmchave=' + itmitmchave.AsString;
                itmncm.ExecSQL;

              end;

            end;
          end;
          vlToeMensagemPermite := consulta.FieldByName('toetextopermite').AsString;

          vlToeMensagemNaoPermite := consulta.FieldByName('toetextonaopermite').AsString;

        end;

      end;

      if mesttocodigo.AsInteger = 7 then
      begin
        itm.Edit;
        itmitmbicms.AsFloat := 0;
        itmitmbicm.AsFloat := 0;
        itmitmaliqicms.AsFloat := 0;;
        itmitmicms.AsFloat := 0;
        itmitmpercreducaobaseicm.AsCurrency := 0;
        itmcstcodigo.AsString := toecstnormal.AsString;
        itm.post;

      end;

      itm.Next;
    End;
    {
      if (cfgcfgdefinetoeatendimento.AsInteger = 0) then
      begin

      consulta.Close;
      consulta.SQL.Text := 'select padcodigo from pro where procodigo=' + itmprocodigo.AsString;
      consulta.Open;
      if not consulta.IsEmpty then
      begin
      if consulta.FieldByName('padcodigo').AsString <> '' then
      begin
      pad.Close;
      pad.ParamByName('padcodigo').AsString := consulta.FieldByName('padcodigo').AsString;
      pad.Open;

      if not pad.IsEmpty then
      begin

      if (padpadpis.AsString <> '') and (padpadcofins.AsString <> '') then
      begin

      vlcspcodigo := padpadcodigopiscofins.AsString;
      vlcsfcodigo := padpadcodigopiscofins.AsString;

      vlcfgpercentualpis := padpadpis.AsString;
      vlcfgpercentualpis := StringReplace(vlcfgpercentualpis, ',', '.', [rfReplaceAll, rfIgnoreCase]);

      vlcfgpercentualcofins := padpadcofins.AsString;
      vlcfgpercentualcofins := StringReplace(vlcfgpercentualcofins, ',', '.', [rfReplaceAll, rfIgnoreCase]);

      itmncm.Close;

      itmncm.SQL.Text := 'update itm set csfcodigo=' + QuotedStr(vlcsfcodigo) + '   ,cspcodigo=' + QuotedStr(vlcspcodigo) +
      '    ,itmaliqcofins=' + vlcfgpercentualcofins + ' ,itmaliqpis=' + vlcfgpercentualpis + ' where itmchave=' + itmitmchave.AsString;
      itmncm.ExecSQL;

      end;

      end;

      end;
      end;

      end;
    }
  end;
  // end;

  /// INICIAL
  /// tratativas de mengens de notas

  itm.Close;
  itm.Params[0].AsString := vpMesChave;
  itm.Params[1].AsInteger := Acesso.Filial;
  itm.Open;

  itm.First;
  while not itm.Eof do
  begin

    consulta.Close;
    consulta.SQL.Text :=
      'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins, toetextopermite, toetextonaopermite from toe where toecodigo='
      + itmtoecodigo.AsString;
    consulta.Open;

    if mesmespararevenda.AsInteger = 1 then
    begin
      if itmcstcodigo.AsString = '101' then
      begin
        vlToeMensagemPermite := consulta.FieldByName('toetextopermite').AsString;
      end
      else
      begin
        vlToeMensagemPermite := consulta.FieldByName('toetextonaopermite').AsString;
      end;
    end
    else
    begin
      vlToeMensagemPermite := '';
    end;

    vlToeMensagemNaoPermite := consulta.FieldByName('toetextonaopermite').AsString;

    vlTofcodigo := 0;
    tof.Close;
    tof.Open;
    if vlToeMensagemPermite = #$D#$A then
      vlToeMensagemPermite := '';

    if vlToeMensagemNaoPermite = #$D#$A then
      vlToeMensagemNaoPermite := '';

    consulta.Close;
    consulta.SQL.Text := 'select etdregime from etd where etdcodigo=' + etdetdcodigo.AsString;
    consulta.Open;

    if ((etdtcbcodigo.AsInteger <> 2) and (consulta.FieldByName('etdregime').AsInteger <> 1)) or (mesmespararevenda.AsInteger = 0) then
    begin
      vlToeMensagemPermite := '';
    end;

    if consulta.FieldByName('etdregime').AsInteger = 2 then
    begin
      vlToeMensagemPermite := '';
    end;

    if (trim(vlToeMensagemPermite) <> '') then
    begin

      if not tof.Locate('tofidentificacao', trim(vlToeMensagemPermite), []) then
      BEGIN
        tof.Append;
        toftofidentificacao.AsString := trim(vlToeMensagemPermite);
        tofticcodigo.AsInteger := ticObservacao;
        tof.post;
        vlTofcodigo := toftofcodigo.AsInteger;
      END
      else
      begin
        vlTofcodigo := toftofcodigo.AsInteger;
      end;
    end
    else if (trim(vlToeMensagemNaoPermite) <> '') then
    begin
      if not tof.Locate('tofidentificacao', trim(vlToeMensagemNaoPermite), []) then
      BEGIN

        tof.Append;
        toftofidentificacao.AsString := trim(vlToeMensagemNaoPermite);
        tofticcodigo.AsInteger := ticObservacao;
        tof.post;
        vlTofcodigo := toftofcodigo.AsInteger;
      END
      else
      begin
        vlTofcodigo := toftofcodigo.AsInteger;
      end;
    end;

    if vlToeMensagemNaoPermite <> '' then
    begin
      if vlTofcodigo <> 0 then
      begin
        mestom.Close;
        mestom.SQL.Text := 'select tomchave, meschave, tom.tofcodigo from tom,tof where tof.tofidentificacao=' + QuotedStr(vlToeMensagemNaoPermite) +
          ' and tom.tofcodigo and meschave=' + vpMesChave + ' and tof.tofcodigo=' + vlTofcodigo.ToString;
        mestom.Open;

        if mestom.IsEmpty then
        begin
          mestom.Append;
          mestom.FieldByName('meschave').AsString := vpMesChave;
          mestom.FieldByName('tofcodigo').AsString := vlTofcodigo.ToString;
          mestom.post;
        end;

      end;

    end;

    if vlToeMensagemPermite <> '' then
    begin
      if vlTofcodigo <> 0 then
      begin
        mestom.Close;
        mestom.SQL.Text := 'select tomchave, meschave, tof.tofcodigo from tom,tof where tof.tofidentificacao=' + QuotedStr(vlToeMensagemPermite) +
          ' and tom.tofcodigo and meschave=' + vpMesChave + ' and tof.tofcodigo=' + vlTofcodigo.ToString;
        mestom.Open;

        if mestom.IsEmpty then
        begin
          mestom.Append;
          mestom.FieldByName('meschave').AsString := vpMesChave;
          mestom.FieldByName('tofcodigo').AsString := vlTofcodigo.ToString;
          mestom.post;
        end;

      end;

    end;

    vlTofcodigo := 0;
    itm.Next;

  End;

  // ok substituição
  vlTofcodigo := 0;
  if not tof.Locate('tofidentificacao', trim('ICMS cobrado anteriormente por substituicao Tributaria'), []) then
  BEGIN

    tof.Append;
    toftofidentificacao.AsString := trim('ICMS cobrado anteriormente por substituicao Tributaria');
    tofticcodigo.AsInteger := ticObservacao;
    tof.post;
    vlTofcodigo := toftofcodigo.AsInteger;
  END;

  if (itm.Locate('toecodigo', cfgcfgtoesubstnoestado.AsInteger, [])) or (itm.Locate('toecodigo', cfgcfgtoesubstforaestado.AsInteger, [])) or
    (itm.Locate('toecodigo', cfgcfgtoesubstanpnoestado.AsInteger, [])) or (itm.Locate('toecodigo', cfgcfgtoesubstanpforaestado.AsInteger, [])) then
  begin

    if vlTofcodigo <> 0 then
    begin
      mestom.Close;
      mestom.SQL.Text := 'select tomchave, meschave, tofcodigo from tom where meschave=' + vpMesChave + ' and tofcodigo=' + vlTofcodigo.ToString;
      mestom.Open;

      if mestom.IsEmpty then
      begin
        mestom.Append;
        mestom.FieldByName('meschave').AsString := vpMesChave;
        mestom.FieldByName('tofcodigo').AsString := vlTofcodigo.ToString;
        mestom.post;
      end;

    end;

  end;

  // operação presencial ok
  if not tof.Locate('tofidentificacao', trim('Operacao Presencial/Venda no Balcao'), []) then
  BEGIN

    tof.Append;
    toftofidentificacao.AsString := trim('Operacao Presencial/Venda no Balcao');
    tofticcodigo.AsInteger := ticObservacao;
    tof.post;
    vlTofcodigo := toftofcodigo.AsInteger;
  END;

  if mesmesretirabalcao.AsInteger = 1 then
  begin
    if vlTofcodigo <> 0 then
    begin
      mestom.Close;
      mestom.SQL.Text := 'select tomchave, meschave, tofcodigo from tom where meschave=' + vpMesChave + ' and tofcodigo=' + vlTofcodigo.ToString;
      mestom.Open;

      if mestom.IsEmpty then
      begin
        mestom.Append;
        mestom.FieldByName('meschave').AsString := vpMesChave;
        mestom.FieldByName('tofcodigo').AsString := vlTofcodigo.ToString;
        mestom.post;
      end;

    end;

  end;

  /// FINAL
  /// tratativas de mengens de notas








  // fim do ajusta o toe do item para produto com substituição

end;

Procedure Tfnfe.mReimprimirNFe;
Var
  vCStatus: Integer;
  vlNomeArquivo: string;
Begin

  vpArquivoNFe := GeraNomeNFe(vpMesChave);

  If not FileExists(vpArquivoNFe) Then
  Begin
    if (cfgcfgservarqnfes.AsString <> '127.0.0.1') and (pos('c:\',cfgcfgservarqnfes.AsString)=0) then
    begin


      if FileExists(vpArquivoNFe) then
      begin

        if not DirectoryExists(ExtractFilePath(vlNomeArquivo)) then
          ForceDirectories(ExtractFilePath(vlNomeArquivo));

        copyfile(pchar(vpArquivoNFe), pchar(vlNomeArquivo), False);

      end;

      vpArquivoNFe := BaixaXMLServidor(IPServidorArquivos, vpArquivoNFe);
    end;

  End;

  If FileExists(vpArquivoNFe) Then
  Begin

    CarregaNFe(vpArquivoNFe);

    vCStatus := ACBrNFeNotas.NotasFiscais.Items[0].NFe.procNFe.CStat;

    if not vCStatus = 100 then
    begin
      Application.MessageBox(pchar('NF-e não autorizada. Não pode ser impressa.'), 'ATENÇÃO', MB_OK + MB_ICONWARNING);
      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=1';
      consulta.ExecSQL;

      consulta.Close;
      consulta.SQL.Text := 'update mes set temcodigo=4 where meschave=' + vpMesChave;
      consulta.ExecSQL;
      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=null';
      consulta.ExecSQL;

      exit;
    end;

    ACBrNFeDANFEFR.NumCopias := cfgcfgviasnfe.AsInteger;

    if cfgcfgprevisualizarimpressaonfe.AsInteger = 1 then
    begin
      ACBrNFeDANFEFR.MostraPreview := True;
      ACBrNFeDANFEFR.MostraSetup := True;
    end;

    ACBrNFeNotas.NotasFiscais.Imprimir;

    ACBrNFeDANFEFR.PathPDF := vPastaPrincipal + 'pdfs\NFe';

    if not DirectoryExists(ACBrNFeDANFEFR.PathPDF) then
      ForceDirectories(ACBrNFeDANFEFR.PathPDF);

    ACBrNFeNotas.NotasFiscais.ImprimirPDF;

  End
  else
    showmessage('457882 - ATENÇÃO: O Arquivo ' + vpArquivoNFe + ' não foi localizado!');
End;


Procedure Tfnfe.mEnviarNFe;
Begin

  consulta.Close;
  consulta.SQL.Text := 'select etdnfemodelos from etd,mes where etd.etdcodigo=mes.etdcodigo and mes.etdcodigo=' + vpMesChave;
  consulta.Open;

  { if (consulta.FieldByName('etdnfemodelos').AsString = '99') or (consulta.FieldByName('etdnfemodelos').AsString = '55') then
    begin }

  if not vpConsultouSEFAZ then
    mConsultaSEFAZ;

  ImprimeNFe;

  { end
    else
    begin
    showmessage('Documento fiscal não autorizado para este cliente!');
    Exit;
    end; }
End;

Procedure Tfnfe.mGerarPDF;
Var
  narq: String;
  vCStat: Integer;
Begin

  narq := vpArquivoNFe;

  If FileExists(narq) Then
  Begin
    CarregaNFe(narq);

    vCStat := ACBrNFeNotas.NotasFiscais.Items[0].NFe.procNFe.CStat;

    if not vCStat = 100 then
    begin
      Application.MessageBox(pchar('NF-e não autorizada. Não pode ser gerado PDF.'), 'ATENÇÃO', MB_OK + MB_ICONWARNING);

      exit;
    end;

    ACBrNFeNotas.NotasFiscais.ImprimirPDF;
  End
  else
    showmessage('543228 - ATENÇÃO: O Arquivo ' + vpArquivoNFe + ' não foi localizado!');
End;

Procedure Tfnfe.mInutilizarNumeroNFeDireto;
Var
  modelo, serie, Ano, mes, NumeroInicial, NumeroFinal, Justificativa: String;
Begin
  consulta.Close;
  consulta.SQL.Text := 'select mesregistro, mesnumero from mes where meschave=' + vpMesChave;
  consulta.Open;

  if consulta.IsEmpty then
  begin
    showmessage('3452345435 - Registro não localizado para inutilização de numeração!');
    exit;
  end;

  if not LerConfiguracao then
    exit;

  if not vpConsultouSEFAZ then
    mConsultaSEFAZ;

  Ano := IntToStr(YearOf(consulta.FieldByName('mesregistro').AsFloat));
  mes := IntToStr(MonthOf(consulta.FieldByName('mesregistro').AsFloat));

  NumeroInicial := consulta.FieldByName('mesnumero').AsString;
  NumeroFinal := consulta.FieldByName('mesnumero').AsString;
  Justificativa := 'Falha na emissão do documento fiscal';

  ACBrNFeNotas.WebServices.Inutiliza(cfgetddoc1.AsString, Justificativa, StrToInt(Ano), 55, 1, StrToInt(NumeroInicial), StrToInt(NumeroFinal));

  rni.Open;
  rni.Append;
  rnirniano.AsString := Ano;
  rnirnimes.AsString := mes;
  rnitdfcodigo.AsString := '55';
  rnirninumeroinicial.AsString := NumeroInicial;
  rnirninumerofinal.AsString := NumeroFinal;
  rnirnijutificativa.AsString := Justificativa;
  rni.post;

  consulta.Close;
  consulta.SQL.Text := 'set @disable_triggers=1';
  consulta.ExecSQL;

  consulta.Close;
  consulta.SQL.Text := 'UPDATE mes,toe SET   mesnumero=0, temcodigo=2, tdfcodigo=' + QuotedStr('00') + ', meschavenfe=' + QuotedStr('') +
    ', mesprotocolo=' + QuotedStr('') + ', mesdatanfe=null WHERE mes.toecodigo=toe.toecodigo and mesnumero>=' + NumeroInicial + ' and mesnumero<=' +
    NumeroFinal + ' and sdecodigo=' + QuotedStr('00') + ' AND tdfcodigo=' + QuotedStr('55') + ' AND toe.ttocodigo=2';
  consulta.ExecSQL;

  consulta.Close;
  consulta.SQL.Text := 'set @disable_triggers=null';
  consulta.ExecSQL;

  rni.Close;
End;

Procedure Tfnfe.mInutilizarNumeroNFe;
Var
  modelo, serie, Ano, mes, NumeroInicial, NumeroFinal, Justificativa: String;
Begin

  if not LerConfiguracao then
    exit;

  if not vpConsultouSEFAZ then
    mConsultaSEFAZ;

  If Not(InputQuery('Inutilização de Números de NFE ', 'Ano', Ano)) Then
    exit;
  If Not(InputQuery('Inutilização de Números de NFE ', 'Mes', mes)) Then
    exit;
  If Not(InputQuery('Inutilização de Números de NFE ', 'Número Inicial', NumeroInicial)) Then
    exit;
  If Not(InputQuery('Inutilização de Números de NFE ', 'Número Final', NumeroFinal)) Then
    exit;
  If Not(InputQuery('Inutilização de Números de NFE ', 'Justificativa', Justificativa)) Then
    exit;

  ACBrNFeNotas.WebServices.Inutiliza(cfgetddoc1.AsString, Justificativa, StrToInt(Ano), 55, 1, StrToInt(NumeroInicial), StrToInt(NumeroFinal));

  rni.Open;
  rni.Append;
  rnirniano.AsString := Ano;
  rnirnimes.AsString := mes;
  rnitdfcodigo.AsString := '55';
  rnirninumeroinicial.AsString := NumeroInicial;
  rnirninumerofinal.AsString := NumeroFinal;
  rnirnijutificativa.AsString := Justificativa;
  rni.post;
  rni.Close;

  consulta.Close;
  consulta.SQL.Text := 'set @disable_triggers=1';
  consulta.ExecSQL;

  consulta.Close;
  consulta.SQL.Text := 'UPDATE mes,toe SET mesnumero=0,  temcodigo=2, tdfcodigo=' + QuotedStr('00') + ', meschavenfe=' + QuotedStr('') +
    ', mesprotocolo=' + QuotedStr('') + ', mesdatanfe=null WHERE mes.toecodigo=toe.toecodigo and mesnumero>=' + NumeroInicial + ' and mesnumero<=' +
    NumeroFinal + ' and sdecodigo=' + QuotedStr('00') + ' AND tdfcodigo=' + QuotedStr('55') + ' AND toe.ttocodigo=2';
  consulta.ExecSQL;

  consulta.Close;
  consulta.SQL.Text := 'set @disable_triggers=null';
  consulta.ExecSQL;

End;

procedure Tfnfe.cadastraemail(chave, chavemestre: string);
var
  vpack: Cardinal;
  modnfe: tmodete;
begin
  vpack := LoadPackage('modulos\mete.bpl');
  if vpack <> 0 then
    try
      @modnfe := GetProcAddress(vpack, pchar('formulario'));
      if Assigned(modnfe) then
      begin
        modnfe(Application, self.zcone, self.vusrcodigo, chave, chavemestre);
      end;
    finally
      // UnLoadPackage(vpack);
    end;
end;

Procedure Tfnfe.mEmailNFe;
Var
  narq, npdf: String;
  emailscc: string;
  emails: string;
  vlArqs: TStringList;
  vlNomeArquivo: String;
Begin
  try
    vpArquivoNFe := GeraNomeNFe(vpMesChave);
    narq := vpArquivoNFe;


    if FileExists(narq) then
    begin

      if not DirectoryExists(ExtractFilePath(vlNomeArquivo)) then
        ForceDirectories(ExtractFilePath(vlNomeArquivo));

      copyfile(pchar(vpArquivoNFe), pchar(vlNomeArquivo), False);

    end;

    If not FileExists(vpArquivoNFe) Then
    Begin
      if (cfgcfgservarqnfes.AsString <> '127.0.0.1') and (pos('c:\',cfgcfgservarqnfes.AsString)=0) then
      begin
        vpArquivoNFe := BaixaXMLServidor(IPServidorArquivos, vpArquivoNFe);
      end;
    End;


    narq := vpArquivoNFe;

    qEteMes.Close;
    qEteMes.Params[0].AsString := vpMesChave;
    qEteMes.Params[1].AsInteger := Acesso.Filial;
    qEteMes.Open;

    emails := '';
    emailscc := '';

    qEteMes.First;
    while not qEteMes.Eof do
    begin
      if pos('@', qEteMeseteemail.AsString) > 0 then
        if emails = '' then
          emails := qEteMeseteemail.AsString
        else if pos(qEteMeseteemail.AsString, emailscc) = 0 then
          emailscc := emailscc + qEteMeseteemail.AsString + ';';

      qEteMes.Next;
    end;

    emailscc := Copy(emailscc, 1, Length(emailscc) - 1);

    npdf := ExtractFileName(narq);
    npdf := Copy(npdf, 1, pos('-', npdf) - 1);
    npdf := vPastaPrincipal + 'pdfs\NFe\' + npdf + '-nfe.pdf';

    if not DirectoryExists(vPastaPrincipal + 'pdfs\NFe\') then
      ForceDirectories(vPastaPrincipal + 'pdfs\NFe\');

    if not(FileExists(narq)) then
    begin
      Application.MessageBox(pchar('9275 Arquivo XML da NF-e não foi localizado!' + #13 + #13 + 'Arquivo: ' + narq), 'Atenção',
        MB_ICONWARNING + MB_OK);
      exit;
    end;

    narq := vpArquivoNFe;

    If FileExists(vpArquivoNFe) Then
    Begin
      CarregaNFe(vpArquivoNFe);
      ACBrNFeNotas.NotasFiscais.ImprimirPDF;
    End;

    if not(FileExists(npdf)) then
    begin
      Application.MessageBox(pchar('9281 Arquivo PDF da NF-e não foi localizado!' + #13 + #13 + 'Arquivo: ' + npdf), 'Atenção',
        MB_ICONWARNING + MB_OK);
      exit;
    end;

    if (pos('yahoo', cfgcfgemailnfe.AsString) > 0) then
    begin
      try
        vlArqs := TStringList.Create;
        vlArqs.add(narq);
        vlArqs.add(npdf);

        ArtMAPISendMail('NFE emitida pela empresa: ' + cfgetdapelido.AsString, 'Esta NFE foi emitida tendo sua empresa como destino.',
          cfgetdapelido.AsString, cfgcfgemailnfe.AsString, cfgetdapelido.AsString, emails, [narq, npdf]);

      finally
        freeandnil(vlArqs);
      end;

    end
    else
    begin

      If EnviarEmail(emails, emailscc, 'Esta NFE foi emitida tendo sua empresa como destino.', 'NFE emitida pela empresa: ' + cfgetdapelido.AsString,
        narq, npdf, qEteMesetdidentificacao.AsString, cfgetdapelido.AsString) Then
      begin
        Application.MessageBox(pchar('Email enviado com sucesso para: ' + qEteMesetdidentificacao.AsString + #13 + 'Email: ' + emails + #13 +
          'Cópias: ' + emailscc), 'ENVIO CONCLUÍDO', MB_OK + MB_ICONINFORMATION)

      end;

    end;

  except
    on E: Exception do
    begin
      showmessage('erro ' + E.Message);
      SalvarLogErro(E.Message, E.StackTrace);
    end;
  end;
End;

Function Tfnfe.mConsultaNFe(aSilent: Boolean = True): Boolean;
Var
  nProt: String;
  vnrnfe: String;
  vchNFe: String;
  vdtNFe: String;
  vhrNFe: String;
  vCodStatusNFe: String;
  vMsgStatusNFe: String;
  vRetorno: Boolean;
  vlRetornoErro: string;
  vDtAutorizacao: Double;
  vlNomeArquivo: String;
Begin

  vRetorno := False;

  vpArquivoNFe := GeraNomeNFe(vpMesChave);


  if FileExists(vpArquivoNFe) then
  begin

    if not DirectoryExists(ExtractFilePath(vlNomeArquivo)) then
      ForceDirectories(ExtractFilePath(vlNomeArquivo));

    copyfile(pchar(vpArquivoNFe), pchar(vlNomeArquivo), False);

  end;

  If not FileExists(vpArquivoNFe) Then
  Begin
    if (cfgcfgservarqnfes.AsString <> '127.0.0.1')  and (pos('c:\',cfgcfgservarqnfes.AsString)=0) then
    begin
      vpArquivoNFe := BaixaXMLServidor(IPServidorArquivos, vpArquivoNFe);
    end;

  End;


  If FileExists(vpArquivoNFe) Then
  Begin

    ACBrNFeNotas.NotasFiscais.Clear;
    ACBrNFeNotas.NotasFiscais.LoadFromFile(vpArquivoNFe);

    ACBrNFeNotas.Configuracoes.WebServices.Visualizar := False;

    ACBrNFeNotas.Consultar;
    vdtNFe := DateToStr(ACBrNFeNotas.NotasFiscais[0].NFe.ide.dEmi);
    vhrNFe := TimeToStr(ACBrNFeNotas.NotasFiscais[0].NFe.ide.dEmi);
    nProt := ACBrNFeNotas.WebServices.consulta.Protocolo;
    vDtAutorizacao := ACBrNFeNotas.WebServices.consulta.DhRecbto;
    vchNFe := ACBrNFeNotas.WebServices.consulta.NFeChave;
    vCodStatusNFe := IntToStr(ACBrNFeNotas.WebServices.consulta.CStat);
    vMsgStatusNFe := ACBrNFeNotas.WebServices.consulta.xMotivo;

    vnrnfe := IntToStr(ACBrNFeNotas.NotasFiscais.Items[0].NFe.ide.nNF);

    (* Verifica código de retorno é igual a 100 - Uso Autorizado *)

    If (ACBrNFeNotas.WebServices.consulta.CStat = 100) Then
    begin
      // Try
      vRetorno := True;

      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=1';
      consulta.ExecSQL;

      qconsulta.Close;
      qconsulta.SQL.Text := 'UPDATE mes SET ';
      qconsulta.SQL.add('mesregistro = ' + QuotedStr(ajustadata(vdtNFe)) + ', ');
      qconsulta.SQL.add('mesnumero = ' + QuotedStr(vnrnfe) + ', ');
      qconsulta.SQL.add('meschavenfe = ' + QuotedStr(vchNFe) + ', ');
      qconsulta.SQL.add('meshoranfe = ' + QuotedStr(vhrNFe) + ', ');
      qconsulta.SQL.add('tdfcodigo = ' + QuotedStr('55') + ', ');
      qconsulta.SQL.add('temcodigo = 5, ');
      qconsulta.SQL.add('mesprotocolo = ' + QuotedStr(nProt) + ' WHERE ');
      qconsulta.SQL.add('meschave = ' + vpMesChave + ' and flacodigo=' + Acesso.Filial.ToString);
      qconsulta.ExecSQL;

      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=null';
      consulta.ExecSQL;

      // try
      vpArquivoNFe := GeraNomeNFe(vpMesChave);

      if FileExists(vpArquivoNFe) then
      begin
        if not mes.Active then
        begin
          mes.Close;
          mes.Params[0].AsString := vpMesChave;
          mes.Params[1].AsInteger := Acesso.Filial;
          mes.Open;
        end;

      end;
      // except
      // end;

      qconsulta.Close;
      qconsulta.SQL.Text := 'select mesregistro,mesnumero, meschavenfe,tdfcodigo,mesprotocolo from mes where meschave=' + vpMesChave;
      qconsulta.Open;

      if aSilent = False then
      begin

        showmessage('Emissão: ' + qconsulta.Fields[0].AsString + ''#13'' + (* *)
          'Nr. NFE: ' + qconsulta.Fields[1].AsString + ''#13'' + (* *)
          'Chave  : ' + qconsulta.Fields[2].AsString + ''#13'' + #13 + #13 + (* *)
          'Código Status          : ' + vCodStatusNFe + #13 + (* *)
          'Status - NFE           : ' + vMsgStatusNFe + #13 + (* *)
          'Protocolo Nr.          : ' + nProt + #13 + (* *)
          'Data e Hora Autorização: ' + datetimetostr(vDtAutorizacao));
      end;
      qconsulta.Close;

      // Except
      // End;
    end;

  End
  Else
    showmessage('564228 - ATENÇÃO: O Arquivo ' + vpArquivoNFe + ' não foi localizado!');

  Result := vRetorno;
End;

Procedure Tfnfe.mCancelarNFe;
Var
  vProtocoloCanc: String;
  vJustificativaCanc: String;
  vTamCorrecao: Integer;
  vCStat: Integer;
  vXMotivo: String;
  vnArqNfe: String;
  vnArqEve: String;
  vAssunto: string;
  vTexto: string;
  vArqEvento: String;
  vChaveEvento: String;
  vErro: string;
  vMsgRetorno: string;
  vlNomeArquivo: string;
Begin

  // vpArquivoNFe:=GeraNomeNFe(vpMesChave);


{  if FileExists(vpArquivoNFe) then
  begin

    if not DirectoryExists(ExtractFilePath(vpArquivoNFe)) then
    begin
      showmessage('Linha 9820 : '+ExtractFilePath(vpArquivoNFe));

      ForceDirectories(ExtractFilePath(vpArquivoNFe));
    end;

    copyfile(pchar(vpArquivoNFe), pchar(vlNomeArquivo), False);

  end;}

  If not FileExists(vpArquivoNFe) Then
  Begin
    if (cfgcfgservarqnfes.AsString <> '127.0.0.1') and (pos('c:\',cfgcfgservarqnfes.AsString)=0) then
    begin
      vpArquivoNFe := BaixaXMLServidor(IPServidorArquivos, vpArquivoNFe);
    end;

  End;

  If not FileExists(vpArquivoNFe) Then
  begin
    Application.MessageBox(pchar('O Arquivo ' + vpArquivoNFe + ' não foi localizado!'), 'Atenção', MB_ICONWARNING + MB_OK);
    exit;
  end;

  repeat
    if not(InputQuery('Cancelamento da NF-e', 'Justificativa do cancelamento.' + #13 + 'Contendo de 15 a 1000 caracteres.', vJustificativaCanc)) then
      exit;

    vTamCorrecao := Length(vJustificativaCanc);

    if vTamCorrecao < 15 then
      showmessage('Justificativa deve ter no mínimo 15 caracteres!');
  until (vTamCorrecao >= 15);

  If vJustificativaCanc = '' Then
  Begin
    Application.MessageBox(pchar('É necessário uma jutificativa para cancelamento da NFE!'), 'Atenção', MB_ICONWARNING + MB_OK);
    exit;
  End;

  if LerConfiguracao then
  begin
    if not FileExists(vpArquivoNFe) then
    begin
      Application.MessageBox(pchar('Arquivo não localizado.' + #13 + 'Mensagem: ' + vErro), pchar(vpArquivoNFe), MB_OK + MB_ICONERROR);

    end
    else
    begin

      if not vpConsultouSEFAZ then
        mConsultaSEFAZ;

      ACBrNFeNotas.NotasFiscais.Clear;
      ACBrNFeNotas.NotasFiscais.LoadFromFile(vpArquivoNFe);

      AjustaCaminhoGeralNF(ACBrNFeNotas.NotasFiscais[0].NFe.ide.dEmi);

      ACBrNFeNotas.Configuracoes.WebServices.Visualizar := False;

      ACBrNFeNotas.EventoNFe.Evento.Clear;
      ACBrNFeNotas.EventoNFe.idLote := 0;

      with ACBrNFeNotas.EventoNFe.Evento.add do
      begin

        // vJustificativaCanc := StringReplace(vJustificativaCanc, '> <', '><', [rfIgnoreCase, rfReplaceAll]);
        // vJustificativaCanc := StringReplace(vJustificativaCanc, ' </', '</', [rfIgnoreCase, rfReplaceAll]);
        // vJustificativaCanc := StringReplace(vJustificativaCanc, '> ', '>', [rfIgnoreCase, rfReplaceAll]);
        vJustificativaCanc := StringReplace(vJustificativaCanc, #$D#$A, '', [rfIgnoreCase, rfReplaceAll]);
        vJustificativaCanc := StringReplace(vJustificativaCanc, #$D, '', [rfIgnoreCase, rfReplaceAll]);

        infEvento.dhEvento := vpDataAtual;
        infEvento.tpEvento := teCancelamento;
        infEvento.detEvento.xJust := vJustificativaCanc;
        infEvento.versaoEvento := '1.00';
      end;

      Try
        ACBrNFeNotas.EnviarEvento(0);

        vCStat := ACBrNFeNotas.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].RetInfEvento.CStat;
        vXMotivo := ACBrNFeNotas.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].RetInfEvento.xMotivo;
        vProtocoloCanc := ACBrNFeNotas.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].RetInfEvento.nProt;

        if (vCStat = 135) or (vCStat = 136) then
        begin

          vChaveEvento := Copy(ACBrNFeNotas.EventoNFe.Evento.Items[0].infEvento.ID, 3, 52);

          vArqEvento := ACBrNFeNotas.Configuracoes.Arquivos.PathSalvar;
          vArqEvento := vArqEvento + '\' + vChaveEvento;
          vArqEvento := vArqEvento + '-procEventoNFe.xml';

          enf.Open;
          enf.Append;
          enftencodigo.AsInteger := tenCancelamento;
          enfenfregistroevento.AsFloat := vpDataAtual;
          enfenfchaveevento.AsString := vChaveEvento;
          enfenfseqevento.AsInteger := 1; // Cancelamento não tem sequência.
          enfenfdescricao.AsString := vJustificativaCanc;
          if FilesExists(vArqEvento) then
            enfenfxml.LoadFromFile(vArqEvento);
          enfenfcstat.AsInteger := vCStat;
          enfenfxmotivo.AsString := vXMotivo;
          enf.post;

          mev.Open;
          mev.Append;
          mevenfchave.AsInteger := enfenfchave.AsInteger;
          mevmeschave.AsString := vpMesChave;
          mev.post;

          consulta.Close;
          consulta.SQL.Text := 'set @disable_triggers=1';
          consulta.ExecSQL;

          qconsulta.Close;
          qconsulta.SQL.Text := 'UPDATE mes SET ';
          qconsulta.SQL.add('sdecodigo = ''02'', ');
          qconsulta.SQL.add('mesprotocolo = ''' + vProtocoloCanc + ''' ');
          qconsulta.SQL.add('where meschave = ' + vpMesChave + ' and flacodigo=' + Acesso.Filial.ToString);
          qconsulta.ExecSQL;

          consulta.Close;
          consulta.SQL.Text := 'set @disable_triggers=null';
          consulta.ExecSQL;

          ImprimeEventoNfe;

          EnviarEmailEvento;

          showmessage('Cancelamento efetuado com sucesso!');
        end
        else
          Application.MessageBox(pchar('Evento de NF-e não autorizado.' + #13 + #13 + 'Mensagem: ' + #13 + vXMotivo), 'Erro Envio Evento NF-e',
            MB_OK + MB_ICONERROR);
      Except
        On E: Exception Do
        Begin

          vCStat := ACBrNFeNotas.EventoNFe.Evento[0].RetInfEvento.CStat;
          vXMotivo := ACBrNFeNotas.EventoNFe.Evento[0].RetInfEvento.xMotivo;

          If E.Message = '' Then
            vErro := ''
          Else
            vErro := #13 + 'Erro: ' + E.Message;

          If (vCStat = 0) And (vXMotivo = '') Then
            vMsgRetorno := ''
          Else
            vMsgRetorno := #13 + 'Retorno: ' + IntToStr(vCStat) + ' - ' + vXMotivo + #13;

          Application.MessageBox(pchar('Evento de NF-e não autorizado.' + #13 + 'Mensagem: ' + vErro), 'Erro Envio NF-e', MB_OK + MB_ICONERROR);

          SalvarLogErro(E.Message, E.StackTrace);

          exit;
        End;
      End;
    end;
  end;

End;

Procedure Tfnfe.mManifDestDesconhecimento;
var
  chave, idLote, cnpj: string;
  lMsg: string;
begin

  if LerConfiguracao then
  begin

    if not vpConsultouSEFAZ then
      mConsultaSEFAZ;

    enf.Close;
    enf.FilterSQL := 'enfchave=' + vpMesChave;
    enf.Open;

    chave := enfenfchavenfe.AsString;

    chave := trim(OnlyNumber(chave));
    idLote := '1';

    cnpj := trim(OnlyNumber(cfgetddoc1.AsString));

    ACBrNFeNotas.NotasFiscais.Clear;
    ACBrNFeNotas.NotasFiscais.LoadFromFile(vpArquivoNFe);

    ACBrNFeNotas.Configuracoes.WebServices.Visualizar := False;

    ACBrNFeNotas.EventoNFe.Evento.Clear;

    with ACBrNFeNotas.EventoNFe.Evento.add do
    begin
      infEvento.cOrgao := 91;
      infEvento.chNFe := chave;
      infEvento.cnpj := cnpj;
      infEvento.dhEvento := now;
      infEvento.tpEvento := teManifDestDesconhecimento;

    end;
    ACBrNFeNotas.EnviarEvento(StrToInt(idLote));

    with ACBrNFeNotas.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].RetInfEvento do
    begin
      lMsg := 'Id: ' + ID + #13 + 'tpAmb: ' + TpAmbToStr(tpAmb) + #13 + 'verAplic: ' + verAplic + #13 + 'cOrgao: ' + IntToStr(cOrgao) + #13 +
        'cStat: ' + IntToStr(CStat) + #13 + 'xMotivo: ' + xMotivo + #13 + 'chNFe: ' + chNFe + #13 + 'tpEvento: ' + TpEventoToStr(tpEvento) + #13 +
        'xEvento: ' + xEvento + #13 + 'nSeqEvento: ' + IntToStr(nSeqEvento) + #13 + 'CNPJDest: ' + CNPJDest + #13 + 'emailDest: ' + emailDest + #13 +
        'dhRegEvento: ' + datetimetostr(dhRegEvento) + #13 + 'nProt: ' + nProt;
    end;
    showmessage(lMsg);

    { MemoResp.Lines.Text := ACBrNFe.WebServices.EnvEvento.RetWS;
      memoRespWS.Lines.Text := ACBrNFe1.WebServices.EnvEvento.RetornoWS;
      // ACBrNFe1.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].XXXX
      LoadXML(ACBrNFe1.WebServices.EnvEvento.RetornoWS, WBResposta); }

  end;

end;

Procedure Tfnfe.mCartaCorrecao;
var
  vCorrecao: string;
  nArqEve: string;
  vSeqEvento: Integer;
  vCStat: Integer;
  vXMotivo: String;
  vnArqPdf: string;
  emails, emailscc: string;
  vAssunto: string;
  vTexto: string;
  vArqEvento: String;
  vChaveEvento: String;
  vErro: string;
  vMsgRetorno: string;
  vlNomeArquivo: String;
begin

  vpArquivoNFe := GeraNomeNFe(vpMesChave);

  If not FileExists(vpArquivoNFe) Then
  Begin
    if (cfgcfgservarqnfes.AsString <> '127.0.0.1') and (pos('c:\',cfgcfgservarqnfes.AsString)=0) then
    begin

       vpArquivoNFe := BaixaXMLServidor(IPServidorArquivos, vpArquivoNFe);

    end;

  End;

  if vpArquivoXMLEvento = '' then
  begin
    GeraNomeArqsEvento;
  end;

  if not FilesExists(vpArquivoNFe) then
  begin
    Application.MessageBox(pchar('9678 Arquivo XML da NF-e não encontrado.' + #13 + #13 +
      'Entre em contato com suporte da Pégasus Sistemas - (66) 3544-2765.'), 'ATENÇÃO', MB_OK + MB_ICONWARNING);
    exit;
  end;

  if LerConfiguracao then
  begin

    if not vpConsultouSEFAZ then
      mConsultaSEFAZ;

    ACBrNFeNotas.NotasFiscais.Clear;
    ACBrNFeNotas.NotasFiscais.LoadFromFile(vpArquivoNFe);

    AjustaCaminhoGeralNF(ACBrNFeNotas.NotasFiscais[0].NFe.ide.dEmi);

    // Verifica se NFe está Autorizada.
    if not ACBrNFeNotas.NotasFiscais.Items[0].NFe.procNFe.CStat = 100 then
    begin
      Application.MessageBox(pchar('A NF-e selecionada não é autorizada.' + #13 + 'Por favor, consulte a situação da NF-e e tente novamente.'),
        'ATENÇÃO', MB_OK + MB_ICONWARNING);
      exit;
    end;

    ACBrNFeDANFEFR.PathPDF := ACBrNFeDANFEFR.PathPDF + '\CCe';
    ACBrNFeNotas.EventoNFe.Evento.Clear;

    (* Verifica se já existe carta de correção para a NF-e selecionada *)
    qEnfMev.ParamByName('meschave').AsString := vpMesChave;
    qEnfMev.Open;
    qEnfMev.Last;

    if qEnfMevtencodigo.AsInteger = tenCancelamento then
    begin
      Application.MessageBox(pchar('A NF-e selecionada está cancelada.' + #13 + 'Carta de Correção não pode ser gerada para documento cancelado.'),
        'ATENÇÃO', MB_OK + MB_ICONWARNING);
      exit;
    end;

    vSeqEvento := qEnfMevenfseqevento.AsInteger + 1;
    vCorrecao := '';

    if qEnfMevenfseqevento.AsInteger > 0 then
      case Application.MessageBox(pchar('Já existe uma Carta de Correção vínculada a esta NF-e: ' + qEnfMevenfseqevento.AsString + #13 +
        'Novas correções substituem as anteriores.' + #13 + 'Deseja manter correções anteriores ?'), 'Carta de Correção',
        MB_YESNO + MB_DEFBUTTON1 + MB_ICONQUESTION) of
        IDYES:
          vCorrecao := qEnfMevenfdescricao.AsString;
      end;

    fnfecorrecao := Tfnfecorrecao.Create(self);
    try
      fnfecorrecao.textocorrecao.Lines.Text := vCorrecao;
      fnfecorrecao.ShowModal;

      if fnfecorrecao.ModalResult = mrCancel then
        exit;

      vCorrecao := fnfecorrecao.textocorrecao.Lines.Text;

    finally
      fnfecorrecao.Free;
    end;

    (* Cria evento *)
    with ACBrNFeNotas.EventoNFe.Evento.add do
    begin
      infEvento.cOrgao := 51;
      infEvento.dhEvento := vpDataAtual;
      infEvento.tpEvento := teCCe;
      infEvento.nSeqEvento := vSeqEvento + 1;
      infEvento.detEvento.xCorrecao := vCorrecao;
    end;

    try
      if ACBrNFeNotas.EnviarEvento(0) then
      begin

        vCStat := ACBrNFeNotas.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].RetInfEvento.CStat;
        vXMotivo := ACBrNFeNotas.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].RetInfEvento.xMotivo;

        if (vCStat = 135) or (vCStat = 136) then
        begin
          vChaveEvento := Copy(ACBrNFeNotas.EventoNFe.Evento.Items[0].infEvento.ID, 3, 52);

          vArqEvento := ACBrNFeNotas.Configuracoes.Arquivos.PathSalvar;
          vArqEvento := vArqEvento + '\' + vChaveEvento;
          vArqEvento := vArqEvento + '-procEventoNFe.xml';

          enf.Open;
          enf.Append;
          enftencodigo.AsInteger := tenCCe;
          enfenfregistroevento.AsFloat := vpDataAtual;
          enfenfchaveevento.AsString := vChaveEvento;
          enfenfseqevento.AsInteger := vSeqEvento + 1;
          enfenfdescricao.AsString := vCorrecao;
          if FilesExists(vArqEvento) then
            enfenfxml.LoadFromFile(vArqEvento);
          enfenfcstat.AsInteger := vCStat;
          enfenfxmotivo.AsString := vXMotivo;
          enf.post;

          mev.Open;
          mev.Append;
          mevenfchave.AsInteger := enfenfchave.AsInteger;
          mevmeschave.AsString := fnfe.vpMesChave;
          mev.post;

          (* Impressão e envio de Email do Evento *)
          ImprimeEventoNfe;

          EnviarEmailEvento;
        end
        else
          Application.MessageBox(pchar('Evento de NF-e não autorizado.' + #13 + #13 + 'Mensagem: ' + #13 + vXMotivo), 'Erro Envio Evento NF-e',
            MB_OK + MB_ICONERROR);
      end
      else
      begin
        vCStat := ACBrNFeNotas.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].RetInfEvento.CStat;
        vXMotivo := ACBrNFeNotas.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].RetInfEvento.xMotivo;

      end;
    Except
      On E: Exception Do
      Begin

        vCStat := ACBrNFeNotas.EventoNFe.Evento[0].RetInfEvento.CStat;
        vXMotivo := ACBrNFeNotas.EventoNFe.Evento[0].RetInfEvento.xMotivo;

        If E.Message = '' Then
          vErro := ''
        Else
          vErro := #13 + 'Erro: ' + E.Message;

        If (vCStat = 0) And (vXMotivo = '') Then
          vMsgRetorno := ''
        Else
          vMsgRetorno := #13 + 'Retorno: ' + IntToStr(vCStat) + ' - ' + vXMotivo + #13;

        Application.MessageBox(pchar('Evento de NF-e não autorizado.' + #13 + 'Mensagem: ' + vErro), 'Erro Envio NF-e', MB_OK + MB_ICONERROR);

        SalvarLogErro(E.Message, E.StackTrace);

        exit;
      End;
    End;
  end;
end;

procedure Tfnfe.ImprimeEventoNfe;
var
  vTipoEvento: String;
  vlNomeArquivo: String;
begin
  {
    consulta.Close;
    consulta.SQL.Text := 'select enfchave from enf where enfchaveevento=' + QuotedStr('110111'+mesmeschavenfe.AsString);
    consulta.Open;

    if consulta.IsEmpty then
    begin
    showmessage('Este documento não possue evento adicioando!');
    exit;
    end;
  }
  {
    1101115123082472376900010465001000093842159103643601-procEventoNFe.xml
  }

  if not LerConfiguracao then
    exit;

  if vpArquivoNFe = '' then
    vpArquivoNFe := GeraNomeNFe(vpMesChave);

  If not FileExists(vpArquivoNFe) Then
  Begin

    if (cfgcfgservarqnfes.AsString <> '127.0.0.1') and (pos('c:\',cfgcfgservarqnfes.AsString)=0) then
    begin


      if not FileExists(vpArquivoNFe) then
      begin
        vpArquivoNFe := BaixaXMLServidor(IPServidorArquivos, vpArquivoNFe);

      end;

      if FileExists(vpArquivoNFe) then
      begin

        if not DirectoryExists(ExtractFilePath(vlNomeArquivo)) then
          ForceDirectories(ExtractFilePath(vlNomeArquivo));

        copyfile(pchar(vpArquivoNFe), pchar(vlNomeArquivo), False);

      end;

    end;

  End;

  if FileExists(vpArquivoNFe) then
  begin

    if vpArquivoXMLEvento = '' then
      GeraNomeArqsEvento;

    If not FileExists(vpArquivoXMLEvento) Then
    Begin
      if (cfgcfgservarqnfes.AsString <> '127.0.0.1') and (pos('c:\',cfgcfgservarqnfes.AsString)=0)  then
      begin
        vpArquivoXMLEvento := BaixaXMLServidor(IPServidorArquivos, vpArquivoXMLEvento);
      end;
    End;


    if vpArquivoXMLEvento <> '' then
    begin
      if FileExists(vpArquivoXMLEvento) then
      begin

        ACBrNFeNotas.NotasFiscais.Clear;
        ACBrNFeNotas.NotasFiscais.LoadFromFile(vpArquivoNFe);

        ACBrNFeNotas.EventoNFe.Evento.Clear;
        ACBrNFeNotas.EventoNFe.LerXML(vpArquivoXMLEvento);
        ACBrNFeNotas.ImprimirEvento;

        vTipoEvento := IfThen(ACBrNFeNotas.EventoNFe.Evento.Items[0].infEvento.tpEvento = teCCe, 'CCe', 'Cancelamento');
        ACBrNFeNotas.DANFE.PathPDF := vPastaPrincipal + '\pdfs\' + vTipoEvento;

        if not DirectoryExists(ACBrNFeNotas.DANFE.PathPDF) then
          ForceDirectories(ACBrNFeNotas.DANFE.PathPDF);

        ACBrNFeNotas.ImprimirEventoPDF;

        ACBrNFeNotas.NotasFiscais.Clear;
        ACBrNFeNotas.EventoNFe.Evento.Clear;
      end
      else
      begin
        showmessage('100056 - Não foi localizado Evento para este documento: ' + vpArquivoNFe);
      end;
    end;
  end
  else
  begin
    showmessage('100058 - Documento fiscal não localizado: ' + vpArquivoNFe);
  end;
end;

Function Tfnfe.mConsultaEventoNFe: Boolean;
Var
  nProt: String;
  vnrnfe: String;
  vchNFe: String;
  vdtNFe: String;
  vhrNFe: String;
  vCodStatusNFe: String;
  vMsgStatusNFe: String;
  vRetorno: Boolean;
  i: Integer;
  nProtCanc: string;
  dhRectoCanc: Extended;
Begin

  vRetorno := False;

  if not LerConfiguracao then
    exit;

  if not FilesExists(vpArquivoNFe) then
  begin
    Application.MessageBox(pchar('Não foi possível consultar o Evento selecionado.' + #13 + '9888 Arquivo XML não localizado.'), 'ATENÇÃO',
      MB_OK + MB_ICONWARNING);
    exit;
  end;

  ACBrNFeNotas.NotasFiscais.Clear;
  ACBrNFeNotas.NotasFiscais.LoadFromFile(vpArquivoNFe);

  ACBrNFeNotas.Configuracoes.WebServices.Visualizar := False;
  ACBrNFeNotas.Consultar;

  i := ACBrNFeNotas.WebServices.consulta.procEventoNFe.Count - 1;

  with ACBrNFeNotas.WebServices.consulta.procEventoNFe.Items[i].RetEventoNFe.retEvento.Items[0] do
  begin

    // RetInfEvento.cStat;     EU NÃO CONSEGUI TERMINAR O QUE ESTAVA FAZENDO ONTEM.

  end;

  if ACBrNFeNotas.WebServices.consulta.procEventoNFe.Items[i].RetEventoNFe.infEvento.tpEvento = teCancelamento then
  begin
    nProtCanc := ACBrNFeNotas.WebServices.consulta.procEventoNFe.Items[i].RetEventoNFe.retEvento.Items[0].RetInfEvento.nProt;
    dhRectoCanc := ACBrNFeNotas.WebServices.consulta.procEventoNFe.Items[i].RetEventoNFe.retEvento.Items[0].RetInfEvento.dhRegEvento;
  end;

  vdtNFe := DateToStr(ACBrNFeNotas.WebServices.consulta.DhRecbto);
  vhrNFe := TimeToStr(ACBrNFeNotas.WebServices.consulta.DhRecbto);
  nProt := ACBrNFeNotas.WebServices.consulta.Protocolo;
  vchNFe := ACBrNFeNotas.WebServices.consulta.NFeChave;

  Result := vRetorno;
End;

Procedure Tfnfe.mConsultaSEFAZ;
var
  vlRetornoErro: string;
  vlItem: string;
  vlDataHoraSefaz: String;
  vldifsegundos: Integer;
  vlDia: string;
Begin

  ACBrNFeNotas.Configuracoes.WebServices.Visualizar := True;
  try
    ACBrNFeNotas.WebServices.StatusServico.Executar;
    self.vpRetorno := UTF8Encode(ACBrNFeNotas.WebServices.StatusServico.RetWS);

    vlDataHoraSefaz := Copy(self.vpRetorno, pos('<dhRecbto>', self.vpRetorno) + 10, 19);

    vlDia := Copy(vlDataHoraSefaz, 9, 2) + '/' + Copy(vlDataHoraSefaz, 6, 2) + '/' + Copy(vlDataHoraSefaz, 1, 4);
    vlDataHoraSefaz := vlDia + ' ' + Copy(vlDataHoraSefaz, 12, 10);

    vldifsegundos := SecondsBetween(now(), strtodatetime(vlDataHoraSefaz));

    if vldifsegundos < 0 then
      vldifsegundos := vldifsegundos * -1;

    if vldifsegundos > 300 then
    begin
      raise Exception.Create('Data e hora com diferença de mais de 5 minutos que data e hora do SEFAZ!');
    end;

  except
    on E: Exception do
    begin

      if pos('erro não catalogado', lowercase(E.Message)) > 0 then
      begin

        vlItem := E.Message;
        vlItem := Copy(E.Message, pos('[', E.Message) + 1, 20);
        vlItem := SoNumeros(vlItem);

        showmessage('A T E N Ç Ã O:' + #13 + #13 + 'Sefaz fora do ar.' + #13 + 'Tente novamente mais tarde!');
        exit

      end;

      if pos('Inativo ou Inoperante tente novamente', lowercase(E.Message)) > 0 then
      begin

        vlItem := E.Message;
        vlItem := Copy(E.Message, pos('[', E.Message) + 1, 20);
        vlItem := SoNumeros(vlItem);

        showmessage('A T E N Ç Ã O:' + #13 + #13 + 'Sefaz fora do ar.' + #13 + 'Tente novamente mais tarde!');
        exit

      end;

      if (pos('TimeOut de Requisição', lowercase(E.Message)) > 0) or (pos('A conexão com o servidor foi redefinida', lowercase(E.Message)) > 0) then
      begin

        vlItem := E.Message;
        vlItem := Copy(E.Message, pos('[', E.Message) + 1, 20);
        vlItem := SoNumeros(vlItem);

        showmessage('A T E N Ç Ã O:' + #13 + #13 + 'Sefaz fora do ar.' + #13 + 'Tente novamente mais tarde!');
        exit

      end;

      vlRetornoErro := E.Message;
      Application.MessageBox(pchar('Falha de conexão com servidores da SEFAZ.' + #13 + #13 + 'Mensagem: ' + #13 + vlRetornoErro),
        'Falha comunicação WebService', MB_OK + MB_ICONERROR);

      SalvarLogErro(E.Message, E.StackTrace);

    end;
  end;
End;

Function Tfnfe.mCodigoConsultaSEFAZ: string;
var
  vlDataHoraSefaz: String;
  vlDia: String;
  vldifsegundos: Integer;

Begin
  Result := '000 - Falha de conexao';
  ACBrNFeNotas.Configuracoes.WebServices.Visualizar := False;

  try
    ACBrNFeNotas.WebServices.StatusServico.Executar;
    self.vpRetorno := UTF8Encode(ACBrNFeNotas.WebServices.StatusServico.RetWS);

    vlDataHoraSefaz := Copy(self.vpRetorno, pos('<dhRecbto>', self.vpRetorno) + 10, 19);

    vlDia := Copy(vlDataHoraSefaz, 9, 2) + '/' + Copy(vlDataHoraSefaz, 6, 2) + '/' + Copy(vlDataHoraSefaz, 1, 4);
    vlDataHoraSefaz := vlDia + ' ' + Copy(vlDataHoraSefaz, 12, 10);

    vldifsegundos := SecondsBetween(now(), strtodatetime(vlDataHoraSefaz));

    if vldifsegundos < 0 then
      vldifsegundos := vldifsegundos * -1;

    if vldifsegundos > 300 then
    begin
      raise Exception.Create('Data e hora com diferença de mais de 5 minutos que data e hora do SEFAZ!');
    end;

    Result := IntToStr(ACBrNFeNotas.WebServices.StatusServico.CStat) + ' - ' + ACBrNFeNotas.WebServices.StatusServico.xMotivo;
  except
    Result := '000 - Falha de conexao';
  end;

End;

Function Tfnfe.mConsultaSEFAZInterna: Boolean;
var
  vlDataHoraSefaz: String;
  vlDia: String;
  vldifsegundos: Integer;

Begin

  Result := False;

  ACBrNFeNotas.Configuracoes.WebServices.Visualizar := False;

  try
    ACBrNFeNotas.WebServices.StatusServico.Executar;
    self.vpRetorno := UTF8Encode(ACBrNFeNotas.WebServices.StatusServico.RetWS);

    vlDataHoraSefaz := Copy(self.vpRetorno, pos('<dhRecbto>', self.vpRetorno) + 10, 19);

    vlDia := Copy(vlDataHoraSefaz, 9, 2) + '/' + Copy(vlDataHoraSefaz, 6, 2) + '/' + Copy(vlDataHoraSefaz, 1, 4);
    vlDataHoraSefaz := vlDia + ' ' + Copy(vlDataHoraSefaz, 12, 10);

    vldifsegundos := SecondsBetween(now(), strtodatetime(vlDataHoraSefaz));

    if vldifsegundos < 0 then
      vldifsegundos := vldifsegundos * -1;

    if vldifsegundos > 300 then
    begin
      raise Exception.Create('Data e hora com diferença de mais de 5 minutos que data e hora do SEFAZ!');
    end;

  except
    vpStatSEFAZ := ACBrNFeNotas.WebServices.StatusServico.CStat;
    Result := False;
  end;
  (* Verifica se código de retorno é igual a 107 - Serviço em Operação *)
  if ACBrNFeNotas.WebServices.StatusServico.CStat = 107 then
  begin
    vpStatSEFAZ := ACBrNFeNotas.WebServices.StatusServico.CStat;
    Result := True;
  end;
End;

function Tfnfe.impcertificado: string;
var
  impnfe: timpnfe;

  ch: string;
  vu: string;
  vpack: Cardinal;
begin
  vpack := LoadPackage('modulos\minfe.bpl');
  if vpack <> 0 then
    try
      @impnfe := GetProcAddress(vpack, pchar('conscertificadonfe'));
      if Assigned(impnfe) then
      begin
        ch := impnfe(Application, self.zcone, '', '');
        Result := ch;
      end;
    finally
      // UnLoadPackage(vpack);
    end;
End;

function Tfnfe.DefineVertical: String;
var
  vlTipoVertical: string;
begin
  vpPathAplicativo := ExtractFilePath(Application.ExeName);

  if FileExists(vpPathAplicativo + 'GourmetERP.exe') then
    vlTipoVertical := 'Gourmet'
  else if FileExists(vpPathAplicativo + 'MercatoERP.exe') then
    vlTipoVertical := 'Mercato'
  else if FileExists(vpPathAplicativo + 'BoutiqueERP.exe') then
    vlTipoVertical := 'Boutique'
  else if FileExists(vpPathAplicativo + 'VarejoERP.exe') then
    vlTipoVertical := 'Varejo';

  Result := vlTipoVertical;

end;

function Tfnfe.LerConfiguracao: Boolean;
Var
  IniFile: String;
  Ini: TIniFile;
  ok: Boolean;
  StreamMemo: TMemoryStream;
  vlPrograma: string;
Begin
  Result := True;

  vlPrograma := DefineVertical;

  Ini := TIniFile.Create(ExtractFilePath(Application.ExeName) + vlPrograma + 'erp.ini');

  // Try

  if cfgcfgmodonfe.AsInteger = 2 then
    plmodonfe.Caption := 'Homologação'
  else
    plmodonfe.Caption := 'Produção';

  if cfgcfgversao.AsFloat = 4 then
    ACBrNFeNotas.Configuracoes.Geral.VersaoDF := ve400
  else
    ACBrNFeNotas.Configuracoes.Geral.VersaoDF := ve310;

  ACBrNFeDANFEFR := TACBrNFeDANFEFR.Create(self);

  if cfgcfgprevisualizarimpressaonfe.AsInteger = 1 then
  begin
    ACBrNFeDANFEFR.MostraPreview := True;
    ACBrNFeDANFEFR.MostraSetup := True;
  end;
  ACBrNFeNotas.DANFE := ACBrNFeDANFEFR;

  mes.Close;
  mes.Params[0].AsString := vpMesChave;
  mes.Params[1].AsInteger := Acesso.Filial;
  mes.Open;

  rfi.Close;
  rfi.ParamByName('meschave').AsInteger := mesmeschave.AsInteger;
  rfi.Open;

  if rfi.RecordCount > 0 then
  begin
    ACBrNFeDANFEFR.ExibeCampoFatura := True;
  end;

  ACBrNFeNotas.Configuracoes.WebServices.ResourceName := 'ACBrNFeServicos';
  ACBrNFeNotas.Configuracoes.Arquivos.PathSchemas := ExtractFilePath(Application.ExeName) + 'schemas';
  ACBrNFeNotas.Configuracoes.Arquivos.IniServicos := ExtractFilePath(Application.ExeName) + 'schemas\ACBrNFeServicos.ini';

  ACBrNFeNotas.Configuracoes.Geral.SSLLib := libWinCrypt;
  ACBrNFeNotas.Configuracoes.Geral.SSLCryptLib := cryWinCrypt;
  ACBrNFeNotas.Configuracoes.Geral.SSLHttpLib := httpWinHttp;
  ACBrNFeNotas.Configuracoes.Geral.SSLXmlSignLib := xsLibXml2;

  ACBrNFeNotas.Configuracoes.Certificados.NumeroSerie := self.cfgcfgnumecertif.AsString;
  ACBrNFeNotas.Configuracoes.Certificados.Senha := cfgcfgsenhacertificadoa1.AsString;

  ACBrNFeNotas.Configuracoes.Geral.FormaEmissao := teNormal;
  ACBrNFeNotas.Configuracoes.Geral.Salvar := True;

  ACBrNFeNotas.Configuracoes.WebServices.UF := UpperCase(self.cfgufssigla.AsString);

  if cfgcfgmodonfe.AsInteger = 2 then
    ACBrNFeNotas.Configuracoes.WebServices.Ambiente := taHomologacao;

  if cfgcfgmodonfe.AsInteger = 1 then
    ACBrNFeNotas.Configuracoes.WebServices.Ambiente := taProducao;

  ACBrNFeNotas.Configuracoes.WebServices.Visualizar := True;

  ACBrNFeNotas.Configuracoes.WebServices.ProxyHost := Ini.ReadString('Proxy', 'Host', '');
  ACBrNFeNotas.Configuracoes.WebServices.ProxyPort := Ini.ReadString('Proxy', 'Porta', '');
  ACBrNFeNotas.Configuracoes.WebServices.ProxyUser := Ini.ReadString('Proxy', 'User', '');
  ACBrNFeNotas.Configuracoes.WebServices.ProxyPass := Ini.ReadString('Proxy', 'Pass', '');

  If ACBrNFeNotas.DANFE <> Nil Then
  Begin
    ACBrNFeNotas.DANFE.TipoDANFE := StrToTpImp(ok, IntToStr(Ini.ReadInteger('Mizio', 'DANFE', 1)));

    If FileExists(ExtractFilePath(Application.ExeName) + 'logonfe.jpg') Then
    Begin
      ACBrNFeNotas.DANFE.Logo := ExtractFilePath(Application.ExeName) + 'logonfe.jpg';
      ACBrNFeDANFEFR.ExpandeLogoMarca := True;
    End;
  End;

  ACBrNFeDANFEFR.FastFile := vPastaPrincipal + 'Report\DanfeRetrato.fr3';
  ACBrNFeDANFEFR.Sistema := 'www.miziosistemas.com.br - Mizio Sistemas - (66) 3544-2765';
  ACBrNFeDANFEFR.FastFileEvento := vPastaPrincipal + 'Report\EVENTOS.fr3';
  plrelatorio.Caption := 'Arquivo: ' + ACBrNFeDANFEFR.FastFile;
  consulta.Close;
  consulta.SQL.Text := 'select clbidentificacao from clb where clbcodigo=' + Acesso.Usuario.ToString;
  consulta.Open;
  ACBrNFeDANFEFR.Usuario := consulta.FieldByName('clbidentificacao').AsString;

  ACBrNFeDANFEFR.PathPDF := vPastaPrincipal + 'pdfs\NFe';

  if not DirectoryExists(ACBrNFeDANFEFR.PathPDF) then
    ForceDirectories(ACBrNFeDANFEFR.PathPDF);

  StreamMemo := TMemoryStream.Create;
  Ini.ReadBinaryStream('Email', 'Mensagem', StreamMemo);
  ACBrNFeNotas.Configuracoes.Geral.SSLHttpLib := httpWinINet;

  ACBrNFeNotas.Configuracoes.WebServices.TimeZoneConf.ModoDeteccao := tzManual;
  ACBrNFeNotas.Configuracoes.WebServices.TimeZoneConf.TimeZoneStr := '-04:00';

  StreamMemo.Free;

  // Finally
  // Ini.Free;
  // End;

End;

procedure Tfnfe.AjustaCaminhoGeralNF(Data: TDate);
var
  vAnoMesNFe: string;
begin
  // verifca se os diretorios existem se nao ja cria os mesmos
  if not DirectoryExists(vPastaPrincipal + 'pdfs') then
    ForceDirectories(vPastaPrincipal + 'pdfs');

  if not DirectoryExists(vPastaPrincipal + vSubPastaDoc) then
    ForceDirectories(vPastaPrincipal + vSubPastaDoc);

  vAnoMesNFe := vPastaPrincipal + vSubPastaDoc + '\' + formatdatetime('yyyymm', Data);

  if not DirectoryExists(vAnoMesNFe) then
    ForceDirectories(vAnoMesNFe);
  ACBrNFeNotas.Configuracoes.Arquivos.PathSalvar := vAnoMesNFe + '\';


end;

procedure Tfnfe.ajustafuncao;
begin
  // oculta todas paginas para mostrar só a corrente
  self.emissao.TabVisible := False;
  self.consultasefaz.TabVisible := False;
  self.consultanfe.TabVisible := False;
  self.emailnfe.TabVisible := False;
  self.inutilizanumero.TabVisible := False;
  self.cancelanfe.TabVisible := False;
  self.gerarpdf.TabVisible := False;
  self.reimprimirnfe.TabVisible := False;
  self.ccorrecao.TabVisible := False;
  self.emailevento.TabVisible := False;
  self.reimprimirEvento.TabVisible := False;
  self.consultarEvento.TabVisible := False;

  // processa comando
  case vRotinaNFe of
    rnfGerarNFe:
      self.emissao.TabVisible := True;
    rnfImprimirNFe:
      self.reimprimirnfe.TabVisible := True;
    rnfGerarPDF:
      self.gerarpdf.TabVisible := True;
    rnfEmail:
      self.emailnfe.TabVisible := True;
    rnfCancelar:
      self.cancelanfe.TabVisible := True;
    rnfCartaCorrecao:
      self.ccorrecao.TabVisible := True;
    rnfEmailEvento:
      self.emailevento.TabVisible := True;
    rnfImprimirEvento:
      self.reimprimirEvento.TabVisible := True;
    rnfConsultaEvento:
      self.consultarEvento.TabVisible := True;
    rnfInutilizar, rnfInutilizarDireto:
      self.inutilizanumero.TabVisible := True;
    rnfStatusSefaz:
      self.consultasefaz.TabVisible := True;
    rnfStatusNFe:
      self.consultanfe.TabVisible := True;
  end;

end;

procedure Tfnfe.IO_OpenSSLStatusInfo(const AMsg: string);
begin
  sleep(700);
  Application.ProcessMessages;
end;

Procedure Tfnfe.bcancelaClick(Sender: TObject);
Begin
  Close;
End;

Procedure Tfnfe.bconfirmaClick(Sender: TObject);
Begin
  try
    processa;
  finally
    Close;
  end;
End;

Procedure Tfnfe.CarregaNFe(narq: String);
Begin
  ACBrNFeNotas.NotasFiscais.Clear;
  ACBrNFeNotas.NotasFiscais.LoadFromFile(narq);

End;

procedure Tfnfe.atualizatela;
begin
  // Application.ProcessMessages;
end;

function Tfnfe.VerificaPreExistencia(tipo: string): Boolean;
var
  vnrnfe, vnrser: Integer;
  xndoc1: String;
  xnnfe: String;
  xnarq: String;
  vAnoMesNFe: String;
  vData: Double;
  vRetorno: Boolean;
begin

  CheckBox2.Checked := True;
  atualizatela;

  vRetorno := False;

  if mes.FieldByName('mesnumero').AsInteger = 0 then
  begin
    NumeroNFe.Close;
    NumeroNFe.ParamByName('flacodigo').AsString := vpFilial;
    NumeroNFe.ExecSQL;
    vnrnfe := NumeroNFe.Fields[0].AsInteger;

    consulta.Close;
    consulta.SQL.Text := 'set @disable_triggers=1';
    consulta.ExecSQL;

    consulta.Close;
    consulta.SQL.Text := 'update mes set mesnumero=' + vnrnfe.ToString + ' where meschave=' + fnfe.vpMesChave;
    consulta.ExecSQL;

    consulta.Close;
    consulta.SQL.Text := 'set @disable_triggers=null';
    consulta.ExecSQL;

    fnfe.mes.Close;
    fnfe.mes.Params[0].AsString := fnfe.vpMesChave;
    fnfe.mes.Params[1].AsInteger := Acesso.Filial;
    fnfe.mes.Open;

  end;

  vnrnfe := mes.FieldByName('mesnumero').AsInteger;
  try
    vnrser := mes.FieldByName('messerie').AsInteger;
    // serie:=cfgcfgserienfe.AsInteger;
  except
    vnrser := 1;
  end;

  if vnrnfe = 0 then
    exit;
  if mesmesdatanfe.AsString <> '' then
  begin
    if mesmesdatanfe.AsFloat <> 0 then
      vData := mesmesdatanfe.AsFloat
    else
      vData := mesmesregistro.AsFloat;
  end
  else
    vData := mesmesregistro.AsFloat;

  vAnoMesNFe := vPastaPrincipal + fnfe.vSubPastaDoc + '\' + formatdatetime('yyyymm', vData);

  xndoc1 := SomenteNumeros(cfgetddoc1.AsString);

  xnnfe := Copy(cfgcddcodigo.AsString, 1, 2);
  xnnfe := xnnfe + formatdatetime('yymm', vData);
  xnnfe := xnnfe + xndoc1;
  xnnfe := xnnfe + tipo;
  xnnfe := xnnfe + formatfloat('000', vnrser);
  xnnfe := xnnfe + formatfloat('000000000', vnrnfe);
  xnnfe := xnnfe + '1';
  xnnfe := xnnfe + formatfloat('00000000', vnrnfe);
  xnnfe := xnnfe + Modulo11(trim(xnnfe));

  xnarq := xnnfe + '-nfe.xml';

  vpArquivoNFe := vAnoMesNFe + '\' + xnarq;

  if (FileExists(vAnoMesNFe + '\' + xnarq)) then
    if mConsultaNFe then
    begin
      (* Consulta não foi realizada corretamente e para não tentar gerar novamente a NF-e retorna como True *)
      if vpErroConsultaNFe then
        exit(True);

      mReimprimirNFe;
      mGerarPDF;

      vRetorno := True;
    end;

  Result := vRetorno;
end;

Function Tfnfe.EnviarEmail(destino, copias, texto, assunto, xml, pdf, nome_cliente, nome_empresa: String): Boolean;
Var
  vEnviado: Boolean;
  vlCNPJ: String;
  vlResponder: TIdEmailAddressList;
  Attachmentxml: TIdAttachmentFile;
  Attachmentpdf: TIdAttachmentFile;
  vlMensagemErro: String;
  vlXMLCloud: Boolean;
  vlPDFCloud: Boolean;

  vCStat: Integer;
  vlxmlnovo: string;
Begin

  vEnviado := False;
  Result := vEnviado;
  if trim(destino) = '' then
  begin
    Application.MessageBox(pchar('Email do destinatário não cadastrado.' + #13 + #13 + 'Cadastre o email do cliente e envie novamente.'), 'ATENÇÃO',
      MB_OK + MB_ICONWARNING);
    exit;

  end;

  if trim(cfgcfgemailnfe.AsString) = '' then
  begin
    Application.MessageBox(pchar('Email do emitente não cadastrado.' + #13 + #13 +
      'Entre em contato com suporte da Mizio Sistemas - (66) 3544-2765.'), 'ATENÇÃO', MB_OK + MB_ICONWARNING);
    exit;
  end;

  if (trim(destino) = '') then
  begin
    destino := cfgctdboxedominio.AsString;
  end
  else
  begin
    if cfgctdboxedominio.AsString <> '' then
    begin
      copias := copias + ' ' + cfgctdboxedominio.AsString;
      copias := trim(copias);
      copias := StringReplace(copias, ' ', ';', [rfReplaceAll, rfIgnoreCase]);
    end;
  end;

  if (trim(destino) = '') and (trim(copias) = '') then
  begin
    Application.MessageBox(pchar('Nenhum email cadastrado para envio.' + #13 + #13 + 'Verifique no cadastro da entidade!!'), 'ATENÇÃO',
      MB_OK + MB_ICONWARNING);
    exit;
  end;

  if lowercase(cfgcfgemailnfe.AsString) = 'nfe@miziosistemas.com.br' then
  begin
    // vlXMLCloud := SalvarArquivoCloud('NFe', xml);
    // vlPDFCloud := SalvarArquivoCloud('PDF', pdf);

    vlXMLCloud := True;
    vlPDFCloud := True;

    if (trim(destino) = '') then
    begin
      destino := cfgctdboxedominio.AsString;
    end
    else
    begin
      if cfgctdboxedominio.AsString <> '' then
      begin
        copias := copias + ' ' + cfgctdboxedominio.AsString;
        copias := trim(copias);
        copias := StringReplace(copias, ' ', ';', [rfReplaceAll, rfIgnoreCase]);
      end;
    end;

    if vlXMLCloud and vlPDFCloud then
    begin

      vlCNPJ := SomenteNumeros(cfgetddoc1.AsString);



        If not FileExists(vpArquivoNFe) Then
        Begin

        if (cfgcfgservarqnfes.AsString <> '127.0.0.1') and (pos('c:\',cfgcfgservarqnfes.AsString)=0)  then
        begin
        xml := BaixaXMLServidor(IPServidorArquivos, xml);
        end;

        End;


        CarregaNFe(vlxmlnovo);

        vCStat := ACBrNFeNotas.NotasFiscais.Items[0].NFe.procNFe.CStat;

        ACBrNFeNotas.NotasFiscais.ImprimirPDF;


      // try
  //    vEnviado := PublicarEmail(vlCNPJ, destino, copias, texto + #13 + #13 + cfgcfgtextoemail.AsString, assunto, xml, pdf, nome_cliente,        nome_empresa);
      Result := vEnviado;

      // except
      // sleep(2000);
      // vEnviado := PublicarEmail(vlCNPJ, destino, copias, texto, assunto, xml, pdf, nome_cliente, nome_empresa);
      // Result := vEnviado;
      // end;

    end
    else
    begin
      vlMensagemErro := 'Não foi possível enviar o email.' + #13 + #13 + 'Mensagem: ' + #13 + 'Falha de comunicação, por favor envie novamente!';
      Application.MessageBox(pchar(vlMensagemErro), 'Erro Envio de Email', MB_OK + MB_ICONERROR);

    end;
  end
  else
  begin

    Inicializar;

    emailnfe.TabVisible := True;
    paginas.ActivePage := emailnfe;

    mostraemail.Visible := True;
    atualizatela;

    AtualizaMensagemEmail(1, 'Cerregando configuração.');

    Try
      AtualizaMensagemEmail(2, 'Criando mensagem.');

      IdMessage1.Clear;
      IdMessage1.Body.Clear;
      IdMessage1.Body.Text := texto + #13 + #13 + cfgcfgtextoemail.AsString; // Corpo da mensagem.
      IdMessage1.Subject := assunto; // Assunto
      IdMessage1.From.Text := lowercase(cfgcfgemailnfe.AsString); // Email de envio da mensagem
      IdMessage1.From.Name := nome_empresa; // Nome para apresentação

      IdMessage1.CCList.EMailAddresses := copias; // Com cópia
      IdMessage1.BccList.EMailAddresses := copias;

      IdMessage1.Recipients.EMailAddresses := destino; // email destino

      IdMessage1.ReceiptRecipient.Text := IdMessage1.From.Text;

      vlResponder := TIdEmailAddressList.Create(self);
      vlResponder.EMailAddresses := cfgeteemail.AsString;
      IdMessage1.InReplyTo := cfgeteemail.AsString;
      IdMessage1.ReplyTo := vlResponder;

      AtualizaMensagemEmail(3, 'Anexando XML');

      if FileExists(xml) then
        Attachmentxml := TIdAttachmentFile.Create(IdMessage1.MessageParts, xml);

      AtualizaMensagemEmail(4, 'Anexando PDF');

      mostraemail.Repaint;

      if FileExists(pdf) then
        Attachmentpdf := TIdAttachmentFile.Create(IdMessage1.MessageParts, pdf);

      AtualizaMensagemEmail(5, 'Conectando...');

      // Conectando e enviando
      Try
        SMTP.Connect; // Inicia conexão

        AtualizaMensagemEmail(6, '');

        If SMTP.Connected Then
        Begin
          AtualizaMensagemEmail(7, '');

          SMTP.Send(IdMessage1); // Se conectado envia email

          AtualizaMensagemEmail(8, '');

          vEnviado := True;
          SMTP.Disconnect; // Desconecta

          AtualizaMensagemEmail(9, '');

          Attachmentxml.Free;
          Attachmentpdf.Free;
        End;
      Except
        On E: Exception Do // Definição da variável e do tipo Exception
        Begin
          vEnviado := False;

          vlMensagemErro := 'Não foi possível enviar o email.' + #13 + #13 + 'Mensagem: ' + #13 + E.Message;
          Application.MessageBox(pchar(vlMensagemErro), 'Erro Envio de Email', MB_OK + MB_ICONERROR);

          SalvarLogErro(E.Message, E.StackTrace);

          SMTP.Disconnect;
          sleep(1000);

          If SMTP.Connected Then
            SMTP.Disconnect;
        End;
      End;
    Finally
      AtualizaMensagemEmail(10, '');
    End;
  end;
  Result := vEnviado;
End;

Procedure Tfnfe.AtualizaMensagemEmail(Posicao: Integer; Mensagem: String);
begin
  mostraemail.Position := Posicao;
  LlMsgEmail.Caption := Mensagem;
  atualizatela;
  sleep(10);
end;

procedure Tfnfe.mEmailEvento;
begin
  EnviarEmailEvento;
end;

Procedure Tfnfe.EnviarEmailEvento;
var
  vEmail, vEmailCC: string;
  vAssunto: string;
  vTexto: string;
  vSeqEvento: Integer;
  vlNomeArquivo: String;
begin
  try

    vpArquivoNFe := GeraNomeNFe(vpMesChave);


    if FileExists(vpArquivoNFe) then
    begin

      if not DirectoryExists(ExtractFilePath(vlNomeArquivo)) then
        ForceDirectories(ExtractFilePath(vlNomeArquivo));

      copyfile(pchar(vpArquivoNFe), pchar(vlNomeArquivo), False);

    end;

    If not FileExists(vpArquivoNFe) Then
    Begin
      if (cfgcfgservarqnfes.AsString <> '127.0.0.1')  and (pos('c:\',cfgcfgservarqnfes.AsString)=0) then
      begin
        vpArquivoNFe := BaixaXMLServidor(IPServidorArquivos, vpArquivoNFe);
      end;

    End;

    if vpArquivoXMLEvento = '' then
    begin

      GeraNomeArqsEvento;
    end;


   If not FileExists(vpArquivoXMLEvento) Then
    Begin
      if (cfgcfgservarqnfes.AsString <> '127.0.0.1') and (pos('c:\',cfgcfgservarqnfes.AsString)=0) then
      begin
        vpArquivoXMLEvento := BaixaXMLServidor(IPServidorArquivos, vpArquivoXMLEvento);
      end;

    End;

    If FileExists(vpArquivoXMLEvento) Then
    Begin
      ImprimeEventoNfe;
    End;

    if qEnfMev.Active then
      qEnfMev.Refresh
    else
    begin
      qEnfMev.ParamByName('meschave').AsString := vpMesChave;
      qEnfMev.Open;
      qEnfMev.Last;
    end;

    case qEnfMevtencodigo.AsInteger of
      tenCCe:
        begin
          vAssunto := 'Carta de Correção - CC-e da Empresa: ' + cfgetdapelido.AsString;
          vTexto := 'Esta Carta de Correção - CC-e foi emitida tendo sua empresa como destino.';
        end;
      tenCancelamento:
        begin
          vAssunto := 'Cancelamento de NFe da Empresa: ' + cfgetdapelido.AsString;
          vTexto := 'Este cancelamento de NF-e foi emitido tendo sua empresa como destino.';
        end;
    end;

    if not FilesExists(vpArquivoXMLEvento) then
    begin
      Application.MessageBox(pchar('O Email não pode ser enviado.' + #13 + ' 10589 O arquivo XML do evento não foi localizado.' + #13 + 'Arquivo: ' +
        vpArquivoXMLEvento), 'ATENÇÃO', MB_OK + MB_ICONERROR);
      exit;
    end;

    if not FilesExists(vpArquivoPDFEvento) then
    begin
      Application.MessageBox(pchar('O Email não pode ser enviado.' + #13 + '10596 O arquivo PDF do evento não foi localizado.' + #13 + 'Arquivo: ' +
        vpArquivoPDFEvento + #13 + #13 + 'Utilize a opção "Imprimir Evento" e tente enviar o email novamente.'), 'ATENÇÃO', MB_OK + MB_ICONERROR);
      exit;
    end;

    qEteMes.Close;
    qEteMes.Params[0].AsString := vpMesChave;
    qEteMes.Params[1].AsInteger := Acesso.Filial;
    qEteMes.Open;

    vEmail := '';
    vEmailCC := '';

    qEteMes.First;
    while not qEteMes.Eof do
    begin
      if pos('@', qEteMeseteemail.AsString) > 0 then
        if vEmail = '' then
          vEmail := qEteMeseteemail.AsString
        else if pos(qEteMeseteemail.AsString, vEmailCC) = 0 then
          vEmailCC := vEmailCC + qEteMeseteemail.AsString + ' ';

      qEteMes.Next;
    end;

    vEmailCC := Copy(vEmailCC, 1, Length(vEmailCC) - 1);

    If EnviarEmail(vEmail, vEmailCC, vTexto, vAssunto, vpArquivoXMLEvento, vpArquivoPDFEvento, qEteMesetdidentificacao.AsString,
      cfgetdapelido.AsString) Then
    begin

      Application.MessageBox(pchar('Email enviado com sucesso para: ' + qEteMesetdidentificacao.AsString + #13 + #13 + 'Email: ' + vEmail + #13 +
        'Cópias: ' + vEmailCC), 'ENVIO CONCLUÍDO', MB_OK + MB_ICONINFORMATION);
    end
    else
    begin
      showmessage('ATEÇÃO, falha no envio do email, verifique sua conexão de internet e tente mais tarde!');
    end;
  except

    on E: Exception do
    begin
      // Application.MessageBox(PChar('Erro ao enviar email.' + #13 + #13 + 'Mensage: ' + #13 + E.Message), 'ATENÇÃO', MB_OK + MB_ICONERROR);
      SalvarLogErro(E.Message, E.StackTrace);
    end;
  end;
end;

procedure Tfnfe.ReimprirEvento;
begin

  ImprimeEventoNfe;

end;

procedure Tfnfe.SMTPConnected(Sender: TObject);
begin
  LlMsgEmail.Caption := 'Conectado';
  atualizatela;
end;

procedure Tfnfe.SMTPDisconnected(Sender: TObject);
begin
  LlMsgEmail.Caption := 'Desconectado';
  atualizatela;
end;

procedure Tfnfe.SMTPWorkBegin(ASender: TObject; AWorkMode: TWorkMode; AWorkCountMax: Int64);
begin
  LlMsgEmail.Caption := 'Inicio do Envio';
  atualizatela;
end;

procedure Tfnfe.SMTPWorkEnd(ASender: TObject; AWorkMode: TWorkMode);
begin
  LlMsgEmail.Caption := 'Final do Envio';
  atualizatela;
end;

procedure Tfnfe.GeraNomeArqsEvento;
var
  vPathXML: String;
  vPathPDF: String;
  vTipoEvento: String;
begin

  if qEnfMev.Active then
    qEnfMev.Refresh
  else
  begin
    qEnfMev.ParamByName('meschave').AsString := vpMesChave;
    qEnfMev.Open;
    qEnfMev.Last;

  end;

  vPathXML := vPastaPrincipal + fnfe.vSubPastaDoc + '\' + formatdatetime('yyyymm', qEnfMevmesregistro.AsFloat) + '\';
  vpArquivoXMLEvento := vPathXML + qEnfMevenfchaveevento.AsString + '-ProcEventoNFe.xml';

  // vpArquivoNFe := GeraNomeNFe(vpMesChave);

  vTipoEvento := IfThen(qEnfMevtencodigo.AsInteger = tenCCe, 'CCe', 'Cancelamento');
  vPathPDF := vPastaPrincipal + '\pdfs\' + vTipoEvento + '\';

  if not DirectoryExists(vPathPDF) then
    ForceDirectories(vPathPDF);

  vpArquivoPDFEvento := vPathPDF + qEnfMevenfchaveevento.AsString + '-ProcEventoNFe.pdf';

end;

procedure Tfnfe.ACBrNFeNotasStatusChange(Sender: TObject);
begin
  plstatus.Caption := 'Processando...';
  Application.ProcessMessages;
end;

Procedure Tfnfe.AjustaObservacoes;
var
  vlTofcodigo: String;
Begin

  tom.Close;
  tom.Params[0].AsString := vpMesChave;
  tom.Open;

  If cfgcfgobs1.AsInteger > 0 Then
    If Not tom.Locate('tofcodigo', cfgcfgobs1.AsInteger, []) Then
    Begin
      qconsulta.Close;
      qconsulta.SQL.Text := 'INSERT INTO tom (meschave, tofcodigo) VALUES (' + vpMesChave + ',' + cfgcfgobs1.AsString + ')';
      qconsulta.ExecSQL;
    End;

  If cfgcfgobs2.AsInteger > 0 Then
    If Not tom.Locate('tofcodigo', cfgcfgobs2.AsInteger, []) Then
    Begin
      qconsulta.Close;
      qconsulta.SQL.Text := 'INSERT INTO tom (meschave, tofcodigo) VALUES (' + vpMesChave + ',' + cfgcfgobs2.AsString + ')';
      qconsulta.ExecSQL;
    End;

  If cfgcfgobs3.AsInteger > 0 Then
    If Not tom.Locate('tofcodigo', cfgcfgobs3.AsInteger, []) Then
    Begin
      qconsulta.Close;
      qconsulta.SQL.Text := 'INSERT INTO tom (meschave, tofcodigo) VALUES (' + vpMesChave + ',' + cfgcfgobs3.AsString + ')';
      qconsulta.ExecSQL;
    End;

  If cfgcfgobs4.AsInteger > 0 Then
    If Not tom.Locate('tofcodigo', cfgcfgobs4.AsInteger, []) Then
    Begin
      qconsulta.Close;
      qconsulta.SQL.Text := 'INSERT INTO tom (meschave, tofcodigo) VALUES (' + vpMesChave + ',' + cfgcfgobs4.AsString + ')';
      qconsulta.ExecSQL;
    End;

  if toetoedescricao.AsString <> '' then
  begin
    qconsulta.Close;
    qconsulta.SQL.Text := 'select tofcodigo from tof where lower(tofidentificacao)=' + QuotedStr(lowercase(toetoedescricao.AsString));
    qconsulta.Open;

    {
      if not qconsulta.IsEmpty then
      begin
      vlTofCodigo := qconsulta.FieldByName('tofcodigo').AsString;
      qconsulta.Close;
      qconsulta.SQL.Text := 'INSERT INTO tom (meschave, tofcodigo) VALUES (' + vpMesChave + ',' + vlTofCodigo + ')';
      qconsulta.ExecSQL;

      end
      else
      begin
      qconsulta.Close;
      qconsulta.SQL.Text := 'INSERT INTO tof (tofcodigo,tofidentificacao, ticcodigo) VALUES (@codigo,' + QuotedStr(UpperCase(toetoedescricao.AsString)) + ',' + '1' + ')';
      qconsulta.ExecSQL;

      qconsulta.Close;
      qconsulta.SQL.Text := 'select tofcodigo from tof where lower(tofidentificacao)=' + QuotedStr(LowerCase(toetoedescricao.AsString));
      qconsulta.Open;

      if not qconsulta.IsEmpty then
      begin
      vlTofCodigo := qconsulta.FieldByName('tofcodigo').AsString;
      qconsulta.Close;
      qconsulta.SQL.Text := 'INSERT INTO tom (meschave, tofcodigo) VALUES (' + vpMesChave + ',' + vlTofCodigo + ')';
      qconsulta.ExecSQL;

      end;
      end; }
  end;
  tom.Refresh;

End;


procedure Tfnfe.SalvarLogErro(eMessage, eStackTrace: String);
var
  vlMensagem: String;
  vlArquivo: String;
begin
  vlMensagem := 'Mensagem: ' + eMessage + sLineBreak + sLineBreak + eStackTrace;

  vlArquivo := ExtractFilePath(Application.ExeName) + 'Logs\NFe\' + formatdatetime('yyyymmddhhnnsszzz', now()) + '.txt';

  SalvarTextoEmArquivo(vlMensagem, vlArquivo);
end;

function Tfnfe.PermiteQuantidadeFiscal(Produto, CodUnidVenda: Integer; Quantidade: Double): Boolean;
var
  vSaldo: Double;
  VMensagem: String;
  vControlaEstoque: Boolean;
begin
  with qProSaldo do
  begin
    Close;
    Params[0].AsInteger := Produto;
    Params[1].AsInteger := CodUnidVenda;
    Open;

    vSaldo := FieldByName('prosaldo').AsFloat;
    vControlaEstoque := FieldByName('proestoque').AsString = '1';
  end;

  vControlaEstoque := cfgcfgcontrolaestoque.AsInteger = 1;

  if (Quantidade <= vSaldo) or (not vControlaEstoque) then
    Result := True
  else
  begin
    if (Quantidade > vSaldo) then
    begin
      Result := False;
    end;
  end;

  consulta.Close;
  consulta.SQL.Text := 'select count(itmchave) pendentes from itm,mes where mes.temcodigo=4 and itm.meschave=mes.meschave and itm.procodigo=' +
    Produto.ToString;
  consulta.Open;

  if consulta.FieldByName('pendentes').AsFloat > 0 then
  begin
    Result := True
  end;

end;

procedure Tfnfe.Inicializar;
begin
  self.Width := 500;
  self.Height := 250;

  cfg.Close;
  cfg.ParamByName('flacodigo').AsString := vpFilial;
  cfg.Open;

  // Define configurações do servidor para envio de email.
  with SMTP do
  begin
    IOHandler := IO_OpenSSL;
    Host := lowercase(cfgcfgemailservidornfe.AsString); // 'smtp.live.com'; // 'smtp.gmail.com';
    Username := lowercase(cfgcfgemailnfe.AsString); // 'email@hotmail.com'; // 'email@gmail.com';
    Password := trim(cfgcfgemailsenhanfe.AsString); // 'senha';
    Port := cfgcfgmailportnfe.AsInteger; // 587; // 465;
    case cfgcfgemailusatls.AsInteger of
      0:
        UseTLS := UtNoTLSSupport;
      1:
        UseTLS := UtUseExplicitTLS;
      2:
        UseTLS := UtUseImplicitTLS;
      3:
        UseTLS := UtUseRequireTLS;
    end;
    AuthType := SatDefault;
    ConnectTimeout := 30000;
    ReadTimeout := 30000;
  end;

  with IO_OpenSSL do
  begin
    SSLOptions.Method := sslvSSLv23;
    SSLOptions.Mode := sslmClient;
  end;

  // fnfe.LerConfiguracao;
end;

procedure Tfnfe.AtivaMizioArquivos;
var
  vlHamdle: thandle;
  vlarq: string;
begin
  {
    vlHamdle := FindWindow('TFMizioArquivos', pchar('MizioArquivos:' + SoNumeros(cfgetddoc1.AsString)));

    if vlHamdle = 0 then
    begin

    vlarq := ExtractFilePath(Application.ExeName) + 'MizioArquivos.exe';
    if FileExists(vlarq) then
    begin
    ShellExecute(Handle, 'open', pchar(vlarq), '', '', SW_SHOWMINIMIZED);
    end;

    end;
  }
end;

End.
