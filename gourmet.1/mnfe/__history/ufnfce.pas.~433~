unit ufnfce;

interface

uses
  Winapi.Windows, pcnConversao, System.SysUtils, Vcl.Forms, ACBrNFeDANFEFRDM,
  ACBrNFeDANFEClass, ACBrNFeDANFEFR, ACBrValidador, Uni, Winapi.ShellAPI,
  ACBrBase, ACBrDFe, ACBrNFe, Vcl.ComCtrls, System.Classes, Vcl.Controls,
  Vcl.ExtCtrls, Vcl.Dialogs, System.StrUtils, System.Math, uFuncoes,
  pcnConversaoNFe, uPegaBase, MemDS, DBAccess, Data.DB, DateUtils, Vcl.StdCtrls,
  ACBrMail, IdComponent, IdMessage, IdIOHandler, IdIOHandlerSocket,
  IdIOHandlerStack, IdSSL, IdSSLOpenSSL, IdBaseComponent, IdTCPConnection,
  IdTCPClient, IdExplicitTLSClientServerBase, IdMessageClient, IdSMTPBase,
  IdSMTP, IdAttachment, IdAttachmentFile, ACBrDFeReport, ACBrDFeDANFeReport,
  ACBrDANFCeFortesFr, ACBrDFeUtil, midaslib, ACBrDFeSSL, blcksock, IdEMailAddress,
  System.JSON,ACBrDFe.Conversao;

type
  Tfnfce = class(TForm)
    ACBrValidador: TACBrValidador;

    consulta: TUniQuery;
    rec: TUniQuery;
    mes: TUniQuery;
    itm: TUniQuery;
    etd: TUniQuery;
    toe: TUniQuery;
    enf: TUniQuery;
    mev: TUniQuery;
    cfg: TUniQuery;
    trm: TUniQuery;
    mic: TUniQuery;
    oic: TUniQuery;
    qDtl: TUniQuery;
    rni: TUniQuery;
    NumeroNFCe: TUniQuery;
    disponivel: TUniQuery;
    limite: TUniQuery;
    yoe: TUniQuery;
    itmncm: TUniQuery;

    recreccodigo: TIntegerField;
    recrecmotivo: TStringField;
    recrecdthoraentrada: TDateTimeField;
    recrecdthorasaida: TDateTimeField;

    mesmeschave: TIntegerField;
    mestoecodigo: TIntegerField;
    mesetdcodigo: TIntegerField;
    mesmestotal: TFloatField;
    mesrefcodigo: TIntegerField;
    mestfpcodigo: TIntegerField;
    mestdfcodigo: TStringField;
    mesmesnumero: TIntegerField;
    mesmesserie: TStringField;
    mesedritem: TIntegerField;
    mesmesdatanfe: TDateField;
    mesmescoocupom: TIntegerField;
    mesmesdatacupom: TDateField;
    mesmesprotocolo: TStringField;
    mesmeschavenfe: TStringField;
    mesmesregistro: TDateField;
    mestemcodigo: TIntegerField;

    itmcfocfop: TStringField;
    itmprocodigo: TIntegerField;
    itmpronome: TStringField;
    itmpronomereduzido: TStringField;
    itmproncm: TStringField;
    itmitmdesccomple: TStringField;
    itmitmquantidade: TFloatField;
    itmunisimbolo: TStringField;
    itmitmvalor: TFloatField;
    itmitmdesconto: TFloatField;
    itmitmchave: TIntegerField;
    itmcstcodigo: TStringField;
    itmicmcodigo: TStringField;
    itmitmicm: TFloatField;
    itmitmbicm: TFloatField;
    itmitmaliqipi: TFloatField;
    itmitmbipi: TFloatField;
    itmitmipi: TFloatField;
    itmitmvlribpt: TFloatField;
    itmpunqtdtribtotal: TFloatField;
    itmunisimbolotrib: TStringField;
    itmitmtotal: TFloatField;
    itmitmcargatrib: TFloatField;

    etdetddoc1: TStringField;
    etdedrcep: TStringField;
    etdedrrua: TStringField;
    etdedrnumero: TStringField;
    etdedrbairro: TStringField;
    etdcddcodigo: TStringField;
    etdcddnome: TStringField;
    etdufssigla: TStringField;
    etdetftelefone: TStringField;
    etdtpecodigo: TIntegerField;
    etdetdidentificacao: TStringField;
    etdedrinscest: TStringField;

    toettecodigo: TIntegerField;
    toetoeidentificacao: TStringField;
    toetoecodigo: TIntegerField;

    enfenfchave: TIntegerField;
    enftencodigo: TIntegerField;
    enfenfregistroevento: TDateField;
    enfenfchaveevento: TStringField;
    enfenfseqevento: TIntegerField;
    enfenfdescricao: TStringField;
    enfenfxml: TBlobField;
    enfenfcstat: TIntegerField;
    enfenfxmotivo: TStringField;

    mevmevchave: TIntegerField;
    mevenfchave: TIntegerField;
    mevmeschave: TIntegerField;

    cfgcfgcodigo: TIntegerField;
    cfgcfgnumecertif: TStringField;
    cfgcfgetdempresa: TIntegerField;
    cfgcfgviasnfe: TIntegerField;
    cfgcfgserienfe: TStringField;
    cfgcfgserienfce: TStringField;
    cfgcfgdescrinfe: TIntegerField;
    cfgcfgemailnfe: TStringField;
    cfgcfgemailservidornfe: TStringField;
    cfgcfgemailsenhanfe: TStringField;
    cfgcfgmailportnfe: TStringField;
    cfgcfgemailusatls: TIntegerField;
    cfgcrtcodigo: TIntegerField;
    cfgetdapelido: TStringField;
    cfgetdidentificacao: TStringField;
    cfgetddoc1: TStringField;
    cfgufscodigo: TStringField;
    cfgcddcodigo: TStringField;
    cfgedrinscest: TStringField;
    cfgedrrua: TStringField;
    cfgedrnumero: TStringField;
    cfgedrbairro: TStringField;
    cfgedrcep: TStringField;
    cfgcddnome: TStringField;
    cfgufssigla: TStringField;
    cfgetftelefone: TStringField;
    cfgcfgusanfc: TIntegerField;
    cfgcfgtoken1nfce: TStringField;
    cfgcfgnumecertifa1: TStringField;
    cfgcfgmodonfe: TIntegerField;
    cfgcfgidtokennfce: TStringField;
    cfgcfgviaassinar: TIntegerField;
    cfgcfgsenhacertificadoa1: TStringField;

    trmtciporta: TStringField;
    trmecfcodigo: TIntegerField;
    trmtrmcodigo: TIntegerField;
    trmtipcodigo: TIntegerField;

    micmicchave: TIntegerField;
    micmeschave: TIntegerField;
    micidccodigo: TIntegerField;
    micidcnome: TStringField;
    micidcdoc: TStringField;

    oicoicchave: TIntegerField;
    oicorcchave: TIntegerField;
    oicidccodigo: TIntegerField;
    oicidcnome: TStringField;
    oicidcdoc: TStringField;

    PlTitulo: TPanel;
    plStatusSefaz: TPanel;
    Panel1: TPanel;

    rnirnichave: TIntegerField;
    rnirniano: TStringField;
    rnirnimes: TStringField;
    rnitdfcodigo: TStringField;
    rnirninumeroinicial: TIntegerField;
    rnirninumerofinal: TIntegerField;
    rnirnijutificativa: TStringField;

    mesclbidentificacao: TStringField;
    itmitmcargatribest: TFloatField;
    mesmesprodutos: TFloatField;
    cfgcfgmensagempdv: TStringField;
    plestagio: TPanel;
    mesmesobs: TStringField;
    info: TMemo;
    etdetdnfemodelos: TStringField;
    itmcspcodigo: TStringField;
    itmcsfcodigo: TStringField;

    disponivelrfisaldocapital: TFloatField;

    limiteetdcodigo: TIntegerField;
    limiteetllimitetotal: TFloatField;
    yoeansanexo: TStringField;
    cfgcfgtoesubstforaestado: TIntegerField;
    cfgcfgtoesubstnoestado: TIntegerField;

    itmncmtoecodigo: TIntegerField;
    cfgcfgprevisualizarimpressao: TIntegerField;
    cfgcfgversao: TStringField;
    ACBrValidadorBarra: TACBrValidador;
    itmpunbarra: TStringField;
    itmpunbarrasistema: TIntegerField;
    mesmesemissao: TDateField;
    toeitm: TUniQuery;
    toeitmtoecodigo: TIntegerField;
    toeitmcstcodigo: TStringField;
    toeitmcsicodigo: TStringField;
    toeitmcspcodigo: TStringField;
    toeitmcfgpercentualpis: TFloatField;
    toeitmcsfcodigo: TStringField;
    toeitmcfgpercentualcofins: TFloatField;
    itmcsicodigo: TStringField;
    itmtoecodigo: TIntegerField;
    cfgcfgusacstnoproduto: TIntegerField;
    itmcst: TUniQuery;
    itmcstitmchave: TIntegerField;
    itmcstcstcodigo: TStringField;
    itmcstcsicodigo: TStringField;
    itmcstcspcodigo: TStringField;
    itmcstcsfcodigo: TStringField;
    itmcstitmaliqpis: TFloatField;
    itmcstitmaliqcofins: TFloatField;
    itmcstitmaliqipi: TFloatField;
    ncm: TUniQuery;
    toettocodigo: TIntegerField;
    mostra: TProgressBar;
    cfgcfgtoesubstanpnoestado: TIntegerField;
    cfgcfgtoesubstanpforaestado: TIntegerField;
    ACBrNFeDANFCEFR1: TACBrNFeDANFCEFR;
    cfgcfgtoemesinte: TIntegerField;
    mesmeshoranfe: TTimeField;
    cfgcfgdefinetoeatendimento: TIntegerField;
    cfgcfgcestativo: TIntegerField;
    itmtcecest: TStringField;
    itmtpocodigo: TIntegerField;
    qTomTof: TUniQuery;
    tom: TUniQuery;
    tomtomchave: TIntegerField;
    tomtofcodigo: TIntegerField;
    tommeschave: TIntegerField;
    tomtomobs: TStringField;
    cfgcfgobs1: TIntegerField;
    cfgcfgproducaopropria: TIntegerField;
    itmproproducao: TIntegerField;
    cfgcfgtoeinteproducaopropria: TIntegerField;
    cfgcfgtoeforaproducaopropria: TIntegerField;
    itmitmpercreducaobaseicm: TFloatField;
    itmitmaliqpis: TFloatField;
    itmitmpis: TFloatField;
    itmitmbpis: TFloatField;
    itmitmaliqcofins: TFloatField;
    itmitmcofins: TFloatField;
    itmitmbcofins: TFloatField;
    itmitmfrete: TFloatField;
    itmitmoutras: TFloatField;
    pad: TUniQuery;
    padpadcodigo: TIntegerField;
    padpadncm: TStringField;
    padpadpis: TFloatField;
    padpadcofins: TFloatField;
    padpadextipi: TStringField;
    padpadcodigopiscofins: TStringField;
    cfgcfgtoeintesubsprodpropria: TIntegerField;
    cfgcfgtoeforasubsprodpropria: TIntegerField;
    itmpunidentificacao: TStringField;
    qconsulta: TUniQuery;
    mesmescodigonota: TIntegerField;
    mesmesrefeicao: TIntegerField;
    mesmesoutras: TCurrencyField;
    itmicmaliquota: TStringField;
    cfgcfgtributacaoimendes: TIntegerField;
    itmitmbicms: TFloatField;
    itmitmmva: TFloatField;
    itmitmicms: TFloatField;
    itmitmaliqicms: TStringField;
    mesmespis: TCurrencyField;
    mesmescofins: TCurrencyField;
    itmpuncodigo: TIntegerField;
    ctd: TUniQuery;
    ctdctdcnpj: TStringField;
    cfgcfgcertificadoa1: TBlobField;
    cfgeteemail: TStringField;
    rnimeschave: TIntegerField;
    rnimeschavenfe: TStringField;
    cfgctdboxedominio: TStringField;
    mesmesfrete: TFloatField;
    cfgcfgusapdv: TIntegerField;
    mesttocodigo: TIntegerField;
    itmitmaliqicm: TStringField;
    qEnfMev: TUniQuery;
    qEnfMevenfseqevento: TIntegerField;
    qEnfMevenfdescricao: TStringField;
    qEnfMevtencodigo: TIntegerField;
    qEnfMevenfchaveevento: TStringField;
    qEnfMevenfregistroevento: TDateField;
    qEnfMevmesregistro: TDateField;
    IdMessage1: TIdMessage;
    IO_OpenSSL: TIdSSLIOHandlerSocketOpenSSL;
    SMTP: TIdSMTP;
    mesmesinclusao: TDateTimeField;
    recrecmanual: TIntegerField;
    consultacomprovante: TUniQuery;
    tagPagamento: TUniQuery;
    rdc: TUniQuery;
    dtl: TUniQuery;
    ctapix: TUniQuery;
    cfgcfgctacodigopix: TIntegerField;
    ori: TUniQuery;
    orietdcodigo: TIntegerField;
    orietddoc1: TStringField;
    mesoricodigo: TIntegerField;
    mesmesretirabalcao: TIntegerField;
    orietdapelido: TStringField;
    etddoc: TUniQuery;
    etddocetddoc1: TStringField;
    etddocetdcodigo: TIntegerField;
    itmitmacrescimoav: TCurrencyField;
    mesmesdesconto: TCurrencyField;
    dtltef: TUniQuery;
    dtltefdtlchave: TIntegerField;
    dtltefltechave: TIntegerField;
    dtltefmdaidentificacao: TStringField;
    dtltefdtlvalor: TFloatField;
    dtltefmdacodigo: TIntegerField;
    rdctef: TUniQuery;
    rct: TUniQuery;
    dtltefparcial: TUniQuery;
    dtltefparcialdtlchave: TIntegerField;
    dtltefparcialltechave: TIntegerField;
    dtltefparcialmdaidentificacao: TStringField;
    dtltefparcialdtlvalor: TFloatField;
    dtltefparcialmdacodigo: TIntegerField;
    trmtrmterminalcomprovante1via: TStringField;
    trmtrmterminalcomprovante2via: TStringField;
    rcddtl: TUniQuery;
    rcddtlrdcchave: TIntegerField;
    rcddtlrdcvalor: TFloatField;
    rcddtlrdcnrauto: TStringField;
    rcddtlrdcvalorope: TFloatField;
    rcddtlrdcsituacao: TIntegerField;
    rcddtlrdcdata: TDateField;
    rcddtladccodigo: TIntegerField;
    rcddtlrdcparcelas: TIntegerField;
    rcddtltescodigo: TIntegerField;
    rcddtlrdcobs: TStringField;
    rcddtlbdccodigo: TIntegerField;
    rcddtlrdccomprovante1via: TStringField;
    rcddtlrdccomprovante2via: TStringField;
    rcddtlrdcconciliado: TIntegerField;
    rcddtlcedcodigo: TIntegerField;
    rcddtlrdchora: TTimeField;
    rcddtlrdctaxa: TFloatField;
    rcddtlrdcvalordesconto: TFloatField;
    rcddtldtlchave: TIntegerField;
    adc: TUniQuery;
    ltr: TUniQuery;
    ltrltrchave: TIntegerField;
    ltrrdcchave: TIntegerField;
    ltrdtlchave: TIntegerField;
    ltrrdcnrauto: TStringField;
    ACBrNFeNFCe: TACBrNFe;
    nrt: TUniQuery;
    nrtnrtcodigo: TStringField;
    nrtcrtcodigo: TIntegerField;
    nrtnrtidentificacao: TStringField;
    nrtnrtcfop_interno: TStringField;
    nrtnrticm_interno: TFloatField;
    nrtnrtcfop_externo: TStringField;
    nrtnrticm_externo: TFloatField;
    nrtnrtcombate_pobreza_aliquota: TFloatField;
    nrtnrtreducao_base_aliquota: TFloatField;
    nrtcstcodigo: TStringField;
    nrtcsicodigo: TStringField;
    nrtcspcodigo: TStringField;
    nrtpis_aliquota: TFloatField;
    nrtcsFcodigo: TStringField;
    nrtcofins_aliquota: TFloatField;
    nrtnrtclassificacao_is: TStringField;
    nrtnrtclassificacao_cpresumido: TStringField;
    nrtnrtibs_aliquota_estadual: TFloatField;
    nrtnrtibs_aliquota_municipal: TFloatField;
    nrtnrtdata_inicio: TDateField;
    nrtnrtdata_fim: TDateField;
    nrtnrtcbs_aliquota: TFloatField;
    nrtnrtreducao_cbs: TFloatField;
    nrtnrtreducao_ibs: TFloatField;
    itmnrtcodigo: TStringField;
    nrtnrtcstibscbs: TStringField;
    cfgcfgapuracaoicm: TIntegerField;
    cfgcfgprouso: TIntegerField;
    cfgcfgtoeusofora: TIntegerField;
    cfgcfgtoeusointe: TIntegerField;
    cfgcfgtoecuffora: TIntegerField;
    cfgcfgtoecufinte: TIntegerField;
    cfgcfgnumeronfe: TIntegerField;
    cfgcfgnumeronfce: TIntegerField;
    cfgcfgobs2: TIntegerField;
    cfgcfgobs3: TIntegerField;
    cfgcfgobs4: TIntegerField;
    cfgcfgcstterceiros: TStringField;
    cfgcfgtrmimpfis1: TIntegerField;
    cfgcfgtrmimpfis2: TIntegerField;
    cfgcfgtrmtef1: TIntegerField;
    cfgcfgtrmtef2: TIntegerField;
    cfgcfgimpnfe1: TIntegerField;
    cfgcfgimpnfe2: TIntegerField;
    cfgcfgimpnfc1: TIntegerField;
    cfgcfgimpnfc2: TIntegerField;
    cfgcfgimpnfc3: TIntegerField;
    inr: TUniQuery;
    mnr: TUniQuery;
    cfgcfgservarqnfes: TStringField;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure IO_OpenSSLStatusInfo(const AMsg: string);
  private
    Fzcone: TUniConnection;
    // ACBrNFeDANFEFR : TACBrNFeDANFEFR;

    function AjustaSituacaoNFCe(vMesChave: string; vFlaCodigo: string = '1'; ASilent: Boolean = True): Boolean;
    procedure CancelaNFCe(vMesChave: string; vFlaCodigo: string = '1');
    function ConsultaServicoSEFAZNFCE: string;
    function EmiteNFCe(vMesChave: string; vImprimir: Boolean; vFlaCodigo: string = '1'): Boolean;
    function GeraNFCe(vMesChave: string; vFlaCodigo: string = '1'): Boolean;

    function ImprimeNFCe(vMesChave: string; vFlaCodigo: string = '1'; vVisualizar: Boolean = False): Boolean;
    function EmailNFCe(vMesChave: string; vFlaCodigo: string = '1'; vVisualizar: Boolean = False; vemails: string = ''): Boolean;
    function VerificaExistencia(vMesChave: string; vFlaCodigo: string = '1'): Boolean;
    function GeraNomeArqNFCe(vMesChave: string; vFlaCodigo: string = '1'): string;
    procedure AjustaCaminhoGeralNF(Data: TDate);
    procedure InicializaTabelas;
    function ValidaProdutos(vMesChave: string; vFlaCodigo: string = '1'): Boolean;
    function ValidaConsumidor(vMesChave: string; vFlaCodigo: string = '1'): Boolean;
    function AssinaNota(vACBrNFe: TACBrNFe; vMesChave: string; vFlaCodigo: string = '1'): Boolean;
    function SalvaEmCoontigencia(vACBrNFe: TACBrNFe; vMesChave: string; vFlaCodigo: string = '1'): Boolean;
    function SalvaNormal(vACBrNFe: TACBrNFe; vMesChave: string; vFlaCodigo: string = '1'): Boolean;

    function ValidaNota(vACBrNFe: TACBrNFe; vMesChave: string; vFlaCodigo: string = '1'): Boolean;
    function Geraxml(vChaveNFE: string; vFlaCodigo: string = '1'): Boolean;

    procedure entraemcontigencia(vStatSEFAZ: string);
    function GeraNomeArqNFCeTipo(vMesChave: string; vTipoEmissao: Integer; vFlaCodigo: string = '1'): string;
    function ConsultaNFCe(vMesChave, vArqNFCe: String; vFlaCodigo: string = '1'; ASilent: Boolean = True): Boolean;
    function InutilizarNumerosNFCe(vFlaCodigo: string = '1'): Boolean;
    procedure Setzcone(const Value: TUniConnection);
    procedure SalvarLogErro(eMessage, eStackTrace: String);
    function InutilizarNumerosNFCeDireto(vFlaCodigo: string = '1'): Boolean;
    procedure VerifieAjustaItemcomSubstituicao(usEmitente, ufDestinatario: string);

    function EnviarEmail(destino, copias, texto, assunto, xml, pdf, nome_cliente, nome_empresa: String): Boolean;
    function GeraxmlCont(vChaveNFE: string; vFlaCodigo: string = '1'): Boolean;


    procedure VerifieAjustaICM;
    function LerConfiguracaoNFCe: Boolean;
    function validatemprodutos: Boolean;
    function DefineVertical: String;
    function CartaCorrecao(vChaveNFE: string; vFlaCodigo: string = '1'): Boolean;
    function GeraNomeNFCe: string;
    procedure ImprimeEventoNfe(vlArquivoNFce: string);
    procedure GeraNomeArqsEvento;
    function ConsultaServicoSEFAZNFCESilent: Boolean;
    function SalvarArquivoCloud(vTipo, vArquivo: string): Boolean;
    procedure Inicializar;

    function qqCPF: string;
    function ImprimirViaTEF: Boolean;
    procedure ImprimirComprovantesTEF(Owner: TApplication;
      vConexao: TUniConnection; vTrmCodigo, vDirRelat, vImpressora: String;
      vTipoImpressao: Integer);


  protected
    // procedure ActionChange(Sender: TObject; CheckDefaults: Boolean); override;
    { Private declarations }
    vpConsultaVisivel: Boolean;
  published
    property zcone: TUniConnection read Fzcone write Setzcone;

  public
    { Public declarations }


    vPathXML: String;
    vpArquivoXMLEvento: String;

    vpArquivoNFce: String;
    vPathPDF: String;
    vpArquivoPDFEvento: String;

    Acesso: TAcesso;
    vpFilial: string;
    vpPastaPrincipal: string;
    vpMesChave: String;
    vpFlacodigo: String;

    vpDataAtual: TdateTime;
    vpSubPastaDoc: string;
    vpAAAAMMNNNFCe: string;
    vpTrmCodigo: string;
    vpClbCodigo: string;

    vpNomeArquivoNFCe: string;
    vPastaPrincipal: string;

    vpConsultouSEFAZ: Boolean;
    vpDataHoraSEFAZ: TdateTime;
    vpPathAplicativo: String;
  end;

const
  (* Tipos de Emissão de NFCe *)
  temiNormal = 1;
  temiContingencia = 2;
  temiContingenciOffLine = 9;

var
  fnfce: Tfnfce;

  (* Identifica situação do Web Service como Normal - OnLine *)
  vpWSNormal: Boolean = True;

implementation

uses
  ACBrUtil, ufnfcejustificativa, uCloudComunicacao, System.Variants,
  ACBrUtil.DateTime;

{$R *.dfm}

function DV_CPF(CPF_NUM:string):string;
var
  CPFa, CPFb, CPFc, CPFd, CPFe, CPFf, CPFg, CPFh:integer;
  CPFi, CPFj, CPFk, p1, p2:integer;
begin
  if length(CPF_NUM)=9 then
  begin
    CPFa:=StrToInt(CPF_NUM[1]);
    CPFb:=StrToInt(CPF_NUM[2]);
    CPFc:=StrToInt(CPF_NUM[3]);
    CPFd:=StrToInt(CPF_NUM[4]);
    CPFe:=StrToInt(CPF_NUM[5]);
    CPFf:=StrToInt(CPF_NUM[6]);
    CPFg:=StrToInt(CPF_NUM[7]);
    CPFh:=StrToInt(CPF_NUM[8]);
    CPFi:=StrToInt(CPF_NUM[9]);
    p1:=10*CPFa+9*CPFb+8*CPFc+7*CPFd+6*CPFe+5*CPFf+4*CPFg+3*CPFh+2*CPFi;
    if (p1 mod 11)<2 then CPFj:=0 else CPFj:= 11-(p1 mod 11);
    p2:=11*CPFa+10*CPFb+9*CPFc+8*CPFd+7*CPFe+6*CPFf+5*CPFg+4*CPFh+3*CPFi+2*CPFj;
    if (p2 mod 11)<2 then CPFk:=0 else CPFk:= 11-(p2 mod 11);
    result:= FloatToStr(CPFj)+FloatToStr(CPFk);
  end;
end;

function Randon(maior_num:integer):integer;
begin
  randomize;
  Result:= Round(random(maior_num));
end;

{gera qualquer numero de CPF}
function Tfnfce.qqCPF:string;
var
  a:string;
begin
  a:=FloatToStr(Randon(999999999));

  while true do
  begin

    Result:= a+dv_CPF(a);

    ACBrValidador.TipoDocto:=docCPF;
    ACBrValidador.Documento := Result;

    if ACBrValidador.Validar then
    begin
      Break;
    end
    else
    begin
      result:='50156101068';
      Break;
    end;

  end;

end;



function modulonfce(AOwner: TComponent; conexao: TUniConnection; vMesChave: string; vFuncao: string; Acesso: TAcesso; vImprimir: Boolean;
  vConsultouSefaz: Boolean; vemail: string): Boolean;
var
  vDia: string;
  vHora: string;
  i: Integer;
  vlHamdle: HWND;
begin
  try

    fnfce := Tfnfce.Create(AOwner);

    fnfce.zcone := conexao;
    fnfce.Acesso := Acesso;
    fnfce.vpTrmCodigo := Acesso.Terminal.ToString;
    fnfce.vpClbCodigo := Acesso.Usuario.ToString;
    fnfce.vpFlacodigo := Acesso.Filial.ToString;

    For i := 0 To fnfce.ComponentCount - 1 Do
    begin
      If fnfce.Components[i] Is TUniQuery Then
        (fnfce.Components[i] As TUniQuery).Connection := conexao;

    end;

    (*
      * Variável que identifica se já foi feita primeira consulta do Status da SEFAZ
      * para reverter o problemas dos certificados digitais de cartão
    *)

    fnfce.InicializaTabelas;

    vlHamdle := 0;
    vlHamdle := FindWindow(nil, pchar('MizioArquivos:' + SoNumeros(fnfce.cfgetddoc1.AsString)));

    // verifica se houve erro na criação
    //if vlHamdle = 0 then
    //begin
    //  fnfce.AtivaMizioArquivos;
    //end;

    (* Ajusta pasta Principal de salvamento dos arquivos. *)
    fnfce.vpPastaPrincipal := ExtractFilePath(application.ExeName);

    fnfce.vpSubPastaDoc := 'arqnfces';

    (* Ajusta as configurações do Componente *)
    if not fnfce.LerConfiguracaoNFCe then
    begin
      if pos('gourmetstone', application.ExeName)=0 then
        ShowMessage('43454 Verifique as configurações para emissão de NFCe');

      Exit;
    end;

    (* Verifica dados do cliente *)

    fnfce.vPastaPrincipal := ExtractFilePath(application.ExeName);

    fnfce.vpSubPastaDoc := 'arqnfces';

    (* Atribui a variável a data atual do servidor *)

    fnfce.vpConsultaVisivel := False;

    fnfce.vpDataHoraSEFAZ := strtodatetime(agora(application, conexao));

    vDia := hoje(application, conexao);
    vHora := agora(application, conexao);

    fnfce.vpDataAtual := strtodatetime(formatdatetime('dd/mm/yyyy', strtodate(vDia)) + ' ' + formatdatetime('hh:mm:ss', strtodatetime(vHora)));


    fnfce.AjustaCaminhoGeralNF(fnfce.vpDataAtual);

   // vpWSNormal := fnfce.ConsultaServicoSEFAZNFCESilent;

    vpWSNormal := True;

    fnfce.vpConsultouSEFAZ := vpWSNormal;

    vConsultouSefaz := vpWSNormal;

    fnfce.vpConsultouSEFAZ := vpWSNormal;


    if fnfce.vpConsultouSEFAZ then
    begin
      fnfce.plStatusSefaz.Caption := 'SEFAZ on-line';
      application.ProcessMessages;
    end
    else
    begin
      fnfce.plStatusSefaz.Caption := 'SEFAZ sem acesso';
      application.ProcessMessages;
    end;

    (* Identifica se Contingência está Ativa *)
    if fnfce.rec.Active = False then
    begin
      fnfce.rec.Connection := fnfce.zcone;
      fnfce.rec.Open;
    end;

    fnfce.rec.Close;
    fnfce.rec.Open;

    if fnfce.rec.IsEmpty then
    begin
      fnfce.plStatusSefaz.Caption := 'SEFAZ on-line';
      vpWSNormal := True;
      application.ProcessMessages;
    end
    else
    begin
      fnfce.plStatusSefaz.Caption := 'SEFAZ sem acesso';
       vpWSNormal := False;
      application.ProcessMessages;
    end;

    fnfce.vpConsultouSEFAZ := vpWSNormal;
    vConsultouSefaz := vpWSNormal;



    if (vMesChave <> '0') and (vMesChave <> '') then
    begin

      fnfce.mes.Close;
      fnfce.mes.Params[0].AsString := fnfce.vpMesChave;
      fnfce.mes.Params[1].AsString := fnfce.vpFlacodigo;
      fnfce.mes.Open;


      if fnfce.mes.RecordCount>0 then
      begin
        if fnfce.mesetdcodigo.AsInteger=0 then
        begin

          fnfce.consulta.Close;
          fnfce.consulta.SQL.Text:='update mes set edritem=1 where mescahve='+fnfce.vpMesChave;
          fnfce.consulta.ExecSQL;

          fnfce.mes.Close;
          fnfce.mes.Params[0].AsString := fnfce.vpMesChave;
          fnfce.mes.Params[1].AsString := fnfce.vpFlacodigo;
          fnfce.mes.Open;

        end;
      end;

      fnfce.vpNomeArquivoNFCe := fnfce.GeraNomeArqNFCe(vMesChave, fnfce.vpFlacodigo);

    end;

    fnfce.vpMesChave := vMesChave;


    case ansiIndexStr(vFuncao, ['EmiteNFCe', 'ImprimeNFCe', 'CancelaNFCe', 'ConsultaServicoSEFAZNFCE', 'VerificaExistencia', 'AjustaSituacaoNFCe',
      'InutilizarNumerosNFCE', 'InutilizarNumerosNFCEDireto', 'GerarXML', 'ReGerarXML', 'VisualizaNFCe', 'EmailNFCe', 'GerarXMLCont', 'CartaCorrecao',
      'ConsultaServicoSEFAZNFCESilent']) of
      0:
        Result := fnfce.EmiteNFCe(vMesChave, vImprimir, fnfce.vpFlacodigo);
      1:
        Result := fnfce.ImprimeNFCe(vMesChave, fnfce.vpFlacodigo);
      2:
        fnfce.CancelaNFCe(vMesChave, fnfce.vpFlacodigo);
      3:
        begin
          fnfce.vpConsultaVisivel := True;
          fnfce.ConsultaServicoSEFAZNFCE;
        end;
      4:
        Result := fnfce.VerificaExistencia(vMesChave, fnfce.vpFlacodigo);
      5:
        Result := fnfce.AjustaSituacaoNFCe(vMesChave, fnfce.vpFlacodigo, False);
      6:
        Result := fnfce.InutilizarNumerosNFCe;
      7:
        Result := fnfce.InutilizarNumerosNFCeDireto;
      8:
        Result := fnfce.Geraxml(vMesChave, fnfce.vpFlacodigo);
      10:
        Result := fnfce.ImprimeNFCe(vMesChave, fnfce.vpFlacodigo, True);
      11:
        Result := fnfce.EmailNFCe(vMesChave, fnfce.vpFlacodigo, True, vemail);
      12:
        Result := fnfce.GeraxmlCont(vMesChave, fnfce.vpFlacodigo);
      13:
        Result := fnfce.CartaCorrecao(vMesChave, fnfce.vpFlacodigo);
      14:
        begin
          fnfce.vpConsultaVisivel := False;
          Result := fnfce.ConsultaServicoSEFAZNFCESilent;
        end;

    end;

  finally

    System.Classes.UnRegisterClass(TACBrValidador);

    System.Classes.UnRegisterClass(TACBrNFe);
    System.Classes.UnRegisterClass(TMemo);
    fnfce.Close;
    FreeAndNil(fnfce);
  end;
end;

exports modulonfce;

(*
  *
  ****** Verifica Pré-existência da NFe *******
  *
*)

function RoundCurrency(const Value: Currency): Currency;
var
  V64: Int64 absolute Result;
  Decimals: Integer;
begin
  Result := Value;
  Decimals := V64 mod 100;
  Dec(V64, Decimals);
  case Decimals of
    - 99 .. -50:
      Dec(V64, 100);
    50 .. 99:
      Inc(V64, 100);
  end;
end;

function Tfnfce.DefineVertical: String;
var
  vlTipoVertical: string;
begin
  vpPathAplicativo := ExtractFilePath(application.ExeName);

  if FileExists(vpPathAplicativo + 'GourmetERP.exe') then
    vlTipoVertical := 'Gourmet'
  else if FileExists(vpPathAplicativo + 'MercatoERP.exe') then
    vlTipoVertical := 'Mercato'
  else if FileExists(vpPathAplicativo + 'BoutiqueERP.exe') then
    vlTipoVertical := 'Boutique'
  else if FileExists(vpPathAplicativo + 'VarejoERP.exe') then
    vlTipoVertical := 'Varejo';

  Result := vlTipoVertical;

end;

procedure Tfnfce.VerifieAjustaICM;
var
  vlcfop: string;
  vlcstcodigo: string;
  vlcsicodigo: string;
  vlcspcodigo: string;
  vlcsfcodigo: string;
  vlcfgpercentualpis: string;
  vlcfgpercentualcofins: string;
begin

  if cfgcfgtributacaoimendes.AsInteger = 0 then
  begin

    itm.Close;
    itm.Params[0].AsString := vpMesChave;
    itm.Params[1].AsInteger := Acesso.Filial;
    itm.Open;

    itm.First;

    While Not itm.Eof Do
    Begin

      if (cfgcfgdefinetoeatendimento.AsInteger = 0) then
      begin

        if (itmitmaliqpis.AsFloat > 0) and (itmitmaliqcofins.AsFloat > 0) then
        begin

          itm.Edit;
          itmitmpis.AsFloat := ((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat) - itmitmdesconto.AsCurrency + itmitmfrete.AsCurrency +
            itmitmoutras.AsCurrency+itmitmicm.AsCurrency) * (itmitmaliqpis.AsFloat / 100);
          itmitmbpis.AsCurrency := ((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat) - itmitmdesconto.AsCurrency + itmitmfrete.AsCurrency +
            itmitmoutras.AsCurrency+itmitmicm.AsCurrency);

          itmitmcofins.AsFloat := ((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat) - itmitmdesconto.AsCurrency + itmitmfrete.AsCurrency +
            itmitmoutras.AsCurrency+itmitmicm.AsCurrency) * (itmitmaliqcofins.AsFloat / 100);
          itmitmbcofins.AsCurrency := ((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat) - itmitmdesconto.AsCurrency + itmitmfrete.AsCurrency +
            itmitmoutras.AsCurrency+itmitmicm.AsCurrency);
          itm.post;
        end
        else
        begin

          itm.Edit;
          itmitmpis.AsFloat := 0;
          itmitmbpis.AsCurrency := 0;
          itmitmcofins.AsFloat := 0;
          itmitmbcofins.AsCurrency := 0;
          itm.post;

        end;

      end;
      itm.Next;
    End;

  end
  else
  begin

    itm.Close;
    itm.Params[0].AsString := vpMesChave;
    itm.Params[1].AsInteger := Acesso.Filial;
    itm.Open;

    itm.First;

    While Not itm.Eof Do
    Begin

      consulta.Close;
      consulta.SQL.Text := 'SELECT p.procodigo, p.pronome, p.cfocfop, p.cfocfopfora,p.icmcodigo ,p.icmcodigofora, ';
      consulta.SQL.add('(SELECT icmaliquotas FROM icm c WHERE p.icmcodigo=c.icmcodigo) icmaliquota, ');
      consulta.SQL.add('(SELECT icmaliquotas FROM icm i WHERE p.icmcodigofora=i.icmcodigo) icmaliquotafora, ');
      consulta.SQL.add('p.propercreducaobaseicm, cstcodigo,csicodigo,cspcodigo,csfcodigo,propisaliquota, procofinsaliquota  ');
      consulta.SQL.add('from pro p where p.procodigo=' + itmprocodigo.AsString);
      consulta.Open;


      vlcstcodigo := consulta.FieldByName('cstcodigo').AsString;
      vlcsicodigo := consulta.FieldByName('csicodigo').AsString;
      vlcspcodigo := consulta.FieldByName('cspcodigo').AsString;
      vlcsfcodigo := consulta.FieldByName('csfcodigo').AsString;

      vlcfgpercentualpis := consulta.FieldByName('propisaliquota').AsString;
      vlcfgpercentualcofins := consulta.FieldByName('procofinsaliquota').AsString;

      itm.Edit;
      itmcstcodigo.AsString := vlcstcodigo;

      itmcsicodigo.AsString := consulta.FieldByName('csicodigo').AsString;
      itmcspcodigo.AsString := consulta.FieldByName('cspcodigo').AsString;
      itmcsfcodigo.AsString := consulta.FieldByName('csfcodigo').AsString;

      itmitmaliqpis.AsFloat := consulta.FieldByName('propisaliquota').AsFloat;
      itmitmaliqcofins.AsFloat := consulta.FieldByName('procofinsaliquota').AsFloat;

      if itmitmaliqpis.AsString <> '0' then
      begin
        itmitmpis.AsFloat := ((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat) - itmitmdesconto.AsCurrency + itmitmfrete.AsCurrency +
          itmitmoutras.AsCurrency+itmitmicm.AsCurrency) * (itmitmaliqpis.AsFloat / 100);
        itmitmbpis.AsCurrency := ((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat) - itmitmdesconto.AsCurrency + itmitmfrete.AsCurrency +
          itmitmoutras.AsCurrency+itmitmicm.AsCurrency);
      end
      else
      begin
        itmitmpis.AsFloat := 0;
        itmitmbpis.AsCurrency := 0;
      end;

      if itmitmaliqcofins.AsString <> '0' then
      begin

        itmitmcofins.AsFloat := ((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat) - itmitmdesconto.AsCurrency + itmitmfrete.AsCurrency +
          itmitmoutras.AsCurrency+itmitmicm.AsCurrency) * (itmitmaliqcofins.AsFloat / 100);
        itmitmbcofins.AsCurrency := ((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat) - itmitmdesconto.AsCurrency + itmitmfrete.AsCurrency +
          itmitmoutras.AsCurrency+itmitmicm.AsCurrency);
      end
      else
      begin
        itmitmcofins.AsFloat := 0;
        itmitmbcofins.AsCurrency := 0;
      end;
      itm.post;

      if (lowercase(consulta.FieldByName('icmcodigo').AsString) <> 'ff') and (lowercase(consulta.FieldByName('icmcodigo').AsString) <> 'nn') and
        (lowercase(consulta.FieldByName('icmcodigo').AsString) <> 'ii') then
      begin

        itm.Edit;

        if cfgufssigla.AsString = etdufssigla.AsString then
        begin
          itmicmcodigo.AsString := consulta.FieldByName('icmcodigo').AsString;
          itmitmaliqicm.AsString := consulta.FieldByName('icmaliquota').AsString;

          if (mesttocodigo.AsInteger = ttoVenda) then
          begin
            itmcfocfop.AsString := consulta.FieldByName('cfocfop').AsString;
          end;

        end
        else
        begin

          itmicmcodigo.AsString := consulta.FieldByName('icmcodigofora').AsString;
          itmitmaliqicm.AsString := consulta.FieldByName('icmaliquotafora').AsString;

          if (mesttocodigo.AsInteger = ttoVenda) then
          begin

            itmcfocfop.AsString := consulta.FieldByName('cfocfop').AsString;
            itmicmcodigo.AsString := consulta.FieldByName('icmcodigo').AsString;
            itmitmaliqicm.AsString := consulta.FieldByName('icmaliquota').AsString;

          end;
        end;

        if itmitmaliqicm.AsString <> '' then
        begin
          if itmitmaliqicm.AsFloat > 0 then
          begin

            itmitmbicm.AsCurrency := ((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat) - itmitmdesconto.AsCurrency + itmitmfrete.AsCurrency +
              itmitmoutras.AsCurrency);

            itmitmpercreducaobaseicm.AsFloat := consulta.FieldByName('propercreducaobaseicm').AsFloat;
            if itmitmpercreducaobaseicm.AsFloat > 0 then
            begin
              itmitmbicm.AsCurrency := itmitmbicm.AsCurrency - (itmitmbicm.AsCurrency * (itmitmpercreducaobaseicm.AsFloat / 100))
            end;

            itmitmicm.AsFloat := itmitmbicm.AsCurrency * (itmitmaliqicm.AsFloat / 100);

          end
          else
          begin
            itmitmpercreducaobaseicm.AsFloat := 0;
            itmitmbicm.AsCurrency := 0;
            itmitmicm.AsFloat := 0;
          end;
        end
        else
        begin
          itmitmpercreducaobaseicm.AsFloat := 0;
          itmitmbicm.AsCurrency := 0;
          itmitmicm.AsFloat := 0;
        end;

        if cfgcfgproducaopropria.AsInteger=1 then
        begin
          if itmproproducao.AsInteger = 1 then
          begin
            itmtoecodigo.AsString := cfgcfgtoeinteproducaopropria.AsString;
          end;
        end;

        itm.post;
      end;

      itm.Next;
    end;

    consulta.Close;
    consulta.SQL.Text := 'update mes set ';
    consulta.SQL.add('mesbicm=(select sum(itmbicm) from itm where mes.meschave=itm.meschave and meschave=' + mesmeschave.AsString + ') ');
    consulta.SQL.add('  ,mespis=(select sum(itmpis) from itm where mes.meschave=itm.meschave and meschave=' + mesmeschave.AsString + ') ');
    consulta.SQL.add('  ,mescofins=(select sum(itmcofins) from itm where mes.meschave=itm.meschave and meschave=' + mesmeschave.AsString + ') ');
    consulta.SQL.add('  where meschave=' + mesmeschave.AsString);
    consulta.ExecSQL;

  end;

end;



function Tfnfce.ValidaConsumidor(vMesChave: string; vFlaCodigo: String = '1'): Boolean;
var
  vlNrDoc: string;
  vlNrCEP: string;

begin


    mes.Close;
    mes.Params[0].AsString := vMesChave;
    mes.Params[1].AsString := vFlaCodigo;
    mes.Open;

    etd.Close;
    etd.ParamByName('etdcodigo').AsInteger := mesetdcodigo.AsInteger;
    etd.ParamByName('edritem').AsInteger := mesedritem.AsInteger;
    etd.Open;

    if trim(lowercase(etdetdidentificacao.AsString)) <> 'consumidor' then
    begin

      vlNrDoc := SomenteNumeros(Self.etdetddoc1.AsString);

      case Length(vlNrDoc) of
        11:
          ACBrValidador.TipoDocto := docCPF;
        14:
          ACBrValidador.TipoDocto := docCNPJ;
      end;

      if vlNrDoc <> '0' then
      begin
        ACBrValidador.Documento := vlNrDoc;

        if not ACBrValidador.Validar then
        begin
          Result := False;
          Exit;
        end;
        Result := True;
      end
      else
      begin
        Result := False;
      end;

    end
    else
    begin
      Result := True;
    end;
end;

function Tfnfce.GeraxmlCont(vChaveNFE: string; vFlaCodigo: string = '1'): Boolean;
begin
  try
    Result := False;

    if not vpConsultouSEFAZ then
    begin
      vpConsultaVisivel := False;
      ConsultaServicoSEFAZNFCE;
    end;

    PlTitulo.Caption := 'Gerar NFC-e';

    fnfce.Show;

    plestagio.Caption := 'Carga dos dados';

    mes.Close;
    mes.Params[0].AsString := vChaveNFE;
    mes.Params[1].AsString := vFlaCodigo;
    mes.Open;

    plestagio.Caption := 'Ajusta pastas';

    (* Ajusta caminho para poder localizar arquivo com base na data do campo mesregistro *)
    AjustaCaminhoGeralNF(Self.mesmesregistro.AsFloat);
    plestagio.Caption := 'Verifica pré-existencia';

    plestagio.Caption := 'Recarrega Dados';

    { mes.Close;
      mes.Params[0].AsString := vChaveNFE;
      mes.Params[1].AsString := vFlaCodigo;
      mes.Open; }

    plestagio.Caption := 'Consulta Pastas';

    (* Ajusta caminho para data atual pois não é uma NFE válida *)
    AjustaCaminhoGeralNF(vpDataAtual);

    plestagio.Caption := 'Valida consumidor';

    (* Se NÃO validar o cadastro do destinatário abandona emissão *)
    { if not ValidaConsumidor(vChaveNFE, fnfce.vpFlacodigo) then

      Exit; }

    plestagio.Caption := 'Valida produtos';

    (* Se NÃO validas os itens do registros abandona a geração da NFCe *)
    { if not ValidaProdutos(vChaveNFE) then
      Exit; }

    plestagio.Caption := 'Gera NFC-e';

    (* Se retornou erro na geração da NFCe abandona *)
    if not GeraNFCe(vChaveNFE, fnfce.vpFlacodigo) then
      Exit;

    (*
      Identifica situação do Web Service da SEFAZ
      Se não estiver normal salva NFe como Contingência
    *)
    vpWSNormal := False;

    if not vpWSNormal then
    begin
      plestagio.Caption := 'Salva em contingencia';

      if Self.SalvaEmCoontigencia(ACBrNFeNFCe, vChaveNFE) then
      begin
        vpNomeArquivoNFCe := GeraNomeArqNFCe(vChaveNFE, vFlaCodigo);

        Result := True;
      end;
    end
    else if Self.SalvaNormal(ACBrNFeNFCe, vChaveNFE, vFlaCodigo) then
    begin
      plestagio.Caption := 'Salva normal';

      vpNomeArquivoNFCe := GeraNomeArqNFCe(vChaveNFE, vFlaCodigo);

      Result := True;
    end;
  finally

    fnfce.Close;
  end;

end;

function Tfnfce.Geraxml(vChaveNFE: string; vFlaCodigo: string = '1'): Boolean;
begin
  try
    Result := False;

    if not vpConsultouSEFAZ then
    begin
      vpConsultaVisivel := False;
      ConsultaServicoSEFAZNFCE;
    end;

    PlTitulo.Caption := 'Gerar NFC-e';

    fnfce.Show;

    plestagio.Caption := 'Carga dos dados';

    mes.Close;
    mes.Params[0].AsString := vChaveNFE;
    mes.Params[1].AsString := vFlaCodigo;
    mes.Open;

    plestagio.Caption := 'Ajusta pastas';

    (* Ajusta caminho para poder localizar arquivo com base na data do campo mesregistro *)
    AjustaCaminhoGeralNF(Self.mesmesregistro.AsFloat);
    plestagio.Caption := 'Verifica pré-existencia';

    plestagio.Caption := 'Recarrega Dados';

    plestagio.Caption := 'Consulta Pastas';

    (* Ajusta caminho para data atual pois não é uma NFE válida *)

    if copy(mesmesprotocolo.AsString, 1, 15) <> '00000000000000' then
    begin
      AjustaCaminhoGeralNF(mesmesdatanfe.AsDateTime);
    end
    else
    begin
      AjustaCaminhoGeralNF(vpDataAtual);
    end;

    plestagio.Caption := 'Valida consumidor';

    (* Se NÃO validar o cadastro do destinatário abandona emissão *)
    { if not ValidaConsumidor(vChaveNFE, fnfce.vpFlacodigo) then

      Exit; }

    plestagio.Caption := 'Valida produtos';

    (* Se NÃO validas os itens do registros abandona a geração da NFCe *)
    { if not ValidaProdutos(vChaveNFE) then
      Exit; }

    plestagio.Caption := 'Gera NFC-e';

    (* Se retornou erro na geração da NFCe abandona *)
    if not GeraNFCe(vChaveNFE, fnfce.vpFlacodigo) then
      Exit;

    (*
      Identifica situação do Web Service da SEFAZ
      Se não estiver normal salva NFe como Contingência
    *)

    vpWSNormal := fnfce.ConsultaServicoSEFAZNFCESilent;

    if not vpWSNormal then
    begin
      plestagio.Caption := 'Salva em contingencia';

      if Self.SalvaEmCoontigencia(ACBrNFeNFCe, vChaveNFE) then
      begin
        vpNomeArquivoNFCe := GeraNomeArqNFCe(vChaveNFE, vFlaCodigo);

        Result := True;
      end;
    end
    else if Self.SalvaNormal(ACBrNFeNFCe, vChaveNFE, vFlaCodigo) then
    begin
      plestagio.Caption := 'Salva normal';

      vpNomeArquivoNFCe := GeraNomeArqNFCe(vChaveNFE, vFlaCodigo);

      Result := True;
    end;
  finally

    fnfce.Close;
  end;

end;

function Tfnfce.GeraNomeNFCe: string;
var
  vlArqNFCe: String;
  vData: double;
  vlCNPJ: String;
  vlNrNFCe, vlNrSer, vlCodigoNFCe: Integer;

  vlUfCod: string;

begin
  vlArqNFCe := '';

  cfg.Close;
  cfg.Params[0].AsInteger := Acesso.Filial;
  cfg.Open;

  try

    if mesmesdatanfe.AsFloat = 0 then
      vData := mesmesregistro.AsFloat
    else
      vData := mesmesdatanfe.AsFloat;

    (* Tenta encontrar arquivo da NFCe com geração NORMAL *)
    vlCNPJ := SomenteNumeros(Self.cfgetddoc1.AsString);
    vlUfCod := copy(Self.cfgcddcodigo.AsString, 1, 2);

    vlNrNFCe := mesmesnumero.AsInteger;
    vlCodigoNFCe := mesmescodigonota.AsInteger;

    if mesmesserie.AsString <> '' then
      vlNrSer := mesmesserie.AsInteger
    else
      vlNrSer := 1;

    vlCNPJ := SomenteNumeros(vlCNPJ);

    vlArqNFCe := copy(vlUfCod, 1, 2);
    vlArqNFCe := vlArqNFCe + formatdatetime('yymm', vData);
    vlArqNFCe := vlArqNFCe + vlCNPJ;
    vlArqNFCe := vlArqNFCe + '65';
    vlArqNFCe := vlArqNFCe + FormatFloat('000', vlNrSer);
    vlArqNFCe := vlArqNFCe + FormatFloat('000000000', vlNrNFCe);
    vlArqNFCe := vlArqNFCe + '9';
    vlArqNFCe := vlArqNFCe + FormatFloat('00000000', vlCodigoNFCe);
    vlArqNFCe := vlArqNFCe + Modulo11(trim(vlArqNFCe));

    vlArqNFCe := ExtractFilePath(application.ExeName) + 'arqnfces\' + formatdatetime('yyyymm', vData) + '\' + vlArqNFCe + '-nfe.xml';

  finally



    if ACBrNFeNFCe.Configuracoes.WebServices.Ambiente <> taHomologacao then
    begin
      If not FileExists(vlArqNFCe) Then
      Begin
        if (cfgcfgservarqnfes.AsString <> '127.0.0.1')  then
        begin
          vlArqNFCe := BaixaXMLServidor(IPServidorArquivos, vlArqNFCe);
        end;

      End;
    end;

    Result := vlArqNFCe;
  end;
end;

procedure Tfnfce.GeraNomeArqsEvento;
var
  vPathXML: String;
  vPathPDF: String;
  vTipoEvento: String;

begin
  try
    if qEnfMev.Active then
      qEnfMev.Refresh
    else
    begin
      qEnfMev.ParamByName('meschave').AsString := vpMesChave;
      qEnfMev.Open;
      qEnfMev.Last;

    end;

    vPathXML := vPastaPrincipal + vpSubPastaDoc + '\' + formatdatetime('yyyymm', qEnfMevmesregistro.AsFloat) + '\';
    vpArquivoXMLEvento := vPathXML + qEnfMevenfchaveevento.AsString + '-ProcEventoNFe.xml';

    vpArquivoNFce := GeraNomeNFCe;

    vTipoEvento := IfThen(qEnfMevtencodigo.AsInteger = tenCCe, 'CCe', 'Cancelamento');
    vPathPDF := vPastaPrincipal + '\pdfs\' + vTipoEvento + '\';

    try
    if not DirectoryExists(vPathPDF) then
      ForceDirectories(vPathPDF);
    except

    end;

    vpArquivoPDFEvento := vPathPDF + qEnfMevenfchaveevento.AsString + '-ProcEventoNFe.pdf';
  except
   On E: Exception Do
    Begin

      if pos('gourmetstone', application.ExeName)=0 then
        ShowMessage('Linha 156 '+E.Message);

    End;

  end;
end;

procedure Tfnfce.ImprimeEventoNfe(vlArquivoNFce: string);
var
  vTipoEvento: String;
  vlArquivoXMLEvento: String;
begin
  try

  if not LerConfiguracaoNFCe then
    Exit;

  if vlArquivoXMLEvento = '' then
    GeraNomeArqsEvento;

  if not FilesExists(vlArquivoXMLEvento) then
  begin
    application.MessageBox(pchar('Não foi possível imprimir o Evento selecionado.' + #13 + 'Arquivo XML não localizado.'), 'ATENÇÃO',
      MB_OK + MB_ICONWARNING);
    Exit;
  end;

  ACBrNFeNFCe.NotasFiscais.Clear;
  ACBrNFeNFCe.NotasFiscais.LoadFromFile(vlArquivoNFce);

  ACBrNFeNFCe.EventoNFe.Evento.Clear;
  ACBrNFeNFCe.EventoNFe.LerXML(vlArquivoXMLEvento);
  ACBrNFeNFCe.ImprimirEvento;

  vTipoEvento := IfThen(ACBrNFeNFCe.EventoNFe.Evento.Items[0].infEvento.tpEvento = teCCe, 'CCe', 'Cancelamento');
  ACBrNFeNFCe.DANFE.PathPDF := vPastaPrincipal + '\pdfs\' + vTipoEvento;

  try
  if not DirectoryExists(ACBrNFeNFCe.DANFE.PathPDF) then
    ForceDirectories(ACBrNFeNFCe.DANFE.PathPDF);
  except

  end;
  ACBrNFeNFCe.ImprimirEventoPDF;

  ACBrNFeNFCe.NotasFiscais.Clear;
  ACBrNFeNFCe.EventoNFe.Evento.Clear;
  except
   On E: Exception Do
    Begin

      if pos('gourmetstone', application.ExeName)=0 then
        ShowMessage('Linha 1605 '+E.Message);

    End;

  end;

end;

function Tfnfce.CartaCorrecao(vChaveNFE: string; vFlaCodigo: string = '1'): Boolean;
var

  vChaveEvento: String;
  vArqEvento: String;
  vMsgRetorno: String;
  vErro: String;
  vCorrecao: String;
  vCStat: Integer;
  vSeqEvento: Integer;
  vXMotivo: String;

begin

  Result := False;

  if not vpConsultouSEFAZ then
  begin
    vpConsultaVisivel := False;
  end;

  PlTitulo.Caption := 'Carta de Correção NFC-e';

  fnfce.Show;

  plestagio.Caption := 'Carga dos dados';

  mes.Close;
  mes.Params[0].AsString := vChaveNFE;
  mes.Params[1].AsString := vFlaCodigo;
  mes.Open;

  plestagio.Caption := 'Ajusta pastas';

  (* Ajusta caminho para poder localizar arquivo com base na data do campo mesregistro *)

  AjustaCaminhoGeralNF(Self.mesmesregistro.AsFloat);
  vpDataAtual := Self.mesmesregistro.AsDateTime;

  (* Ajusta caminho para data atual pois não é uma NFE válida *)
  AjustaCaminhoGeralNF(vpDataAtual);

  vpArquivoNFce := GeraNomeArqNFCe(mesmeschave.AsString, '1');

  if not FilesExists(vpArquivoNFce) then
  begin
    application.MessageBox(pchar('Arquivo XML da NF-e não encontrado.' + #13 + #13 +
      'Entre em contato com suporte da Pégasus Sistemas - (66) 3544-2765.'), 'ATENÇÃO', MB_OK + MB_ICONWARNING);
    Exit;
  end;

  if LerConfiguracaoNFCe then
  begin

    ACBrNFeNFCe.NotasFiscais.Clear;
    ACBrNFeNFCe.NotasFiscais.LoadFromFile(vpArquivoNFce);

    AjustaCaminhoGeralNF(ACBrNFeNFCe.NotasFiscais[0].NFe.ide.dEmi);

    // Verifica se NFe está Autorizada.
    if not ACBrNFeNFCe.NotasFiscais.Items[0].NFe.procNFe.CStat = 100 then
    begin
      application.MessageBox(pchar('A NF-e selecionada não é autorizada.' + #13 + 'Por favor, consulte a situação da NF-e e tente novamente.'),
        'ATENÇÃO', MB_OK + MB_ICONWARNING);
      Exit;
    end;

    ACBrNFeDANFCEFR1.PathPDF := ACBrNFeDANFCEFR1.PathPDF + '\CCe';
    ACBrNFeNFCe.EventoNFe.Evento.Clear;

    (* Verifica se já existe carta de correção para a NF-e selecionada *)

    qEnfMev.Close;
    qEnfMev.Connection := Self.zcone;
    qEnfMev.ParamByName('meschave').AsString := vpMesChave;
    qEnfMev.Open;
    qEnfMev.Last;

    if qEnfMevtencodigo.AsInteger = tenCancelamento then
    begin
      application.MessageBox(pchar('A NF-e selecionada está cancelada.' + #13 + 'Carta de Correção não pode ser gerada para documento cancelado.'),
        'ATENÇÃO', MB_OK + MB_ICONWARNING);
      Exit;
    end;

    vSeqEvento := qEnfMevenfseqevento.AsInteger + 1;
    vCorrecao := '';

    if qEnfMevenfseqevento.AsInteger > 0 then
      case application.MessageBox(pchar('Já existe uma Carta de Correção vínculada a esta NF-e: ' + qEnfMevenfseqevento.AsString + #13 +
        'Novas correções substituem as anteriores.' + #13 + 'Deseja manter correções anteriores ?'), 'Carta de Correção',
        MB_YESNO + MB_DEFBUTTON1 + MB_ICONQUESTION) of
        IDYES:
          vCorrecao := qEnfMevenfdescricao.AsString;

      end;

    (* Cria evento *)
    with ACBrNFeNFCe.EventoNFe.Evento.add do
    begin
      infEvento.cOrgao := 51;
      infEvento.dhEvento := vpDataAtual;
      infEvento.tpEvento := teCCe;
      infEvento.nSeqEvento := vSeqEvento + 1;
      infEvento.detEvento.xCorrecao := vCorrecao;
    end;

    try

      if ACBrNFeNFCe.EnviarEvento(0) then
      begin

        vCStat := ACBrNFeNFCe.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].RetInfEvento.CStat;
        vXMotivo := ACBrNFeNFCe.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].RetInfEvento.xMotivo;

        if (vCStat = 135) or (vCStat = 136) then
        begin
          vChaveEvento := copy(ACBrNFeNFCe.EventoNFe.Evento.Items[0].infEvento.ID, 3, 52);

          vArqEvento := ACBrNFeNFCe.Configuracoes.Arquivos.PathSalvar;
          vArqEvento := vArqEvento + '\' + vChaveEvento;
          vArqEvento := vArqEvento + '-procEventoNFe.xml';

          enf.Connection := Self.zcone;

          enf.Open;
          enf.Append;
          enftencodigo.AsInteger := tenCCe;
          enfenfregistroevento.AsFloat := vpDataAtual;
          enfenfchaveevento.AsString := vChaveEvento;
          enfenfseqevento.AsInteger := vSeqEvento + 1;
          enfenfdescricao.AsString := vCorrecao;
          if FilesExists(vArqEvento) then
            enfenfxml.LoadFromFile(vArqEvento);
          enfenfcstat.AsInteger := vCStat;
          enfenfxmotivo.AsString := vXMotivo;
          enf.post;

          mev.Connection := Self.zcone;

          mev.Open;
          mev.Append;
          mevenfchave.AsInteger := enfenfchave.AsInteger;
          mevmeschave.AsString := fnfce.vpMesChave;
          mev.post;

          (* Impressão e envio de Email do Evento *)

          // ImprimeEventoNfce;

          // EnviarEmailEvento;

        end
        else
          application.MessageBox(pchar('Evento de NF-e não autorizado.' + #13 + #13 + 'Mensagem: ' + #13 + vXMotivo), 'Erro Envio Evento NF-e',
            MB_OK + MB_ICONERROR);
      end
      else
      begin
        vCStat := ACBrNFeNFCe.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].RetInfEvento.CStat;
        vXMotivo := ACBrNFeNFCe.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].RetInfEvento.xMotivo;

      end;

    Except
      On E: Exception Do
      Begin

      if (pos(lowercase('CPF do destinatario invalido'), lowercase(E.Message)) > 0)
      or (pos(lowercase('CNPJ do destinatario invalido'), lowercase(E.Message)) > 0)
      or (pos(lowercase('NFC-e de entrega a domicilio sem a identificacao do destinatario'), lowercase(E.Message)) > 0)
       then
      begin
         etddoc.close;
         etddoc.ParamByName('etdcodigo').AsString:=mesetdcodigo.AsString;
         etddoc.Open;

         etddoc.Edit;
         etddocetddoc1.AsString:=qqCPF;
         etddoc.Post;


        Exit

      end;



       { if pos('gourmetstone', application.ExeName)=0 then
          ShowMessage('Linha 1675 '+E.Message);}

        vCStat := ACBrNFeNFCe.EventoNFe.Evento[0].RetInfEvento.CStat;
        vXMotivo := ACBrNFeNFCe.EventoNFe.Evento[0].RetInfEvento.xMotivo;

        If E.Message = '' Then
          vErro := ''
        Else
          vErro := #13 + 'Erro: ' + E.Message;

        If (vCStat = 0) And (vXMotivo = '') Then
          vMsgRetorno := ''
        Else
          vMsgRetorno := #13 + 'Retorno: ' + IntToStr(vCStat) + ' - ' + vXMotivo + #13;

       { if pos('gourmetstone', application.ExeName)=0 then
         application.MessageBox(pchar('Evento de NF-e não autorizado.' + #13 + 'Mensagem: ' + vErro), 'Erro Envio NF-e', MB_OK + MB_ICONERROR);}

        SalvarLogErro(E.Message, E.StackTrace);

        Exit;
      End;
    End;

  end;

end;


function Tfnfce.ValidaProdutos(vMesChave: string; vFlaCodigo: string): Boolean;
var
  (* Utilizados para chamada do mvpr - Validação de Produtos *)
  ValidarProdutos: function(AOwner: TComponent; conexao: TUniConnection; ChaveMes: string; CodigoFilial: string = '1';
    VerificaNCM: Boolean = True): Boolean;
  vPodeProdutos: Boolean;
  PackMvpr: HModule;

begin
  Result := True;
  PackMvpr := LoadPackage('modulos\mvpr.bpl');

  If PackMvpr <> 0 Then
    Try
      @ValidarProdutos := GetProcAddress(PackMvpr, pchar('ValidaProdutos'));

      If Assigned(ValidarProdutos) Then
        Result := ValidarProdutos(application, zcone, vMesChave, vFlaCodigo);

    Finally
      // DoUnLoadPackage(application, PackMvpr);
    End;

end;

procedure Tfnfce.InicializaTabelas;
var
  vlQtTabelas: Integer;
begin
  try
    try

      consulta.Connection := fnfce.zcone;
      rec.Connection := fnfce.zcone;
      mes.Connection := fnfce.zcone;
      itm.Connection := fnfce.zcone;
      etd.Connection := fnfce.zcone;
      toe.Connection := fnfce.zcone;
      enf.Connection := fnfce.zcone;
      mev.Connection := fnfce.zcone;
      cfg.Connection := fnfce.zcone;
      trm.Connection := fnfce.zcone;
      mic.Connection := fnfce.zcone;
      oic.Connection := fnfce.zcone;
      qDtl.Connection := fnfce.zcone;
      rni.Connection := fnfce.zcone;
      NumeroNFCe.Connection := fnfce.zcone;

      disponivel.Connection := fnfce.zcone;
      limite.Connection := fnfce.zcone;
      ncm.Connection := fnfce.zcone;
      itmncm.Connection := fnfce.zcone;

      cfg.Close;
      cfg.ParamByName('flacodigo').AsInteger := Acesso.Filial;
      cfg.Open;

      trm.Close;
      trm.SQL.Text := 'SELECT DISTINCT tci.tciporta, mit.ecfcodigo, cit.trmcodigo, mit.tipcodigo, trmterminalcomprovante1via, trmterminalcomprovante2via FROM tci ';
      trm.SQL.add('INNER JOIN trm  ON tci.trmcodigo = trm.trmcodigo ');
      trm.SQL.add('INNER JOIN mit  ON tci.mitcodigo = mit.mitcodigo ');
      trm.SQL.add('INNER JOIN cit ON cit.tcicodigo = tci.tcicodigo ');
      trm.SQL.add('WHERE  tci.trmcodigo = ' + vpTrmCodigo);
      trm.SQL.add(' and  cit.trmcodigo=' + vpTrmCodigo);
      trm.SQL.add(' AND mit.tipcodigo=2');
      trm.Open;

      Panel1.Caption := 'TRM: ' + trmtrmcodigo.AsString + ' Aguarde ...';

    except
      on E: EAccessViolation do
      begin
        MessageDlg('Houve uma violação de acesso, com a mensagem' + E.Message, MtError, [MbOk], 0);
      end;
    end;

  finally

  end;
end;

function Tfnfce.GeraNomeArqNFCe(vMesChave: string; vFlaCodigo: String = '1'): string;
var
  vlArqNFCe: String;
  vData: double;
  vlCNPJ: String;
  vlNrNFCe, vlNrSer, vlCodigoNFCe: Integer;

  vlUfCod: string;

begin
  vlArqNFCe := '';

  try


      mes.Close;
      mes.Params[0].AsString := vMesChave;
      mes.Params[1].AsString := vFlaCodigo;
      mes.Open;

    if mesmesnumero.AsInteger = 0 then
      Exit;

    if mesmesdatanfe.AsFloat = 0 then
      vData := mesmesregistro.AsFloat
    else
      vData := mesmesdatanfe.AsFloat;

    if mesmeschavenfe.AsString <> '' then
    begin
      vlArqNFCe := mesmeschavenfe.AsString;
      vlArqNFCe := vpPastaPrincipal + vpSubPastaDoc + '\' + formatdatetime('yyyymm', vData) + '\' + vlArqNFCe + '-nfe.xml';
    end;

    if FileExists(vlArqNFCe) then
      Exit;

    if ACBrNFeNFCe.Configuracoes.WebServices.Ambiente <> taHomologacao then
    begin

      if (cfgcfgservarqnfes.AsString <> '127.0.0.1')  then
      begin
        vlArqNFCe := BaixaXMLServidor(IPServidorArquivos, vlArqNFCe);
        Exit;
      end;

    end;

    (* Tenta encontrar arquivo da NFCe com geração NORMAL *)
    vlCNPJ := SomenteNumeros(Self.cfgetddoc1.AsString);
    vlUfCod := copy(Self.cfgcddcodigo.AsString, 1, 2);

    vlNrNFCe := mesmesnumero.AsInteger;
    vlCodigoNFCe := mesmescodigonota.AsInteger;

    if mesmesserie.AsString <> '' then
      vlNrSer := mesmesserie.AsInteger
    else
      vlNrSer := 1;

    vlCNPJ := SomenteNumeros(vlCNPJ);

    // nome da nota com emissao normal
    vlArqNFCe := copy(vlUfCod, 1, 2);
    vlArqNFCe := vlArqNFCe + formatdatetime('yymm', vData);
    vlArqNFCe := vlArqNFCe + vlCNPJ;
    vlArqNFCe := vlArqNFCe + '65';
    vlArqNFCe := vlArqNFCe + FormatFloat('000', vlNrSer);
    vlArqNFCe := vlArqNFCe + FormatFloat('000000000', vlNrNFCe);
    vlArqNFCe := vlArqNFCe + '1';
    vlArqNFCe := vlArqNFCe + FormatFloat('00000000', vlCodigoNFCe);
    vlArqNFCe := vlArqNFCe + Modulo11(trim(vlArqNFCe));
    vlArqNFCe := vlArqNFCe + '-nfe.xml';

    vlArqNFCe := vpPastaPrincipal + vpSubPastaDoc + '\' + formatdatetime('yyyymm', vData) + '\' + vlArqNFCe;

    if FileExists(vlArqNFCe) then
      Exit;


    (* Tenta encontrar arquivo da NFCe com emissão em CONTINGÊNCIA - CÓD 2 *)
    vlArqNFCe := copy(vlUfCod, 1, 2);
    vlArqNFCe := vlArqNFCe + formatdatetime('yymm', vData);
    vlArqNFCe := vlArqNFCe + vlCNPJ;
    vlArqNFCe := vlArqNFCe + '65';
    vlArqNFCe := vlArqNFCe + FormatFloat('000', vlNrSer);
    vlArqNFCe := vlArqNFCe + FormatFloat('000000000', vlNrNFCe);
    vlArqNFCe := vlArqNFCe + '2';
    vlArqNFCe := vlArqNFCe + FormatFloat('00000000', vlCodigoNFCe);
    vlArqNFCe := vlArqNFCe + Modulo11(trim(vlArqNFCe));
    vlArqNFCe := vlArqNFCe + '-nfe.xml';

    vlArqNFCe := vpPastaPrincipal + vpSubPastaDoc + '\' + formatdatetime('yyyymm', vData) + '\' + vlArqNFCe;

    if FileExists(vlArqNFCe) then
      Exit;


    (* Tenta encontrar arquivo da NFCe com emissão em CONTINGÊNCIA OFFLINE - CÓD 9 *)
    vlArqNFCe := copy(vlUfCod, 1, 2);
    vlArqNFCe := vlArqNFCe + formatdatetime('yymm', vData);
    vlArqNFCe := vlArqNFCe + vlCNPJ;
    vlArqNFCe := vlArqNFCe + '65';
    vlArqNFCe := vlArqNFCe + FormatFloat('000', vlNrSer);
    vlArqNFCe := vlArqNFCe + FormatFloat('000000000', vlNrNFCe);
    vlArqNFCe := vlArqNFCe + '9';
    vlArqNFCe := vlArqNFCe + FormatFloat('00000000', vlCodigoNFCe);
    vlArqNFCe := vlArqNFCe + Modulo11(trim(vlArqNFCe));
    vlArqNFCe := vlArqNFCe + '-nfe.xml';

    vlArqNFCe := vpPastaPrincipal + vpSubPastaDoc + '\' + formatdatetime('yyyymm', vData) + '\' + vlArqNFCe;

    if FileExists(vlArqNFCe) then
      Exit;


    vlArqNFCe := '';
  finally
    Result := vlArqNFCe;
  end;
end;

{
  function Tfnfce.GeraNomeArqNFCe(vMesChave: string; vFlaCodigo: String = '1'): string;
  var
  vlArqNFCe: String;
  vData: double;
  vlCNPJ: String;
  vlNrNFCe, vlNrSer, vlCodigoNFCe: Integer;

  vlUfCod: string;

  begin
  vlArqNFCe := '';

  try
  mes.Close;
  mes.Params[0].AsString := vMesChave;
  mes.Params[1].AsString := vFlaCodigo;
  mes.Open;

  if mesmesnumero.AsInteger = 0 then
  Exit;

  if mesmesdatanfe.AsFloat = 0 then
  vData := mesmesregistro.AsFloat
  else
  vData := mesmesdatanfe.AsFloat;

  if mesmeschavenfe.AsString <> '' then
  begin
  vlArqNFCe := mesmeschavenfe.AsString;
  vlArqNFCe := vpPastaPrincipal + vpSubPastaDoc + '\' + formatdatetime('yyyymm', vData) + '\' + vlArqNFCe + '-nfe.xml';
  end;

  if FileExists(vlArqNFCe) then
  Exit;

  (* Tenta encontrar arquivo da NFCe com geração NORMAL *)
  vlCNPJ := SomenteNumeros(Self.cfgetddoc1.AsString);
  vlUfCod := Copy(Self.cfgcddcodigo.AsString, 1, 2);

  vlNrNFCe := mesmesnumero.AsInteger;
  vlCodigoNFCe := mesmescodigonota.AsInteger;

  if mesmesserie.AsString <> '' then
  vlNrSer := mesmesserie.AsInteger
  else
  vlNrSer := 1;

  vlCNPJ := SomenteNumeros(vlCNPJ);

  // nome da nota com emissao normal
  vlArqNFCe := Copy(vlUfCod, 1, 2);
  vlArqNFCe := vlArqNFCe + formatdatetime('yymm', vData);
  vlArqNFCe := vlArqNFCe + vlCNPJ;
  vlArqNFCe := vlArqNFCe + '65';
  vlArqNFCe := vlArqNFCe + FormatFloat('000', vlNrSer);
  vlArqNFCe := vlArqNFCe + FormatFloat('000000000', vlNrNFCe);
  vlArqNFCe := vlArqNFCe + '1';
  vlArqNFCe := vlArqNFCe + FormatFloat('00000000', vlCodigoNFCe);
  vlArqNFCe := vlArqNFCe + Modulo11(trim(vlArqNFCe));
  vlArqNFCe := vlArqNFCe + '-nfe.xml';

  vlArqNFCe := vpPastaPrincipal + vpSubPastaDoc + '\' + formatdatetime('yyyymm', vData) + '\' + vlArqNFCe;

  if FileExists(vlArqNFCe) then
  Exit;

  (* Tenta encontrar arquivo da NFCe com emissão em CONTINGÊNCIA - CÓD 2 *)
  vlArqNFCe := Copy(vlUfCod, 1, 2);
  vlArqNFCe := vlArqNFCe + formatdatetime('yymm', vData);
  vlArqNFCe := vlArqNFCe + vlCNPJ;
  vlArqNFCe := vlArqNFCe + '65';
  vlArqNFCe := vlArqNFCe + FormatFloat('000', vlNrSer);
  vlArqNFCe := vlArqNFCe + FormatFloat('000000000', vlNrNFCe);
  vlArqNFCe := vlArqNFCe + '2';
  vlArqNFCe := vlArqNFCe + FormatFloat('00000000', vlCodigoNFCe);
  vlArqNFCe := vlArqNFCe + Modulo11(trim(vlArqNFCe));
  vlArqNFCe := vlArqNFCe + '-nfe.xml';

  vlArqNFCe := vpPastaPrincipal + vpSubPastaDoc + '\' + formatdatetime('yyyymm', vData) + '\' + vlArqNFCe;

  if FileExists(vlArqNFCe) then
  Exit;

  (* Tenta encontrar arquivo da NFCe com emissão em CONTINGÊNCIA OFFLINE - CÓD 9 *)
  vlArqNFCe := Copy(vlUfCod, 1, 2);
  vlArqNFCe := vlArqNFCe + formatdatetime('yymm', vData);
  vlArqNFCe := vlArqNFCe + vlCNPJ;
  vlArqNFCe := vlArqNFCe + '65';
  vlArqNFCe := vlArqNFCe + FormatFloat('000', vlNrSer);
  vlArqNFCe := vlArqNFCe + FormatFloat('000000000', vlNrNFCe);
  vlArqNFCe := vlArqNFCe + '9';
  vlArqNFCe := vlArqNFCe + FormatFloat('00000000', vlCodigoNFCe);
  vlArqNFCe := vlArqNFCe + Modulo11(trim(vlArqNFCe));
  vlArqNFCe := vlArqNFCe + '-nfe.xml';

  vlArqNFCe := vpPastaPrincipal + vpSubPastaDoc + '\' + formatdatetime('yyyymm', vData) + '\' + vlArqNFCe;

  if FileExists(vlArqNFCe) then
  Exit;

  (* Se chegou até aqui é porque arquivo não existe *)

  vlArqNFCe := '';
  finally
  Result := vlArqNFCe;
  end;
  end; }

function Tfnfce.GeraNomeArqNFCeTipo(vMesChave: string; vTipoEmissao: Integer; vFlaCodigo: string = '1'): string;
var
  vlArqNFCe: String;
  vlData: double;
  vlCNPJ: String;
  vlNrNFCe, vlNrSer: Integer;
  vlUfCod: string;
begin
  mes.Close;
  mes.Params[0].AsString := vMesChave;
  mes.Params[1].AsString := vFlaCodigo;
  mes.Open;

  if mesmesnumero.AsInteger = 0 then
    Exit;

  if mesmesdatanfe.AsFloat = 0 then
    vlData := mesmesregistro.AsFloat
  else
    vlData := mesmesdatanfe.AsFloat;

  (* Carrega dados para formação do nome do arquivo *)
  vlCNPJ := SomenteNumeros(Self.cfgetddoc1.AsString);
  vlUfCod := copy(Self.cfgcddcodigo.AsString, 1, 2);

  vlNrNFCe := mesmesnumero.AsInteger;
  vlNrSer := mesmesserie.AsInteger;
  vlCNPJ := SomenteNumeros(vlCNPJ);

  (* Gera chave *)
  vlArqNFCe := copy(vlUfCod, 1, 2);
  vlArqNFCe := vlArqNFCe + formatdatetime('yymm', vlData);
  vlArqNFCe := vlArqNFCe + vlCNPJ;
  vlArqNFCe := vlArqNFCe + '65';
  vlArqNFCe := vlArqNFCe + FormatFloat('000', vlNrSer);
  vlArqNFCe := vlArqNFCe + FormatFloat('000000000', vlNrNFCe);

  (* Define o tipo de emissão - 1=Normal 2=Contingencia 9=ContingenciaOffLine *)
  vlArqNFCe := vlArqNFCe + IntToStr(vTipoEmissao);

  vlArqNFCe := vlArqNFCe + FormatFloat('00000000', vlNrNFCe);
  vlArqNFCe := vlArqNFCe + Modulo11(trim(vlArqNFCe));
  vlArqNFCe := vlArqNFCe + '-nfe.xml';

  vlArqNFCe := vpPastaPrincipal + vpSubPastaDoc + '\' + formatdatetime('yyyymm', vlData) + '\' + vlArqNFCe;

  Result := vlArqNFCe;
end;

function Tfnfce.VerificaExistencia(vMesChave: string; vFlaCodigo: string = '1'): Boolean;
begin
  Result := False;

  if FileExists(vpNomeArquivoNFCe) then
    if AjustaSituacaoNFCe(vMesChave, vFlaCodigo) then
      Result := True;
end;

function Tfnfce.ConsultaNFCe(vMesChave, vArqNFCe: String; vFlaCodigo: string = '1'; ASilent: Boolean = True): Boolean;
Var
  nProt: String;
  vnrnfe: String;
  vchNFe: String;
  vdtNFe: String;
  vdtEmiNFe: String;
  vdtDataNFe: String;
  vhrNFe: String;
  vemiNFe: string;
  vCodStatusNFe: String;
  vMsgStatusNFe: String;
  vRetorno: Boolean;
  vData: TDate;
  vlArqNFCe: string;
//  vlNomeArquivo: string;
  vDtAutorizacao: double;

Begin
  vRetorno := False;
  try
  try

   if vArqNFCe='' then
     exit;



    If not FileExists(vArqNFCe) Then
    begin
      vArqNFCe := GeraNomeNFCe;
    end;
    If not FileExists(vArqNFCe) Then
    begin

      if mesmesnumero.AsInteger = 0 then
        Exit;

      if mesmesdatanfe.AsFloat = 0 then
        vData := mesmesregistro.AsFloat
      else
        vData := mesmesdatanfe.AsFloat;

      if mesmeschavenfe.AsString <> '' then
      begin
        vlArqNFCe := mesmeschavenfe.AsString;
        vlArqNFCe := vpPastaPrincipal + vpSubPastaDoc + '\' + formatdatetime('yyyymm', vData) + '\' + vlArqNFCe + '-nfe.xml';
      end;

    end;

    if ACBrNFeNFCe.Configuracoes.WebServices.Ambiente <> taHomologacao then
    begin

      If not FileExists(vArqNFCe) Then
      Begin
        if (cfgcfgservarqnfes.AsString <> '127.0.0.1')  then
        begin

        if pos('gourmetstone', application.ExeName)=0 then
          ShowMessage('2235 Arquivo baixado servidor!' + #13 + #13 + vArqNFCe);


          vArqNFCe := BaixaXMLServidor(IPServidorArquivos, vArqNFCe);

        end;

      End;

    end;


    If not FileExists(vArqNFCe) Then
    begin
      if pos('gourmetstone', application.ExeName)=0 then
        ShowMessage('2217 Arquivo não localizado!' + #13 + #13 + vArqNFCe);

      Exit;
    end;

    ACBrNFeNFCe.NotasFiscais.Clear;
    ACBrNFeNFCe.Configuracoes.Geral.VersaoQRCode := veqr200;

    ACBrNFeNFCe.NotasFiscais.LoadFromFile(vArqNFCe);

    vdtEmiNFe := ajustadata(copy(DateToStr(ACBrNFeNFCe.NotasFiscais.Items[0].NFe.ide.dEmi), 1, 10));

    ACBrNFeNFCe.Configuracoes.WebServices.Visualizar := False;
    ACBrNFeNFCe.Consultar;

    vdtNFe := DateToStr(ACBrNFeNFCe.WebServices.consulta.DhRecbto);
    vhrNFe := TimeToStr(ACBrNFeNFCe.WebServices.consulta.DhRecbto);
    vemiNFe := copy(DateToStr(ACBrNFeNFCe.NotasFiscais.Items[0].NFe.ide.dEmi), 1, 10);

    vdtDataNFe := vemiNFe;
    // Fran 22/11/2022 - adiciona a data de emissao no campo mesdatanfe

    nProt := ACBrNFeNFCe.WebServices.consulta.Protocolo;
    vchNFe := ACBrNFeNFCe.WebServices.consulta.NFeChave;

    vCodStatusNFe := IntToStr(ACBrNFeNFCe.WebServices.consulta.CStat);
    vMsgStatusNFe := ACBrNFeNFCe.WebServices.consulta.xMotivo;

    vnrnfe := IntToStr(ACBrNFeNFCe.NotasFiscais.Items[0].NFe.ide.nNF);

    (* Verifica código de retorno é igual a 100 - Uso Autorizado *)
    If (ACBrNFeNFCe.WebServices.consulta.CStat = 150) or (ACBrNFeNFCe.WebServices.consulta.CStat = 100) or
      (ACBrNFeNFCe.WebServices.consulta.CStat = 104) Then
    begin
      Try
        vRetorno := True;

        if (ACBrNFeNFCe.WebServices.consulta.CStat = 150) or (copy(vArqNFCe, 35, 1) = '9') then
        begin
          vdtNFe := copy(datetimetostr(ACBrNFeNFCe.WebServices.consulta.protNFe.DhRecbto), 1, 10);
          vhrNFe := TimeToStr(ACBrNFeNFCe.WebServices.consulta.protNFe.DhRecbto);
          vemiNFe := ajustadata(copy(DateToStr(ACBrNFeNFCe.NotasFiscais.Items[0].NFe.ide.dEmi), 1, 10));
          vdtDataNFe := vdtNFe;
        end
        else
        begin

          vdtNFe := vdtEmiNFe;
          vhrNFe := TimeToStr(ACBrNFeNFCe.NotasFiscais.Items[0].NFe.ide.dEmi);
          vemiNFe := ajustadata(copy(DateToStr(ACBrNFeNFCe.NotasFiscais.Items[0].NFe.ide.dEmi), 1, 10));
          vdtDataNFe := vdtNFe;

        end;

        consulta.Close;
        consulta.SQL.Text := 'set @disable_triggers=1';
        consulta.ExecSQL;

        consulta.Close;
        consulta.SQL.Text := 'UPDATE mes SET ';
        consulta.SQL.add('mesregistro = ''' + (vdtNFe) + ''', ');
        consulta.SQL.add('meshoranfe = ' + QuotedStr(vhrNFe) + ', ');
        consulta.SQL.add('mesdatanfe = ''' + vemiNFe + ''', ');
        consulta.SQL.add('meschavenfe = ''' + vchNFe + ''', ');
        consulta.SQL.add('tdfcodigo = ''65'', ');
        consulta.SQL.add('temcodigo = 5, ');
        consulta.SQL.add('mesprotocolo = ''' + nProt + ''' WHERE ');
        consulta.SQL.add('meschave = ' + vMesChave + ' and flacodigo=' + vFlaCodigo);
        consulta.ExecSQL;

        consulta.Close;
        consulta.SQL.Text := 'set @disable_triggers=null';
        consulta.ExecSQL;

        consulta.Close;
        consulta.SQL.Text := 'select mesregistro,mesnumero, meschavenfe,tdfcodigo,mesprotocolo from mes where meschave=' + vMesChave;
        consulta.Open;

        consulta.Close;

        qconsulta.Close;
        qconsulta.SQL.Text := 'select mesregistro,mesnumero, meschavenfe,tdfcodigo,mesprotocolo from mes where meschave=' + vMesChave;
        qconsulta.Open;

        if ASilent = False then
        begin
          if pos('gourmetstone', application.ExeName)=0 then
            ShowMessage('Emissão: ' + qconsulta.Fields[0].AsString + ''#13'' + (* *)
              'Nr. NFE: ' + qconsulta.Fields[1].AsString + ''#13'' + (* *)
              'Chave  : ' + qconsulta.Fields[2].AsString + ''#13'' + #13 + #13 + (* *)
              'Código Status          : ' + vCodStatusNFe + #13 + (* *)
              'Status - NFE           : ' + vMsgStatusNFe + #13 + (* *)
              'Protocolo Nr.          : ' + nProt + #13 + (* *)
              'Data e Hora Autorização: ' + datetimetostr(vDtAutorizacao));
        end;

      Except
      On E: Exception Do
      Begin
        if cfgcfgmodonfe.AsInteger = 2 then
        begin
          if pos('gourmetstone', application.ExeName)=0 then
            ShowMessage('Linha 2321 '+E.Message);
        end;
      End;
      End;
    end;
  finally
    Result := vRetorno;
  end;
  except
   On E: Exception Do
    Begin

      if pos('gourmetstone', application.ExeName)=0 then
        ShowMessage('Linha 2445 '+E.Message);

    End;

  end;

End;

function Tfnfce.EmiteNFCe(vMesChave: string; vImprimir: Boolean; vFlaCodigo: string = '1'): Boolean;
begin
  try
  try
    Result := False;


    PlTitulo.Caption := 'Gerar NFC-e';
    info.Lines.add('Inicio: ' + datetimetostr(now));
    fnfce.Show;
    mostra.max := 10;
    application.ProcessMessages;

    plestagio.Caption := 'Carga dos dados';

    info.Lines.add('Abrindo movimento: ' + datetimetostr(now));

    mes.Close;
    mes.Params[0].AsString := vMesChave;
    mes.Params[1].AsString := vFlaCodigo;
    mes.Open;

    mostra.position := 2;
    application.ProcessMessages;

    info.Lines.add('Movimento aberto: ' + datetimetostr(now));

    plestagio.Caption := 'Ajusta pastas';



    (* Ajusta caminho para poder localizar arquivo com base na data do campo mesregistro *)

    // AjustaCaminhoGeralNF(Self.mesmesregistro.AsFloat);


    mostra.position := 3;
    application.ProcessMessages;


    plestagio.Caption := 'Recarrega Dados';

    info.Lines.add('Reabrindo movimento: ' + datetimetostr(now));
    mostra.position := 4;
    application.ProcessMessages;

    info.Lines.add('Reaberto movimento: ' + datetimetostr(now));

    plestagio.Caption := 'Consulta Pastas';



    (* Ajusta caminho para data atual pois não é uma NFE válida *)
    AjustaCaminhoGeralNF(vpDataAtual);


    plestagio.Caption := 'Valida consumidor';

    plestagio.Caption := 'Gera NFC-e';

    info.Lines.add('Gerando NFCE: ' + datetimetostr(now));

    (* Se retornou erro na geração da NFCe abandona *)

    if not GeraNFCe(vMesChave, fnfce.vpFlacodigo) then
      Exit;


    mostra.position := 5;
    application.ProcessMessages;

    info.Lines.add('NFCE Gerada: ' + datetimetostr(now));

    (*
      Identifica situação do Web Service da SEFAZ
      Se não estiver normal salva NFe como Contingência
    *)

   // vpWSNormal := fnfce.ConsultaServicoSEFAZNFCESilent;
    if not vpWSNormal then
    begin
      plestagio.Caption := 'Salva em contingencia';
      mostra.position := 6;
      application.ProcessMessages;

      if Self.SalvaEmCoontigencia(ACBrNFeNFCe, vMesChave) then
      begin
        vpNomeArquivoNFCe := GeraNomeArqNFCe(vMesChave, vFlaCodigo);

        plestagio.Caption := 'Imprime a nota';

        info.Lines.add('Imprimindo NFCE: ' + datetimetostr(now));

        if vImprimir then
        begin
          ImprimeNFCe(vMesChave, fnfce.vpFlacodigo);
          info.Lines.add('NFCE Impressa: ' + datetimetostr(now));

       //   VerificaImprimeComprTEF(vMesChave);
        end;

        Result := True;
      end;



    end
    else if Self.SalvaNormal(ACBrNFeNFCe, vMesChave) then
    begin
      mostra.position := 7;
      application.ProcessMessages;

      plestagio.Caption := 'Salva normal';

      info.Lines.add('Imprimindo NFCE: ' + datetimetostr(now));

      vpNomeArquivoNFCe := GeraNomeArqNFCe(vMesChave, vFlaCodigo);
      mostra.position := 8;
      application.ProcessMessages;

     if vImprimir then
     begin
      ImprimeNFCe(vMesChave, fnfce.vpFlacodigo);
      info.Lines.add('NFCE Impressa: ' + datetimetostr(now));

     // VerificaImprimeComprTEF(vMesChave);

     end;


      Result := True;



    end;


  finally
    mostra.position := 10;
    application.ProcessMessages;

    try
    if not DirectoryExists(ExtractFilePath(application.ExeName) + 'logsnfce') then
      ForceDirectories(ExtractFilePath(application.ExeName) + 'logsnfce');
    except

    end;
    info.Lines.SaveToFile(ExtractFilePath(application.ExeName) + 'logsnfce\' + formatdatetime('yyyymmddnnss', now()) + '.txt');




  end;
    except
   On E: Exception Do
    Begin

      if pos('gourmetstone', application.ExeName)=0 then
        ShowMessage('Linha 2625 '+E.Message);

    End;

  end;

end;

procedure Tfnfce.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  Action := cafree;
end;

procedure Tfnfce.FormShow(Sender: TObject);
begin
  inherited;
  Self.Width := 520;
  Self.Height := 230;

  ACBrNFeDANFCEFR1.Sistema := '(66)3544-2765 PÉGASUS Sistemas';


  // vDia :=fnfe.mesmesemissao.AsString; // hoje(Application, conexao);
  // vDia := hoje(Application, conexao);

  // fnfe.vpDataAtual := strtodatetime(formatdatetime('dd/mm/yyyy', strtodate(vDia)) + ' ' + formatdatetime('hh:mm:ss', strtodatetime(vHora)));
  // fnfe.consulta.Fields[0].AsFloat;

end;

function Tfnfce.ImprimeNFCe(vMesChave: string; vFlaCodigo: string = '1'; vVisualizar: Boolean = False): Boolean;
var
  vlArqCompro: string;

begin
  cfg.Close;
  cfg.ParamByName('flacodigo').AsInteger := Acesso.Filial;
  cfg.Open;

  Result := False;

  mes.Close;
  mes.Params[0].AsString := vMesChave;
  mes.Params[1].AsString := vFlaCodigo;
  mes.Open;

  AjustaCaminhoGeralNF(Self.mesmesregistro.AsFloat);
  vpNomeArquivoNFCe := Self.GeraNomeArqNFCe(vMesChave, vFlaCodigo);

  If not FileExists(vpNomeArquivoNFCe) Then
  Begin

    if (cfgcfgservarqnfes.AsString <> '127.0.0.1')  then
    begin
      vpNomeArquivoNFCe := BaixaXMLServidor(IPServidorArquivos, vpNomeArquivoNFCe);
    end;

  End;

  if vpNomeArquivoNFCe = '' then
    Exit;

  If FileExists(ExtractFilePath(application.ExeName) + 'report\DANFeNFCe.fr3') Then
  Begin

      qDtl.Close;
      qDtl.SQL.Clear;
      qDtl.SQL.add('SELECT  lte.ltetroco ltetroco, lte.ltevalortaxa,lte.ltechave ');
      qDtl.SQL.add('  FROM rfm ');
      qDtl.SQL.add(' INNER JOIN rfi on rfm.rfichave = rfi.rfichave ');
      qDtl.SQL.add(' INNER JOIN mfi ON rfi.rfichave = mfi.rfichave ');
      qDtl.SQL.add(' INNER JOIN mlt ON mlt.mfichave = mfi.mfichave ');
      qDtl.SQL.add(' INNER JOIN lte ON mlt.ltechave = lte.ltechave ');
      qDtl.SQL.add(' left JOIN clt ON lte.ltechave = clt.ltechave ');
      qDtl.SQL.add(' WHERE rfm.meschave = ' + vMesChave+' ');
      qDtl.SQL.add('  AND if(rfi.tfdcodigo=2,tmfcodigo=2, tmfcodigo=21) ');
      qDtl.SQL.add(' group by lte.ltechave ');
      qDtl.open;


    if Length(trmtciporta.AsAnsiString) > 0 then
      if IsValidatePrinter(trmtciporta.AsAnsiString) then
        ACBrNFeDANFCEFR1.Impressora := Self.trmtciporta.AsAnsiString;

    if vVisualizar then
    begin
      ACBrNFeDANFCEFR1.MostraSetup := True;
      ACBrNFeDANFCEFR1.MostraPreview := True;
      ACBrNFeDANFCEFR1.MostraStatus := True;

    end
    else
    begin
      ACBrNFeDANFCEFR1.MostraSetup := False;
      ACBrNFeDANFCEFR1.MostraPreview := False;
      ACBrNFeDANFCEFR1.MostraStatus := False;

    end;

    { if Length(ACBrNFeDANFEFR.Impressora) = 0 then
      begin
      ACBrNFeDANFEFR.MostrarPreview := True;
      ACBrNFeDANFEFR.MostrarStatus := True;
      ACBrNFeDANFEFR.ShowDialog := True;
      end; }

    ACBrNFeDANFCEFR1.FastFile := ExtractFilePath(application.ExeName) + 'report\DANFeNFCe.fr3';

    If FileExists(ExtractFilePath(application.ExeName) + 'logonfce.jpg') Then
      ACBrNFeDANFCEFR1.Logo := ExtractFilePath(application.ExeName) + 'logonfce.jpg';

    ACBrNFeNFCe.NotasFiscais.Clear;
    // ACBrNFeNFCe.DANFE.ImprimeEmUmaLinha := True;

    ACBrNFeNFCe.NotasFiscais.LoadFromFile(vpNomeArquivoNFCe);

    if vVisualizar then
    begin
      ACBrNFeDANFCEFR1.MostraSetup := True;
      ACBrNFeDANFCEFR1.MostraPreview := True;
      ACBrNFeDANFCEFR1.MostraStatus := True;
      ACBrNFeDANFCEFR1.ViaConsumidor:=false;

      ACBrNFeNFCe.NotasFiscais.Imprimir;

    end
    else
    begin

      if application.MessageBox(pchar('Cliente necessita do comprovante?' + #13 + 'Imprimir NFC-e?'), 'Atenção', MB_YESNO + MB_ICONWARNING) = IDYES
      then
      begin
        if vVisualizar then
        begin
          ACBrNFeDANFCEFR1.MostraSetup := True;
          ACBrNFeDANFCEFR1.MostraPreview := True;
          ACBrNFeDANFCEFR1.MostraStatus := True;
          ACBrNFeDANFCEFR1.ViaConsumidor:=false;
          ACBrNFeNFCe.NotasFiscais.Imprimir;

        end
        else
        begin

          if cfgcfgprevisualizarimpressao.AsInteger = 1 then
          begin
            ACBrNFeDANFCEFR1.MostraSetup := True;
            ACBrNFeDANFCEFR1.MostraPreview := True;
            ACBrNFeDANFCEFR1.MostraStatus := True;
            ACBrNFeDANFCEFR1.ViaConsumidor:=false;
            ACBrNFeNFCe.NotasFiscais.Imprimir;
          end
          else
          begin
            ACBrNFeDANFCEFR1.MostraPreview := False;
            ACBrNFeDANFCEFR1.PreparedReport;
            ACBrNFeDANFCEFR1.MostraStatus := False;
            ACBrNFeDANFCEFR1.ViaConsumidor:=false;
            ACBrNFeNFCe.NotasFiscais.Imprimir;
          end;
        end;

      end;

    end;

    ACBrNFeDANFCEFR1.PathPDF := vpPastaPrincipal + 'pdfs\';
    ACBrNFeNFCe.NotasFiscais.ImprimirPDF;
    ACBrNFeNFCe.NotasFiscais.Clear;

    Result := True;

    if cfgcfgviaassinar.AsInteger = 0 then
      Exit;

    (* Identifica se houve parte de pagamento a prazo *)
    consulta.Close;
    consulta.SQL.Clear;
    consulta.SQL.add('SELECT rfm.meschave FROM rfm, mfi, mlt, dtl ');
    consulta.SQL.add(' WHERE mfi.rfichave  = rfm.rfichave ');
    consulta.SQL.add('   AND mfi.mfichave  = mlt.mfichave ');
    consulta.SQL.add('   AND mlt.ltechave  = dtl.ltechave ');
    consulta.SQL.add('   AND dtl.mdacodigo = 7 ');
    consulta.SQL.add('   AND rfm.meschave  = ' + vMesChave);
    consulta.Open;

    if not consulta.IsEmpty then
    begin
      if vVisualizar then
      begin
        ImprimirComprovantesPDV(application, zcone, vMesChave, ExtractFilePath(application.ExeName) + 'Report\viaassinar.fr3', trmtciporta.AsString,
          tiImprimir);
      end
      else
      begin
        ImprimirComprovantesPDV(application, zcone, vMesChave, ExtractFilePath(application.ExeName) + 'Report\viaassinar.fr3', trmtciporta.AsString,
          tiImprimirDireto);
      end;
    end;
  End;
end;

function Tfnfce.EmailNFCe(vMesChave: string; vFlaCodigo: string = '1'; vVisualizar: Boolean = False; vemails: string = ''): Boolean;
var
  vlArqCompro: string;
  xml, pdf: string;
begin
  Result := False;

  mes.Close;
  mes.Params[0].AsString := vMesChave;
  mes.Params[1].AsString := vFlaCodigo;
  mes.Open;

  AjustaCaminhoGeralNF(Self.mesmesregistro.AsFloat);
  vpNomeArquivoNFCe := Self.GeraNomeArqNFCe(vMesChave, vFlaCodigo);

  if vpNomeArquivoNFCe = '' then
    Exit;

  If FileExists(ExtractFilePath(application.ExeName) + 'report\DANFeNFCe.fr3') Then
  Begin

      qDtl.Close;
      qDtl.SQL.Clear;
      qDtl.SQL.add('SELECT  lte.ltetroco ltetroco, lte.ltevalortaxa,lte.ltechave ');
      qDtl.SQL.add('  FROM rfm ');
      qDtl.SQL.add(' INNER JOIN rfi on rfm.rfichave = rfi.rfichave ');
      qDtl.SQL.add(' INNER JOIN mfi ON rfi.rfichave = mfi.rfichave ');
      qDtl.SQL.add(' INNER JOIN mlt ON mlt.mfichave = mfi.mfichave ');
      qDtl.SQL.add(' INNER JOIN lte ON mlt.ltechave = lte.ltechave ');
      qDtl.SQL.add(' left JOIN clt ON lte.ltechave = clt.ltechave ');
      qDtl.SQL.add(' WHERE rfm.meschave = ' + vMesChave+' ');
      qDtl.SQL.add('  AND if(rfi.tfdcodigo=2,tmfcodigo=2, tmfcodigo=21) ');
      qDtl.SQL.add(' group by lte.ltechave ');
      qDtl.open;


    (* Troco *)
    { if not qDtl.IsEmpty then
      ACBrNFeDANFEFR.vTroco := qDtl.Fields[0].AsFloat; }

    (* Operador *)
    ACBrNFeDANFCEFR1.Usuario := mesclbidentificacao.AsString;

    if Length(trmtciporta.AsAnsiString) > 0 then
    begin
      Panel1.Caption := 'Prepagando email em ' + Self.trmtciporta.AsAnsiString + ', aguarde ...';
      application.ProcessMessages;
      ACBrNFeDANFCEFR1.Impressora := Self.trmtciporta.AsAnsiString;
    end;

    ACBrNFeDANFCEFR1.FastFile := ExtractFilePath(application.ExeName) + 'report\DANFeNFCe.fr3';

    If FileExists(ExtractFilePath(application.ExeName) + 'logonfce.jpg') Then
      ACBrNFeDANFCEFR1.Logo := ExtractFilePath(application.ExeName) + 'logonfce.jpg';

    ACBrNFeNFCe.NotasFiscais.Clear;
    ACBrNFeNFCe.NotasFiscais.LoadFromFile(vpNomeArquivoNFCe);

    xml := vpNomeArquivoNFCe;
    ACBrNFeDANFCEFR1.MostraPreview := False;
    ACBrNFeDANFCEFR1.MostraStatus := False;

    // ACBrNFeNFCe.NotasFiscais.Imprimir;

    ACBrNFeDANFCEFR1.PathPDF := vpPastaPrincipal + 'pdfs\';
    ACBrNFeNFCe.NotasFiscais.ImprimirPDF;
    pdf := ChangeFileExt(vpPastaPrincipal + 'pdfs\' + extractfilename(xml), '.pdf');

    ACBrNFeNFCe.NotasFiscais.Clear;

    if EnviarEmail(vemails, '', 'NFCE emitida, enviada conforme sua solicitação', 'Segue Nota fiscal ao Consumidor solicitada.', xml, pdf,
      'CONSUMIDOR', cfgetdapelido.AsString) = False then
    begin
    //  ShowMessage('ATENÇÃO, falha no envio do email, verifique sua conexão de internet e tente mais tarde!');
      Result := False;
    end
    else
    begin
      Result := True;
    end;

  End;
end;

Function Tfnfce.EnviarEmail(destino, copias, texto, assunto, xml, pdf, nome_cliente, nome_empresa: String): Boolean;
Var
  Attachmentxml: TIdAttachment;
  Attachmentpdf: TIdAttachment;
  vEnviado: Boolean;
  vlMensagemErro, vlDiretorioErro: String;
  vlResponder: TIdEmailAddressList;

  vlCNPJ: String;
Begin

  vEnviado := False;
  Result := vEnviado;

  if trim(cfgcfgemailnfe.AsString) = '' then
  begin
    application.MessageBox(pchar('Email do emitente não cadastrado.' + #13 + #13 +
      'Entre em contato com suporte da Pégasus Sistemas - (66) 3544-2765.'), 'ATENÇÃO', MB_OK + MB_ICONWARNING);
    Exit;
  end;

  if (trim(destino) = '') then
  begin
    destino := cfgctdboxedominio.AsString;
  end
  else
  begin
    if cfgctdboxedominio.AsString <> '' then
    begin
      copias := copias + ' ' + cfgctdboxedominio.AsString;
      copias := trim(copias);
      copias := StringReplace(copias, ' ', ';', [rfReplaceAll, rfIgnoreCase]);
    end;
  end;

  if (trim(destino) = '') and (trim(copias) = '') then
  begin
    application.MessageBox(pchar('Nenhum email cadastrado para envio.' + #13 + #13 + 'Verifique no cadastro da entidade!!'), 'ATENÇÃO',
      MB_OK + MB_ICONWARNING);
    Exit;
  end;

  vlCNPJ := SomenteNumeros(cfgetddoc1.AsString);

  if lowercase(cfgcfgemailnfe.AsString) = 'nfe@miziosistemas.com.br' then
  begin

    // SalvarArquivoCloud('NFCe', xml);

    // try
//    vEnviado := PublicarEmail(vlCNPJ, destino, copias, texto, assunto, extractfilename(xml), extractfilename(pdf), nome_cliente, nome_empresa);
    Result := vEnviado;

    // except
    // sleep(2000);
    // vEnviado := PublicarEmail(vlCNPJ, destino, copias, texto, assunto, extractfilename(xml), extractfilename(pdf), nome_cliente, nome_empresa);
    // Result := vEnviado;
    // end;

  end
  else
  begin

    Inicializar;
    Try

      IdMessage1.Clear;
      IdMessage1.Body.Clear;
      IdMessage1.Body.Text := texto + #13 + #13;
      IdMessage1.Subject := assunto; // Assunto
      IdMessage1.From.Text := lowercase(cfgcfgemailnfe.AsString); // Email de envio da mensagem
      IdMessage1.From.Name := nome_empresa; // Nome para apresentação
      IdMessage1.CCList.EMailAddresses := copias; // Com cópia
      IdMessage1.BccList.EMailAddresses := '';
      IdMessage1.Recipients.EMailAddresses := destino; // email destino
      IdMessage1.ReceiptRecipient.Text := IdMessage1.From.Text;

      vlResponder := TIdEmailAddressList.Create(Self);
      vlResponder.EMailAddresses := cfgeteemail.AsString;
      IdMessage1.InReplyTo := cfgeteemail.AsString;
      IdMessage1.ReplyTo := vlResponder;

      if FileExists(xml) then
        Attachmentxml := TIdAttachmentFile.Create(IdMessage1.MessageParts, xml);

      if FileExists(pdf) then
        Attachmentpdf := TIdAttachmentFile.Create(IdMessage1.MessageParts, pdf);

      // Conectando e enviando
      Try
        SMTP.Connect; // Inicia conexão

        If SMTP.Connected Then
        Begin

          SMTP.Send(IdMessage1); // Se conectado envia email

          vEnviado := True;
          SMTP.Disconnect; // Desconecta

          Attachmentxml.Free;
          Attachmentpdf.Free;
        End;
      Except
        On E: Exception Do // Definição da variável e do tipo Exception
        Begin
          vEnviado := False;

          vlMensagemErro := 'Não foi possível enviar o email.' + #13 + #13 + 'Mensagem: ' + #13 + E.Message;
          application.MessageBox(pchar(vlMensagemErro), 'Erro Envio de Email', MB_OK + MB_ICONERROR);

          SalvarLogErro(E.Message, E.StackTrace);

          SMTP.Disconnect;
          sleep(1000);

          If SMTP.Connected Then
            SMTP.Disconnect;
        End;
      End;
    Finally

    End;
  end;
  Result := vEnviado;
End;

Function Tfnfce.validatemprodutos: Boolean;
Begin
  consulta.Close;
  consulta.SQL.Text := 'select  count(itmchave) qtd from itm,pro where itm.procodigo=pro.procodigo and tpocodigo<>' + IntToStr(tpoServicos) +
    '  and meschave=' + vpMesChave;
  consulta.Open;

  if consulta.FieldByName('qtd').AsInteger = 0 then
  begin
    Result := False;
  end
  else
  begin
    Result := True;
  end;

End;



function Tfnfce.GeraNFCe(vMesChave: string; vFlaCodigo: string = '1'): Boolean;
Var
  vErro: String;
  vMensagemErro: String;

  vMsgRetorno: String;

  vNumeroNFe: Integer;
  vChaveNFE: String;
  vProtocoloNFe: String;

  (* Acumuladores - Totais NFCe *)
  vlQtdItens: Integer;

  vlTotBC: double;
  vlTotICMS: double;

  vlTotDesc: double;
  vlTotBruto: double;
  vlTotLiq: double;

  (* Carga Tributária *)
  vlTotTrib: double;
  vlTotTribEst: double;
  vlMensagemCargaTrib: string;
  vlMensagemCartoes: string;

  (* Retornos da SEFAZ *)
  vCStat: Integer;
  vXMotivo: String;

  vDinheiro: double;
  vVoucher: double;

  vChequeProprio: double;
  vChequeTerceiros: double;
  vCartaoDebito: double;
  vCartaoCredito: double;
  vPIX: double;
  vOnLine: double;
  vConvenio: double;
  vAFaturar: double;
  vlTroco: double;
  vTrocaDevolucao: double;
  vVale: double;
  vDoacao: double;
  vCredito: double;

  vlTotalItens: double;
  vlTotalFinalizadores: double;
  vlPercentualProdutos: double;
  vlValorDiferenca: double;

  (* CST e CSOSN *)
  vlCSTIcmsOK: Boolean;
  vlCSTIcms: TpcnCSTIcms;

  vlCSOSNIcmsOK: Boolean;
  vlCSOSNIcms: TpcnCSOSNIcms;
  ok: Boolean;

  { * exibe limite do cliente * }
  vlMensagemLimite: string;
  vlDatatual: string;

  vlcspcodigo: string;
  vlcsfcodigo: string;

  vlcfgpercentualpis: string;

  vlcfgpercentualcofins: string;
  vlNFCeProtocolo: string;
  vlNFCeChave: string;

 // vlOutras: Currency;

  // vlAgora: String;

  vlMensagemReducaoBase: STRING;
  vlReducoes: TStringList;
  iReduz: Integer;

  vlTotalFrete: Currency;
  vlTotalOutras: Currency;


  vlTotalLote: Currency;
  vlMensagemicmreducao: string;

  vltotaltaxaacumulado: Currency;
  vldiferencataxa: Currency;


  vlCodigoTagPagamento: Integer;
  vlCodigoTagOK: Boolean;

  vlTotalitensProdutos: Currency;

  // reforma tributaria
  TotalIBSCBSgIBSCBSgIBSUFvIBSUF:Double;
  TotalIBSCBSgIBSCBSgIBSMunvIBSMun:Double;
  TotalIBSCBSgIBSCBSgCBSvCBS:Double;

  TotalIBSCBSgIBSCBSvBC:Double;

  TotalIBSCBSgIBSCBSgTribRegularvTribRegIBSUF:Double;
  TotalIBSCBSgIBSCBSgTribRegularvTribRegIBSMun:Double;
  TotalIBSCBSgIBSCBSgTribRegularvTribRegCBS:Double;



Begin



  info.Lines.add('Inicio abertura tabelas: ' + datetimetostr(now));

  Result := False;
  vlTotalOutras := 0;

  vlQtdItens := 0;

  vlTotBC := 0;
  vlTotICMS := 0;

  vlTotDesc := 0;
  vlTotBruto := 0;
  vlTotLiq := 0;

  vlTotTrib := 0;
  vlTotTribEst := 0;
  vlMensagemCargaTrib := '';
  vlNFCeProtocolo := '';
  vlNFCeChave := '';


  // reforma tributaria

  TotalIBSCBSgIBSCBSgIBSUFvIBSUF:=0;
  TotalIBSCBSgIBSCBSvBC :=0;
  TotalIBSCBSgIBSCBSgIBSMunvIBSMun :=0;
  TotalIBSCBSgIBSCBSgCBSvCBS :=0;
  TotalIBSCBSgIBSCBSgTribRegularvTribRegIBSUF :=0;
  TotalIBSCBSgIBSCBSgTribRegularvTribRegIBSMun :=0;
  TotalIBSCBSgIBSCBSgTribRegularvTribRegCBS:=0;



  //
  // ****** Carrega consulta da tabela mes e itm ********
  //

  cfg.Close;
  cfg.ParamByName('flacodigo').AsInteger := Acesso.Filial;
  cfg.Open;

  itm.Close;
  itm.Params[0].AsString := vMesChave;
  itm.Params[1].AsString := vFlaCodigo;
  itm.Open;

  vlReducoes := TStringList.Create;

  itm.First;
  while not itm.Eof do
  begin
    consulta.Close;
    consulta.SQL.Text := 'select propercreducaobaseicm from pro where propercreducaobaseicm>0 and procodigo=' + itmprocodigo.AsString;
    consulta.Open;
    if not consulta.IsEmpty then
    begin
      vlReducoes.add(floattostr(100 - consulta.FieldByName('propercreducaobaseicm').AsFloat) + '%');
    end;

    itm.Next;
  end;

  itm.First;

  etd.Close;
  etd.ParamByName('etdcodigo').AsInteger := mesetdcodigo.AsInteger;
  etd.ParamByName('edritem').AsInteger := mesedritem.AsInteger;
  etd.Open;

  if cfgetddoc1.AsString = etdetddoc1.AsString then
  begin
   // ShowMessage('Não é permitido emitir NFCe para a prórpria empresa!');

    Exit;
  end;

  mic.Close;
  mic.Params[0].AsString := vMesChave;
  mic.Open;

  oic.Close;
  oic.Params[0].AsString := vMesChave;
  oic.Open;

  if mes.Active then
  begin
    if mestoecodigo.AsString <> '' then
    begin
      toe.Close;
      toe.SQL.Text := 'select ttecodigo,toeidentificacao,toecodigo,ttocodigo from toe where toecodigo=' + mestoecodigo.AsString;
      toe.Open;
    end;
  end;

  // vlAgora := agora(application, zcone);

  // info.Lines.add('Tabelas abertas: ' + vlAgora);

  //
  // ***** Inicia GERAÇÃO da NFe *****
  //

  vpmeschave:= vMesChave;
  IF validatemprodutos = False then
  begin
   // ShowMessage('Não é permitido emissão de nota com apenas SERVIÇOS e sem MERCADORIAS!');
    Exit;
  end;

  vlNFCeProtocolo := mesmesprotocolo.AsString;
  vlNFCeChave := mesmeschavenfe.AsString;

  ACBrNFeNFCe.NotasFiscais.Clear;
  ACBrNFeNFCe.Configuracoes.Geral.VersaoQRCode := veqr200;


  try

    With ACBrNFeNFCe.NotasFiscais.add.NFe Do
    Begin
      ide.indIntermed := iiSemOperacao;
      infRespTec.CNPJ := '14477548000131';
      infRespTec.email := 'mizio@miziosistemas.com.br';
      infRespTec.xContato := 'Mizio Sistemas';
      infRespTec.fone := '6635442765';


      ide.cUF := cfgufscodigo.AsInteger;
      ide.natOp := 'VENDA';
      ide.hSaiEnt := vpDataAtual;

      infNFe.Versao := cfgcfgversao.AsFloat;

      if not vpWSNormal then
      begin

        ide.hSaiEnt := vpDataAtual;
        ide.dEmi := vpDataAtual;
        ide.dSaiEnt := vpDataAtual;
        ide.hSaiEnt := vpDataAtual;

        mes.Edit;
        mesmesregistro.AsString := trim(Copy(datetimetostr(vpDataAtual), 1, 10));
        mesmeshoranfe.AsString := trim(Copy(datetimetostr(vpDataAtual), 11, 8));
        mes.Post;

      end
      else
      begin

        if (Copy(vlNFCeProtocolo, 1, 15) <> '000000000000000') and (vlNFCeProtocolo <> '') then
        begin
          ide.hSaiEnt := mesmesdatanfe.AsDateTime;
          ide.dEmi := mesmesdatanfe.AsDateTime;
          ide.dSaiEnt := mesmesdatanfe.AsDateTime;
          ide.hSaiEnt := mesmesdatanfe.AsDateTime;

        end
        else
        begin

          ide.dEmi := vpDataAtual;
          ide.dSaiEnt := vpDataAtual;
          ide.hSaiEnt := vpDataAtual;

        end;
      end;

      vlDatatual := datetimetostr(vpDataAtual);

      ide.indPag := ipVista;
      ide.cUF := UFtoCUF(cfgufssigla.AsString);
      ide.cMunFG := cfgcddcodigo.AsInteger;

      ide.idDest := doInterna;

      ide.finNFe := fnNormal;
      ide.tpImp := tiNFCe;
      ide.indFinal := cfConsumidorFinal;

      if mesoricodigo.AsInteger=3 then  // delivery entrega
      begin

        if Length(SomenteNumeros(self.etdetddoc1.AsString)) >= 11 then
        begin
          if  StrToFloat(SomenteNumeros(Self.etdetddoc1.AsString))>0 then
          begin
            ide.indPres:= pcEntregaDomicilio;// KUSKAO
            ide.indIntermed:=iiOperacaoSemIntermediador;

            ACBrValidador.TipoDocto:=docCPF;
            ACBrValidador.Documento :=SomenteNumeros(Self.etdetddoc1.AsString);

            if ACBrValidador.Validar then
              Dest.CNPJCPF :=SomenteNumeros(Self.etdetddoc1.AsString)
            else
            begin
              ACBrValidador.TipoDocto:=docCNPJ;
              ACBrValidador.Documento :=SomenteNumeros(Self.etdetddoc1.AsString);

              if ACBrValidador.Validar then
                Dest.CNPJCPF :=SomenteNumeros(Self.etdetddoc1.AsString)
              else
                Dest.CNPJCPF :='';
            end;

          end
          else
          begin
            ide.indPres:= pcPresencial;// KUSKAO
            ide.indIntermed:=iiOperacaoSemIntermediador;
          end;
        end
        else
        begin
          ide.indPres:= pcPresencial;
        end;

      end
      else if (mesoricodigo.AsInteger=7) or (mesoricodigo.AsInteger=8)  then  // nuc ou aiqfome
      begin

        if Length(SomenteNumeros(self.etdetddoc1.AsString)) >= 11 then
        begin
          ide.indPres:= pcEntregaDomicilio;// KUSKAO
          ide.indIntermed:=iiOperacaoSemIntermediador;
        end
        else
        begin
          ide.indPres:= pcPresencial;
        end;

        if ide.indPres<>pcPresencial then
        begin
          with infIntermed do
          begin
           ori.close;
           ori.ParamByName('oricodigo').AsInteger:=mesoricodigo.AsInteger;
           ori.Open;
           infIntermed.CNPJ:=SoNumeros(orietddoc1.AsString);
           infIntermed.idCadIntTran:=cfgetdapelido.AsString;
          end;
        end;
      end
      else    // presencial no salão
      begin
        ide.indPres := pcPresencial;
        ide.indIntermed := iiSemOperacao;
      end;


      ide.modelo := 65;
      ide.serie := cfgcfgserienfce.AsInteger;
      ide.tpNF := tnSaida;

      if vpWSNormal then
      begin
        ACBrNFeNFCe.Configuracoes.Geral.FormaEmissao := teNormal;
        ide.tpEmis := teNormal;
      end
      else
      begin
        if rec.Active = False then
        begin
          rec.Open;
        end;

        ACBrNFeNFCe.Configuracoes.Geral.FormaEmissao := teOffLine;
        ide.tpEmis := teOffLine;
        ide.dhCont := mesmesemissao.AsDateTime; // recrecdthoraentrada.AsFloat;
        ide.xJust := 'Falha de comunicação com servidores da SEFAZ.';

      end;

      ide.cMunFG := cfgcddcodigo.AsInteger;

      if cfgcfgmodonfe.AsInteger = 2 then
        ide.tpAmb := taHomologacao;

      if cfgcfgmodonfe.AsInteger = 1 then
        ide.tpAmb := taProducao;

      ide.verProc := '21.25.300.1';

      ctd.Close;
      ctd.Connection := zcone;
      ctd.Open;

      if not ctd.IsEmpty then
      begin
        if (ctdctdcnpj.AsString <> '') and (ctdctdcnpj.AsString <> '0') then
        begin
          try
            if strtofloat(SoNumeros(ctdctdcnpj.AsString)) > 0 then
            begin
              autXML.add.CNPJCPF := SoNumeros(ctdctdcnpj.AsString);
            end;
          except

          end;
        end;
      end;

      (*
        *
        ****** Emitente da NFC-e - EMIT ********
        *
      *)

      Emit.CNPJCPF := SomenteNumeros(cfgetddoc1.AsString);
      Emit.IE := SomenteNumeros(cfgedrinscest.AsString);
      Emit.IEST := '';
      Emit.xNome := cfgetdidentificacao.AsString;
      Emit.xFant := cfgetdapelido.AsString;
      Emit.EnderEmit.fone := cfgetftelefone.AsString;
      Emit.EnderEmit.CEP := StrToInt(SomenteNumeros(cfgedrcep.AsString));
      Emit.EnderEmit.xLgr := cfgedrrua.AsString;
      Emit.EnderEmit.nro := cfgedrnumero.AsString;
      Emit.EnderEmit.xCpl := '';
      Emit.EnderEmit.xBairro := cfgedrbairro.AsString;
      Emit.EnderEmit.cMun := cfgcddcodigo.AsInteger;
      Emit.EnderEmit.xMun := cfgcddnome.AsString;
      Emit.EnderEmit.UF := UpperCase(cfgufssigla.AsString);
      Emit.EnderEmit.cPais := 1058;
      Emit.EnderEmit.xPais := 'BRASIL';

      case cfgcrtcodigo.AsInteger of
        1:
          Emit.CRT := crtSimplesNacional;
        2:
          Emit.CRT := crtSimplesExcessoReceita;
        3:
          Emit.CRT := crtRegimeNormal;
      end;

      (*
        *
        ********* Destinatário da NFe **********
        *
      *)

      etd.Close;
      etd.ParamByName('etdcodigo').AsInteger := mesetdcodigo.AsInteger;
      etd.ParamByName('edritem').AsInteger := mesedritem.AsInteger;
      etd.Open;


      if (trim(lowercase(etdetdidentificacao.AsString)) <> 'consumidor')  then
      begin

        if mic.RecordCount = 1 then
        begin
          Dest.indIEDest := inNaoContribuinte;
          Dest.CNPJCPF := SomenteNumeros(self.micidcdoc.AsString);
          Dest.xNome := micidcnome.AsString;
          Dest.EnderDest.UF := Emit.EnderEmit.UF;
        end
        else if oic.RecordCount = 1 then
        begin
          Dest.indIEDest := inNaoContribuinte;
          Dest.CNPJCPF := SomenteNumeros(self.oicidcdoc.AsString);
          Dest.xNome := oicidcnome.AsString;
          Dest.EnderDest.UF := Emit.EnderEmit.UF;
        end
        else
        begin
          Dest.indIEDest := inNaoContribuinte;
          Dest.EnderDest.UF := Emit.EnderEmit.UF;
          if Length(SomenteNumeros(self.etdetddoc1.AsString)) >= 11 then
          begin
            if  StrToFloat(SomenteNumeros(Self.etdetddoc1.AsString))>0 then
            begin

              ACBrValidador.TipoDocto:=docCPF;
              ACBrValidador.Documento :=SomenteNumeros(Self.etdetddoc1.AsString);

              if ACBrValidador.Validar then
                Dest.CNPJCPF :=SomenteNumeros(Self.etdetddoc1.AsString)
              else
              begin
                ACBrValidador.TipoDocto:=docCNPJ;
                ACBrValidador.Documento :=SomenteNumeros(Self.etdetddoc1.AsString);

                if ACBrValidador.Validar then
                  Dest.CNPJCPF :=SomenteNumeros(Self.etdetddoc1.AsString)
                else
                  Dest.CNPJCPF :='';
              end;





              Dest.xNome := etdetdidentificacao.AsString;
            end
            else
            begin

            end;
          end
          else
          begin
            Dest.xNome := etdetdidentificacao.AsString;

          if trim(SomenteNumeros(Self.etdetddoc1.AsString))<>'' then
          begin
            if strtofloat( SomenteNumeros(Self.etdetddoc1.AsString))>0 then
             begin
               if length(SomenteNumeros(Self.etdetddoc1.AsString))>=11 then
               begin
                if  StrToFloat(SomenteNumeros(Self.etdetddoc1.AsString))>0 then
                  Dest.CNPJCPF := SomenteNumeros(Self.etdetddoc1.AsString);
               end;
             end;
            {  else
                Dest.CNPJCPF := SomenteNumeros(qqCPF);}

            end;
          end;
        end;

      end
      else
      begin
        if mic.RecordCount = 1 then
        begin
          Dest.indIEDest := inNaoContribuinte;
          Dest.CNPJCPF := SomenteNumeros(self.micidcdoc.AsString);
          Dest.xNome := micidcnome.AsString;
          Dest.EnderDest.UF := Emit.EnderEmit.UF;
        end
        else if oic.RecordCount = 1 then
        begin
          Dest.indIEDest := inNaoContribuinte;
          Dest.CNPJCPF := SomenteNumeros(self.oicidcdoc.AsString);
          Dest.xNome := oicidcnome.AsString;
          Dest.EnderDest.UF := Emit.EnderEmit.UF;
        end
        else
        begin
          Dest.xNome := etdetdidentificacao.AsString;
        end;

      end;

      itm.Refresh;
      itm.IndexFieldNames := 'itmchave';
      itm.First;
      vlQtdItens := 1;

      VerifieAjustaICM;

      itm.Close;
      itm.Params[0].AsString := vpMesChave;
      itm.Params[1].AsInteger := Acesso.Filial;
      itm.Open;

      vlTotalOutras := 0;
      vlTotalLote := 0;
      consulta.Close;
      consulta.SQL.Clear;
      consulta.SQL.add('SELECT lte.ltevalortaxa, lte.ltetotal ');
      consulta.SQL.add('  FROM rfm ');
      consulta.SQL.add(' INNER JOIN mfi ON rfm.rfichave = mfi.rfichave ');
      consulta.SQL.add(' INNER JOIN mlt ON mlt.mfichave = mfi.mfichave ');
      consulta.SQL.add(' INNER JOIN lte ON mlt.ltechave = lte.ltechave ');
      consulta.SQL.add(' WHERE rfm.meschave = ' + vMesChave);
      consulta.Open;

      vlTotalOutras := consulta.FieldByName('ltevalortaxa').AsCurrency;
      vlTotalLote := consulta.FieldByName('ltetotal').AsCurrency;
      vltotaltaxaacumulado := 0;


      itm.First;
      While Not itm.Eof Do
      Begin

        if vlTotalOutras > 0 then
        begin
          itm.Edit;
          itmitmoutras.AsCurrency := (vlTotalOutras * (((itmitmvalor.AsCurrency * itmitmquantidade.AsFloat) - itmitmdesconto.AsCurrency) / vlTotalLote));
          itm.Post;

          vltotaltaxaacumulado := vltotaltaxaacumulado + itmitmoutras.AsCurrency;

        end;

        if (cfgcfgusacstnoproduto.AsInteger = 0) and (cfgcfgdefinetoeatendimento.AsInteger = 0) then
        begin

          toeitm.Close;
          toeitm.Connection := zcone;
          toeitm.ParamByName('toecodigo').AsInteger := itmtoecodigo.AsInteger;
          toeitm.Open;

          itmcst.Close;
          itmcst.Connection := zcone;
          itmcst.ParamByName('itmchave').AsInteger := itmitmchave.AsInteger;
          itmcst.Open;

          if itmtcecest.AsString <> '' then
          begin

            itmcst.Edit;

            itmcstcstcodigo.AsString := toeitmcstcodigo.AsString;
            itmcstcsicodigo.AsString := toeitmcsicodigo.AsString;

            itmcstcspcodigo.AsString := toeitmcspcodigo.AsString;
            itmcstcsfcodigo.AsString := toeitmcsfcodigo.AsString;
            itmcstitmaliqpis.AsFloat := toeitmcfgpercentualpis.AsFloat;
            itmcstitmaliqcofins.AsFloat := toeitmcfgpercentualcofins.AsFloat;

            itmcst.Post;
          end;

        end
        else
        begin

          toeitm.Close;
          toeitm.Connection := zcone;
          toeitm.ParamByName('toecodigo').AsInteger := itmtoecodigo.AsInteger;
          toeitm.Open;

        end;
        itm.Next;
      End;


      mes.Close;
      mes.Params[0].AsString := vMesChave;
      mes.Open;

      if vlTotalOutras > 0 then
      begin
        mes.Edit;
        mesmesoutras.AsCurrency := vlTotalOutras;
        mes.Post;
      end;


      vlTotalFrete := 0;

      itm.First;
      While Not itm.Eof Do
      Begin

        With Det.add Do
        Begin

          infAdProd := '';
          Prod.nItem := vlQtdItens;
          Prod.ncm := SomenteNumeros(itmproncm.AsString);

          Prod.CFOP := trim(Copy(itmcfocfop.AsString, 1, 1) + Copy(itmcfocfop.AsString, 2, 4));

          Prod.cProd := self.itmprocodigo.AsString;

          ACBrValidadorBarra.TipoDocto := docGTIN;
          ACBrValidadorBarra.Documento := Copy(itmpunbarra.AsString, 2, 13);
          if ACBrValidadorBarra.Validar then
          begin
            if itmpunbarrasistema.AsInteger = 1 then
            begin
              Prod.cEAN := 'SEM GTIN';
              Prod.cEANTrib := '';
            end
            else
            begin
              Prod.cEAN := Copy(itmpunbarra.AsString, 2, 13);
              Prod.cEANTrib := Copy(itmpunbarra.AsString, 2, 13);

            end;
          end
          else
          begin
            Prod.cEAN := 'SEM GTIN';
            Prod.cEANTrib := '';
          end;

          If cfgcfgdescrinfe.AsInteger = 0 Then
            Prod.xProd := BuscaTroca(trim(itmpronome.AsString), '%', '') + ' ' + self.itmpunidentificacao.AsString;

          If cfgcfgdescrinfe.AsInteger = 1 Then
            Prod.xProd := BuscaTroca(trim(itmpronomereduzido.AsString), '%', '') + ' ' + self.itmpunidentificacao.AsString;

          If (Copy(Prod.xProd, 1, 1) = '.') Then
            Prod.xProd := trim(Copy(Prod.xProd, 2, 300));

          Prod.qCom := self.itmitmquantidade.AsFloat;
          Prod.uCom := self.itmunisimbolo.AsString;
          Prod.vProd := Self.itmitmtotal.AsFloat+(itmitmacrescimoav.AsCurrency*Self.itmitmquantidade.AsFloat) ;

          Prod.qTrib := self.itmitmquantidade.AsFloat;
          Prod.vDesc := self.itmitmdesconto.AsFloat;


          if ide.indPres = pcPresencial then
          begin

            Prod.vOutro := self.itmitmoutras.AsCurrency+self.itmitmfrete.AsCurrency;
            vlTotalOutras := vlTotalOutras + (itmitmoutras.AsCurrency+ self.itmitmfrete.AsCurrency);

          end
          else
          begin

            Prod.vOutro := self.itmitmoutras.AsCurrency{+self.itmitmfrete.AsCurrency};
            vlTotalOutras := vlTotalOutras + (itmitmoutras.AsCurrency{+ self.itmitmfrete.AsCurrency});

            prod.vFrete := self.itmitmfrete.AsCurrency;
            vlTotalFrete := vlTotalFrete + self.itmitmfrete.AsCurrency;

          end;

          Prod.uTrib := self.itmunisimbolo.AsString;
          Prod.vUnTrib := Prod.vProd  / self.itmitmquantidade.AsFloat;

          Prod.vUnCom := Prod.vUnTrib;

          vlTotDesc := vlTotDesc + Prod.vDesc;
          vlTotBruto := vlTotBruto + (Prod.vProd);
          vlTotLiq := vlTotLiq + (vlTotBruto - vlTotDesc);

          if itmtpocodigo.AsInteger = 99 then
            Prod.CEST := '01.999.00';

          Prod.CEST := itmtcecest.AsString;

          With Imposto Do
          Begin

            Imposto.vTotTrib := { itmitmcargatrib.AsFloat + } itmitmcargatribest.AsFloat;

            (* Acumula totais de carga tributária por ente Federal e Estadual *)
            vlTotTrib := vlTotTrib { + itmitmcargatrib.AsFloat };
            vlTotTribEst := vlTotTribEst + itmitmcargatribest.AsFloat;

            With ICMS Do
            Begin
              case Emit.CRT of
                crtSimplesNacional:
                  vlCSOSNIcms := StrToCSOSNIcms(vlCSOSNIcmsOK, itmcstcodigo.AsString);
                crtRegimeNormal, crtSimplesExcessoReceita:
                  vlCSTIcms := StrToCSTICMS(vlCSTIcmsOK, Copy(self.itmcstcodigo.AsString, 2, 2));
              end;

              (* CST *)
              if vlCSTIcmsOK then
                CST := vlCSTIcms;

              (* CSOSN *)
              if vlCSOSNIcmsOK then
                CSOSN := vlCSOSNIcms;

              ICMS.modBC := dbiValorOperacao;

              If (lowercase(self.itmicmcodigo.AsString) = 'ff') Or (lowercase(self.itmicmcodigo.AsString) = 'ii') Or
                (lowercase(self.itmicmcodigo.AsString) = 'nn') Then
              Begin
                ICMS.pICMS := 0;
                ICMS.vICMS := 0;
                ICMS.vBC := 0;
              End
              Else
              Begin
                If (self.itmitmicm.AsFloat = 0.01) or (self.itmitmicm.AsFloat = 0) Then
                Begin
                  ICMS.pICMS := 0;
                  ICMS.vICMS := 0;
                  ICMS.vBC := 0;
                End
                Else
                Begin
                  ICMS.pICMS := self.itmicmaliquota.AsFloat;
                  ICMS.vICMS := itmitmicm.AsFloat;
                  ICMS.vBC := itmitmbicm.AsCurrency;
                  ICMS.pRedBC := itmitmpercreducaobaseicm.AsCurrency;

                  if (itmitmbicms.AsFloat > 0) and (itmitmaliqicms.AsFloat > 0) then
                  begin
                    ICMS.modBCST := dbisMargemValorAgregado;
                    ICMS.pMVAST := itmitmmva.AsFloat;
                    ICMS.vBCST := itmitmbicms.AsFloat;
                    ICMS.pICMSST := itmitmaliqicms.AsFloat;
                    ICMS.vICMSST := itmitmicms.AsFloat;

                  end;

                End;
              End;

              vlTotICMS := vlTotICMS + ICMS.vICMS;
              vlTotBC := vlTotBC + ICMS.vBC;
            End;

            pis.CST := StrToCSTPIS(ok, itmcspcodigo.AsString);
            if itmitmaliqpis.AsFloat > 0 then
            begin
              pis.vBC := itmitmbpis.AsCurrency;
              pis.pPIS := itmitmaliqpis.AsFloat;
              pis.vPIS := itmitmpis.AsCurrency;
            end;

            COFINS.CST := StrToCSTCOFINS(ok, itmcsfcodigo.AsString);

            if itmitmaliqcofins.AsFloat > 0 then
            begin
              COFINS.vBC := itmitmbcofins.AsCurrency;
              COFINS.pCOFINS := itmitmaliqcofins.AsFloat;
              COFINS.vCOFINS := itmitmcofins.AsCurrency;
            end;

            // IMPLEMENTAÇÃO DOS NOVOS IMPOSTOS IBS / CBS

            // Reforma Tributária

            if ((cfgcrtcodigo.AsInteger>=3) and (cfgcfgapuracaoicm.AsInteger=2) ) or  (cfgcfgmodonfe.AsInteger = 2) then
            begin

              nrt.close;
              nrt.ParamByName('nrtcodigo').AsString:=itmnrtcodigo.AsString;
              nrt.Open;

              if (nrt.RecordCount>0) and (copy(mesmesprotocolo.asstring,1,6)<>'000000') and (copy(mesmesprotocolo.asstring,1,6)<>'')  then
              begin

                inr.close;
                inr.ParamByName('itmchave').AsString:=itmitmchave.AsString;
                inr.Open;

                if inr.RecordCount>0 then
                begin

                  //  Informações do tributo: IBS / CBS

                  IBSCBS.CST := StrToCSTIBSCBS(inr.FieldByName('cst_ibscbs').AsString);
                  IBSCBS.cClassTrib :=inr.FieldByName('class_trib_ibscbs').AsString;
                  IBSCBS.gIBSCBS.vBC :=inr.FieldByName('base_calc_ibscbs').AsCurrency;

                  TotalIBSCBSgIBSCBSvBC:=SimpleRoundTo(TotalIBSCBSgIBSCBSvBC+IBSCBS.gIBSCBS.vBC,-2);


                  // pAliqEfet=0,0600%×(1−0,40)=0,0600%×0,60
                  IBSCBS.gIBSCBS.gIBSUF.pIBSUF :=inr.FieldByName('perc_ibs_uf').AsCurrency;
                  IBSCBS.gIBSCBS.gIBSUF.gRed.pRedAliq :=inr.FieldByName('red_aliq_ibs_uf').AsCurrency;
                  IBSCBS.gIBSCBS.gIBSUF.gRed.pAliqEfet :=inr.FieldByName('aliq_efetiva_ibs_uf').AsCurrency;
                  IBSCBS.gIBSCBS.gIBSUF.vIBSUF :=inr.FieldByName('valor_ibs_uf').AsCurrency;
                  TotalIBSCBSgIBSCBSgIBSUFvIBSUF:=SimpleRoundTo(TotalIBSCBSgIBSCBSgIBSUFvIBSUF+IBSCBS.gIBSCBS.gIBSUF.vIBSUF,-2);


                  IBSCBS.gIBSCBS.gIBSMun.pIBSMun :=inr.FieldByName('perc_ibs_mun').AsCurrency;
                  IBSCBS.gIBSCBS.gIBSMun.gRed.pRedAliq :=inr.FieldByName('red_aliq_ibs_mun').AsCurrency;
                  IBSCBS.gIBSCBS.gIBSMun.gRed.pAliqEfet :=inr.FieldByName('aliq_efetiva_ibs_mun').AsCurrency;
                  IBSCBS.gIBSCBS.gIBSMun.vIBSMun :=inr.FieldByName('valor_ibs_mun').AsCurrency;
                  TotalIBSCBSgIBSCBSgIBSMunvIBSMun:=SimpleRoundTo(TotalIBSCBSgIBSCBSgIBSMunvIBSMun+IBSCBS.gIBSCBS.gIBSMun.vIBSMun,-2);

                  IBSCBS.gIBSCBS.gCBS.pCBS :=inr.FieldByName('perc_cbs').AsCurrency;
                  IBSCBS.gIBSCBS.gCBS.gRed.pRedAliq :=inr.FieldByName('red_aliq_cbs').AsCurrency;
                  IBSCBS.gIBSCBS.gCBS.gRed.pAliqEfet :=inr.FieldByName('aliq_efetiva_cbs').AsCurrency;
                  IBSCBS.gIBSCBS.gCBS.vCBS :=inr.FieldByName('valor_cbs').AsCurrency;

                  TotalIBSCBSgIBSCBSgCBSvCBS:=SimpleRoundTo(TotalIBSCBSgIBSCBSgCBSvCBS+IBSCBS.gIBSCBS.gCBS.vCBS,-2);

                  IBSCBS.gIBSCBS.vIBS := inr.FieldByName('total_ibs_ufmun').AsCurrency;

                end
                else
                begin



                  //  Informações do tributo: IBS / CBS

                  IBSCBS.CST :=  StrToCSTIBSCBS(nrtnrtcstibscbs.AsString); // TCSTIBSCBS.cst000;
                  IBSCBS.cClassTrib := nrtnrtcodigo.AsString;
                  IBSCBS.gIBSCBS.vBC :=SimpleRoundTo( (self.itmitmtotal.AsFloat-(COFINS.vCOFINS+pis.vPIS+ICMS.vICMS)   ),-2);  // total do item

                  TotalIBSCBSgIBSCBSvBC:=SimpleRoundTo(TotalIBSCBSgIBSCBSvBC+IBSCBS.gIBSCBS.vBC,-2);


                  // pAliqEfet=0,0600%×(1−0,40)=0,0600%×0,60
                  IBSCBS.gIBSCBS.gIBSUF.pIBSUF := nrtnrtibs_aliquota_estadual.AsFloat;
                  if nrtnrtreducao_ibs.AsFloat>0 then
                  begin
                    IBSCBS.gIBSCBS.gIBSUF.gRed.pRedAliq :=nrtnrtreducao_ibs.AsFloat  ;
                    IBSCBS.gIBSCBS.gIBSUF.gRed.pAliqEfet := RoundTo(nrtnrtibs_aliquota_estadual.AsFloat-((nrtnrtibs_aliquota_estadual.AsFloat)*((nrtnrtreducao_ibs.AsFloat)/100)),-2);
                    IBSCBS.gIBSCBS.gIBSUF.vIBSUF :=SimpleRoundTo(IBSCBS.gIBSCBS.vBC*(IBSCBS.gIBSCBS.gIBSUF.gRed.pAliqEfet/100),-2);
                  end
                  else
                  begin
                    IBSCBS.gIBSCBS.gIBSUF.vIBSUF :=SimpleRoundTo(IBSCBS.gIBSCBS.vBC*(IBSCBS.gIBSCBS.gIBSUF.pIBSUF /100),-2);
                  end;
                  TotalIBSCBSgIBSCBSgIBSUFvIBSUF:=SimpleRoundTo(TotalIBSCBSgIBSCBSgIBSUFvIBSUF+IBSCBS.gIBSCBS.gIBSUF.vIBSUF,-2);


                  IBSCBS.gIBSCBS.gIBSMun.pIBSMun := nrtnrtibs_aliquota_municipal.AsFloat;
                  if nrtnrtreducao_ibs.AsFloat>0 then
                  begin
                    IBSCBS.gIBSCBS.gIBSMun.gRed.pRedAliq :=nrtnrtreducao_ibs.AsFloat  ;
                    IBSCBS.gIBSCBS.gIBSMun.gRed.pAliqEfet := RoundTo(nrtnrtibs_aliquota_municipal.AsFloat-(nrtnrtibs_aliquota_municipal.AsFloat*(nrtnrtreducao_ibs.AsFloaT/100)),-2);
                    IBSCBS.gIBSCBS.gIBSMun.vIBSMun :=SimpleRoundTo(IBSCBS.gIBSCBS.vBC*(IBSCBS.gIBSCBS.gIBSMun.gRed.pAliqEfet/100),-2);
                  end
                  else
                  begin
                    IBSCBS.gIBSCBS.gIBSMun.vIBSMun :=SimpleRoundTo(IBSCBS.gIBSCBS.vBC*(IBSCBS.gIBSCBS.gIBSMun.pIBSMun/100),-2);
                  end;

                  TotalIBSCBSgIBSCBSgIBSMunvIBSMun:=SimpleRoundTo(TotalIBSCBSgIBSCBSgIBSMunvIBSMun+IBSCBS.gIBSCBS.gIBSMun.vIBSMun,-2);

                  IBSCBS.gIBSCBS.gCBS.pCBS := nrtnrtcbs_aliquota.AsFloat;
                  if nrtnrtreducao_ibs.AsFloat>0 then
                  begin
                    IBSCBS.gIBSCBS.gCBS.gRed.pRedAliq := nrtnrtreducao_cbs.AsFloat;
                    IBSCBS.gIBSCBS.gCBS.gRed.pAliqEfet :=SimpleRoundTo(nrtnrtcbs_aliquota.AsFloat-(nrtnrtcbs_aliquota.AsFloat*(nrtnrtreducao_cbs.AsFloat/100)),-2);
                    IBSCBS.gIBSCBS.gCBS.vCBS :=SimpleRoundTo(IBSCBS.gIBSCBS.vBC*(IBSCBS.gIBSCBS.gCBS.gRed.pAliqEfet/100),-2); // total do item
                  end
                  else
                  begin
                    IBSCBS.gIBSCBS.gCBS.vCBS :=SimpleRoundTo(IBSCBS.gIBSCBS.vBC*(IBSCBS.gIBSCBS.gCBS.pCBS/100),-2); // total do item
                  end;

                  TotalIBSCBSgIBSCBSgCBSvCBS:=SimpleRoundTo(TotalIBSCBSgIBSCBSgCBSvCBS+IBSCBS.gIBSCBS.gCBS.vCBS,-2);

                  IBSCBS.gIBSCBS.vIBS := SimpleRoundTo( IBSCBS.gIBSCBS.gIBSMun.vIBSMun +IBSCBS.gIBSCBS.gIBSUF.vIBSUF, -2); // aqui deve dar 0.01

                  inr.close;
                  inr.ParamByName('itmchave').AsString:=itmitmchave.AsString;
                  inr.Open;

                  if inr.IsEmpty then
                    inr.Append
                  else
                    inr.Edit;
                  //  Informações do tributo: IBS / CBS

                  inr.FieldByName('itmchave').AsInteger:=itmitmchave.AsInteger;

                  inr.FieldByName('cst_ibscbs').AsString:=CSTIBSCBSToStr(IBSCBS.CST);
                  inr.FieldByName('class_trib_ibscbs').AsString:=IBSCBS.cClassTrib ;
                  inr.FieldByName('base_calc_ibscbs').AsCurrency:=IBSCBS.gIBSCBS.vBC ;


                  // pAliqEfet=0,0600%×(1−0,40)=0,0600%×0,60
                  inr.FieldByName('perc_ibs_uf').AsCurrency:=IBSCBS.gIBSCBS.gIBSUF.pIBSUF ;
                  inr.FieldByName('red_aliq_ibs_uf').AsCurrency:=IBSCBS.gIBSCBS.gIBSUF.gRed.pRedAliq ;
                  inr.FieldByName('aliq_efetiva_ibs_uf').AsCurrency:=IBSCBS.gIBSCBS.gIBSUF.gRed.pAliqEfet ;
                  inr.FieldByName('valor_ibs_uf').AsCurrency:=IBSCBS.gIBSCBS.gIBSUF.vIBSUF;


                  inr.FieldByName('perc_ibs_mun').AsCurrency:=IBSCBS.gIBSCBS.gIBSMun.pIBSMun ;
                  inr.FieldByName('red_aliq_ibs_mun').AsCurrency:=IBSCBS.gIBSCBS.gIBSMun.gRed.pRedAliq ;
                  inr.FieldByName('aliq_efetiva_ibs_mun').AsCurrency:=IBSCBS.gIBSCBS.gIBSMun.gRed.pAliqEfet ;
                  inr.FieldByName('valor_ibs_mun').AsCurrency:=IBSCBS.gIBSCBS.gIBSMun.vIBSMun ;

                  inr.FieldByName('perc_cbs').AsCurrency:=IBSCBS.gIBSCBS.gCBS.pCBS ;
                  inr.FieldByName('red_aliq_cbs').AsCurrency:=IBSCBS.gIBSCBS.gCBS.gRed.pRedAliq;
                  inr.FieldByName('aliq_efetiva_cbs').AsCurrency:=IBSCBS.gIBSCBS.gCBS.gRed.pAliqEfet;
                  inr.FieldByName('valor_cbs').AsCurrency:=IBSCBS.gIBSCBS.gCBS.vCBS;

                  inr.FieldByName('total_ibs_ufmun').AsCurrency:=IBSCBS.gIBSCBS.vIBS;
                  inr.Post;

                end;
              end;

            end;


          End;
          vlQtdItens := vlQtdItens + 1;

        End;

        itm.Next;
      End;


      if mesmesretirabalcao.AsInteger=0 then
      begin
        if (mesmesfrete.AsCurrency>0) then
        begin
          if ide.indPres= pcPresencial then
          begin
            Transp.modFrete := mfSemFrete;
          end
          else
          begin
            if StrToFloat(SomenteNumeros(Self.etdetddoc1.AsString))>0 then
              Transp.modFrete := mfContaEmitente
            else
              Transp.modFrete := mfSemFrete;
          end;
        end
        else
          Transp.modFrete := mfSemFrete;
      end
      else
      begin
        Transp.modFrete := mfSemFrete;
      end;



      if (ide.indPres= pcEntregaDomicilio) or (ide.indPres= pcTeleatendimento) then
      begin

        if etdedrcep.AsString='' then
        begin
         Dest.EnderDest.CEP := StrToInt(SomenteNumeros(cfgedrcep.AsString));
         consulta.Close;
         consulta.sql.Text:='update edr set edrcep='+QuotedStr(SomenteNumeros(etdedrcep.AsString)) + ' where etdcodigo='+mesetdcodigo.AsString;
         consulta.ExecSQL;
        end
        else
        begin
          Dest.EnderDest.CEP := StrToInt(SomenteNumeros(etdedrcep.AsString));
        end;

        Dest.EnderDest.xLgr := etdedrrua.AsString;
        Dest.EnderDest.nro := etdedrnumero.AsString;
        Dest.EnderDest.xCpl := '';
        Dest.EnderDest.xBairro := etdedrbairro.AsString;

        if etdcddcodigo.AsString='' then
        begin
          consulta.Close;
          consulta.sql.Text:='update edr set cddcodigo='+cfgcddcodigo.AsString+' where etdcodigo='+mesetdcodigo.AsString;
          consulta.ExecSQL;

          Dest.EnderDest.cMun := cfgcddcodigo.AsInteger
        end
        else
        begin
          Dest.EnderDest.cMun := etdcddcodigo.AsInteger;
        end;

        Dest.EnderDest.xMun := etdcddnome.AsString;
        Dest.EnderDest.UF := UpperCase(etdufssigla.AsString);

      end;


          (* Trata mensagem referente Carga Tributária *)
      if (vlTotTrib + vlTotTribEst) > 0 then
      begin
        vlMensagemCargaTrib := 'Trib. aprox. R$ ';
        vlMensagemCargaTrib := vlMensagemCargaTrib + FormatFloat('#,###.00', RoundTo(vlTotTrib, -2)) + ' Federal';

        if vlTotTribEst > 0 then
          vlMensagemCargaTrib := vlMensagemCargaTrib + ' e ' + FormatFloat('#,###.00', RoundTo(vlTotTribEst, -2)) + ' Estadual';

        vlMensagemCargaTrib := vlMensagemCargaTrib + ';Fonte: IBPT 5oi7eW (Lei Federal 12.741/2012)';

      end;
      vlMensagemCargaTrib := '';

      { * Exibe situação de credito do cliente * }

      vlMensagemLimite := '';

      qTomTof.Close;
      qTomTof.Connection := zcone;
      qTomTof.SQL.Text := 'SELECT distinct tofidentificacao FROM tom, tof WHERE ';
      qTomTof.SQL.add('tom.tofcodigo = tof.tofcodigo AND ');
      qTomTof.SQL.add('tof.ticcodigo IN (' + IntToStr(ticObservacao) + ') AND ');
      qTomTof.SQL.add('tom.meschave = ' + vpMesChave + ' ');
      qTomTof.SQL.add('ORDER BY tof.tofcodigo');
      qTomTof.Open;

      if qTomTof.IsEmpty then
      begin

        if cfgcfgobs1.AsString <> '' then
        begin
          tom.Connection := zcone;
          tom.Open;

          if not tom.locate('meschave;tofcodigo', VarArrayOf([vpMesChave, cfgcfgobs1.AsInteger]), []) then
          begin
            tom.Append;
            tomtofcodigo.AsInteger := cfgcfgobs1.AsInteger;
            tommeschave.AsString := vpMesChave;
            tom.post;
          end;

        end;



        qTomTof.Close;
        qTomTof.Connection := zcone;
        qTomTof.SQL.Text := 'SELECT distinct tofidentificacao FROM tom, tof WHERE ';
        qTomTof.SQL.add('tom.tofcodigo = tof.tofcodigo AND ');
        qTomTof.SQL.add('tof.ticcodigo IN (' + IntToStr(ticObservacao) + ') AND ');
        qTomTof.SQL.add('tom.meschave = ' + vpMesChave + ' ');
        qTomTof.SQL.add('ORDER BY tof.tofcodigo');
        qTomTof.Open;

      end;

      vlMensagemReducaoBase := '';

      While Not qTomTof.Eof Do
      Begin
        if pos(trim(qTomTof.Fields[0].AsString), vlMensagemCargaTrib) = 0 then
        begin
          vlMensagemCargaTrib := vlMensagemCargaTrib + trim(qTomTof.Fields[0].AsString) + ';';
        end;
        qTomTof.Next;
      End;

      vlMensagemCartoes:='';

      consultacomprovante.Close;
      consultacomprovante.Connection:=zcone;

      consultacomprovante.sql.Text := 'SELECT distinct dtl.dtlchave, dtl.mdacodigo, mda.mdaidentificacao, dtl.dtlvalor, rdc.rdccomprovante1via, rdc.rdccomprovante2via ';
      consultacomprovante.sql.Add('FROM mes INNER JOIN rfm ON mes.meschave = rfm.meschave ');
      consultacomprovante.sql.Add('INNER JOIN rfi ON rfm.rfichave = rfi.rfichave ');
      consultacomprovante.sql.Add('INNER JOIN mfi ON mfi.rfichave = rfi.rfichave ');
      consultacomprovante.sql.Add('INNER JOIN mlt ON mlt.mfichave = mfi.mfichave ');
      consultacomprovante.sql.Add('INNER JOIN dtl ON dtl.ltechave = mlt.ltechave ');
      consultacomprovante.sql.Add('INNER JOIN mda ON dtl.mdacodigo = mda.mdacodigo ');
      consultacomprovante.sql.Add('INNER JOIN ltr ON dtl.dtlchave = ltr.dtlchave ');
      consultacomprovante.sql.Add('INNER JOIN rdc ON ltr.rdcchave = rdc.rdcchave ');
      consultacomprovante.sql.Add('WHERE rfi.tfdcodigo IN (32) ');
      consultacomprovante.sql.Add('AND dtl.mdacodigo IN (4,5,6) ');
      consultacomprovante.sql.Add('AND mes.meschave ='+vpMesChave);
      consultacomprovante.Open;

      while not consultacomprovante.Eof do
      begin

        if consultacomprovante.FieldByName('rdccomprovante1via').AsString <> '' then
        begin

          if pos(consultacomprovante.FieldByName('rdccomprovante1via').AsString,vlMensagemCartoes)=0 then
          begin
            vlMensagemCartoes:=Trim(vlMensagemCartoes+consultacomprovante.FieldByName('rdccomprovante1via').AsString);
          end;

        end;
        consultacomprovante.Next;
      end;



      if consultacomprovante.IsEmpty then
      begin

        consultacomprovante.Close;
        consultacomprovante.Connection:=zcone;

        consultacomprovante.sql.Text := 'SELECT  dtl.dtlchave,  rdccomprovante1via ';
        consultacomprovante.sql.Add('FROM olt ');
        consultacomprovante.sql.Add('INNER JOIN lte ON olt.ltechave = lte.ltechave ');
        consultacomprovante.sql.Add('INNER JOIN dtl ON lte.ltechave = dtl.ltechave ');
        consultacomprovante.sql.Add('INNER JOIN mda ON dtl.mdacodigo = mda.mdacodigo ');
        consultacomprovante.sql.Add('INNER JOIN rdc ON dtl.dtlchave = rdc.dtlchave ');
        consultacomprovante.sql.Add('INNER JOIN mor ON olt.orcchave = mor.orcchave ');
        consultacomprovante.sql.Add('WHERE mor.meschave ='+vpMesChave);
        consultacomprovante.Open;

        while not consultacomprovante.Eof do
        begin

          if consultacomprovante.FieldByName('rdccomprovante1via').AsString <> '' then
          begin

            if pos(consultacomprovante.FieldByName('rdccomprovante1via').AsString,vlMensagemCartoes)=0 then
            begin
              vlMensagemCartoes:=vlMensagemCartoes+Trim(vlMensagemCartoes+consultacomprovante.FieldByName('rdccomprovante1via').AsString);
            end;

          end;
          consultacomprovante.Next;
        end;

      end;


      InfAdic.infCpl := trim(trim(vlMensagemCargaTrib) + #13+ #13 + ' ' +
                         trim(cfgcfgmensagempdv.AsString) + #13 + #13  + ' ' +
                         trim(mesmesobs.AsString) + #13 + #13 + ' ' +
                         trim(vlMensagemLimite) + #13 + #13 + ' '+
                         trim(vlMensagemReducaoBase));//+
                      //   #13 +#13 + ' ' +
                      //   vlMensagemCartoes);




      Total.ICMSTot.vTotTrib := RoundTo(vlTotTrib + vlTotTribEst, -2);

      Total.ICMSTot.vOutro := vlTotalOutras;
      Total.ICMSTot.vFrete := vlTotalFrete;

      Total.ICMSTot.vBC := vlTotBC;

      Total.ICMSTot.vICMS := RoundTo(vlTotICMS, -2);
      Total.ICMSTot.vProd := RoundTo(vlTotBruto, -2);
      Total.ICMSTot.vDesc := RoundTo(vlTotDesc, -2);

      // reforma tributaria

      if ((cfgcrtcodigo.AsInteger>=3) and (cfgcfgapuracaoicm.AsInteger=2) ) or  (cfgcfgmodonfe.AsInteger = 2) then
      begin

        mnr.Close;
        mnr.ParamByName('meschave').AsInteger:=mesmeschave.AsInteger;
        mnr.Open;

        if (mnr.RecordCount>0) and (copy(mesmesprotocolo.asstring,1,6)<>'000000')  and (copy(mesmesprotocolo.asstring,1,6)<>'')  then
        begin
          // carrega os dados de uma nota ja emitida e autorizada

          Total.IBSCBSTot.vBCIBSCBS :=mnr.FieldByName('total_base_ibscbs').AsCurrency;

          Total.IBSCBSTot.gIBS.gIBSUFTot.vIBSUF :=mnr.FieldByName('total_ibs_uf').AsCurrency;
          Total.IBSCBSTot.gIBS.gIBSUFTot.vDif := 0;
          Total.IBSCBSTot.gIBS.gIBSUFTot.vDevTrib := 0;


          Total.IBSCBSTot.gIBS.gIBSMunTot.vIBSMun :=mnr.FieldByName('total_ibs_mun').AsCurrency;
          Total.IBSCBSTot.gIBS.gIBSMunTot.vDif := 0;
          Total.IBSCBSTot.gIBS.gIBSMunTot.vDevTrib := 0;

          // RESUMO IBS

          Total.IBSCBSTot.gIBS.vIBS :=mnr.FieldByName('credito_presumido_ibs').AsCurrency;
          Total.IBSCBSTot.gIBS.vCredPres := 0;
          Total.IBSCBSTot.gIBS.vCredPresCondSus := 0;


          // CBS
          Total.IBSCBSTot.gCBS.vDif := 0;
          Total.IBSCBSTot.gCBS.vDevTrib := 0;

          Total.IBSCBSTot.gCBS.vCBS :=mnr.FieldByName('total_cbs').AsCurrency;

          Total.IBSCBSTot.gCBS.vCredPres := 0;
          Total.IBSCBSTot.gCBS.vCredPresCondSus := 0;

        end
        else
        begin
          // calculo para emissão da nota


          if nrt.RecordCount>0 then
          begin

            // Total.ISTot.vIS := 100;

            Total.IBSCBSTot.vBCIBSCBS := TotalIBSCBSgIBSCBSvBC;

            // UF E MUN

            if TotalIBSCBSgIBSCBSgIBSUFvIBSUF>0 then
              Total.IBSCBSTot.gIBS.gIBSUFTot.vIBSUF := TotalIBSCBSgIBSCBSgIBSUFvIBSUF
            else
              Total.IBSCBSTot.gIBS.gIBSUFTot.vIBSUF := TotalIBSCBSgIBSCBSgTribRegularvTribRegIBSUF;

            Total.IBSCBSTot.gIBS.gIBSUFTot.vDif := 0;
            Total.IBSCBSTot.gIBS.gIBSUFTot.vDevTrib := 0;


            if TotalIBSCBSgIBSCBSgIBSMunvIBSMun>0 then
              Total.IBSCBSTot.gIBS.gIBSMunTot.vIBSMun :=TotalIBSCBSgIBSCBSgIBSMunvIBSMun
            else
              Total.IBSCBSTot.gIBS.gIBSMunTot.vIBSMun := TotalIBSCBSgIBSCBSgTribRegularvTribRegIBSMun;

            Total.IBSCBSTot.gIBS.gIBSMunTot.vDif := 0;
            Total.IBSCBSTot.gIBS.gIBSMunTot.vDevTrib := 0;

            // RESUMO IBS

            Total.IBSCBSTot.gIBS.vIBS := Total.IBSCBSTot.gIBS.gIBSUFTot.vIBSUF+Total.IBSCBSTot.gIBS.gIBSMunTot.vIBSMun;
            Total.IBSCBSTot.gIBS.vCredPres := 0;
            Total.IBSCBSTot.gIBS.vCredPresCondSus := 0;


            // CBS
            Total.IBSCBSTot.gCBS.vDif := 0;
            Total.IBSCBSTot.gCBS.vDevTrib := 0;

            if TotalIBSCBSgIBSCBSgCBSvCBS>0 then
              Total.IBSCBSTot.gCBS.vCBS :=TotalIBSCBSgIBSCBSgCBSvCBS
            else
              Total.IBSCBSTot.gCBS.vCBS :=TotalIBSCBSgIBSCBSgTribRegularvTribRegCBS;

            Total.IBSCBSTot.gCBS.vCredPres := 0;
            Total.IBSCBSTot.gCBS.vCredPresCondSus := 0;


            if mnr.IsEmpty then
              mnr.Append
            else
              mnr.Edit;

            mnr.FieldByName('meschave').AsInteger:=mesmeschave.AsInteger;
            mnr.FieldByName('total_base_ibscbs').AsCurrency:=Total.IBSCBSTot.vBCIBSCBS ;
            mnr.FieldByName('total_ibs_uf').AsCurrency:=Total.IBSCBSTot.gIBS.gIBSUFTot.vIBSUF;
            mnr.FieldByName('total_ibs_mun').AsCurrency:=Total.IBSCBSTot.gIBS.gIBSMunTot.vIBSMun;
            mnr.FieldByName('total_ibs_ufmun').AsCurrency:=Total.IBSCBSTot.gIBS.gIBSUFTot.vIBSUF+Total.IBSCBSTot.gIBS.gIBSMunTot.vIBSMun;
            mnr.FieldByName('credito_presumido_ibs').AsCurrency:=Total.IBSCBSTot.gIBS.vIBS;
            mnr.FieldByName('total_cbs').AsCurrency:=Total.IBSCBSTot.gCBS.vCBS;
            mnr.FieldByName('credito_presumido_cbs').AsCurrency:=0;
            mnr.Post;







          end;

        end;
      end;




      Total.ICMSTot.vNF := RoundTo((vlTotBruto - vlTotDesc + vlTotalFrete + vlTotalOutras), -2);

      Total.ICMSTot.vPIS := mesmespis.AsCurrency;
      Total.ICMSTot.vCOFINS := mesmescofins.AsCurrency;


      qDtl.Close;
      qDtl.SQL.Text :='SELECT distinct dtl.dtlvalor, rfm.meschave, mda.mdacodigo modalidade, mda.mdatagpagamento mdacodigo, dtl.cedcodigo, dtl.rdcnrauto ';
      qDtl.SQL.add('FROM rfm ');
      qDtl.SQL.add('INNER JOIN rfi ON rfm.rfichave = rfi.rfichave ');
      qDtl.SQL.add('INNER JOIN mfi ON rfm.rfichave = mfi.rfichave ');
      qDtl.SQL.add('INNER JOIN mlt ON mfi.mfichave =mlt.mfichave ');
      qDtl.SQL.add('INNER JOIN lte ON mlt.ltechave = lte.ltechave ');
      qDtl.SQL.add('left JOIN clt ON lte.ltechave = clt.ltechave ');
      qDtl.SQL.add('INNER JOIN dtl ON lte.ltechave = dtl.ltechave ');
      qDtl.SQL.add('INNER JOIN mda ON dtl.mdacodigo = mda.mdacodigo ');
      qDtl.SQL.add('WHERE rfm.meschave='+ self.mesmeschave.AsString + ' ');
      qDtl.SQL.add('AND lte.tfdcodigo=32 ');
      qDtl.SQL.add('AND IF(dtl.mdacodigo IN(4,5),dtl.rdcnrauto<>'+QuotedStr('')+ ',TRUE) ');
      qDtl.SQL.add('AND if(rfi.tfdcodigo=2,tmfcodigo=2, tmfcodigo=21) ');

      qDtl.SQL.add('GROUP BY  dtl.dtlchave ');
      qDtl.SQL.add('ORDER BY dtl.dtlchave  ');
      qDtl.Open;



      vDinheiro := 0;
      vVoucher := 0;
      vChequeProprio := 0;
      vChequeTerceiros := 0;
      vCartaoDebito := 0;
      vCartaoCredito := 0;
      vPIX := 0;
      vOnLine := 0;
      vConvenio := 0;
      vVale := 0;
      vDoacao := 0;
      vCredito := 0;
      vTrocaDevolucao := 0;

      vAFaturar := 0;

      vlTotalItens := 0;
      vlTotalFinalizadores := 0;
      vlPercentualProdutos := 0;

      vlTotalItens := RoundTo(vlTotBruto - vlTotDesc + vlTotalFrete + vlTotalOutras, -2);

     //   vlTotalItens := RoundTo(vlTotBruto - vlTotalOutras, -2);


      while not qDtl.Eof do
      begin
        if not(qDtl.FieldByName('modalidade').AsInteger in [11, 22, 33]) then
          vlTotalFinalizadores := vlTotalFinalizadores + qDtl.FieldByName('dtlvalor').AsCurrency;

        qDtl.Next;
      end;

      vlTotalitensProdutos:=0;

      itm.first;
      while not itm.Eof do
      begin
        if itmtpocodigo.AsString='0' then
        begin
          vlTotalitensProdutos:=vlTotalitensProdutos+itmitmtotal.AsCurrency+itmitmoutras.AsCurrency;
        end;
        itm.Next;

      end;

      mes.Edit;
      mesmesprodutos.AsCurrency:=vlTotalitensProdutos;
      mes.Post;


     vlPercentualProdutos := ((mesmesprodutos.AsCurrency) + mesmesfrete.AsCurrency) / (mesmestotal.AsCurrency+mesmesdesconto.ascurrency) ;
//      vlPercentualProdutos := 1;


      qDtl.First;

      {
        1	Dinheiro	1
        3	Cheque Terceiros	2
        4	Cartão Crédito	3
        5	Cartão Débito	4
        7	Convênio	5
        78	Pagamento Online	5
        6	PIX	17
        8	Crédito	21
        17	Vale	21
      }


      while not qDtl.Eof do
      begin

        case qDtl.FieldByName('modalidade').AsInteger of
          mdaDinheiro:
            vDinheiro := vDinheiro + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaTrocoDinheiro:
            begin
              vlTroco := vlTroco - qDtl.FieldByName('dtlvalor').AsCurrency;
            end;
          mdaChequeProprio:
            begin
              vChequeProprio := vChequeProprio + qDtl.FieldByName('dtlvalor').AsCurrency;
              if qDtl.Eof then
              begin
                vlTroco := vlTroco + qDtl.FieldByName('dtlvalor').AsCurrency;
              end;
            end;
          mdaTrocoChequeProprio:
            begin
              vChequeProprio := vChequeProprio - qDtl.FieldByName('dtlvalor').AsCurrency;
              vlTroco := vlTroco + qDtl.FieldByName('dtlvalor').AsCurrency;
            end;
          mdaChequeTerceiros:
            vChequeTerceiros := vChequeTerceiros + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaTrocoChequeTerceiros:
            vChequeTerceiros := vChequeTerceiros - qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaCartaoDebito:
            vCartaoDebito := vCartaoDebito + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaCartaoCredito:
            vCartaoCredito := vCartaoCredito + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaPIX:
            vPIX := vPIX + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaOnLine:
            vOnLine := vOnLine + qDtl.FieldByName('dtlvalor').AsCurrency;

          mdaConvenio:
            vConvenio := vConvenio + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaVale:
            vVale := vVale + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaDoacao:
            vDoacao := vDoacao + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaCredito:
            vCredito := vCredito + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaTrocaDevolucao:
            vTrocaDevolucao := vTrocaDevolucao + qDtl.FieldByName('dtlvalor').AsCurrency;
          mdaVoucher:
            vVoucher:=vVoucher+ qDtl.FieldByName('dtlvalor').AsCurrency;
        end;
        qDtl.Next;
      end;


      if vVoucher > 0 then
        if vlPercentualProdutos <> 0 then
          vVoucher := RoundCurrency(vVoucher * vlPercentualProdutos);

      if vDinheiro > 0 then
        if vlPercentualProdutos <> 0 then
          vDinheiro := RoundCurrency(vDinheiro * vlPercentualProdutos);

      if vChequeProprio > 0 then
        if vlPercentualProdutos <> 0 then
          vChequeProprio := RoundCurrency(vChequeProprio * vlPercentualProdutos);

      if vChequeTerceiros > 0 then
        if vlPercentualProdutos <> 0 then
          vChequeTerceiros := RoundCurrency(vChequeTerceiros * vlPercentualProdutos);

      if vCartaoDebito > 0 then
        if vlPercentualProdutos <> 0 then
          vCartaoDebito := RoundCurrency(vCartaoDebito * vlPercentualProdutos);

      if vCartaoCredito > 0 then
        if vlPercentualProdutos <> 0 then
          vCartaoCredito := RoundCurrency(vCartaoCredito * vlPercentualProdutos);

      if vConvenio > 0 then
        if vlPercentualProdutos <> 0 then
          vConvenio := RoundCurrency(vConvenio * vlPercentualProdutos);

      if vPIX > 0 then
        if vlPercentualProdutos <> 0 then
          vPIX := RoundCurrency(vPIX * vlPercentualProdutos);

      if vOnLine > 0 then
        if vlPercentualProdutos <> 0 then
          vOnLine := RoundCurrency(vOnLine * vlPercentualProdutos);


      if vVale > 0 then
        if vlPercentualProdutos <> 0 then
          vVale := RoundCurrency(vVale * vlPercentualProdutos);

      if vDoacao > 0 then
        if vlPercentualProdutos <> 0 then
          vDoacao := RoundCurrency(vDoacao * vlPercentualProdutos);

      if vCredito > 0 then
        if vlPercentualProdutos <> 0 then
          vCredito := RoundCurrency(vCredito * vlPercentualProdutos);

      if vTrocaDevolucao > 0 then
        if vlPercentualProdutos <> 0 then
          vTrocaDevolucao := RoundCurrency(vTrocaDevolucao * vlPercentualProdutos);

      vlValorDiferenca := 0;
      vlValorDiferenca := vlTotalItens - (vVoucher+ vDinheiro + vChequeProprio + vChequeTerceiros + vCartaoDebito + vCartaoCredito + vConvenio + vOnline + vPIX + vVale +
        vTrocaDevolucao + vDoacao + vCredito);

      vlValorDiferenca := RoundCurrency(vlValorDiferenca);

      if mesetdcodigo.AsInteger = 0 then
      begin
        if vVoucher + vDinheiro + vChequeProprio + vChequeTerceiros + vCartaoDebito + vCartaoCredito + vConvenio + vPIX + vTrocaDevolucao + vVale + vDoacao +
          vCredito = 0 then
        begin
          vDinheiro := mesmestotal.AsCurrency;
          vlValorDiferenca := 0;
        end;

      end;

      if vDinheiro < 0 then
        vlValorDiferenca := vDinheiro;

      qDtl.Close;
      qDtl.SQL.Clear;
      qDtl.SQL.add('SELECT  lte.ltetroco ltetroco,lte.ltechave ');
      qDtl.SQL.add('  FROM rfm ');
      qDtl.SQL.add(' INNER JOIN rfi on rfm.rfichave = rfi.rfichave ');
      qDtl.SQL.add(' INNER JOIN mfi ON rfi.rfichave = mfi.rfichave ');
      qDtl.SQL.add(' INNER JOIN mlt ON mlt.mfichave = mfi.mfichave ');
      qDtl.SQL.add(' INNER JOIN lte ON mlt.ltechave = lte.ltechave ');
      qDtl.SQL.add(' left JOIN clt ON lte.ltechave = clt.ltechave ');
      qDtl.SQL.add(' WHERE rfm.meschave = ' + vMesChave+' ');
      qDtl.SQL.add('  AND if(rfi.tfdcodigo=2,tmfcodigo=2, tmfcodigo=21) ');
      qDtl.SQL.add(' group by lte.ltechave ');
      qDtl.Open;

      vlTroco := 0; // qDtl.FieldByName('ltetroco').AsCurrency;

      if vlTroco < 0 then
        vlTroco := vlTroco * -1;


    // daniel 31/01/2025 regando troco indevido

      qDtl.Close;
      qDtl.SQL.Text :='SELECT distinct dtl.ltechave, dtl.dtlvalor, rfm.meschave, mda.mdacodigo modalidade, mda.mdatagpagamento mdacodigo, dtl.cedcodigo, dtl.rdcnrauto, dtl.dtlchave ';
      qDtl.SQL.add('FROM rfm ');
      qDtl.SQL.add('INNER JOIN rfi ON rfm.rfichave = rfi.rfichave ');
      qDtl.SQL.add('INNER JOIN mfi ON rfm.rfichave = mfi.rfichave ');
      qDtl.SQL.add('INNER JOIN mlt ON mfi.mfichave =mlt.mfichave ');
      qDtl.SQL.add('INNER JOIN lte ON mlt.ltechave = lte.ltechave ');
      qDtl.SQL.add('left JOIN clt ON lte.ltechave = clt.ltechave ');
      qDtl.SQL.add('INNER JOIN dtl ON lte.ltechave = dtl.ltechave ');
      qDtl.SQL.add('INNER JOIN mda ON dtl.mdacodigo = mda.mdacodigo ');
      qDtl.SQL.add('WHERE rfm.meschave='+ self.mesmeschave.AsString + ' ');
      qDtl.SQL.add('AND lte.tfdcodigo=32 ');
      qDtl.SQL.add('AND IF(dtl.mdacodigo IN(4,5),dtl.rdcnrauto<>'+QuotedStr('')+ ',TRUE) ');
      qDtl.SQL.add('AND if(rfi.tfdcodigo=2,tmfcodigo=2, tmfcodigo=21) ');

      qDtl.SQL.add('GROUP BY  dtl.dtlchave ');
      qDtl.SQL.add('ORDER BY dtl.dtlchave  ');
      qDtl.Open;










      if vDinheiro > 0 then
        with pag.add do
        begin

          tagPagamento.Close;
          tagPagamento.Connection:=zcone;
          tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaDinheiro;
          tagPagamento.Open;

          tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));


          if vlValorDiferenca <> 0 then
          begin
            vPag := vDinheiro + vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
          begin
            vPag := vDinheiro + vlTroco;

          end;
        end;

      if vChequeProprio > 0 then
        with pag.add do
        begin
          tagPagamento.Close;
          tagPagamento.Connection:=zcone;
          tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaChequeProprio;
          tagPagamento.Open;

          tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));


          if vlValorDiferenca <> 0 then
          begin
            vPag := vChequeProprio + vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vChequeProprio;
        end;

      if vChequeTerceiros > 0 then
        with pag.add do
        begin
          tagPagamento.Close;
          tagPagamento.Connection:=zcone;
          tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaChequeTerceiros;
          tagPagamento.Open;

          tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));

          if tagPagamento.FieldByName('mdatagpagamento').AsInteger=99 then
          begin
           xPag:=tagPagamento.FieldByName('mdadescrpagamento').AsString;
          end;



          if vlValorDiferenca <> 0 then
          begin
            vPag := vChequeTerceiros; // + vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vChequeTerceiros + vlTroco;
        end;

      if vConvenio > 0 then
        with pag.add do
        begin
          tagPagamento.Close;
          tagPagamento.Connection:=zcone;
          tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaConvenio;
          tagPagamento.Open;

          tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));

          if tagPagamento.FieldByName('mdatagpagamento').AsInteger=99 then
          begin
           xPag:=tagPagamento.FieldByName('mdadescrpagamento').AsString;
          end;


          if vlValorDiferenca <> 0 then
          begin
            vPag := vConvenio + vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vConvenio;
        end;



      if vVale > 0 then
        with pag.add do
        begin
          tagPagamento.Close;
          tagPagamento.Connection:=zcone;
          tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaVale;
          tagPagamento.Open;

          tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));


          if tagPagamento.FieldByName('mdatagpagamento').AsInteger=99 then
          begin
           xPag:=tagPagamento.FieldByName('mdadescrpagamento').AsString;
          end;

          if vlValorDiferenca <> 0 then
          begin
            vPag := vVale + vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vVale;
        end;

      if vDoacao > 0 then
        with pag.add do
        begin
          tagPagamento.Close;
          tagPagamento.Connection:=zcone;
          tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaDoacao;
          tagPagamento.Open;

          tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));

          if tagPagamento.FieldByName('mdatagpagamento').AsInteger=99 then
          begin
           xPag:=tagPagamento.FieldByName('mdadescrpagamento').AsString;
          end;

          if vlValorDiferenca <> 0 then
          begin
            vPag := vDoacao + vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vDoacao;
        end;

      if vOnline > 0 then
        with pag.add do
        begin
          tagPagamento.Close;
          tagPagamento.Connection:=zcone;
          tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaOnLine;
          tagPagamento.Open;

          tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));

          if tagPagamento.FieldByName('mdatagpagamento').AsInteger=99 then
          begin
           xPag:=tagPagamento.FieldByName('mdadescrpagamento').AsString;
          end;

          if vlValorDiferenca <> 0 then
          begin
            vPag := vOnline + vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vOnline;
        end;


      if vCredito > 0 then
        with pag.add do
        begin
          tagPagamento.Close;
          tagPagamento.Connection:=zcone;
          tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaCredito;
          tagPagamento.Open;

          tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));

          if tagPagamento.FieldByName('mdatagpagamento').AsInteger=99 then
          begin
           xPag:=tagPagamento.FieldByName('mdadescrpagamento').AsString;
          end;

          if vlValorDiferenca <> 0 then
          begin
            vPag := vCredito + vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vCredito;
        end;

      if vTrocaDevolucao > 0 then
        with pag.add do
        begin
          tagPagamento.Close;
          tagPagamento.Connection:=zcone;
          tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaTrocaDevolucao;
          tagPagamento.Open;

          tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));

          if tagPagamento.FieldByName('mdatagpagamento').AsInteger=99 then
          begin
           xPag:=tagPagamento.FieldByName('mdadescrpagamento').AsString;
          end;


          if vlValorDiferenca <> 0 then
          begin
            vPag := vTrocaDevolucao + vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vTrocaDevolucao;

        end;


      // detalhe de dados do cartão e pix


      qDtl.FIRST;
      while not qDtl.Eof do
      begin


        dtl.close;
        dtl.Connection := zcone;
        dtl.ParamByName('ltechave').AsString:=qDtl.FieldByName('ltechave').AsString;
        dtl.ParamByName('dtlchave').AsString:=qDtl.FieldByName('dtlchave').AsString;
        dtl.Open;

        dtl.First;

        while not dtl.eof do
        begin

          if (dtl.FieldByName('mdacodigo').AsInteger=mdaCartaoDebito) then
          begin

            rdc.Close;
            rdc.Connection := zcone;
            rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
            rdc.Open;


            if rdc.IsEmpty then
            begin
              rcddtl.close;
              rcddtl.Connection := zcone;
              rcddtl.ParamByName('rdcchave').AsInteger:=-1;
              rcddtl.open;

              adc.close;
              adc.Connection := zcone;
              adc.open;
              rcddtl.Append;

              rcddtlrdcvalor.AsCurrency:=dtl.FieldByName('dtlvalor').AsCurrency;
              rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;
              rcddtlrdcvalorope.asFloat:=dtl.FieldByName('dtlvalor').AsCurrency;
              rcddtlrdcsituacao.asInteger:=1;
              rcddtlrdcdata.asDatetime:=date();
              rcddtladccodigo.asInteger:=adc.FieldByName('adccodigo').AsInteger;
              rcddtlrdcparcelas.asInteger:=1;
              rcddtltescodigo.asInteger:=0;
              rcddtlrdcobs.asString:='';
              rcddtlbdccodigo.asInteger:=1;
              rcddtlrdccomprovante1via.asString:='';
              rcddtlrdccomprovante2via.asString:='';
              rcddtlrdcconciliado.asInteger:=0;
              rcddtlrdctaxa.asFloat:= 0;
              rcddtlrdcvalordesconto.asFloat:=0;
              rcddtldtlchave.asInteger:=dtl.FieldByName('dtlchave').AsInteger;
              rcddtl.Post;

              ltr.close;
              ltr.Connection := zcone;
              ltr.open;

              ltr.Append;
              ltrrdcchave.AsInteger:=rcddtlrdcchave.AsInteger;
              ltrdtlchave.AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
              ltrrdcnrauto.AsString:=dtl.FieldByName('rdcnrauto').AsString;
              ltr.Post;



              rdc.Close;
              rdc.Connection := zcone;
              rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
              rdc.Open;


            end
            else
            begin

              rcddtl.close;
              rcddtl.Connection := zcone;
              rcddtl.ParamByName('rdcchave').AsInteger:=rdc.FieldByName('rdcchave').AsInteger;
              rcddtl.open;


              if dtl.FieldByName('rdcnrauto').AsString<>'' then
              begin
                rcddtl.Edit;
                rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;

                if (pos('{', rcddtl.FieldByName('rdcnrauto').AsString)>0) then
                begin
                  rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;
                end;
                rcddtl.Post;
              end;

            end;

            tagPagamento.Close;
            tagPagamento.Connection:=zcone;
            tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaCartaoDebito;
            tagPagamento.Open;


            if (vCartaoDebito > 0) and (rdc.RecordCount>0) {and (mesoricodigo.AsInteger<>8)} then
            begin

              with pag.add do
              begin

                tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));

                if tagPagamento.FieldByName('mdatagpagamento').AsInteger=99 then
                begin
                 xPag:=tagPagamento.FieldByName('mdadescrpagamento').AsString;
                end;

               // vPag := rdc.FieldByName('rdcvalor').AsCurrency;
                vPag := dtl.FieldByName('dtlvalor').AsCurrency;

                if (rdc.FieldByName('adccodigo').AsString<>'') and
                   (rdc.FieldByName('adccodigo').AsString<>'0') and
                   (pos('{',rdc.FieldByName('rdcnrauto').AsString)=0) and
                   (rdc.FieldByName('rdcnrauto').AsString<>'') and
                   (rdc.RecordCount >0) then
                begin
                  ide.indPres:= pcPresencial;// KUSKAO
                  Transp.modFrete := mfSemFrete;

                  with infIntermed do
                  begin
                   infIntermed.CNPJ:='';
                   infIntermed.idCadIntTran:='';
                  end;

                  infAdic.infCpl:='';

                  tpIntegra:=tiPagIntegrado;

                  CNPJ:= SoNumeros(rdc.FieldByName('etddoc1').AsString);
                  cAut:=rdc.FieldByName('rdcnrauto').AsString;

                  CNPJReceb:=SoNumeros(cfgetddoc1.AsString);
                  idTermPag:=acesso.Terminal.ToString;


                  case rdc.FieldByName('bdccodigo').AsInteger of
                    1:TBand:= bcVisa;
                    2:TBand:= bcMasterCard;
                    3:TBand:= bcAmericanExpress;
                    4:TBand:= bcSorocred;
                    5:TBand:= bcDinersClub;
                    6:TBand:= bcElo;
                    7:TBand:= bcHipercard;
                    8:TBand:= bcAura;
                    9:TBand:= bcCabal;
                    10:TBand:= bcAlelo;
                    11:TBand:= bcBanesCard;
                    12:TBand:= bcCalCard;
                    13:TBand:= bcCredz;
                    14:TBand:= bcDiscover;
                    15:TBand:= bcGoodCard;
                    16:TBand:= bcGreenCard;
                    17:TBand:= bcHiper;
                    18:TBand:= bcJcB;
                    19:TBand:= bcMais;
                    20:TBand:= bcMaxVan;
                    21:TBand:= bcPolicard;
                    22:TBand:= bcRedeCompras;
                    23:TBand:= bcSodexo;
                    24:TBand:= bcValeCard;
                    25:TBand:= bcVerocheque;
                    26:TBand:= bcVR;
                    27:TBand:= bcTicket;
                 10014:TBand:= 	bcDiscover;
                 20001:TBand:= 	bcMasterCard;
                 20002:TBand:= 	bcVisa;
                 20137:TBand:= 	bcMasterCard;
                    99:TBand:= bcOutros;
                  end;
                end
                else
                begin
                  tpIntegra:=tiPagNaoIntegrado;

                end;

              end;
            end
            else
            begin

              with pag.add do
              begin
                vPag := dtl.FieldByName('dtlvalor').AsCurrency;
                tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));
                tpIntegra:=tiPagNaoIntegrado;
              end;
            end;

          end;

          if (dtl.FieldByName('mdacodigo').AsInteger=mdaCartaoCredito) then
          begin

            rdc.Close;
            rdc.Connection := zcone;
            rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
            rdc.Open;

            if rdc.IsEmpty then
            begin
              rcddtl.close;
              rcddtl.Connection := zcone;
              rcddtl.ParamByName('rdcchave').AsInteger:=-1;
              rcddtl.open;

              adc.close;
              adc.Connection := zcone;
              adc.open;
              rcddtl.Append;

              rcddtlrdcvalor.AsCurrency:=dtl.FieldByName('dtlvalor').AsCurrency;
              rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;
              rcddtlrdcvalorope.asFloat:=dtl.FieldByName('dtlvalor').AsCurrency;
              rcddtlrdcsituacao.asInteger:=1;
              rcddtlrdcdata.asDatetime:=date();
              rcddtladccodigo.asInteger:=adc.FieldByName('adccodigo').AsInteger;
              rcddtlrdcparcelas.asInteger:=1;
              rcddtltescodigo.asInteger:=0;
              rcddtlrdcobs.asString:='';
              rcddtlbdccodigo.asInteger:=1;
              rcddtlrdccomprovante1via.asString:='';
              rcddtlrdccomprovante2via.asString:='';
              rcddtlrdcconciliado.asInteger:=0;
              rcddtlrdctaxa.asFloat:= 0;
              rcddtlrdcvalordesconto.asFloat:=0;
              rcddtldtlchave.asInteger:=dtl.FieldByName('dtlchave').AsInteger;
              rcddtl.Post;

              ltr.close;
              ltr.Connection := zcone;
              ltr.open;

              ltr.Append;
              ltrrdcchave.AsInteger:=rcddtlrdcchave.AsInteger;
              ltrdtlchave.AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
              ltrrdcnrauto.AsString:=dtl.FieldByName('rdcnrauto').AsString;
              ltr.Post;



              rdc.Close;
              rdc.Connection := zcone;
              rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
              rdc.Open;


            end
            else
            begin

              rcddtl.close;
              rcddtl.Connection := zcone;
              rcddtl.ParamByName('rdcchave').AsInteger:=rdc.FieldByName('rdcchave').AsInteger;
              rcddtl.open;


              if dtl.FieldByName('rdcnrauto').AsString<>'' then
              begin
                rcddtl.Edit;
                rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;

                if (pos('{', rcddtl.FieldByName('rdcnrauto').AsString)>0) then
                begin
                  rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;
                end;
                rcddtl.Post;
              end;

            end;

            tagPagamento.Close;
            tagPagamento.Connection:=zcone;
            tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaCartaoCredito;
            tagPagamento.Open;

            if (vCartaoCredito > 0) and (rdc.RecordCount>0) { and (mesoricodigo.AsInteger<>8)} then
            begin

              with pag.add do
              begin

                tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));

                if tagPagamento.FieldByName('mdatagpagamento').AsInteger=99 then
                begin
                 xPag:=tagPagamento.FieldByName('mdadescrpagamento').AsString;
                end;

               // vPag := rdc.FieldByName('rdcvalor').AsCurrency;
                vPag := dtl.FieldByName('dtlvalor').AsCurrency;
                if (rdc.FieldByName('adccodigo').AsString<>'') and
                   (rdc.FieldByName('adccodigo').AsString<>'0') and
                   (pos('{',rdc.FieldByName('rdcnrauto').AsString)=0) and
                   (rdc.FieldByName('rdcnrauto').AsString<>'') and
                   (rdc.RecordCount >0)  then
                begin
                  ide.indPres:= pcPresencial;// KUSKAO
                  Transp.modFrete := mfSemFrete;

                  with infIntermed do
                  begin
                   infIntermed.CNPJ:='';
                   infIntermed.idCadIntTran:='';
                  end;

                  infAdic.infCpl:='';



                  tpIntegra:=tiPagIntegrado;
                  CNPJ:= SoNumeros(rdc.FieldByName('etddoc1').AsString);

                  CNPJReceb:=SoNumeros(cfgetddoc1.AsString);
                  idTermPag:=acesso.Terminal.ToString;

                  case rdc.FieldByName('bdccodigo').AsInteger of
                    1:TBand:= bcVisa;
                    2:TBand:= bcMasterCard;
                    3:TBand:= bcAmericanExpress;
                    4:TBand:= bcSorocred;
                    5:TBand:= bcDinersClub;
                    6:TBand:= bcElo;
                    7:TBand:= bcHipercard;
                    8:TBand:= bcAura;
                    9:TBand:= bcCabal;
                    10:TBand:= bcAlelo;
                    11:TBand:= bcBanesCard;
                    12:TBand:= bcCalCard;
                    13:TBand:= bcCredz;
                    14:TBand:= bcDiscover;
                    15:TBand:= bcGoodCard;
                    16:TBand:= bcGreenCard;
                    17:TBand:= bcHiper;
                    18:TBand:= bcJcB;
                    19:TBand:= bcMais;
                    20:TBand:= bcMaxVan;
                    21:TBand:= bcPolicard;
                    22:TBand:= bcRedeCompras;
                    23:TBand:= bcSodexo;
                    24:TBand:= bcValeCard;
                    25:TBand:= bcVerocheque;
                    26:TBand:= bcVR;
                    27:TBand:= bcTicket;
                 10014:TBand:= 	bcDiscover;
                 20001:TBand:= 	bcMasterCard;
                 20002:TBand:= 	bcVisa;
                 20137:TBand:= 	bcMasterCard;

                    99:TBand:= bcOutros;
                  end;
                  cAut:=rdc.FieldByName('rdcnrauto').AsString;
                end
                else
                begin
                  tpIntegra:=tiPagNaoIntegrado;
                end;

              end;
            end
            else
            begin
              with pag.add do
              begin
                vPag := dtl.FieldByName('dtlvalor').AsCurrency;
                tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));
                tpIntegra:=tiPagNaoIntegrado;
              end;
            end;

          end;

          if (dtl.FieldByName('mdacodigo').AsInteger=mdaPIX) then
          begin

            rdc.Close;
            rdc.Connection := zcone;
            rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
            rdc.Open;

            if rdc.IsEmpty then
            begin
              rcddtl.close;
              rcddtl.Connection := zcone;
              rcddtl.ParamByName('rdcchave').AsInteger:=-1;
              rcddtl.open;

              adc.close;
              adc.Connection := zcone;
              adc.open;
              rcddtl.Append;

              rcddtlrdcvalor.AsCurrency:=dtl.FieldByName('dtlvalor').AsCurrency;
              rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;
              rcddtlrdcvalorope.asFloat:=dtl.FieldByName('dtlvalor').AsCurrency;
              rcddtlrdcsituacao.asInteger:=1;
              rcddtlrdcdata.asDatetime:=date();
              rcddtladccodigo.asInteger:=adc.FieldByName('adccodigo').AsInteger;
              rcddtlrdcparcelas.asInteger:=1;
              rcddtltescodigo.asInteger:=0;
              rcddtlrdcobs.asString:='';
              rcddtlbdccodigo.asInteger:=1;
              rcddtlrdccomprovante1via.asString:='';
              rcddtlrdccomprovante2via.asString:='';
              rcddtlrdcconciliado.asInteger:=0;
              rcddtlrdctaxa.asFloat:= 0;
              rcddtlrdcvalordesconto.asFloat:=0;
              rcddtldtlchave.asInteger:=dtl.FieldByName('dtlchave').AsInteger;
              rcddtl.Post;

              ltr.close;
              ltr.Connection := zcone;
              ltr.open;

              ltr.Append;
              ltrrdcchave.AsInteger:=rcddtlrdcchave.AsInteger;
              ltrdtlchave.AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
              ltrrdcnrauto.AsString:=dtl.FieldByName('rdcnrauto').AsString;
              ltr.Post;

              rdc.Close;
              rdc.Connection := zcone;
              rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
              rdc.Open;


            end
            else
            begin

              rcddtl.close;
              rcddtl.Connection := zcone;
              rcddtl.ParamByName('rdcchave').AsInteger:=rdc.FieldByName('rdcchave').AsInteger;
              rcddtl.open;


              if dtl.FieldByName('rdcnrauto').AsString<>'' then
              begin
                rcddtl.Edit;
                rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;

                if (pos('{', rcddtl.FieldByName('rdcnrauto').AsString)>0) then
                begin
                  rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;
                end;
                rcddtl.Post;
              end;
            end;


            tagPagamento.Close;
            tagPagamento.Connection:=zcone;
            tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaPIX;
            tagPagamento.Open;

            if (vPIX > 0) and (rdc.RecordCount>0) {and (mesoricodigo.AsInteger<>8)} then
            begin
              with pag.add do
              begin

                tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));

                if tagPagamento.FieldByName('mdatagpagamento').AsInteger=99 then
                begin
                 xPag:=tagPagamento.FieldByName('mdadescrpagamento').AsString;
                end;

                // vPag := rdc.FieldByName('rdcvalor').AsCurrency;
                vPag := dtl.FieldByName('dtlvalor').AsCurrency;

                if (rdc.FieldByName('adccodigo').AsString<>'') and
                   (rdc.FieldByName('adccodigo').AsString<>'0') and
                   (pos('{',rdc.FieldByName('rdcnrauto').AsString)=0) and
                   (rdc.FieldByName('rdcnrauto').AsString<>'') and
                   (rdc.RecordCount >0)  then
                begin
                  ide.indPres:= pcPresencial;// KUSKAO
                  Transp.modFrete := mfSemFrete;

                  with infIntermed do
                  begin
                   infIntermed.CNPJ:='';
                   infIntermed.idCadIntTran:='';
                  end;

                  infAdic.infCpl:='';


                  tpIntegra:=tiPagIntegrado;


                  ctapix.Close;
                  ctapix.Connection:=zcone;
                  ctapix.ParamByName('ctacodigo').AsInteger:=cfgcfgctacodigopix.AsInteger;
                  ctapix.Open;

                  if ctapix.FieldByName('ctacnpjbanco').AsString<>'' then
                    CNPJ:= SoNumeros(ctapix.FieldByName('ctacnpjbanco').AsString);


                  CNPJReceb:=SoNumeros(cfgetddoc1.AsString);
                  idTermPag:=acesso.Terminal.ToString;

                 { case rdc.FieldByName('bdccodigo').AsInteger of
                    1:TBand:= bcVisa;
                    2:TBand:= bcMasterCard;
                    3:TBand:= bcAmericanExpress;
                    4:TBand:= bcSorocred;
                    5:TBand:= bcDinersClub;
                    6:TBand:= bcElo;
                    7:TBand:= bcHipercard;
                    8:TBand:= bcAura;
                    9:TBand:= bcCabal;
                    10:TBand:= bcAlelo;
                    11:TBand:= bcBanesCard;
                    12:TBand:= bcCalCard;
                    13:TBand:= bcCredz;
                    14:TBand:= bcDiscover;
                    15:TBand:= bcGoodCard;
                    16:TBand:= bcGreenCard;
                    17:TBand:= bcHiper;
                    18:TBand:= bcJcB;
                    19:TBand:= bcMais;
                    20:TBand:= bcMaxVan;
                    21:TBand:= bcPolicard;
                    22:TBand:= bcRedeCompras;
                    23:TBand:= bcSodexo;
                    24:TBand:= bcValeCard;
                    25:TBand:= bcVerocheque;
                    26:TBand:= bcVR;
                    27:TBand:= bcTicket;
                 10014:TBand:= 	bcDiscover;
                 20001:TBand:= 	bcMasterCard;
                 20002:TBand:= 	bcVisa;
                 20137:TBand:= 	bcMasterCard;

                    99:TBand:= bcOutros;
                  end;}
                  cAut:=rdc.FieldByName('rdcnrauto').AsString;
                end
                else
                begin
                  tpIntegra:=tiPagNaoIntegrado;
                end;

              end;

            end
            else
            begin
              with pag.add do
              begin
                vPag := dtl.FieldByName('dtlvalor').AsCurrency;
                tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));
                tpIntegra:=tiPagNaoIntegrado;
              end;
            end;

          end;

          if (dtl.FieldByName('mdacodigo').AsInteger=mdaVoucher) then
          begin

            rdc.Close;
            rdc.Connection := zcone;
            rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
            rdc.Open;

            if rdc.IsEmpty then
            begin
              rcddtl.close;
              rcddtl.Connection := zcone;
              rcddtl.ParamByName('rdcchave').AsInteger:=-1;
              rcddtl.open;

              adc.close;
              adc.Connection := zcone;
              adc.open;

              rcddtl.Append;
              rcddtlrdcvalor.AsCurrency:=dtl.FieldByName('dtlvalor').AsCurrency;
              rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;
              rcddtlrdcvalorope.asFloat:=dtl.FieldByName('dtlvalor').AsCurrency;
              rcddtlrdcsituacao.asInteger:=1;
              rcddtlrdcdata.asDatetime:=date();
              rcddtladccodigo.asInteger:=adc.FieldByName('adccodigo').AsInteger;
              rcddtlrdcparcelas.asInteger:=1;
              rcddtltescodigo.asInteger:=0;
              rcddtlrdcobs.asString:='';
              rcddtlbdccodigo.asInteger:=1;
              rcddtlrdccomprovante1via.asString:='';
              rcddtlrdccomprovante2via.asString:='';
              rcddtlrdcconciliado.asInteger:=0;
              rcddtlrdctaxa.asFloat:= 0;
              rcddtlrdcvalordesconto.asFloat:=0;
              rcddtldtlchave.asInteger:=dtl.FieldByName('dtlchave').AsInteger;
              rcddtl.Post;

              ltr.close;
              ltr.Connection := zcone;
              ltr.open;

              ltr.Append;
              ltrrdcchave.AsInteger:=rcddtlrdcchave.AsInteger;
              ltrdtlchave.AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
              ltrrdcnrauto.AsString:=dtl.FieldByName('rdcnrauto').AsString;
              ltr.Post;



              rdc.Close;
              rdc.Connection := zcone;
              rdc.ParamByName('dtlchave').AsInteger:=dtl.FieldByName('dtlchave').AsInteger;
              rdc.Open;


            end
            else
            begin
              rcddtl.close;
              rcddtl.Connection := zcone;
              rcddtl.ParamByName('rdcchave').AsInteger:=rdc.FieldByName('rdcchave').AsInteger;
              rcddtl.open;


              if dtl.FieldByName('rdcnrauto').AsString<>'' then
              begin
                rcddtl.Edit;
                rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;

                if (pos('{', rcddtl.FieldByName('rdcnrauto').AsString)>0) then
                begin
                  rcddtlrdcnrauto.asString:=dtl.FieldByName('rdcnrauto').AsString;
                end;
                rcddtl.Post;
              end;

            end;

            tagPagamento.Close;
            tagPagamento.Connection:=zcone;
            tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaVoucher;
            tagPagamento.Open;

            if (vVoucher > 0) and (rdc.RecordCount>0) {and (mesoricodigo.AsInteger<>8)} then
            begin
              with pag.add do
              begin


                tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));

                if (tagPagamento.FieldByName('mdatagpagamento').AsInteger=99) or
                   (tagPagamento.FieldByName('mdatagpagamento').AsInteger=0) then
                begin
                 xPag:=tagPagamento.FieldByName('mdadescrpagamento').AsString;
                end;

               // vPag := rdc.FieldByName('rdcvalor').AsCurrency;
                vPag := dtl.FieldByName('dtlvalor').AsCurrency;

                if (rdc.FieldByName('adccodigo').AsString<>'') and
                   (rdc.FieldByName('adccodigo').AsString<>'0') and
                   (pos('{',rdc.FieldByName('rdcnrauto').AsString)=0)  and
                   (rdc.FieldByName('rdcnrauto').AsString<>'') and
                   (rdc.RecordCount >0)  then
                begin

                  ide.indPres:= pcPresencial;// KUSKAO
                  Transp.modFrete := mfSemFrete;

                  with infIntermed do
                  begin
                   infIntermed.CNPJ:='';
                   infIntermed.idCadIntTran:='';
                  end;

                  infAdic.infCpl:='';



                  tpIntegra:=tiPagIntegrado;
                  CNPJ:= SoNumeros(rdc.FieldByName('etddoc1').AsString);
                  CNPJReceb:=SoNumeros(cfgetddoc1.AsString);
                  idTermPag:=acesso.Terminal.ToString;
                  case rdc.FieldByName('bdccodigo').AsInteger of
                    1:TBand:= bcVisa;
                    2:TBand:= bcMasterCard;
                    3:TBand:= bcAmericanExpress;
                    4:TBand:= bcSorocred;
                    5:TBand:= bcDinersClub;
                    6:TBand:= bcElo;
                    7:TBand:= bcHipercard;
                    8:TBand:= bcAura;
                    9:TBand:= bcCabal;
                    10:TBand:= bcAlelo;
                    11:TBand:= bcBanesCard;
                    12:TBand:= bcCalCard;
                    13:TBand:= bcCredz;
                    14:TBand:= bcDiscover;
                    15:TBand:= bcGoodCard;
                    16:TBand:= bcGreenCard;
                    17:TBand:= bcHiper;
                    18:TBand:= bcJcB;
                    19:TBand:= bcMais;
                    20:TBand:= bcMaxVan;
                    21:TBand:= bcPolicard;
                    22:TBand:= bcRedeCompras;
                    23:TBand:= bcSodexo;
                    24:TBand:= bcValeCard;
                    25:TBand:= bcVerocheque;
                    26:TBand:= bcVR;
                    27:TBand:= bcTicket;
                 10014:TBand:= 	bcDiscover;
                 20001:TBand:= 	bcMasterCard;
                 20002:TBand:= 	bcVisa;
                 20137:TBand:= 	bcMasterCard;

                    99:TBand:= bcOutros;
                  end;
                  cAut:=rdc.FieldByName('rdcnrauto').AsString;
                end
                else
                begin
                  tpIntegra:=tiPagNaoIntegrado;
                end;

              end;
            end
            else
            begin
              with pag.add do
              begin
                vPag := dtl.FieldByName('dtlvalor').AsCurrency;
                tPag := StrToFormaPagamento(vlCodigoTagOK,formatfloat('00', tagPagamento.FieldByName('mdatagpagamento').AsFloat));
                tpIntegra:=tiPagNaoIntegrado;
              end;
            end;

          end;

          dtl.next;
        end;
        qdtl.Next;
      end;

      {
      if pag.Count = 0 then
      begin

        with pag.add do
        begin

          tPag := TpcnFormaPagamento(17);

          tagPagamento.Close;
          tagPagamento.Connection:=zcone;
          tagPagamento.ParamByName('mdacodigo').AsInteger:=mdaDinheiro;
          tagPagamento.Open;

          if (tagPagamento.FieldByName('mdatagpagamento').AsInteger=17)  then
          begin
           xPag:=tagPagamento.FieldByName('mdadescrpagamento').AsString;
          end
          else if (tagPagamento.FieldByName('mdatagpagamento').AsInteger=0)  then
          begin
            xPag:='Outros';
          end;

          if vlValorDiferenca <> 0 then
          begin
            vPag := vlValorDiferenca;
            vlValorDiferenca := 0;
          end
          else
            vPag := vTrocaDevolucao;

        end;

      end;
      }

      if (self.mesmesnumero.AsString <> '') and (self.mesmesnumero.AsString <> '0') then
      begin
        vNumeroNFe := self.mesmesnumero.AsInteger
      end
      else
      begin

        NumeroNFCe.ExecSQL;
        vNumeroNFe := NumeroNFCe.Fields[0].AsInteger;
      end;

      ide.nNF := vNumeroNFe;


      if (Copy(vlNFCeProtocolo, 1, 10) <> '0000000000') and (Length(trim(vlNFCeProtocolo)) > 0) then
      begin

        ide.cNF := StrToInt(FormatFloat('00000000', StrToInt(Copy(vlNFCeChave, 36, 8))));

        if Copy(vlNFCeChave, 35, 1) = '9' then
        begin

          ACBrNFeNFCe.Configuracoes.Geral.FormaEmissao := teOffLine;
          ide.tpEmis := teOffLine;
          ide.dhCont := mesmesdatanfe.AsDateTime; // recrecdthoraentrada.AsFloat;
          ide.xJust := 'Falha de comunicação com servidores da SEFAZ.';

        end
        else
        begin
          ACBrNFeNFCe.Configuracoes.Geral.FormaEmissao := teNormal;
          ide.tpEmis := teNormal;
        end;

      end
      else
      begin
        if (mesmescodigonota.AsString = '') or (mesmescodigonota.AsString = '0') then
        begin
          ide.cNF := GerarCodigoDFe(vNumeroNFe);
          mes.Edit;
          mesmescodigonota.AsInteger := ide.cNF;
          mes.Post;
        end
        else
        begin
          ide.cNF := mesmescodigonota.AsInteger;
        end;

      end;

      consulta.Close;
      consulta.SQL.Text := 'UPDATE mes SET ';
      consulta.SQL.add('mesnumero = ' + IntToStr(vNumeroNFe) + ', ');
      consulta.SQL.add('tdfcodigo = ''65'', ');
      consulta.SQL.add('refcodigo = 9, ');
      consulta.SQL.add('temcodigo = 4 ');
      consulta.SQL.add('WHERE meschave = ' + vMesChave);
      consulta.ExecSQL;

      info.Lines.add('Iniciar comunicação: ' + datetimetostr(now));

      if (Copy(mesmesprotocolo.AsString, 1, 15) <> '000000000000000') and (mesmesprotocolo.AsString <> '') then
      begin

        AssinaNota(ACBrNFeNFCe, vMesChave, vFlaCodigo);

        vpNomeArquivoNFCe := mesmeschavenfe.AsString;

        vpNomeArquivoNFCe := vpPastaPrincipal + vpSubPastaDoc + '\' + formatdatetime('yyyymm', mesmesdatanfe.AsDateTime) + '\' + vpNomeArquivoNFCe +
          '-nfe.xml';

        ConsultaNFCe(mesmeschave.AsString, vpNomeArquivoNFCe, Acesso.Filial.ToString);

      end
      else
      begin

        if AssinaNota(ACBrNFeNFCe, vMesChave, vFlaCodigo) then
        begin
          info.Lines.add('Nota Assinada: ' + datetimetostr(now));
          Result := True;

        end;
      end;

    End;

    Result := True;

  except
    On E: Exception Do
    Begin
    if pos('gourmetstone', application.ExeName)=0 then
      showmessage('Erro: '+e.Message);
    Result := False;
    End;
  end;
End;







function Tfnfce.AssinaNota(vACBrNFe: TACBrNFe; vMesChave: string; vFlaCodigo: string = '1'): Boolean;
var
  vErro: String;
  vMensagemErro: String;
begin
  Result := True;

  try

    // Assina e salva arquivo no Path definido
    vACBrNFe.NotasFiscais.Assinar;
  Except
    On E: Exception Do
    Begin

        if cfgcfgmodonfe.AsInteger = 2 then
        begin
          if pos('gourmetstone', application.ExeName)=0 then
            ShowMessage('Linha 5882 '+E.Message);

        end;

      vErro := '';
      If E.Message <> '' Then
        vErro := E.Message;

      vMensagemErro := 'Erro ao Assinar Digitalmente a NFC-e.';
      vMensagemErro := vMensagemErro + sLineBreak + 'Mensagem: ' + vErro;

      SalvarLogErro(vMensagemErro, E.StackTrace);

      vMensagemErro := vMensagemErro + sLineBreak + sLineBreak + sLineBreak + 'Utilize a opção "Imprimir com NFC-e".';

      // application.MessageBox(PChar(vMensagemErro), 'Erro Geração NF-e', MB_OK + MB_ICONERROR);

      Result := False;
    End;
  end;
end;

function Tfnfce.ValidaNota(vACBrNFe: TACBrNFe; vMesChave: string; vFlaCodigo: string = '1'): Boolean;
var
  vlNumeroNFe: string;
  vErro: string;
  vMensagemErro: String;
begin
  Result := True;

  try

    // Valida Arquivo
    vACBrNFe.NotasFiscais.Validar;

  Except
    On E: Exception Do
    Begin
        if cfgcfgmodonfe.AsInteger = 2 then
        begin
          if pos('gourmetstone', application.ExeName)=0 then
          ShowMessage('Linha 5921 '+E.Message);
        end;

      vErro := '';

      If E.Message <> '' Then
        vErro := E.Message;

      vMensagemErro := 'Erro ao Validar a NFC-e.';
      vMensagemErro := vMensagemErro + sLineBreak + 'Mensagem: ' + vErro;

      SalvarLogErro(vMensagemErro, E.StackTrace);

      vMensagemErro := vMensagemErro + #13 + #13 + #13 + 'Utilize a opção "Imprimir com NFC-e".';

      // application.MessageBox(PChar(vMensagemErro), 'Erro Geração NF-e', MB_OK + MB_ICONERROR);

      Result := False;
    End;
  end;
end;

function Tfnfce.SalvaEmCoontigencia(vACBrNFe: TACBrNFe; vMesChave: string; vFlaCodigo: string = '1'): Boolean;
var
  vChaveNFE: string;
  vProtocoloNFe: string;
  vErro: string;
  vlArqNFCe: string;
  vData: double;
begin
  try
    vChaveNFE := copy(vACBrNFe.NotasFiscais.Items[0].NFe.infNFe.ID, 4, 44);

    vProtocoloNFe := '000000000000000 ' + DateToStr(vpDataAtual) + ' ' + TimeToStr(vpDataAtual);

    consulta.Close;
    consulta.SQL.Text := 'UPDATE mes SET ';
    consulta.SQL.add('mesdatanfe = ' + QuotedStr(ajustadata(DateToStr(vpDataAtual))) + ', ');
    consulta.SQL.add('mesregistro = ' + QuotedStr(ajustadata(DateToStr(vpDataAtual))) + ', ');
    consulta.SQL.add('tdfcodigo = ' + QuotedStr('65') + ', ');
    consulta.SQL.add('refcodigo = 9, ');
    consulta.SQL.add('mesprotocolo = ' + chr(39) + vProtocoloNFe + chr(39) + ', ');
    consulta.SQL.add('temcodigo = 50, ');
    consulta.SQL.add('meschavenfe = ' + QuotedStr(vChaveNFE) + ' WHERE ');
    consulta.SQL.add('meschave = ' + vMesChave + ' and flacodigo=' + vFlaCodigo);
    consulta.ExecSQL;

    mes.Close;
    mes.Params[0].AsString := vMesChave;
    mes.Params[1].AsString := vFlaCodigo;
    mes.Open;

    vACBrNFe.NotasFiscais.Clear;
    ACBrNFeNFCe.Configuracoes.Geral.VersaoQRCode := veqr200;

    if vChaveNFE <> '' then
    begin

      if mesmesdatanfe.AsFloat = 0 then
        vData := mesmesregistro.AsFloat
      else
        vData := mesmesdatanfe.AsFloat;

      vlArqNFCe := mesmeschavenfe.AsString;
      vlArqNFCe := vpPastaPrincipal + vpSubPastaDoc + '\' + formatdatetime('yyyymm', vData) + '\' + vlArqNFCe + '-nfe.xml';
    end;

    Result := True;
  Except
    On E: Exception Do
    Begin
        if cfgcfgmodonfe.AsInteger = 2 then
        begin
        if pos('gourmetstone', application.ExeName)=0 then
          ShowMessage('Linha 5994 '+E.Message);
        end;
      If E.Message = '' Then
        vErro := ''
      Else
        vErro := #13 + 'Erro: ' + E.Message;

      // application.MessageBox(PChar('Erro ao Validar a NFC-e.' + #13 + 'Mensagem: ' + vErro + #13 + #13 + #13 + 'Utilize a opção "Imprimir com NFC-e".'), 'Erro Geração NF-e',        MB_OK + MB_ICONERROR);
      Result := False;
      Exit;
    End;
  end;

end;

function Tfnfce.SalvaNormal(vACBrNFe: TACBrNFe; vMesChave: string; vFlaCodigo: string = '1'): Boolean;
var
  vChaveNFE: string;
  vProtocoloNFe: string;
  vCStat: Integer;
  vXMotivo: string;
  vErro: string;
  vlArqNFCe: String;
  vhrNFe: string;

  vChaveNFCe: string;
  VaaaammNFCe: string;
  vArqNFCe: string;
  vEmissaoNFCe: TDate;
  vlDataEmissao: TDate;

  vNovaChave: string;
  vlxmotivo: string;
  vlItem: string;

begin
  Try


    if vACBrNFe.Enviar(0, False, True, false) then
    begin

      vCStat := vACBrNFe.NotasFiscais.Items[0].NFe.procNFe.CStat;
      vXMotivo := vACBrNFe.NotasFiscais.Items[0].NFe.procNFe.xMotivo;

      vlxmotivo := vXMotivo;
      vNovaChave := trim(copy(vlxmotivo, pos('[', vlxmotivo) + 2, 44));

      // Se código de status = 100 - Autorizado o uso da NF-e.
      If vCStat = 100 Then
      Begin
        vChaveNFE := copy(vACBrNFe.NotasFiscais.Items[0].NFe.infNFe.ID, 4, 44);

        vProtocoloNFe := vACBrNFe.NotasFiscais.Items[0].NFe.procNFe.nProt;
        vhrNFe := TimeToStr(ACBrNFeNFCe.NotasFiscais.Items[0].NFe.ide.dEmi);
        copy(datetimetostr(ACBrNFeNFCe.NotasFiscais.Items[0].NFe.procNFe.DhRecbto), 1, 10);

        consulta.Close;
        consulta.SQL.Text := 'UPDATE mes SET ';
        consulta.SQL.add('tdfcodigo = ' + QuotedStr('65') + ', ');
        consulta.SQL.add('refcodigo = 9, ');
        // consulta.SQL.add('mesdatanfe = ' + QuotedStr(ajustadata(DateToStr(vpDataAtual))) + ', ');
        consulta.SQL.add('mesdatanfe = ' + QuotedStr(ajustadata((copy(DateToStr(vACBrNFe.NotasFiscais.Items[0].NFe.ide.dEmi), 1, 10)))) + ', ');
        consulta.SQL.add('mesregistro = ' + QuotedStr(ajustadata((copy(datetimetostr(vACBrNFe.NotasFiscais.Items[0].NFe.procNFe.DhRecbto), 1, 10))
          )) + ', ');
        consulta.SQL.add('mesprotocolo = ' + QuotedStr(vProtocoloNFe) + ', ');
        consulta.SQL.add('meshoranfe = ' + QuotedStr(vhrNFe) + ', ');
        consulta.SQL.add('temcodigo = 5, ');
        consulta.SQL.add('meschavenfe = ' + QuotedStr(vChaveNFE) + ' WHERE ');
        consulta.SQL.add('meschave = ' + vMesChave + ' and flacodigo=' + vFlaCodigo);
        consulta.ExecSQL;

        try
          SalvarArquivoCloud('NFCe', vACBrNFe.NotasFiscais.Items[0].NomeArq);
        except
        end;

        try
          vlArqNFCe := GeraNomeArqNFCe(vMesChave, vFlaCodigo);
        except
        end;

        vACBrNFe.NotasFiscais.Clear;
        ACBrNFeNFCe.Configuracoes.Geral.VersaoQRCode := veqr200;
        Result := True;
      end;
    End
    else
    begin
      vCStat := vACBrNFe.NotasFiscais.Items[0].NFe.procNFe.CStat;
      vXMotivo := vACBrNFe.NotasFiscais.Items[0].NFe.procNFe.xMotivo;

    end;
  Except
    On E: Exception Do
    Begin

      if pos('stone',lowercase( application.ExeName))>0  then
        exit;


      if trim(E.Message)<>'' then
      begin

        if pos('time out',lowercase(E.Message))>0 then
        begin
           sleep(2000);
           SalvaNormal(vACBrNFe, vMesChave, vFlaCodigo);
           exit;
        end;


      end;


      if (pos(lowercase('CPF do destinatario invalido'), lowercase(E.Message)) > 0)
      or (pos(lowercase('CNPJ do destinatario invalido'), lowercase(E.Message)) > 0)
      or (pos(lowercase('NFC-e de entrega a domicilio sem a identificacao do destinatario'), lowercase(E.Message)) > 0)
       then
      begin
         etddoc.close;
         etddoc.ParamByName('etdcodigo').AsString:=mesetdcodigo.AsString;
         etddoc.Open;

         etddoc.Edit;
         etddocetddoc1.AsString:=qqCPF;
         etddoc.Post;


        Exit

      end;


      if pos('erro não catalogado', lowercase(E.Message)) > 0 then
      begin

        vlItem := E.Message;
        vlItem := copy(E.Message, pos('[', E.Message) + 1, 20);
        vlItem := SoNumeros(vlItem);
        if pos('gourmetstone', application.ExeName)=0 then
          ShowMessage('A T E N Ç Ã O:' + #13 + #13 +uppercase('Sefaz fora do ar.') + #13 + 'Tente novamente mais tarde!');

        Exit

      end;

      if pos('Inativo ou Inoperante tente novamente', lowercase(E.Message)) > 0 then
      begin

        vlItem := E.Message;
        vlItem := copy(E.Message, pos('[', E.Message) + 1, 20);
        vlItem := SoNumeros(vlItem);
        if pos('gourmetstone', application.ExeName)=0 then
          ShowMessage('A T E N Ç Ã O:' + #13 + #13 + uppercase('Sefaz fora do ar.') + #13 + 'Tente novamente mais tarde!');

        Exit

      end;
      if (pos('TimeOut de Requisição', lowercase(E.Message)) > 0) or (pos('A conexão com o servidor foi redefinida', lowercase(E.Message)) > 0) then
      begin

        vlItem := E.Message;
        vlItem := copy(E.Message, pos('[', E.Message) + 1, 20);
        vlItem := SoNumeros(vlItem);

        if pos('gourmetstone', application.ExeName)=0 then
          ShowMessage('A T E N Ç Ã O: ERRO INFORMADO PELO SITE DO SEFAZ - MT' + #13 + #13 + 'Sefaz fora do ar.' + #13 + 'Tente novamente mais tarde!');

        Exit

      end;

      // Fran: 29-09-2023, foi copiado esta parte do fonte do mercato
      if pos('Rejeicao: Informado NCM inexistente', E.Message) > 0 then
      begin

        vlItem := copy(E.Message, pos('[', E.Message) + 1, 20);
        vlItem := SoNumeros(vlItem);
        if pos('gourmetstone', application.ExeName)=0 then
          ShowMessage('A T E N Ç Ã O: ERRO INFORMADO PELO SITE DO SEFAZ - MT' + #13 + #13 + 'O produto :' + #13 + #13 + vACBrNFe.NotasFiscais.Items[0].NFe.Det.Items[StrToInt(vlItem) - 1]
          .Prod.xProd + ' esta com o NCM inválido!' + #13 + #13 + 'Por favor, ajustar no cadastro de Produtos');

        Exit;
      end
      else if (pos('NCM) - Conteúdo inválido.', E.Message) > 0) then
      begin

        vlItem := copy(E.Message, pos('<', E.Message) + 1, 20);
        vlItem := SoNumeros(vlItem);

        if pos('gourmetstone', application.ExeName)=0 then
          ShowMessage('A T E N Ç Ã O: ERRO INFORMADO PELO SITE DO SEFAZ - MT' + #13 + #13 + 'O produto :' + #13 + #13 + vACBrNFe.NotasFiscais.Items[0].NFe.Det.Items[StrToInt(vlItem) - 1]
          .Prod.xProd + ' esta com o NCM inválido!' + #13 + #13 + 'Por favor, ajustar no cadastro de Produtos');

        Exit;

      end
      else if pos('(Código de Situação da Operação – Simples Nacional)', E.Message) > 0 then
      begin

        vlItem := copy(E.Message, pos('det nItem="', E.Message) + 1, 20);
        vlItem := SoNumeros(vlItem);
        if pos('gourmetstone', application.ExeName)=0 then
        ShowMessage('A T E N Ç Ã O: ERRO INFORMADO PELO SITE DO SEFAZ - MT' + #13 + #13 + 'O produto :' + #13 + #13 + vACBrNFe.NotasFiscais.Items[0].NFe.Det.Items[StrToInt(vlItem) - 1]
          .Prod.xProd + #13 + ' esta com o Código CST/CSOSN inválido!' + #13 + #13 + 'Por favor, ajustar no cadastro de Produtos');

        Exit;
      end
      else if pos('GTIN', E.Message) > 0 then
      begin

        vlItem := copy(E.Message, pos('[', E.Message) + 1, 20);
        vlItem := SoNumeros(vlItem);

        if pos('gourmetstone', application.ExeName)=0 then
        ShowMessage('A T E N Ç Ã O: ERRO INFORMADO PELO SITE DO SEFAZ - MT' + #13 + #13 + 'O produto :' + #13 + #13 + vACBrNFe.NotasFiscais.Items[0].NFe.Det.Items[StrToInt(vlItem) - 1]
          .Prod.xProd + #13 + ' esta com o Código CÓDIGO DE BARRA inválida!' + #13 + #13 + 'Por favor, ajustar no cadastro de Produtos');

        Exit;
      end;

      // Fran: encerramento da copiado bloco que foi copiado do mercato

      sleep(1000);

      ACBrNFeNFCe.Consultar;

      vCStat := vACBrNFe.NotasFiscais.Items[0].NFe.procNFe.CStat;
      vXMotivo := vACBrNFe.NotasFiscais.Items[0].NFe.procNFe.xMotivo;

      If (vCStat = 100) or (vCStat = 150) Then
      Begin
        vChaveNFE := copy(vACBrNFe.NotasFiscais.Items[0].NFe.infNFe.ID, 4, 44);

        vProtocoloNFe := vACBrNFe.NotasFiscais.Items[0].NFe.procNFe.nProt;
        vhrNFe := TimeToStr(ACBrNFeNFCe.NotasFiscais.Items[0].NFe.procNFe.DhRecbto);
        vpDataAtual := strtodate(copy(datetimetostr(ACBrNFeNFCe.NotasFiscais.Items[0].NFe.procNFe.DhRecbto), 1, 10));

        consulta.Close;
        consulta.SQL.Text := 'UPDATE mes SET ';
        consulta.SQL.add('tdfcodigo = ' + QuotedStr('65') + ', ');
        consulta.SQL.add('refcodigo = 9, ');
        // consulta.SQL.add('mesdatanfe = ' + QuotedStr(ajustadata(DateToStr(vpDataAtual))) + ', ');
        consulta.SQL.add('mesdatanfe = ' + QuotedStr(ajustadata((copy(DateToStr(vACBrNFe.NotasFiscais.Items[0].NFe.ide.dEmi), 1, 10)))) + ', ');
        consulta.SQL.add('mesregistro = ' + QuotedStr(ajustadata((copy(datetimetostr(vACBrNFe.NotasFiscais.Items[0].NFe.procNFe.DhRecbto), 1, 10))
          )) + ', ');
        consulta.SQL.add('mesprotocolo = ' + QuotedStr(vProtocoloNFe) + ', ');
        consulta.SQL.add('meshoranfe = ' + QuotedStr(vhrNFe) + ', ');
        consulta.SQL.add('temcodigo = 5, ');
        consulta.SQL.add('meschavenfe = ' + QuotedStr(vChaveNFE) + ' WHERE ');
        consulta.SQL.add('meschave = ' + vMesChave + ' and flacodigo=' + vFlaCodigo);
        consulta.ExecSQL;

        try
          vlArqNFCe := GeraNomeArqNFCe(vMesChave, vFlaCodigo);
        except
        end;

        vACBrNFe.NotasFiscais.Clear;
        ACBrNFeNFCe.Configuracoes.Geral.VersaoQRCode := veqr200;
        Result := True;

        Exit;


      end;

      vCStat := vACBrNFe.NotasFiscais.Items[0].NFe.procNFe.CStat;
      vXMotivo := vACBrNFe.NotasFiscais.Items[0].NFe.procNFe.xMotivo;

      vErro := #13 + E.Message;

      vNovaChave := vChaveNFE;
      trim(copy(vlxmotivo, pos('[', vlxmotivo) + 2, 44));

      vlxmotivo := vACBrNFe.WebServices.Enviar.RetornoWS;

      vlxmotivo := copy(vlxmotivo, pos('<chNFe>', vlxmotivo) + 7, 5000);

      vNovaChave := vChaveNFE;
      vNovaChave := trim(copy(vlxmotivo, 1, 44));

      vCStat := vACBrNFe.WebServices.Enviar.CStat;

      vlxmotivo := vErro;
      vlxmotivo := vACBrNFe.WebServices.Retorno.xMotivo;
      vNovaChave := trim(copy(vlxmotivo, pos('[', vlxmotivo) + 2, 44));

      if vCStat = 539 then // Denegada emissão pelo sefaz
      begin

        vEmissaoNFCe := mesmesemissao.AsDateTime;
        vChaveNFCe := GeraNomeArqNFCe(vMesChave);
        VaaaammNFCe := vpPastaPrincipal + 'arqnfces' + '\' + formatdatetime('yyyymm', vEmissaoNFCe);
        vArqNFCe := vChaveNFCe;

        if FileExists(vArqNFCe) then
        begin

          ACBrNFeNFCe.NotasFiscais.Clear;
          ACBrNFeNFCe.Configuracoes.Geral.VersaoQRCode := veqr200;

          ACBrNFeNFCe.NotasFiscais.LoadFromFile(vArqNFCe);

          if ACBrNFeNFCe.NotasFiscais.Count > 0 then
          begin

            vProtocoloNFe := ACBrNFeNFCe.NotasFiscais.Items[0].NFe.procNFe.nProt;
            vlDataEmissao := ACBrNFeNFCe.NotasFiscais.Items[0].NFe.ide.dEmi;
            try
              qconsulta.Close;
              qconsulta.SQL.Text := 'UPDATE mes SET ';
              qconsulta.SQL.add('tdfcodigo = ''65'', ');
              qconsulta.SQL.add('mesdatanfe = ''' + ajustadata(DateToStr(vlDataEmissao)) + ''', ');
              qconsulta.SQL.add('mesregistro = ''' + ajustadata(DateToStr(vlDataEmissao)) + ''', ');
              qconsulta.SQL.add('mesprotocolo = ''' + vProtocoloNFe + ''', ');
              qconsulta.SQL.add('temcodigo = 5, ');
              qconsulta.SQL.add('meschavenfe = ''' + vChaveNFCe + ''' ');
              qconsulta.SQL.add('WHERE meschave = ' + vMesChave);
              qconsulta.ExecSQL;
            except

            end;

          end;
        end;

      end
      else if (vCStat = 205) or (vCStat = 301) then // Denegada emissão pelo sefaz
      begin

        consulta.Close;
        consulta.SQL.Text := 'UPDATE mes SET ';
        consulta.SQL.add('tdfcodigo = ' + QuotedStr('65') + ', ');
        consulta.SQL.add('refcodigo = 9, ');
        consulta.SQL.add('mesdatanfe = ' + QuotedStr(ajustadata(DateToStr(vpDataAtual))) + ', ');
        consulta.SQL.add('mesregistro = ' + QuotedStr(ajustadata(DateToStr(vpDataAtual))) + ', ');
        consulta.SQL.add('mesprotocolo = ' + QuotedStr(vProtocoloNFe) + ', ');
        consulta.SQL.add('temcodigo = 7, ');
        consulta.SQL.add('meschavenfe = ' + QuotedStr(vChaveNFE) + ' WHERE ');
        consulta.SQL.add('meschave = ' + vMesChave + ' and flacodigo=' + vFlaCodigo);
        consulta.ExecSQL;

      end

      else if (vCStat = 0) or (vCStat = 999) then // Geralmente indica falha de comunicação com a SEFAZ
      begin

        entraemcontigencia(E.Message);
        sleep(500);
        vpNomeArquivoNFCe := fnfce.GeraNomeArqNFCe(vMesChave, vFlaCodigo);

        GeraNFCe(vMesChave, fnfce.vpFlacodigo);

        if SalvaEmCoontigencia(vACBrNFe, vMesChave) then
          Result := True
        else
          Result := False;
      end
      else
      begin
        SalvarLogErro('RETORNO GERADO PELA SEFAZ: ' + IntToStr(vCStat) + #13 + #13 + 'Erro envio da NFC-e.' + sLineBreak + E.Message, E.StackTrace);

      {  application.MessageBox(pchar('RETORNO GERADO PELA SEFAZ:' + #13 + #13 + 'Erro envio da NFC-e.' + #13 + 'Mensagem: ' + vErro + #13 + #13 + #13
          + 'Utilize a opção "Imprimir com NFC-e".'), 'Erro Envio NF-e', MB_OK + MB_ICONERROR);
        Result := False;}
      end;




    End;


  end;
end;

procedure Tfnfce.Setzcone(const Value: TUniConnection);
begin
  Fzcone := Value;
end;

procedure Tfnfce.entraemcontigencia(vStatSEFAZ: string);
var
  vlSituacao: Boolean;
begin
  vpWSNormal := False;
  vlSituacao := fnfce.Visible;

  if vlSituacao = False then
    fnfce.Show;

  if pos('Uma conexão com o servidor não pôde ser estabelecida', vStatSEFAZ) > 0 then
    vStatSEFAZ := '999 - ' + vStatSEFAZ;

  if rec.Active = False then
    rec.Open;

  if (rec.IsEmpty)  then
  begin
    rec.Append;
    recrecdthoraentrada.AsFloat := Now();
    recrecmotivo.AsString := trim(vStatSEFAZ);
    rec.post;
  end
  else
  begin
    rec.Edit;
    recrecdthoraentrada.AsFloat := Now();
    recrecmotivo.AsString := trim(vStatSEFAZ);
    rec.post;
  end;


  rec.Close;

  fnfce.Visible := vlSituacao;
end;

function Tfnfce.ConsultaServicoSEFAZNFCESilent: Boolean;
var
  vlRetornoErro: string;
  i: Integer;
Begin
  try
    rec.Close;
    fnfce.rec.Connection := fnfce.zcone;
    rec.Open;

    if not rec.IsEmpty then
    begin

      if IncMinute(recrecdthoraentrada.AsDateTime,30)>now() then
      begin

         vpWSNormal := False;
         Result := False;

         Exit;
      end;

      if recrecmanual.AsString = '1' then
      begin
        vpWSNormal := False;
        Result := False;
        Exit;
      end;

    end;

    if LerConfiguracaoNFCe then
    begin

      vlRetornoErro := '';
      Result := False;

      PlTitulo.Caption := 'Consultando Status da SEFAZ.';

      // fnfce.Show;

      // try
      AjustaCaminhoGeralNF(vpDataAtual);

      ACBrNFeNFCe.Configuracoes.WebServices.Visualizar := vpConsultaVisivel;
      ACBrNFeNFCe.Configuracoes.Geral.ModeloDF := moNFCe;

      ACBrNFeNFCe.Configuracoes.Geral.VersaoDF := ve400;


      try
        ACBrNFeNFCe.WebServices.StatusServico.Executar;
      except
        vpDataHoraSEFAZ :=now();
        entraemcontigencia(vlRetornoErro);
        Result := False;
      end;

      vlRetornoErro := UTF8Encode(ACBrNFeNFCe.WebServices.StatusServico.RetWS);

      vpDataHoraSEFAZ := ACBrNFeNFCe.WebServices.StatusServico.DhRecbto;

      if pos('<cStat>107</cStat>', vlRetornoErro) > 0 then
      begin
        Result := True;
      end
      else
      begin
        entraemcontigencia(vlRetornoErro);
        Result := False;
      end;

    end;
  except
    on e: Exception do
    begin

        if cfgcfgmodonfe.AsInteger = 2 then
        begin
        if pos('gourmetstone', application.ExeName)=0 then
          ShowMessage('Linha 6489 '+E.Message);
        end;

     vlRetornoErro := e.Message;

      entraemcontigencia(vlRetornoErro);
      Result := False;
    end;
  end;
End;

function Tfnfce.ConsultaServicoSEFAZNFCE: string;
var
  vlRetornoErro: string;
  i: Integer;
  vlItem: string;
Begin

 { rec.Close;
  rec.Open;

  if not rec.IsEmpty then
  begin
    if recrecmanual.AsString = '1' then
    begin
      vpWSNormal := False;
      Result := 'False';

      Exit;
    end;

    if IncMinute(recrecdthoraentrada.AsDateTime,30)>now() then
    begin
       vpWSNormal := False;
       Result := 'False';

       Exit;
    end;
  end;
  }

  if LerConfiguracaoNFCe then
  begin

    vlRetornoErro := '';
    Result := '';

    PlTitulo.Caption := 'Consultando Status da SEFAZ.';

    fnfce.Show;

    vpDataAtual:=StrToDate(hoje(application,zcone));


    try
      AjustaCaminhoGeralNF(vpDataAtual);

      ACBrNFeNFCe.Configuracoes.WebServices.Visualizar := vpConsultaVisivel;
      ACBrNFeNFCe.Configuracoes.Geral.ModeloDF := moNFCe;

      ACBrNFeNFCe.Configuracoes.Geral.VersaoDF := ve400;

      try
        ACBrNFeNFCe.WebServices.StatusServico.Executar;
      except
        vpDataHoraSEFAZ :=now();
        Result := 'False';
      end;


      vlRetornoErro := UTF8Encode(ACBrNFeNFCe.WebServices.StatusServico.RetWS);
      vpDataHoraSEFAZ := ACBrNFeNFCe.WebServices.StatusServico.DhRecbto;

      if pos('107', vlRetornoErro) > 0 then
      begin
        Result := 'True';
      end
      else
      begin
        Result := 'False';
      end;

      if not rec.IsEmpty then
      begin
        rec.Edit;
        recrecdthorasaida.AsDateTime:=now();
        rec.Post;
      end;


      if fnfce.vpConsultaVisivel = False then
        fnfce.Close;



    except
      on E: Exception do
      begin

        if cfgcfgmodonfe.AsInteger = 2 then
        begin
        if pos('gourmetstone', application.ExeName)=0 then
          ShowMessage('Linha 6498 '+E.Message);
        end;

        if pos('erro não catalogado', lowercase(E.Message)) > 0 then
        begin
          if pos('gourmetstone', application.ExeName)=0 then
          ShowMessage('A T E N Ç Ã O:' + #13 + #13 + 'Sefaz fora do ar.' + #13 + 'Tente novamente mais tarde!');
          Exit

        end

        else if pos(lowercase('Inativo ou Inoperante tente novamente'), lowercase(E.Message)) > 0 then
        begin
          if pos('gourmetstone', application.ExeName)=0 then
          ShowMessage('A T E N Ç Ã O:' + #13 + #13 + 'Sefaz fora do ar.' + #13 + 'Tente novamente mais tarde!');
          Exit

        end

        else if (pos(lowercase('TimeOut de Requisição'), lowercase(E.Message)) > 0) or (pos('A conexão com o servidor foi redefinida', lowercase(E.Message)) > 0) then
        begin
          if pos('gourmetstone', application.ExeName)=0 then
          ShowMessage('A T E N Ç Ã O:' + #13 + #13 + 'Sefaz fora do ar.' + #13 + 'Tente novamente mais tarde!');
          Exit

        end
        else
        begin
          if pos('gourmetstone', application.ExeName)=0 then
          ShowMessage('A T E N Ç Ã O:' + #13 + #13 + 'Sefaz fora do ar.' + #13 + 'Tente novamente mais tarde!'+#13+#13+#13+e.Message);
          Exit

        end;

        vlRetornoErro := E.Message;

        if not rec.IsEmpty then
        begin
          entraemcontigencia(vlRetornoErro);
        end;



      end;
    end;
  end;
End;

Procedure Tfnfce.CancelaNFCe(vMesChave: string; vFlaCodigo: string = '1');
Var
  vProtocoloCanc: String;
  vJustificativaCanc: String;
  vTamCorrecao: Integer;
  vCStat: Integer;
  vXMotivo: String;
  vnArqNfe: String;
  vnArqEve: String;
  vAssunto: string;
  vTexto: string;
  vArqEvento: String;
  vChaveEvento: String;
  vErro: string;
  vMsgRetorno: string;
Begin

  if not vpConsultouSEFAZ then
  begin
    vpConsultaVisivel := False;
    ConsultaServicoSEFAZNFCE;
  end;

  PlTitulo.Caption := 'Cancelamento de NFC-e';
  fnfce.Show;

  try

    mes.Close;
    mes.Params[0].AsString := vMesChave;
    mes.Params[1].AsString := vFlaCodigo;
    mes.Open;

    AjustaCaminhoGeralNF(Self.mesmesregistro.AsFloat);
    vpNomeArquivoNFCe := Self.GeraNomeArqNFCe(vMesChave, vFlaCodigo);

    consulta.Close;
    consulta.SQL.Text := 'select temcodigo from mes where meschave=' + vMesChave;
    consulta.Open;

    if consulta.Fields[0].AsInteger = 50 then
    begin
      application.MessageBox(pchar('Este documento está em contigência, não pode ser cancelado !'), 'Atenção', MB_ICONWARNING + MB_OK);
      Exit;
    end;

    If not FileExists(vpNomeArquivoNFCe) Then
    begin
      application.MessageBox(pchar('O Arquivo :' + #13 + vpNomeArquivoNFCe + #13 + ' não foi localizado!'), 'Atenção', MB_ICONWARNING + MB_OK);
      Exit;
    end;

    fnfcejustificativa := Tfnfcejustificativa.Create(Self);
    try
      fnfcejustificativa.textocorrecao.Lines.Text := vJustificativaCanc;

      if fnfcejustificativa.ShowModal = mrCancel then
        Exit;

      vJustificativaCanc := fnfcejustificativa.textocorrecao.Lines.Text;

    finally
      fnfcejustificativa.Free;
    end;

    If vJustificativaCanc = '' Then
    Begin
      application.MessageBox(pchar('É necessário uma jutificativa para cancelamento da NFCE!'), 'Atenção', MB_ICONWARNING + MB_OK);
      Exit;
    End;

    vCStat := 0;
    vXMotivo := '';

    ACBrNFeNFCe.NotasFiscais.Clear;
    ACBrNFeNFCe.Configuracoes.Geral.VersaoQRCode := veqr200;
    ACBrNFeNFCe.Configuracoes.WebServices.Visualizar := False;
    ACBrNFeNFCe.NotasFiscais.LoadFromFile(vpNomeArquivoNFCe);

    ACBrNFeNFCe.Configuracoes.Geral.VersaoDF := ve400;
    ACBrNFeNFCe.EventoNFe.Evento.Clear;
    ACBrNFeNFCe.EventoNFe.idLote := 0;

    with ACBrNFeNFCe.EventoNFe.Evento.add do
    begin
      infEvento.dhEvento := vpDataAtual;
      infEvento.tpEvento := teCancelamento;
      infEvento.detEvento.xJust := vJustificativaCanc;
    end;

    // Try
    try
      ACBrNFeNFCe.EnviarEvento(0);
    except
      sleep(3000);

      if AjustaSituacaoNFCe(vMesChave, fnfce.vpFlacodigo, true) then
      begin

        enf.Open;
        enf.Append;
        enftencodigo.AsInteger := tenCancelamento;
        enfenfregistroevento.AsFloat := vpDataAtual;
        enfenfchaveevento.AsString := vChaveEvento;
        enfenfseqevento.AsInteger := 1; // Cancelamento não tem sequência.
        enfenfdescricao.AsString := vJustificativaCanc;
        if FileExists(vArqEvento) then
          enfenfxml.LoadFromFile(vArqEvento);
        enfenfcstat.AsInteger := vCStat;
        enfenfxmotivo.AsString := vXMotivo;
        enf.post;

        mev.Open;
        mev.Append;
        mevenfchave.AsInteger := enfenfchave.AsInteger;
        mevmeschave.AsString := vMesChave;
        mev.post;

        consulta.Close;
        consulta.SQL.Text := 'set @disable_triggers=1';
        consulta.ExecSQL;

        consulta.Close;
        consulta.SQL.Text := 'UPDATE mes SET ';
        consulta.SQL.add('sdecodigo = ''02'', ');
        consulta.SQL.add('mesprotocolo = ''' + vProtocoloCanc + ''' ');
        consulta.SQL.add('where meschave = ' + vMesChave + ' and flacodigo=' + vFlaCodigo);
        consulta.ExecSQL;

        consulta.Close;
        consulta.SQL.Text := 'set @disable_triggers=null';
        consulta.ExecSQL;

        ShowMessage('Cancelamento efetuado com sucesso!');

      end;


    end;

    vCStat := ACBrNFeNFCe.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].RetInfEvento.CStat;
    vXMotivo := ACBrNFeNFCe.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].RetInfEvento.xMotivo;
    vProtocoloCanc := ACBrNFeNFCe.WebServices.EnvEvento.EventoRetorno.retEvento.Items[0].RetInfEvento.nProt;

    if (vCStat = 135) or (vCStat = 136) then
    begin

      vArqEvento := copy(vpNomeArquivoNFCe, 1, pos('-', vpNomeArquivoNFCe) - 1);
      vArqEvento := vArqEvento + ACBrNFeNFCe.EventoNFe.Evento.Items[0].infEvento.TipoEvento;
      vArqEvento := vArqEvento + '01'; // Sequência do Evento
      vArqEvento := vArqEvento + '-procEventoNFe.xml';

      vChaveEvento := ACBrNFeNFCe.EventoNFe.Evento.Items[0].infEvento.chNFe;
      vChaveEvento := vChaveEvento + ACBrNFeNFCe.EventoNFe.Evento.Items[0].infEvento.TipoEvento;
      vChaveEvento := vChaveEvento + FormatFloat('00', ACBrNFeNFCe.EventoNFe.Evento.Items[0].infEvento.nSeqEvento);

      enf.Open;
      enf.Append;
      enftencodigo.AsInteger := tenCancelamento;
      enfenfregistroevento.AsFloat := vpDataAtual;
      enfenfchaveevento.AsString := vChaveEvento;
      enfenfseqevento.AsInteger := 1; // Cancelamento não tem sequência.
      enfenfdescricao.AsString := vJustificativaCanc;
      if FileExists(vArqEvento) then
        enfenfxml.LoadFromFile(vArqEvento);
      enfenfcstat.AsInteger := vCStat;
      enfenfxmotivo.AsString := vXMotivo;
      enf.post;

      mev.Open;
      mev.Append;
      mevenfchave.AsInteger := enfenfchave.AsInteger;
      mevmeschave.AsString := vMesChave;
      mev.post;

      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=1';
      consulta.ExecSQL;

      consulta.Close;
      consulta.SQL.Text := 'UPDATE mes SET ';
      consulta.SQL.add('sdecodigo = ''02'', ');
      consulta.SQL.add('temcodigo = 90, ');
      consulta.SQL.add('mesprotocolo = ''' + vProtocoloCanc + ''' ');
      consulta.SQL.add('where meschave = ' + vMesChave + ' and flacodigo=' + vFlaCodigo);
      consulta.ExecSQL;

      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=null';
      consulta.ExecSQL;

      ShowMessage('Cancelamento efetuado com sucesso!');
    end
    else
      application.MessageBox(pchar('Evento de NFC-e não autorizado.' + #13 + #13 + 'Mensagem: ' + #13 + vXMotivo), 'Erro Envio Evento NFC-e',
        MB_OK + MB_ICONERROR);

    { Except
      On e: Exception Do
      Begin
      vErro := '';
      If e.Message <> '' Then
      vErro := e.Message;

      vMsgRetorno := 'Evento de NFC-e não autorizado.';
      vMsgRetorno := vMsgRetorno + sLineBreak + 'Mensagem: ' + vErro;

      SalvarLogErro(vMsgRetorno, e.StackTrace);

      application.MessageBox(PChar(vMsgRetorno), 'Erro Envio NFC-e', MB_OK + MB_ICONERROR);

      Exit;
      End;
      End; }
  finally
    fnfce.Close;
  end;
End;

Function Tfnfce.AjustaSituacaoNFCe(vMesChave: string; vFlaCodigo: string = '1'; ASilent: Boolean = True): Boolean;
Var
  nProt: String;
  vnrnfe: String;
  vchNFe: String;
  vdtNFe: String;
  vhrNFe: String;
  vCodStatusNFe: String;
  vMsgStatusNFe: String;
  vMsgSituacao: string;
  vlchave: string;
  vErro: string;
  vCStat: Integer;
  vXMotivo: string;
  vMsgRetorno: string;

  vlNFCeProtocolo: string;
  vlNFCeChave: string;
  vldigVal: string;
  vemiNFe: string;
  vlNomeArquivo: string;
  vDtAutorizacao: double;

Begin
  try
    fnfce.Show;
    Result := False;

    vlchave := vMesChave;
    consulta.Close;
    consulta.SQL.Text := 'select mesregistro from mes where meschave=' + vlchave;
    consulta.Open;

    fnfce.vpDataAtual := consulta.FieldByName('mesregistro').AsDateTime;


    fnfce.AjustaCaminhoGeralNF(fnfce.vpDataAtual);

    mes.Close;
    mes.Params[0].AsString := vMesChave;
    mes.Params[1].AsString := vFlaCodigo;
    mes.Open;

    vpNomeArquivoNFCe := GeraNomeArqNFCe(vMesChave);
    vlNomeArquivo:= vpNomeArquivoNFCe;

   { if (cfgcfgservarqnfes.AsString <> '127.0.0.1') and (pos('\', cfgcfgservarqnfes.AsString) = 0) then
    begin

      if FileExists(vpNomeArquivoNFCe) then
      begin

        if not DirectoryExists(ExtractFilePath(vlNomeArquivo)) then
          ForceDirectories(ExtractFilePath(vlNomeArquivo));

        copyfile(pchar(vpNomeArquivoNFCe), pchar(vlNomeArquivo), False);

      end;

    end;}

    If not FileExists(vpNomeArquivoNFCe) Then
    Begin
      if (cfgcfgservarqnfes.AsString <> '127.0.0.1') then
      begin
        vpNomeArquivoNFCe := BaixaXMLServidor(IPServidorArquivos, vpNomeArquivoNFCe);
      end;

    End;

    if vpNomeArquivoNFCe = '' then
    begin

      consulta.Close;
      consulta.SQL.Text := 'update mes set temcodigo=4 where meschave=' + vlchave;
      consulta.ExecSQL;
      Exit;

    end;

    If not FileExists(vpNomeArquivoNFCe) Then
    Begin
      if Self.mestemcodigo.AsInteger = 5 then
      begin
        vchNFe := Self.mesmeschavenfe.AsString;
        Geraxml(vchNFe, fnfce.vpFlacodigo);
      end
      else
      begin
        if not vpConsultouSEFAZ then
        begin
          vpConsultaVisivel := False;
          ConsultaServicoSEFAZNFCE;
        end;

        Self.GeraNFCe(vMesChave, fnfce.vpFlacodigo);
      end;
      // vpNomeArquivoNFCe := GeraNomeArqNFCe(vMesChave, fnfce.vpFlacodigo);
    End;

    If not FileExists(vpNomeArquivoNFCe) Then
    begin
        if pos('gourmetstone', application.ExeName)=0 then
      ShowMessage('95324 ATENÇÃO: O Arquivo ' + vpNomeArquivoNFCe + ' não foi localizado!');
      Exit(False);
    end;

    // Try

    vlNFCeProtocolo := mesmesprotocolo.AsString;
    vlNFCeChave := mesmeschavenfe.AsString;

    ACBrNFeNFCe.NotasFiscais.Clear;
    ACBrNFeNFCe.NotasFiscais.LoadFromFile(vpNomeArquivoNFCe);
    ACBrNFeNFCe.Configuracoes.Geral.VersaoQRCode := veqr200;
    ACBrNFeNFCe.Configuracoes.WebServices.Visualizar := False;
    ACBrNFeNFCe.Configuracoes.Geral.VersaoDF := ve400;

    ACBrNFeNFCe.Consultar;

    vdtNFe := DateToStr(ACBrNFeNFCe.WebServices.consulta.DhRecbto);
    vhrNFe := TimeToStr(ACBrNFeNFCe.WebServices.consulta.DhRecbto);
    nProt := ACBrNFeNFCe.WebServices.consulta.Protocolo;
    vchNFe := ACBrNFeNFCe.WebServices.consulta.NFeChave;
    vCodStatusNFe := IntToStr(ACBrNFeNFCe.WebServices.consulta.CStat);
    vMsgStatusNFe := ACBrNFeNFCe.WebServices.consulta.xMotivo;
    vMsgStatusNFe := ACBrNFeNFCe.WebServices.consulta.xMotivo;
    vDtAutorizacao := ACBrNFeNFCe.WebServices.consulta.DhRecbto;

    (* Verifica código de retorno é igual a 100 - Uso Autorizado *)

    If (ACBrNFeNFCe.WebServices.consulta.CStat = 104) Then
    begin

      Result := True;

      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=1';
      consulta.ExecSQL;

      consulta.Close;
      consulta.SQL.Text := 'UPDATE mes SET ';
      // consulta.SQL.add('mesdatanfe = ''' + ajustadata((Copy(datetimetostr(ACBrNFeNFCe.WebServices.consulta.protNFe.DhRecbto), 1, 10))) + ''', ');
      consulta.SQL.add('mesdatanfe = ' + QuotedStr(ajustadata((copy(DateToStr(ACBrNFeNFCe.NotasFiscais.Items[0].NFe.ide.dEmi), 1, 10)))) + ', ');
      consulta.SQL.add('mesregistro = ''' + ajustadata((copy(datetimetostr(ACBrNFeNFCe.WebServices.consulta.protNFe.DhRecbto), 1, 10))) + ''', ');

      consulta.SQL.add('meschavenfe = ''' + ACBrNFeNFCe.WebServices.consulta.protNFe.chNFe + ''', ');
      consulta.SQL.add('tdfcodigo = ''65'', ');
      consulta.SQL.add('meshoranfe = ' + QuotedStr(TimeToStr(ACBrNFeNFCe.WebServices.consulta.protNFe.DhRecbto)) + ', ');
      consulta.SQL.add('refcodigo = 9, ');
      consulta.SQL.add('temcodigo = 5, ');
      consulta.SQL.add('mesprotocolo = ''' + SoNumeros(ACBrNFeNFCe.WebServices.consulta.protNFe.xMotivo) + ''' WHERE ');
      consulta.SQL.add('meschave = ' + vlchave + ' and flacodigo=' + vFlaCodigo);
      consulta.ExecSQL;

      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=null';
      consulta.ExecSQL;

      try
        if FileExists(vpNomeArquivoNFCe) then
        begin
          if not mes.Active then
          begin
            mes.Close;
            mes.Params[0].AsString := vMesChave;
            mes.Params[1].AsString := vFlaCodigo;
            mes.Open;
          end;

        end;

      except
      on E: Exception do
        begin

          if cfgcfgmodonfe.AsInteger = 2 then
          begin
            if pos('gourmetstone', application.ExeName)=0 then
               ShowMessage('Linha 6895 '+E.Message);
          end;

        end;
      end;

      consulta.Close;
      consulta.SQL.Text := 'select mesemissao,mesnumero, meschavenfe,tdfcodigo,mesprotocolo from mes where meschave=' + vlchave + ' and flacodigo=' +
        vFlaCodigo;
      consulta.Open;

    end
    else If (ACBrNFeNFCe.WebServices.consulta.CStat = 100) { or (ACBrNFeNFCe.WebServices.Consulta.cStat = 217) } Then
    begin

      Result := True;

      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=1';
      consulta.ExecSQL;

      consulta.Close;
      consulta.SQL.Text := 'UPDATE mes SET ';
      consulta.SQL.add('mesdatanfe = ' + QuotedStr(ajustadata((copy(DateToStr(ACBrNFeNFCe.NotasFiscais.Items[0].NFe.ide.dEmi), 1, 10)))) + ', ');
      consulta.SQL.add('mesregistro = ''' + ajustadata((copy(datetimetostr(ACBrNFeNFCe.WebServices.consulta.DhRecbto), 1, 10))) + ''', ');
      consulta.SQL.add('meschavenfe = ''' + vchNFe + ''', ');
      consulta.SQL.add('tdfcodigo = ''65'', ');
      consulta.SQL.add('meshoranfe = ' + QuotedStr(vhrNFe) + ', ');
      consulta.SQL.add('refcodigo = 9, ');
      consulta.SQL.add('temcodigo = 5, ');
      consulta.SQL.add('mesprotocolo = ''' + nProt + ''' WHERE ');
      consulta.SQL.add('meschave = ' + vlchave + ' and flacodigo=' + vFlaCodigo);
      consulta.ExecSQL;

      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=null';
      consulta.ExecSQL;

      try
        if FileExists(vpNomeArquivoNFCe) then
        begin
          if not mes.Active then
          begin
            mes.Close;
            mes.Params[0].AsString := vMesChave;
            mes.Params[1].AsString := vFlaCodigo;
            mes.Open;
          end;

        end;

      except
      end;

      consulta.Close;
      consulta.SQL.Text := 'select mesemissao,mesnumero, meschavenfe,tdfcodigo,mesprotocolo from mes where meschave=' + vlchave + ' and flacodigo=' +
        vFlaCodigo;
      consulta.Open;

      consulta.Close;
    end
    else If (ACBrNFeNFCe.WebServices.consulta.CStat = 101) Then
    begin
      Result := True;
      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=1';
      consulta.ExecSQL;

      consulta.Close;
      consulta.SQL.Text := 'UPDATE mes SET ';
      consulta.SQL.add('mesemissao = ''' + ajustadata(vdtNFe) + ''', ');
      consulta.SQL.add('sdecodigo = ''02'', ');
      consulta.SQL.add('tdfcodigo = ''65'', ');
      consulta.SQL.add('refcodigo = 9, ');
      consulta.SQL.add('temcodigo = 5, ');
      consulta.SQL.add('mesprotocolo = ''' + nProt + ''' WHERE ');
      consulta.SQL.add('meschave = ' + vlchave + ' and flacodigo=' + vFlaCodigo);
      consulta.ExecSQL;

      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=null';
      consulta.ExecSQL;

      consulta.Close;
      consulta.SQL.Text := 'select mesemissao,mesnumero, meschavenfe,tdfcodigo,mesprotocolo from mes where meschave=' + vlchave + ' and flacodigo=' +
        vFlaCodigo;
      consulta.Open;

      consulta.Close;

    end
    else If (ACBrNFeNFCe.WebServices.consulta.CStat = 150) Then
    begin
      Result := True;

      if (ACBrNFeNFCe.WebServices.consulta.CStat = 150) or (copy(vchNFe, 35, 1) = '9') then
      begin
        vdtNFe := copy(datetimetostr(ACBrNFeNFCe.WebServices.consulta.protNFe.DhRecbto), 1, 10);
        vhrNFe := TimeToStr(ACBrNFeNFCe.WebServices.consulta.protNFe.DhRecbto);
        vemiNFe := copy(DateToStr(ACBrNFeNFCe.NotasFiscais.Items[0].NFe.ide.dEmi), 1, 10);
      end
      else
      begin
        vdtNFe := copy(DateToStr(ACBrNFeNFCe.NotasFiscais.Items[0].NFe.ide.dEmi), 1, 10);
        vhrNFe := TimeToStr(ACBrNFeNFCe.NotasFiscais.Items[0].NFe.ide.dEmi);
        vemiNFe := copy(DateToStr(ACBrNFeNFCe.NotasFiscais.Items[0].NFe.ide.dEmi), 1, 10);
      end;

      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=1';
      consulta.ExecSQL;

      consulta.Close;
      consulta.SQL.Text := 'UPDATE mes SET ';
      consulta.SQL.add('mesdatanfe = ' + QuotedStr(ajustadata(vdtNFe)) + ',');
      consulta.SQL.add('mesregistro = ' + QuotedStr(ajustadata(vdtNFe)) + ',');

      consulta.SQL.add('meschavenfe = ''' + vchNFe + ''', ');
      consulta.SQL.add('sdecodigo = ''00'', ');
      consulta.SQL.add('tdfcodigo = ''65'', ');
      consulta.SQL.add('refcodigo = 9, ');
      consulta.SQL.add('temcodigo = 5, ');
      consulta.SQL.add('mesprotocolo = ''' + nProt + ''' WHERE ');
      consulta.SQL.add('meschave = ' + vlchave + ' and flacodigo=' + vFlaCodigo);
      consulta.ExecSQL;

      consulta.Close;
      consulta.SQL.Text := 'set @disable_triggers=null';
      consulta.ExecSQL;

      consulta.Close;
      consulta.SQL.Text := 'select mesemissao,mesnumero, meschavenfe,tdfcodigo,mesprotocolo from mes where meschave=' + vlchave + ' and flacodigo=' +
        vFlaCodigo;
      consulta.Open;

      consulta.Close;

      try
        if FileExists(vpNomeArquivoNFCe) then
        begin
          if not mes.Active then
          begin
            mes.Close;
            mes.Params[0].AsString := vMesChave;
            mes.Params[1].AsString := vFlaCodigo;
            mes.Open;
          end;

        end;

      except
        On E: Exception Do
        Begin
          if pos('gourmetstone', application.ExeName)=0 then
            ShowMessage('6292 Erro na consulta de NFCe : ' + E.Message);
        End;

      end;

    end;

    if (ACBrNFeNFCe.WebServices.consulta.CStat = 101) or (ACBrNFeNFCe.WebServices.consulta.CStat = 100) or
      (ACBrNFeNFCe.WebServices.consulta.CStat = 104) or (ACBrNFeNFCe.WebServices.consulta.CStat = 150) then
    begin

      qconsulta.Close;
      qconsulta.SQL.Text := 'select mesregistro,mesnumero, meschavenfe,tdfcodigo,mesprotocolo from mes where meschave=' + vMesChave;
      qconsulta.Open;

      if ASilent = False then
      begin
        if pos('gourmetstone', application.ExeName)=0 then
        ShowMessage('Emissão: ' + qconsulta.Fields[0].AsString + ''#13'' + (* *)
          'Nr. NFE: ' + qconsulta.Fields[1].AsString + ''#13'' + (* *)
          'Chave  : ' + qconsulta.Fields[2].AsString + ''#13'' + #13 + #13 + (* *)
          'Código Status          : ' + vCodStatusNFe + #13 + (* *)
          'Status - NFE           : ' + vMsgStatusNFe + #13 + (* *)
          'Protocolo Nr.          : ' + nProt + #13 + (* *)
          'Data e Hora Autorização: ' + datetimetostr(vDtAutorizacao));
      end;
    end;

  finally
  end;
End;

function Tfnfce.InutilizarNumerosNFCe(vFlaCodigo: string = '1'): Boolean;
Var
  modelo, serie, Ano, vMes, NumeroInicial, NumeroFinal, Justificativa: String;
  vlRetorno: Boolean;
Begin
  vlRetorno := False;

  if LerConfiguracaoNFCe then
  begin
    If Not(InputQuery('Inutilização de Números de NFCE ', 'Ano', Ano)) Then
      Exit;

    If Not(InputQuery('Inutilização de Números de NFCE ', 'Mes', vMes)) Then
      Exit;

    If Not(InputQuery('Inutilização de Números de NFCE ', 'Número Inicial', NumeroInicial)) Then
      Exit;

    If Not(InputQuery('Inutilização de Números de NFCE ', 'Número Final', NumeroFinal)) Then
      Exit;

    If Not(InputQuery('Inutilização de Números de NFCE ', 'Justificativa', Justificativa)) Then
      Exit;

    AjustaCaminhoGeralNF(strtodate('01' + '/' + vMes + '/' + Ano));

    if not vpConsultouSEFAZ then
    begin
      vpConsultaVisivel := False;
      // ConsultaServicoSEFAZNFCE;
    end;

    cfg.Close;
    cfg.ParamByName('flacodigo').AsInteger := Acesso.Filial;
    cfg.Open;

    try
      ACBrNFeNFCe.WebServices.Inutiliza(cfgetddoc1.AsString, Justificativa, StrToInt(Ano), 65, 1, StrToInt(NumeroInicial), StrToInt(NumeroFinal));

      ShowMessage('Inutilização realizada com SUCESSO! ');

      vlRetorno := True;
      Result := True;

    except
    On E: Exception Do
      Begin
      ShowMessage('Inutilização de NFC-e NÃO AUTORIZADA.' + #13 + #13 + 'Mensagem: ' + #13 + e.Message);
      vlRetorno := False;
      Result := False;
      Exit;
      End;
    end;

    rni.Open;
    rni.Append;
    rnirniano.AsString := Ano;
    rnirnimes.AsString := vMes;
    rnitdfcodigo.AsString := '65';
    rnirninumeroinicial.AsString := NumeroInicial;
    rnirninumerofinal.AsString := NumeroFinal;
    rnirnijutificativa.AsString := Justificativa;
    rni.post;
    rni.Close;

    vlRetorno := True;

    consulta.Close;
    consulta.SQL.Text := 'SELECT meschave FROM mes ';
    consulta.SQL.add('WHERE mesnumero BETWEEN ' + NumeroInicial + ' AND ' + NumeroFinal + ' ');
    consulta.SQL.add('AND tdfcodigo = ''65'' ');
    consulta.Open;

    consulta.Close;
    consulta.SQL.Text := 'UPDATE mes,toe SET mesnumero=0, temcodigo=2, tdfcodigo=' + QuotedStr('00') + ', meschavenfe=' + QuotedStr('') +
      ', mesprotocolo=' + QuotedStr('') + ', mesdatanfe=null WHERE mes.toecodigo=toe.toecodigo  and sdecodigo=' + QuotedStr('00') + ' AND tdfcodigo='
      + QuotedStr('65') + ' AND toe.ttocodigo=2 and mesnumero BETWEEN ' + NumeroInicial + ' AND ' + NumeroFinal;
    consulta.ExecSQL;

  end;

  Result := vlRetorno;

End;

function Tfnfce.InutilizarNumerosNFCeDireto(vFlaCodigo: string = '1'): Boolean;
Var
  modelo, serie, Ano, vMes, NumeroInicial, NumeroFinal, Justificativa: String;
  vlRetorno: Boolean;
Begin
  vlRetorno := False;
  try
    if LerConfiguracaoNFCe then
    begin

      consulta.Close;
      consulta.SQL.Text := 'select mesregistro, mesnumero from mes where meschave=' + vpMesChave;
      consulta.Open;

      if consulta.IsEmpty then
      begin
        if pos('gourmetstone', application.ExeName)=0 then
        ShowMessage('5673234 Registro não localizado para inutilização de numeração!');
        Exit;
      end;

      Ano := IntToStr(YearOf(consulta.FieldByName('mesregistro').AsFloat));
      vMes := IntToStr(MonthOf(consulta.FieldByName('mesregistro').AsFloat));

      NumeroInicial := consulta.FieldByName('mesnumero').AsString;
      NumeroFinal := consulta.FieldByName('mesnumero').AsString;
      Justificativa := 'Falha na emissão do documento fiscal';

      AjustaCaminhoGeralNF(strtodate('01' + '/' + vMes + '/' + Ano));

      if not vpConsultouSEFAZ then
      begin
        vpConsultaVisivel := False;
        ConsultaServicoSEFAZNFCE;
      end;

      ACBrNFeNFCe.Configuracoes.WebServices.Visualizar := True;
      ACBrNFeNFCe.WebServices.Inutiliza(cfgetddoc1.AsString, Justificativa, StrToInt(Ano), 65, 1, StrToInt(NumeroInicial), StrToInt(NumeroFinal));
      ACBrNFeNFCe.Configuracoes.WebServices.Visualizar := False;

      vlRetorno := True;

      consulta.Close;
      consulta.SQL.Text := 'SELECT meschave FROM mes ';
      consulta.SQL.add('WHERE mesnumero BETWEEN ' + NumeroInicial + ' AND ' + NumeroFinal + ' ');
      consulta.SQL.add('AND tdfcodigo = ''65'' ');
      consulta.Open;

      while not consulta.Eof do
      begin

        mes.Close;
        mes.Params[0].AsInteger := consulta.Fields[0].AsInteger;
        mes.Params[1].AsString := vFlaCodigo;
        mes.Open;

        rni.Open;
        rni.Append;
        rnirniano.AsString := Ano;
        rnirnimes.AsString := vMes;
        rnitdfcodigo.AsString := '65';
        rnirninumeroinicial.AsString := NumeroInicial;
        rnirninumerofinal.AsString := NumeroFinal;
        rnirnijutificativa.AsString := Justificativa;
        rnimeschave.AsString := mesmeschave.AsString;
        rnimeschavenfe.AsString := mesmeschavenfe.AsString;
        rni.post;

        rni.Close;

        mes.Edit;
        mestdfcodigo.AsString := '00';
        mestemcodigo.AsInteger := 2;
        mesmesnumero.AsInteger := 0;
        mesmeschavenfe.AsString := '';
        mesmesprotocolo.AsString := '';
        mes.post;

        consulta.Next;
      end;

    end;
  except
    on E: Exception do
    begin

      application.MessageBox(pchar('Inutilização de NFC-e não autorizada.' + #13 + #13 + 'Mensagem: ' + #13 + E.Message), 'Erro Inutilização NFC-e',
        MB_OK + MB_ICONERROR);

      vlRetorno := False;
    end;
  end;
  Result := vlRetorno;
End;

procedure Tfnfce.IO_OpenSSLStatusInfo(const AMsg: string);
begin
  sleep(700);
  application.ProcessMessages;
end;

procedure Tfnfce.AjustaCaminhoGeralNF(Data: TDate);
begin
  try
  // verifca se os diretorios existem se nao ja cria os mesmos

  try
  if not DirectoryExists(vpPastaPrincipal + 'pdfs') then
    ForceDirectories(vpPastaPrincipal + 'pdfs');

  if not DirectoryExists(vpPastaPrincipal) then
    ForceDirectories(vpPastaPrincipal);
  except

  end;

  vpAAAAMMNNNFCe := vpPastaPrincipal + vpSubPastaDoc + '\' + formatdatetime('yyyymm', Data) + '\';
  try
  if not DirectoryExists(vpAAAAMMNNNFCe) then
    ForceDirectories(vpAAAAMMNNNFCe);
  except

  end;

  ACBrNFeNFCe.Configuracoes.Arquivos.PathSalvar := vpAAAAMMNNNFCe;
  ACBrNFeDANFCEFR1.PathPDF := vpPastaPrincipal + 'pdfs\';

      except
   On E: Exception Do
    Begin

      if pos('gourmetstone', application.ExeName)=0 then
        ShowMessage('Linha 8270 '+E.Message);

    End;
  end;
end;

function Tfnfce.LerConfiguracaoNFCe: Boolean;
Begin

  cfg.Close;
  cfg.ParamByName('flacodigo').AsString := '1';
  cfg.Open;

  Result := True;

  ACBrNFeNFCe.Configuracoes.WebServices.Visualizar := False;
  ACBrNFeNFCe.Configuracoes.Arquivos.PathSchemas := ExtractFilePath(application.ExeName) + 'schemas';
  ACBrNFeNFCe.Configuracoes.Arquivos.IniServicos := ExtractFilePath(application.ExeName) + 'schemas\ACBrNFeServicos.ini';

  ACBrNFeNFCe.Configuracoes.Geral.ModeloDF := moNFCe;
  ACBrNFeNFCe.Configuracoes.Geral.VersaoDF := ve400;

  if (Length(cfgcfgsenhacertificadoa1.AsString) > 0) then
  begin
    ACBrNFeNFCe.Configuracoes.Certificados.Senha := cfgcfgsenhacertificadoa1.AsString;
    cfgcfgcertificadoa1.SaveToFile(ExtractFilePath(application.ExeName) + 'certificado.pfx');

    ACBrNFeNFCe.Configuracoes.Certificados.ArquivoPFX := ExtractFilePath(application.ExeName) + 'certificado.pfx';
    // ACBrNFeNFCe.Configuracoes.Geral.SSLHttpLib := httpOpenSSL;
    ACBrNFeNFCe.Configuracoes.Certificados.NumeroSerie := '';

  end
  else
  begin
    ACBrNFeNFCe.Configuracoes.Certificados.NumeroSerie := Self.cfgcfgnumecertifa1.AsString;
  end;

  ACBrNFeNFCe.SSL.SSLType := LT_TLSv1_2;
  ACBrNFeNFCe.Configuracoes.Geral.SSLLib := libOpenSSL;
  ACBrNFeNFCe.Configuracoes.Geral.SSLCryptLib := cryOpenSSL;
  ACBrNFeNFCe.Configuracoes.Geral.SSLHttpLib := httpOpenSSL;
  ACBrNFeNFCe.Configuracoes.Geral.SSLXmlSignLib := xsLibXml2;

  { ACBrNFeNFCe.Configuracoes.Geral.SSLLib := libWinCrypt;
    ACBrNFeNFCe.Configuracoes.Geral.SSLCryptLib := cryWinCrypt;
    ACBrNFeNFCe.Configuracoes.Geral.SSLHttpLib := httpWinHttp;
    ACBrNFeNFCe.Configuracoes.Geral.SSLXmlSignLib := xsLibXml2;
  }

  // ACBrNFeNFCe.Configuracoes.Certificados.NumeroSerie := Self.cfgcfgnumecertif.AsString;
  ACBrNFeNFCe.Configuracoes.Certificados.Senha := cfgcfgsenhacertificadoa1.AsString;

  ACBrNFeNFCe.Configuracoes.Geral.FormaEmissao := teNormal;
  ACBrNFeNFCe.Configuracoes.Geral.Salvar := True;

  ACBrNFeNFCe.Configuracoes.WebServices.UF := UpperCase(Self.cfgufssigla.AsString);

  if cfgcfgmodonfe.AsInteger = 2 then
  begin
    ACBrNFeNFCe.Configuracoes.Geral.IdCSC := FormatFloat('000000', cfgcfgidtokennfce.AsInteger);
    ACBrNFeNFCe.Configuracoes.Geral.CSC := lowercase(cfgcfgtoken1nfce.AsString);
    ACBrNFeNFCe.Configuracoes.WebServices.Ambiente := taHomologacao;
  end
  else if cfgcfgmodonfe.AsInteger = 1 then
  begin
    ACBrNFeNFCe.Configuracoes.Geral.IdCSC := FormatFloat('000000', cfgcfgidtokennfce.AsInteger);
    ACBrNFeNFCe.Configuracoes.Geral.CSC := lowercase(cfgcfgtoken1nfce.AsString);
    ACBrNFeNFCe.Configuracoes.WebServices.Ambiente := taProducao;
  end;

  ACBrNFeNFCe.Configuracoes.WebServices.TimeZoneConf.ModoDeteccao := tzManual;
  ACBrNFeNFCe.Configuracoes.WebServices.TimeZoneConf.TimeZoneStr := '-04:00';

End;

procedure Tfnfce.SalvarLogErro(eMessage, eStackTrace: String);
var
  vlMensagem: String;
  vlArquivo: String;
begin
  vlMensagem := 'Mensagem: ' + eMessage + sLineBreak + sLineBreak + eStackTrace;

  vlArquivo := ExtractFilePath(application.ExeName) + 'Logs\NFCe\' + formatdatetime('yyyymmddhhnnsszzz', vpDataAtual) + '.txt';

  SalvarTextoEmArquivo(vlMensagem, vlArquivo);
end;


procedure Tfnfce.VerifieAjustaItemcomSubstituicao(usEmitente, ufDestinatario: string);
var
  vlcfop: string;
  vlcstcodigo: string;
  vlcsicodigo: string;
  vlcspcodigo: string;
  vlcsfcodigo: string;
  vlcfgpercentualpis: string;
  vlcfgpercentualcofins: string;
  vlEmitente: string;
  vlDestinatario: string;
  vlTceCest: string;
begin

  if cfgcfgtributacaoimendes.AsInteger = 0 then
  begin

    vlEmitente := usEmitente;
    vlDestinatario := ufDestinatario;
    if vlDestinatario = '' then
    begin
      vlDestinatario := vlEmitente;
    end;

    itm.First;

    // ajusta o toe do item para produto com substituição
    While Not itm.Eof Do
    Begin

      if (cfgcfgdefinetoeatendimento.AsInteger = 0) then
      begin

        if itmtcecest.AsString <> '' then
        begin

            if (cfgcfgusacstnoproduto.AsInteger = 0) and (cfgcfgdefinetoeatendimento.AsInteger = 0) then
            begin

              if (cfgcfgtoesubstnoestado.AsInteger <> 0) then
              begin
                if itmtcecest.AsString = '' then
                begin

                  consulta.Close;
                  consulta.SQL.Text :=
                    'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins from toe where toecodigo=' +
                    cfgcfgtoemesinte.AsString;
                  consulta.Open;

                end
                else
                begin

                  if (cfgcfgtoeinteproducaopropria.AsInteger <> 0) then
                  begin
                    if (itmproproducao.AsInteger = 1) and (cfgcfgproducaopropria.AsInteger=1) then
                    begin

                      consulta.Close;
                      consulta.SQL.Text :=
                        'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins from toe where toecodigo='
                        + cfgcfgtoeintesubsprodpropria.AsString;
                      consulta.Open;
                    end
                    else
                    begin
                      consulta.Close;
                      consulta.SQL.Text :=
                        'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins from toe where toecodigo='
                        + cfgcfgtoesubstnoestado.AsString;
                      consulta.Open;

                    end;

                  end
                  else
                  begin
                    consulta.Close;
                    consulta.SQL.Text :=
                      'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins from toe where toecodigo=' +
                      cfgcfgtoesubstnoestado.AsString;
                    consulta.Open;
                  end;
                end;

                vlcstcodigo := consulta.FieldByName('cstcodigo').AsString;
                vlcsicodigo := consulta.FieldByName('csicodigo').AsString;
                vlcspcodigo := consulta.FieldByName('cspcodigo').AsString;
                vlcsfcodigo := consulta.FieldByName('csfcodigo').AsString;

                vlcfgpercentualpis := consulta.FieldByName('cfgpercentualpis').AsString;
                vlcfgpercentualpis := StringReplace(vlcfgpercentualpis, ',', '.', [rfReplaceAll, rfIgnoreCase]);

                vlcfgpercentualcofins := consulta.FieldByName('cfgpercentualcofins').AsString;
                vlcfgpercentualcofins := StringReplace(vlcfgpercentualcofins, ',', '.', [rfReplaceAll, rfIgnoreCase]);

                vlcfop := consulta.FieldByName('toecfopsaida').AsString;

                consulta.Close;
                consulta.SQL.Text := 'select tcecest from tce where tcecest=' + QuotedStr(itmtcecest.AsString);
                consulta.Open;

                vlTceCest := consulta.FieldByName('tcecest').AsString;

                if itmtcecest.AsString = '' then
                begin
                  itmncm.Close;
                  itmncm.SQL.Text := 'update itm set  itmcest=' + QuotedStr(vlTceCest) + '  ,itmcofins=' + vlcfgpercentualcofins + ' ,itmpis=' +
                    vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' +
                    QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' +
                    cfgcfgtoemesinte.AsString + ' where itmchave=' + itmitmchave.AsString;
                  itmncm.ExecSQL;

                end
                else
                begin
                  { if (cfgcfgtoeinteproducaopropria.AsInteger <> 0) then
                    begin }

                  if (itmproproducao.AsInteger = 1)  and (cfgcfgproducaopropria.AsInteger=1) then
                  begin

                    itmncm.Close;
                    itmncm.SQL.Text := 'update itm set  itmcest=' + QuotedStr(vlTceCest) + '  ,itmcofins=' + vlcfgpercentualcofins + ' ,itmpis=' +
                      vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' +
                      QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' +
                      cfgcfgtoeintesubsprodpropria.AsString + ' where itmchave=' + itmitmchave.AsString;
                    itmncm.ExecSQL;

                  end
                  else
                  begin
                    itmncm.Close;
                    itmncm.SQL.Text := 'update itm set  itmcest=' + QuotedStr(vlTceCest) + '  ,itmcofins=' + vlcfgpercentualcofins + ' ,itmpis=' +
                      vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' +
                      QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' +
                      cfgcfgtoesubstnoestado.AsString + ' where itmchave=' + itmitmchave.AsString;
                    itmncm.ExecSQL;

                  end;
                end;
              end;
            end;

        end
        else
        begin

          if (cfgcfgtoemesinte.AsInteger <> 0) or (cfgcfgtoeinteproducaopropria.AsInteger <> 0) then
          begin

            if (itmproproducao.AsInteger = 1)  and (cfgcfgproducaopropria.AsInteger=1)  then
            begin

              if etdedrinscest.AsString <> '' then
              begin
                if etdufssigla.AsString <> cfgufssigla.AsString then
                begin

                  consulta.Close;
                  consulta.SQL.Text :=
                    'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins from toe where toecodigo=' +
                    cfgcfgtoeforaproducaopropria.AsString;
                  consulta.Open;

                end
                else
                begin

                  consulta.Close;
                  consulta.SQL.Text :=
                    'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins from toe where toecodigo=' +
                    cfgcfgtoeinteproducaopropria.AsString;
                  consulta.Open;

                end;

              end
              else
              begin

                consulta.Close;
                consulta.SQL.Text :=
                  'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins from toe where toecodigo=' +
                  cfgcfgtoeinteproducaopropria.AsString;
                consulta.Open;

              end;

            end
            else
            begin
              consulta.Close;
              consulta.SQL.Text :=
                'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins from toe where toecodigo=' +
                cfgcfgtoemesinte.AsString;
              consulta.Open;
            end;
          end
          else
          begin

            consulta.Close;
            consulta.SQL.Text :=
              'select toecfopsaida,cstcodigo,csicodigo,cspcodigo, csfcodigo,cfgpercentualpis, cfgpercentualcofins from toe where toecodigo=' +
              cfgcfgtoemesinte.AsString;
            consulta.Open;

          end;

          vlcstcodigo := consulta.FieldByName('cstcodigo').AsString;
          vlcsicodigo := consulta.FieldByName('csicodigo').AsString;
          vlcspcodigo := consulta.FieldByName('cspcodigo').AsString;
          vlcsfcodigo := consulta.FieldByName('csfcodigo').AsString;

          vlcfgpercentualpis := consulta.FieldByName('cfgpercentualpis').AsString;
          vlcfgpercentualpis := StringReplace(vlcfgpercentualpis, ',', '.', [rfReplaceAll, rfIgnoreCase]);

          vlcfgpercentualcofins := consulta.FieldByName('cfgpercentualcofins').AsString;
          vlcfgpercentualcofins := StringReplace(vlcfgpercentualcofins, ',', '.', [rfReplaceAll, rfIgnoreCase]);

          vlcfop := consulta.FieldByName('toecfopsaida').AsString;

          consulta.Close;
          consulta.SQL.Text := 'select tcecest from tce where tcecest=' + QuotedStr(itmtcecest.AsString);
          consulta.Open;

          vlTceCest := consulta.FieldByName('tcecest').AsString;

          vlTceCest := consulta.FieldByName('tcecest').AsString;

          if itmtcecest.AsString = '' then
          begin
            if (itmproproducao.AsInteger = 1)  and (cfgcfgproducaopropria.AsInteger=1)  then
            begin
              itmncm.Close;
              itmncm.SQL.Text := 'update itm set  itmcest=' + QuotedStr(vlTceCest) + '  ,itmcofins=' + vlcfgpercentualcofins + ' ,itmpis=' +
                vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' +
                QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' +
                cfgcfgtoeinteproducaopropria.AsString + ' where itmchave=' + itmitmchave.AsString;
              itmncm.ExecSQL;

            end
            else
            begin

              itmncm.Close;
              itmncm.SQL.Text := 'update itm set  itmcest=' + QuotedStr(vlTceCest) + '  ,itmcofins=' + vlcfgpercentualcofins + ' ,itmpis=' +
                vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' +
                QuotedStr(vlcsicodigo) + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' +
                cfgcfgtoemesinte.AsString + ' where itmchave=' + itmitmchave.AsString;
              itmncm.ExecSQL;
            end;

          end
          else
          begin

            itmncm.Close;
            itmncm.SQL.Text := 'update itm set  itmcest=' + QuotedStr(vlTceCest) + '  ,itmcofins=' + vlcfgpercentualcofins + ' ,itmpis=' +
              vlcfgpercentualpis + ', cfocfop=' + QuotedStr(vlcfop) + ',cstcodigo=' + QuotedStr(vlcstcodigo) + ', csicodigo=' + QuotedStr(vlcsicodigo)
              + ', cspcodigo=' + QuotedStr(vlcspcodigo) + ',csfcodigo=' + QuotedStr(vlcsfcodigo) + ', toecodigo=' + cfgcfgtoesubstnoestado.AsString +
              ' where itmchave=' + itmitmchave.AsString;
            itmncm.ExecSQL;

          end;

        end;
        consulta.Close;
        consulta.SQL.Text := 'select padcodigo from pro where procodigo=' + itmprocodigo.AsString;
        consulta.Open;
        if not consulta.IsEmpty then
        begin
          if consulta.FieldByName('padcodigo').AsString <> '' then
          begin
            pad.Close;
            pad.Connection := zcone;
            pad.ParamByName('padcodigo').AsString := consulta.FieldByName('padcodigo').AsString;
            pad.Open;

            if not pad.IsEmpty then
            begin

              if (padpadpis.AsString <> '') and (padpadcofins.AsString <> '') then
              begin

                vlcspcodigo := padpadcodigopiscofins.AsString;
                vlcsfcodigo := padpadcodigopiscofins.AsString;

                vlcfgpercentualpis := padpadpis.AsString;
                vlcfgpercentualpis := StringReplace(vlcfgpercentualpis, ',', '.', [rfReplaceAll, rfIgnoreCase]);

                vlcfgpercentualcofins := padpadcofins.AsString;
                vlcfgpercentualcofins := StringReplace(vlcfgpercentualcofins, ',', '.', [rfReplaceAll, rfIgnoreCase]);

                itmncm.Close;

                itmncm.SQL.Text := 'update itm set csfcodigo=' + QuotedStr(vlcsfcodigo) + '   ,cspcodigo=' + QuotedStr(vlcspcodigo) +
                  '    ,itmaliqcofins=' + vlcfgpercentualcofins + ' ,itmaliqpis=' + vlcfgpercentualpis + ' where itmchave=' + itmitmchave.AsString;
                itmncm.ExecSQL;

              end;

            end;

          end;
        end;

      end;
      itm.Next;
    End;

  end;



  // fim do ajusta o toe do item para produto com substituição

end;

Function Tfnfce.SalvarArquivoCloud(vTipo: string; vArquivo: string): Boolean;
var
  vlAno: string;
  vlMes: string;

  vlCNPJ: String;

  vlComunicacao: TMizioComunicacao;

  vlANOExiste: Boolean;
  vlMESExiste: Boolean;

begin

  try

    vlANOExiste := False;
    vlMESExiste := False;

    cfg.Close;
    cfg.ParamByName('flacodigo').AsString := '1';
    cfg.Open;

    vlCNPJ := SoNumeros(cfgetddoc1.AsString);
    vlAno := FormatFloat('0000', YearOf(mesmesdatanfe.AsDateTime));
    vlMes := FormatFloat('00', MonthOf(mesmesdatanfe.AsDateTime));

    vlComunicacao := TMizioComunicacao.Create;

    if FileExists(vArquivo) then
    begin
      vlComunicacao.carregalistapastasCLOUD(vlCNPJ + '/' + vTipo + '/' + vlAno + '/' + vlMes);

      if vlComunicacao.arquivoExisteCLOUD(vlCNPJ + '/' + vTipo + '/' + vlAno + '/' + vlMes, lowercase(extractfilename(vArquivo))) = False then
      begin

        Result := vlComunicacao.arquivoGravaCLOUD(vlCNPJ + '/' + vTipo + '/' + vlAno + '/' + vlMes + '/', lowercase(vArquivo));
      end
      else
      begin
        Result := True;
      end;
    end;

  finally
    vlComunicacao.DisposeOf;
  end;

end;


procedure Tfnfce.Inicializar;
begin
  Self.Width := 500;
  Self.Height := 250;

  cfg.Close;
  cfg.ParamByName('flacodigo').AsString := vpFilial;
  cfg.Open;

  // Define configurações do servidor para envio de email.
  with SMTP do
  begin
    IOHandler := IO_OpenSSL;
    Host := lowercase(cfgcfgemailservidornfe.AsString); // 'smtp.live.com'; // 'smtp.gmail.com';
    Username := lowercase(cfgcfgemailnfe.AsString); // 'email@hotmail.com'; // 'email@gmail.com';
    Password := trim(cfgcfgemailsenhanfe.AsString); // 'senha';
    Port := cfgcfgmailportnfe.AsInteger; // 587; // 465;
    case cfgcfgemailusatls.AsInteger of
      0:
        UseTLS := UtNoTLSSupport;
      1:
        UseTLS := UtUseExplicitTLS;
      2:
        UseTLS := UtUseImplicitTLS;
      3:
        UseTLS := UtUseRequireTLS;
    end;
    AuthType := SatDefault;
    ConnectTimeout := 6000;
    ReadTimeout := 6000;
  end;

  with IO_OpenSSL do
  begin
    SSLOptions.Method := sslvSSLv23;
    SSLOptions.Mode := sslmClient;
  end;

  // fnfe.LerConfiguracao;
end;





Function mrfrImprimirtef(Application: TApplication; Conexao: TUniConnection; Dados: TUniDataSource; DirRelatorio: String; TipoImpressao: Integer; Impressora: String = '';
  vUsuCodigo: string = ''): String;
type
  Impressao = function(AOwner: TComponent; Conexao: TUniConnection; vtabela: TUniDataSource; DirRelatorio: String; Impressora: String = ''; vUsuCodigo: string = ''): string;

Var
  Pack: Cardinal;
  Exec: Impressao;
  vNomeRotina: String;
  Vu: String;
Begin

  vNomeRotina := 'mrfrImpressaoDireta';

  Pack := LoadPackage('modulos\mrfr.bpl');
  If Pack <> 0 Then
    Try
      @Exec := GetProcAddress(Pack, PChar(vNomeRotina));

      If Assigned(Exec) Then
        Vu := Exec(Application, Conexao, Dados, DirRelatorio, Impressora, Vu);

    Finally

    End;

End;



procedure Tfnfce.ImprimirComprovantesTEF(Owner: TApplication; vConexao: TUniConnection; vTrmCodigo, vDirRelat, vImpressora: String; vTipoImpressao: Integer);
var
  vtTrm: TUniQuery;
  DSTrm: TUniDataSource;
begin

  vtTrm := TUniQuery.Create(Owner);
  vtTrm.Connection:=vConexao;
  vtTrm.SQL.Text:='select trmcodigo,trmterminalcomprovante1via, trmterminalcomprovante2via from trm '+
                  'where trmcodigo='+vTrmCodigo;
  vtTrm.Open;



  DSTrm := TUniDataSource.Create(Owner);

  try

    DSTrm.DataSet := vtTrm;

    if (length(vtTrm.FieldByName('trmterminalcomprovante1via').AsString)>0) or
       (length(vtTrm.FieldByName('trmterminalcomprovante2via').AsString)>0) then
    begin
      mrfrImprimirtef(Owner, vConexao, DSTrm, vDirRelat, vTipoImpressao, vImpressora);
    end;

  finally
    vtTrm.Free;
    DSTrm.Free;
  end;
end;


function Tfnfce.ImprimirViaTEF: Boolean;
var
  vDirRelat: String;
begin
  // try

  vDirRelat := Extractfilepath(Application.ExeName) + 'report\tefcomprovante.fr3';

  if not FileExists(vDirRelat) then
  begin
    if pos('gourmetstone', application.ExeName)=0 then
    Showmessage('Arquivo não localizado: '+vDirRelat);
    exit;
  end;

  ImprimirComprovantesTEF(Application, zcone, Trm.FieldByName('trmcodigo').AsString, vDirRelat,'', 2);

  Result := True;

end;



end.
