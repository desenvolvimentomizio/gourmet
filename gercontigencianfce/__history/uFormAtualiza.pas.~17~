unit uFormAtualiza;

interface

uses
  Winapi.Windows,
  Winapi.Messages,
  Winapi.ShellAPI,
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs;

type
  TFormAtualiza = class(TForm)
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    PORT_SERV : String;
    function BaixarVersao(vArquivo: string): String;
    procedure AJustaNomeExecutavel;
    procedure AtualizaVersao;
    procedure ConsultaVersaoAtualiza;
    function ConsultaVersaoWEB: String;
    procedure CriaChaveestaativo;
    procedure RemoveVersaoTemporaria(aNomeAplicativo: String);
    function BaixarNCMs(vArquivo: string): String;
  end;

const

//  AIpServer: String = 'localhost';
  AIpServer: String = '181.216.47.70';
  URL_BASE: String = 'http://';
  URL_PATH: String = '/v1';
  NOME_APLICATIVO = 'MizioContingencia.exe';


var
  FormAtualiza: TFormAtualiza;




implementation

{$R *.dfm}

uses JSON,
     UFuncoesContigencia,
     RESTRequest4D;

// atualização de versao





procedure TFormAtualiza.ConsultaVersaoAtualiza;
var
  vlVersaoLocal :String;
  vlVersaoweb :String;

begin



  vlVersaoweb  :='';
  vlVersaoweb  := ConsultaVersaoWEB;

  vlVersaoLocal:='';
  vlVersaoLocal:=GetAppVersionStr(application.ExeName);

  if vlVersaoweb<>'' then
    if SoNumeros(vlVersaoweb) > SoNumeros(vlVersaoLocal) then
      AtualizaVersao;

end;


procedure TFormAtualiza.RemoveVersaoTemporaria(aNomeAplicativo:String);
begin

  if lowercase(extractfilename(application.ExeName))= lowercase(aNomeAplicativo) then
  begin

    if fileexists(extractfilepath(application.ExeName)+ 'new.'+extractfilename(application.ExeName)) then
    begin
      deletefile(extractfilepath(application.ExeName)+ 'new.'+extractfilename(application.ExeName))
    end;

  end;

end;



procedure TFormAtualiza.AJustaNomeExecutavel;
var
  vlNomeVersao: String;
begin

    if pos('new.', application.ExeName) > 0 then // rodando o new
    begin

      vlNomeVersao :=extractfilename(application.ExeName);

      vlNomeVersao :=extractfilepath(application.ExeName)+StringReplace(vlNomeVersao,'new.','',[rfReplaceAll, rfIgnoreCase]);

      if fileexists(vlNomeVersao) then
      begin
        deletefile(vlNomeVersao);
      end;

      if not fileexists(vlNomeVersao) then
      begin

        copyfile(pchar(application.ExeName), pchar(  vlNomeVersao), false);

         if fileexists(vlNomeVersao) then
        begin

          ShellExecute(Handle, 'open', PChar(vlNomeVersao), '', '', SW_SHOWNORMAL);

          application.Terminate;

        end;

      end
      else
      begin

        ShellExecute(Handle, 'open', PChar(vlNomeVersao), '', '', SW_SHOWNORMAL);

        application.Terminate;

      end;

    end;

end;


Function TFormAtualiza.ConsultaVersaoWEB: String;
var
  resposta: IResponse;
begin
  Result := '';

  try

    PORT_SERV := '8056';

    resposta := TRequest.New
                          .BaseURL(URL_BASE + AIpServer + ':' + PORT_SERV + URL_PATH)
                          .Resource('/versaoarquivo').Accept('application/json')
                          .AddHeader('nomearquivo', NOME_APLICATIVO)
                         .Get;

    if (resposta.StatusCode = 200) or (resposta.StatusCode = 201) then
    begin
      Result := resposta.Content;
    end
    else
    begin
      Result := '';
    end;

  except
    Result := '';
  end;

end;



procedure TFormAtualiza.CriaChaveestaativo;
begin

end;

procedure TFormAtualiza.FormCreate(Sender: TObject);
begin
  PORT_SERV:='';
end;

procedure TFormAtualiza.AtualizaVersao;
var
  vlVersaoAtual: String;
  vlVersaoBaixada: String;
  vlNomeVersao: string;
  vlArquivo: string;
  vlNomebck: string;
begin

    if pos('new.', application.ExeName) > 0 then // rodando o new
    begin

      vlNomeVersao :=StringReplace(extractfilepath(application.ExeName),'new.','',[rfReplaceAll, rfIgnoreCase]);

      if fileexists(vlNomeVersao) then
      begin
        deletefile(vlNomeVersao);
      end;

      if not fileexists(vlNomeVersao) then
      begin

        RenameFile(application.ExeName, vlNomeVersao);

        ShellExecute(Handle, 'open', PChar(vlNomeVersao), '', '', SW_SHOWNORMAL);

        application.Terminate;

      end;

    end
    else
    begin

      vlVersaoAtual:=GetAppVersionStr(application.ExeName);

      vlNomeVersao:=BaixarVersao(extractfilename(application.ExeName));

      if vlNomeVersao <> '' then
      begin

        vlArquivo := extractfilename(application.ExeName);

        if fileexists(extractfilepath(application.ExeName) + vlArquivo) then
        begin

          vlNomebck := extractfilepath(application.ExeName) + ChangeFileExt(vlArquivo, '.bck');

          if fileexists(vlNomebck) then
          begin
            deletefile(extractfilepath(application.ExeName) + vlNomebck);
          end;

          RenameFile(extractfilepath(application.ExeName) + vlArquivo, vlNomebck);

        end;

        if fileexists(vlNomeVersao) then
        begin
          vlVersaoBaixada := GetAppVersionStr(vlNomeVersao);
        end
        else
        begin
          vlVersaoBaixada := '0';
        end;

        if SoNumeros(vlVersaoAtual)='' then
        begin
        vlVersaoAtual:='0';
        end;

        if SoNumeros(vlVersaoBaixada)='' then
        begin
        vlVersaoBaixada:='0';
        end;


        if strtofloat(SoNumeros(vlVersaoAtual)) < strtofloat(SoNumeros(vlVersaoBaixada)) then
        begin

          if fileexists(vlNomeVersao) then
          begin

            ShellExecute(Handle, 'open', PChar(vlNomeVersao), '', '', SW_SHOWNORMAL);
            application.Terminate;

          end;

        end
        else
        begin
          if fileexists(vlNomeVersao) then
            deletefile(vlNomeVersao);
        end;

      end;
    end;

end;




Function TFormAtualiza.BaixarVersao(vArquivo: string): String;
var
  resposta: IResponse;
  vlChavenfe: string;
  LStream: TStream;

  vlNomebck: string;
  vlNomeNew: string;

  streaml, stream2: TStream;

begin
  result := '';

  try

    PORT_SERV := '8056';

    resposta := TRequest.New.BaseURL(URL_BASE + AIpServer + ':' + PORT_SERV + URL_PATH)
                         .Resource('/arquivo')
                         .Accept('application/octet-stream')
                         .AddHeader('nomearquivo', vArquivo)
                         .AddHeader('pasta', 'versoes')
                        .get;

    vlNomeNew := extractfilepath(application.ExeName) + 'new.' + extractfilename(application.ExeName);

    if (resposta.StatusCode = 200) or (resposta.StatusCode = 201) then
    begin

      try
        stream2 := TFileStream.Create(vlNomeNew, fmCreate);
        stream2.CopyFrom(resposta.ContentStream, resposta.ContentStream.Size);
      finally
        stream2.Free;
      end;

      result := vlNomeNew
    end
    else
      result := '';

  except
    result := '';
  end;

end;

Function TFormAtualiza.BaixarNCMs(vArquivo: string): String;
var
  resposta: IResponse;
  vlChavenfe: string;
  stream2: TFileStream;
  aResposta:String;

begin
  Result := '';
  showmessage('linha 352');
  try

    PORT_SERV := '8056';

    resposta := TRequest.New.BaseURL(URL_BASE + AIpServer + ':' + PORT_SERV + URL_PATH )
                          .Resource('/ncms').Accept('application/json')
                          .AddBody(TJsonObject.Create.AddPair('nomearquivo', vArquivo))
                         .Get;

    aResposta := resposta.Content;

    if (resposta.StatusCode = 200) or (resposta.StatusCode = 201) then
    begin

      try

        if not DirectoryExists(extractfilepath(application.ExeName) + 'ncms\') then
          ForceDirectories(extractfilepath(application.ExeName) + 'ncms\');

        stream2 := TFileStream.Create(extractfilepath(application.ExeName) + 'ncms\' + vArquivo, fmCreate);
        stream2.CopyFrom(resposta.ContentStream, resposta.ContentStream.Size);
      finally
        stream2.Free;
      end;

      Result := resposta.Content;
    end
    else
      Result := '';

  except
  on e: Exception do
    begin
      aResposta := resposta.Content;
      Result := E.Message;
    end;

  end;

end;


end.
